---
source: common/parser-openapi/src/lib.rs
expression: registry.export_sdl(false)
---
"""
A JSON Value
"""
scalar JSON
type Mutation {
	petstore: PetstoreMutations
}
type PetstoreApiResponse {
	message: String
	type: String
	code: Int
}
type PetstoreCategory {
	name: String
	id: Int
}
input PetstoreCategoryInput {
	name: String
	id: Int
}
enum PetstoreFindPetsByStatus {
	AVAILABLE
	PENDING
	SOLD
}
type PetstoreMutations {
	updatePet(input: PetstorePetInput!): PetstorePet!
	addPet(input: PetstorePetInput!): PetstorePet!
	uploadFile(petId: Int!, additionalMetadata: String): PetstoreApiResponse!
	placeOrder(input: PetstoreOrderInput!): PetstoreOrder!
	createUsersWithListInput(input: [PetstoreUserInput!]!): PetstoreUser!
}
type PetstoreOrder {
	complete: Boolean
	status: PetstoreOrderStatus
	shipDate: String
	quantity: Int
	petId: Int
	id: Int
}
input PetstoreOrderInput {
	complete: Boolean
	status: PetstoreOrderStatus
	shipDate: String
	quantity: Int
	petId: Int
	id: Int
}
enum PetstoreOrderStatus {
	PLACED
	APPROVED
	DELIVERED
}
type PetstorePet {
	status: PetstorePetStatus
	tags: [PetstoreTag!]
	photoUrls: [String!]!
	category: PetstoreCategory
	name: String!
	id: Int
}
input PetstorePetInput {
	status: PetstorePetStatus
	tags: [PetstoreTagInput!]!
	photoUrls: [String!]!
	category: PetstoreCategoryInput!
	name: String!
	id: Int
}
enum PetstorePetStatus {
	AVAILABLE
	PENDING
	SOLD
}
type PetstoreQueries {
	findPetsByStatus(status: PetstoreFindPetsByStatus): [PetstorePet!]!
	findPetsByTags(tags: [String!]): [PetstorePet!]!
	getPetById(petId: Int!): PetstorePet!
	getInventory: JSON!
	getOrderById(orderId: Int!): PetstoreOrder!
	loginUser(password: String, username: String): String!
	getUserByName(username: String!): PetstoreUser!
}
type PetstoreTag {
	name: String
	id: Int
}
input PetstoreTagInput {
	name: String
	id: Int
}
type PetstoreUser {
	userStatus: Int
	phone: String
	password: String
	email: String
	lastName: String
	firstName: String
	username: String
	id: Int
}
input PetstoreUserInput {
	userStatus: Int
	phone: String
	password: String
	email: String
	lastName: String
	firstName: String
	username: String
	id: Int
}
type Query {
	petstore: PetstoreQueries
}
schema {
	query: Query
	mutation: Mutation
}


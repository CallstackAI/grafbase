---
source: common/parser-openapi/src/lib.rs
expression: registry.export_sdl(false)
---
type Account {
	type: String!
	tosAcceptance: AccountTosAcceptance!
	settings: AccountSettingsUnion
	requirements: AccountRequirements!
	payoutsEnabled: Boolean!
	object: String!
	metadata: AccountMetadata!
	individual: Person!
	id: String!
	futureRequirements: AccountFutureRequirements!
	externalAccounts: AccountExternalAccounts!
	email: String
	detailsSubmitted: Boolean!
	defaultCurrency: String!
	created: Int!
	country: String!
	controller: AccountUnificationAccountController!
	company: LegalEntityCompany!
	chargesEnabled: Boolean!
	capabilities: AccountCapabilities!
	businessType: String
	businessProfile: AccountBusinessProfileUnion
}
type AccountBacsDebitPaymentsSettings {
	displayName: String!
}
type AccountBrandingSettings {
	secondaryColor: String
	primaryColor: String
	logo: FileUnion
	icon: FileUnion
}
type AccountBusinessProfile {
	url: String
	supportUrl: String
	supportPhone: String
	supportEmail: String
	supportAddress: AddressUnion
	productDescription: String
	name: String
	mcc: String
}
union AccountBusinessProfileUnion = AccountBusinessProfile
type AccountCapabilities {
	usBankAccountAchPayments: String!
	treasury: String!
	transfers: String!
	taxReportingUs1099Misc: String!
	taxReportingUs1099K: String!
	sofortPayments: String!
	sepaDebitPayments: String!
	promptpayPayments: String!
	paynowPayments: String!
	p24Payments: String!
	oxxoPayments: String!
	linkPayments: String!
	legacyPayments: String!
	konbiniPayments: String!
	klarnaPayments: String!
	jcbPayments: String!
	indiaInternationalPayments: String!
	idealPayments: String!
	grabpayPayments: String!
	giropayPayments: String!
	fpxPayments: String!
	epsPayments: String!
	cartesBancairesPayments: String!
	cardPayments: String!
	cardIssuing: String!
	boletoPayments: String!
	blikPayments: String!
	bankTransferPayments: String!
	bancontactPayments: String!
	bacsDebitPayments: String!
	auBecsDebitPayments: String!
	afterpayClearpayPayments: String!
	affirmPayments: String!
	acssDebitPayments: String!
}
type AccountCapabilityFutureRequirements {
	pendingVerification: [String!]!
	pastDue: [String!]!
	eventuallyDue: [String!]!
	errors: [AccountRequirementsError!]!
	disabledReason: String
	currentlyDue: [String!]!
	currentDeadline: Int
	alternatives: [AccountRequirementsAlternative!]
}
type AccountCapabilityRequirements {
	pendingVerification: [String!]!
	pastDue: [String!]!
	eventuallyDue: [String!]!
	errors: [AccountRequirementsError!]!
	disabledReason: String
	currentlyDue: [String!]!
	currentDeadline: Int
	alternatives: [AccountRequirementsAlternative!]
}
type AccountCardIssuingSettings {
	tosAcceptance: CardIssuingAccountTermsOfService!
}
type AccountCardPaymentsSettings {
	statementDescriptorPrefixKanji: String
	statementDescriptorPrefixKana: String
	statementDescriptorPrefix: String
	declineOn: AccountDeclineChargeOn!
}
type AccountDashboardSettings {
	timezone: String
	displayName: String
}
type AccountDeclineChargeOn {
	cvcFailure: Boolean!
	avsFailure: Boolean!
}
type AccountExternalAccounts {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [CardOrBankAccountUnion!]!
}
type AccountFutureRequirements {
	pendingVerification: [String!]
	pastDue: [String!]
	eventuallyDue: [String!]
	errors: [AccountRequirementsError!]
	disabledReason: String
	currentlyDue: [String!]
	currentDeadline: Int
	alternatives: [AccountRequirementsAlternative!]
}
type AccountMetadata {
}
type AccountPaymentsSettings {
	statementDescriptorPrefixKanji: String
	statementDescriptorPrefixKana: String
	statementDescriptorKanji: String
	statementDescriptorKana: String
	statementDescriptor: String
}
type AccountPayoutSettings {
	statementDescriptor: String
	schedule: TransferSchedule!
	debitNegativeBalances: Boolean!
}
type AccountRequirements {
	pendingVerification: [String!]
	pastDue: [String!]
	eventuallyDue: [String!]
	errors: [AccountRequirementsError!]
	disabledReason: String
	currentlyDue: [String!]
	currentDeadline: Int
	alternatives: [AccountRequirementsAlternative!]
}
type AccountRequirementsAlternative {
	originalFieldsDue: [String!]!
	alternativeFieldsDue: [String!]!
}
type AccountRequirementsError {
	requirement: String!
	reason: String!
	code: String!
}
type AccountSepaDebitPaymentsSettings {
	creditorId: String!
}
type AccountSettings {
	treasury: AccountTreasurySettings!
	sepaDebitPayments: AccountSepaDebitPaymentsSettings!
	payouts: AccountPayoutSettings!
	payments: AccountPaymentsSettings!
	dashboard: AccountDashboardSettings!
	cardPayments: AccountCardPaymentsSettings!
	cardIssuing: AccountCardIssuingSettings!
	branding: AccountBrandingSettings!
	bacsDebitPayments: AccountBacsDebitPaymentsSettings!
}
union AccountSettingsUnion = AccountSettings
type AccountTermsOfService {
	userAgent: String!
	ip: String
	date: Int
}
type AccountTosAcceptance {
	userAgent: String
	serviceAgreement: String!
	ip: String
	date: Int
}
type AccountTreasurySettings {
	tosAcceptance: AccountTermsOfService!
}
type AccountUnificationAccountController {
	type: String!
	isController: Boolean!
}
union AccountUnion = Account
type Address {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
union AddressUnion = Address
type ApiErrors {
	type: String!
	source: SourceOrCardOrBankAccountUnion!
	setupIntent: SetupIntent!
	requestLogUrl: String!
	paymentMethodType: String!
	paymentMethod: PaymentMethod!
	paymentIntent: PaymentIntent!
	param: String!
	message: String!
	docUrl: String!
	declineCode: String!
	code: String!
	charge: String!
}
union ApiErrorsUnion = ApiErrors
type ApplePayDomain {
	object: String!
	livemode: Boolean!
	id: String!
	domainName: String!
	created: Int!
}
type Application {
	object: String!
	name: String
	id: String!
}
type ApplicationFee {
	refunds: ApplicationFeeRefunds!
	refunded: Boolean!
	originatingTransaction: ChargeUnion
	object: String!
	livemode: Boolean!
	id: String!
	currency: String!
	created: Int!
	charge: ChargeUnion!
	balanceTransaction: BalanceTransactionUnion
	application: ApplicationUnion!
	amountRefunded: Int!
	amount: Int!
	account: AccountUnion!
}
type ApplicationFeeRefunds {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [FeeRefund!]!
}
union ApplicationFeeUnion = ApplicationFee
union ApplicationUnion = Application
type AppsSecret {
	scope: SecretServiceResourceScope!
	payload: String
	object: String!
	name: String!
	livemode: Boolean!
	id: String!
	expiresAt: Int
	deleted: Boolean!
	created: Int!
}
type AutomaticTax {
	status: String
	enabled: Boolean!
}
type Balance {
	pending: [BalanceAmount!]!
	object: String!
	livemode: Boolean!
	issuing: BalanceDetail!
	instantAvailable: [BalanceAmount!]!
	connectReserved: [BalanceAmount!]!
	available: [BalanceAmount!]!
}
type BalanceAmount {
	sourceTypes: BalanceAmountBySourceType!
	currency: String!
	amount: Int!
}
type BalanceAmountBySourceType {
	fpx: Int!
	card: Int!
	bankAccount: Int!
}
type BalanceDetail {
	available: [BalanceAmount!]!
}
type BalanceTransaction {
	type: String!
	status: String!
	source: TransferReversalOrTransferOrTopupOrTaxDeductedAtSourceOrReserveTransactionOrRefundOrPlatformTaxFeeOrPayoutOrIssuingTransactionOrIssuingDisputeOrIssuingAuthorizationOrFeeRefundOrDisputeOrConnectCollectionTransferOrChargeOrApplicationFeeUnion
	reportingCategory: String!
	object: String!
	net: Int!
	id: String!
	feeDetails: [Fee!]!
	fee: Int!
	exchangeRate: Float
	description: String
	currency: String!
	created: Int!
	availableOn: Int!
	amount: Int!
}
union BalanceTransactionUnion = BalanceTransaction
type BankAccount {
	status: String!
	routingNumber: String
	object: String!
	metadata: BankAccountMetadata
	last4: String!
	id: String!
	fingerprint: String
	defaultForCurrency: Boolean
	customer: DeletedCustomerOrCustomerUnion
	currency: String!
	country: String!
	bankName: String
	availablePayoutMethods: [String!]
	accountType: String
	accountHolderType: String
	accountHolderName: String
	account: AccountUnion
}
type BankAccountMetadata {
}
type BankConnectionsResourceAccountholder {
	type: String!
	customer: CustomerUnion!
	account: AccountUnion!
}
union BankConnectionsResourceAccountholderUnion = BankConnectionsResourceAccountholder
type BankConnectionsResourceBalance {
	type: String!
	current: BankConnectionsResourceBalanceCurrent!
	credit: BankConnectionsResourceBalanceApiResourceCreditBalance!
	cash: BankConnectionsResourceBalanceApiResourceCashBalance!
	asOf: Int!
}
type BankConnectionsResourceBalanceApiResourceCashBalance {
	available: BankConnectionsResourceBalanceApiResourceCashBalanceAvailable
}
type BankConnectionsResourceBalanceApiResourceCashBalanceAvailable {
}
type BankConnectionsResourceBalanceApiResourceCreditBalance {
	used: BankConnectionsResourceBalanceApiResourceCreditBalanceUsed
}
type BankConnectionsResourceBalanceApiResourceCreditBalanceUsed {
}
type BankConnectionsResourceBalanceCurrent {
}
type BankConnectionsResourceBalanceRefresh {
	status: String!
	lastAttemptedAt: Int!
}
union BankConnectionsResourceBalanceRefreshUnion = BankConnectionsResourceBalanceRefresh
union BankConnectionsResourceBalanceUnion = BankConnectionsResourceBalance
type BankConnectionsResourceLinkAccountSessionFilters {
	countries: [String!]
}
type BankConnectionsResourceOwnershipRefresh {
	status: String!
	lastAttemptedAt: Int!
}
union BankConnectionsResourceOwnershipRefreshUnion = BankConnectionsResourceOwnershipRefresh
type BillingDetails {
	phone: String
	name: String
	email: String
	address: AddressUnion
}
type BillingPortalConfiguration {
	updated: Int!
	object: String!
	metadata: BillingPortalConfigurationMetadata
	loginPage: PortalLoginPage!
	livemode: Boolean!
	isDefault: Boolean!
	id: String!
	features: PortalFeatures!
	defaultReturnUrl: String
	created: Int!
	businessProfile: PortalBusinessProfile!
	application: DeletedApplicationOrApplicationUnion
	active: Boolean!
}
type BillingPortalConfigurationMetadata {
}
type Capability {
	status: String!
	requirements: AccountCapabilityRequirements!
	requestedAt: Int
	requested: Boolean!
	object: String!
	id: String!
	futureRequirements: AccountCapabilityFutureRequirements!
	account: AccountUnion!
}
type Card {
	tokenizationMethod: String
	status: String
	object: String!
	name: String
	metadata: CardMetadata
	last4: String!
	id: String!
	funding: String!
	fingerprint: String
	expYear: Int!
	expMonth: Int!
	dynamicLast4: String
	defaultForCurrency: Boolean
	cvcCheck: String
	customer: DeletedCustomerOrCustomerUnion
	currency: String
	country: String
	brand: String!
	availablePayoutMethods: [String!]
	addressZipCheck: String
	addressZip: String
	addressState: String
	addressLine2: String
	addressLine1Check: String
	addressLine1: String
	addressCountry: String
	addressCity: String
	account: AccountUnion
}
type CardGeneratedFromPaymentMethodDetails {
	type: String!
	cardPresent: PaymentMethodDetailsCardPresent!
}
union CardGeneratedFromPaymentMethodDetailsUnion = CardGeneratedFromPaymentMethodDetails
type CardIssuingAccountTermsOfService {
	userAgent: String!
	ip: String
	date: Int
}
type CardMandatePaymentMethodDetails {
}
type CardMetadata {
}
union CardOrBankAccountUnion = Card | BankAccount
type CashBalance {
	settings: CustomerBalanceCustomerBalanceSettings!
	object: String!
	livemode: Boolean!
	customer: String!
	available: CashBalanceAvailable
}
type CashBalanceAvailable {
}
union CashBalanceUnion = CashBalance
type Charge {
	transferGroup: String
	transferData: ChargeTransferDataUnion
	transfer: TransferUnion!
	status: String!
	statementDescriptorSuffix: String
	statementDescriptor: String
	sourceTransfer: TransferUnion
	shipping: ShippingUnion
	review: ReviewUnion
	refunds: ChargeRefunds
	refunded: Boolean!
	receiptUrl: String
	receiptNumber: String
	receiptEmail: String
	radarOptions: RadarRadarOptions!
	paymentMethodDetails: PaymentMethodDetailsUnion
	paymentMethod: String
	paymentIntent: PaymentIntentUnion
	paid: Boolean!
	outcome: ChargeOutcomeUnion
	onBehalfOf: AccountUnion
	object: String!
	metadata: ChargeMetadata!
	livemode: Boolean!
	invoice: InvoiceUnion
	id: String!
	fraudDetails: ChargeFraudDetailsUnion
	failureMessage: String
	failureCode: String
	failureBalanceTransaction: BalanceTransactionUnion
	disputed: Boolean!
	description: String
	customer: DeletedCustomerOrCustomerUnion
	currency: String!
	created: Int!
	captured: Boolean!
	calculatedStatementDescriptor: String
	billingDetails: BillingDetails!
	balanceTransaction: BalanceTransactionUnion
	applicationFeeAmount: Int
	applicationFee: ApplicationFeeUnion
	application: ApplicationUnion
	amountRefunded: Int!
	amountCaptured: Int!
	amount: Int!
}
type ChargeFraudDetails {
	userReport: String!
	stripeReport: String!
}
union ChargeFraudDetailsUnion = ChargeFraudDetails
type ChargeMetadata {
}
type ChargeOutcome {
	type: String!
	sellerMessage: String
	rule: RuleUnion!
	riskScore: Int!
	riskLevel: String!
	reason: String
	networkStatus: String
}
union ChargeOutcomeUnion = ChargeOutcome
type ChargeRefunds {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Refund!]!
}
type ChargeTransferData {
	destination: AccountUnion!
	amount: Int
}
union ChargeTransferDataUnion = ChargeTransferData
union ChargeUnion = Charge
type CheckoutAcssDebitMandateOptions {
	transactionType: String
	paymentSchedule: String
	intervalDescription: String
	defaultFor: [String!]!
	customMandateUrl: String!
}
type CheckoutAcssDebitPaymentMethodOptions {
	verificationMethod: String!
	setupFutureUsage: String!
	mandateOptions: CheckoutAcssDebitMandateOptions!
	currency: String!
}
type CheckoutAffirmPaymentMethodOptions {
	setupFutureUsage: String!
}
type CheckoutAfterpayClearpayPaymentMethodOptions {
	setupFutureUsage: String!
}
type CheckoutAlipayPaymentMethodOptions {
	setupFutureUsage: String!
}
type CheckoutAuBecsDebitPaymentMethodOptions {
	setupFutureUsage: String!
}
type CheckoutBacsDebitPaymentMethodOptions {
	setupFutureUsage: String!
}
type CheckoutBancontactPaymentMethodOptions {
	setupFutureUsage: String!
}
type CheckoutBoletoPaymentMethodOptions {
	setupFutureUsage: String!
	expiresAfterDays: Int!
}
type CheckoutCardInstallmentsOptions {
	enabled: Boolean!
}
type CheckoutCardPaymentMethodOptions {
	statementDescriptorSuffixKanji: String!
	statementDescriptorSuffixKana: String!
	setupFutureUsage: String!
	installments: CheckoutCardInstallmentsOptions!
}
type CheckoutCustomerBalanceBankTransferPaymentMethodOptions {
	type: String
	requestedAddressTypes: [String!]!
	euBankTransfer: PaymentMethodOptionsCustomerBalanceEuBankAccount!
}
type CheckoutCustomerBalancePaymentMethodOptions {
	setupFutureUsage: String!
	fundingType: String
	bankTransfer: CheckoutCustomerBalanceBankTransferPaymentMethodOptions!
}
type CheckoutEpsPaymentMethodOptions {
	setupFutureUsage: String!
}
type CheckoutFpxPaymentMethodOptions {
	setupFutureUsage: String!
}
type CheckoutGiropayPaymentMethodOptions {
	setupFutureUsage: String!
}
type CheckoutGrabPayPaymentMethodOptions {
	setupFutureUsage: String!
}
type CheckoutIdealPaymentMethodOptions {
	setupFutureUsage: String!
}
type CheckoutKlarnaPaymentMethodOptions {
	setupFutureUsage: String!
}
type CheckoutKonbiniPaymentMethodOptions {
	setupFutureUsage: String!
	expiresAfterDays: Int
}
type CheckoutOxxoPaymentMethodOptions {
	setupFutureUsage: String!
	expiresAfterDays: Int!
}
type CheckoutP24PaymentMethodOptions {
	setupFutureUsage: String!
}
type CheckoutPaynowPaymentMethodOptions {
	setupFutureUsage: String!
}
type CheckoutPixPaymentMethodOptions {
	expiresAfterSeconds: Int
}
type CheckoutSepaDebitPaymentMethodOptions {
	setupFutureUsage: String!
}
type CheckoutSession {
	url: String
	totalDetails: PaymentPagesCheckoutSessionTotalDetailsUnion
	taxIdCollection: PaymentPagesCheckoutSessionTaxIdCollection!
	successUrl: String!
	subscription: SubscriptionUnion
	submitType: String
	status: String
	shippingOptions: [PaymentPagesCheckoutSessionShippingOption!]!
	shippingDetails: ShippingUnion
	shippingCost: PaymentPagesCheckoutSessionShippingCostUnion
	shippingAddressCollection: PaymentPagesCheckoutSessionShippingAddressCollectionUnion
	setupIntent: SetupIntentUnion
	recoveredFrom: String
	phoneNumberCollection: PaymentPagesCheckoutSessionPhoneNumberCollection!
	paymentStatus: String!
	paymentMethodTypes: [String!]!
	paymentMethodOptions: CheckoutSessionPaymentMethodOptionsUnion
	paymentMethodCollection: String
	paymentLink: PaymentLinkUnion
	paymentIntent: PaymentIntentUnion
	object: String!
	mode: String!
	metadata: CheckoutSessionMetadata
	locale: String
	livemode: Boolean!
	lineItems: CheckoutSessionLineItems!
	invoiceCreation: PaymentPagesCheckoutSessionInvoiceCreationUnion
	invoice: InvoiceUnion
	id: String!
	expiresAt: Int!
	customerEmail: String
	customerDetails: PaymentPagesCheckoutSessionCustomerDetailsUnion
	customerCreation: String
	customer: DeletedCustomerOrCustomerUnion
	customText: PaymentPagesCheckoutSessionCustomText!
	currency: String
	created: Int!
	consentCollection: PaymentPagesCheckoutSessionConsentCollectionUnion
	consent: PaymentPagesCheckoutSessionConsentUnion
	clientReferenceId: String
	cancelUrl: String
	billingAddressCollection: String
	automaticTax: PaymentPagesCheckoutSessionAutomaticTax!
	amountTotal: Int
	amountSubtotal: Int
	allowPromotionCodes: Boolean
	afterExpiration: PaymentPagesCheckoutSessionAfterExpirationUnion
}
type CheckoutSessionLineItems {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Item!]!
}
type CheckoutSessionMetadata {
}
type CheckoutSessionPaymentMethodOptions {
	usBankAccount: CheckoutUsBankAccountPaymentMethodOptions!
	sofort: CheckoutSofortPaymentMethodOptions!
	sepaDebit: CheckoutSepaDebitPaymentMethodOptions!
	pix: CheckoutPixPaymentMethodOptions!
	paynow: CheckoutPaynowPaymentMethodOptions!
	p24: CheckoutP24PaymentMethodOptions!
	oxxo: CheckoutOxxoPaymentMethodOptions!
	konbini: CheckoutKonbiniPaymentMethodOptions!
	klarna: CheckoutKlarnaPaymentMethodOptions!
	ideal: CheckoutIdealPaymentMethodOptions!
	grabpay: CheckoutGrabPayPaymentMethodOptions!
	giropay: CheckoutGiropayPaymentMethodOptions!
	fpx: CheckoutFpxPaymentMethodOptions!
	eps: CheckoutEpsPaymentMethodOptions!
	customerBalance: CheckoutCustomerBalancePaymentMethodOptions!
	card: CheckoutCardPaymentMethodOptions!
	boleto: CheckoutBoletoPaymentMethodOptions!
	bancontact: CheckoutBancontactPaymentMethodOptions!
	bacsDebit: CheckoutBacsDebitPaymentMethodOptions!
	auBecsDebit: CheckoutAuBecsDebitPaymentMethodOptions!
	alipay: CheckoutAlipayPaymentMethodOptions!
	afterpayClearpay: CheckoutAfterpayClearpayPaymentMethodOptions!
	affirm: CheckoutAffirmPaymentMethodOptions!
	acssDebit: CheckoutAcssDebitPaymentMethodOptions!
}
union CheckoutSessionPaymentMethodOptionsUnion = CheckoutSessionPaymentMethodOptions
type CheckoutSofortPaymentMethodOptions {
	setupFutureUsage: String!
}
type CheckoutUsBankAccountPaymentMethodOptions {
	verificationMethod: String!
	setupFutureUsage: String!
	financialConnections: LinkedAccountOptionsUsBankAccount!
}
type ConnectCollectionTransfer {
	object: String!
	livemode: Boolean!
	id: String!
	destination: AccountUnion!
	currency: String!
	amount: Int!
}
type CountrySpec {
	verificationFields: CountrySpecVerificationFields!
	supportedTransferCountries: [String!]!
	supportedPaymentMethods: [String!]!
	supportedPaymentCurrencies: [String!]!
	supportedBankAccountCurrencies: CountrySpecSupportedBankAccountCurrencies!
	object: String!
	id: String!
	defaultCurrency: String!
}
type CountrySpecSupportedBankAccountCurrencies {
}
type CountrySpecVerificationFieldDetails {
	minimum: [String!]!
	additional: [String!]!
}
type CountrySpecVerificationFields {
	individual: CountrySpecVerificationFieldDetails!
	company: CountrySpecVerificationFieldDetails!
}
type Coupon {
	valid: Boolean!
	timesRedeemed: Int!
	redeemBy: Int
	percentOff: Float
	object: String!
	name: String
	metadata: CouponMetadata
	maxRedemptions: Int
	livemode: Boolean!
	id: String!
	durationInMonths: Int
	duration: String!
	currencyOptions: CouponCurrencyOptions!
	currency: String
	created: Int!
	appliesTo: CouponAppliesTo!
	amountOff: Int
}
type CouponAppliesTo {
	products: [String!]!
}
type CouponCurrencyOptions {
}
type CouponMetadata {
}
type CreditNote {
	voidedAt: Int
	type: String!
	totalExcludingTax: Int
	total: Int!
	taxAmounts: [CreditNoteTaxAmount!]!
	subtotalExcludingTax: Int
	subtotal: Int!
	status: String!
	shippingCost: InvoicesShippingCostUnion
	refund: RefundUnion
	reason: String
	pdf: String!
	outOfBandAmount: Int
	object: String!
	number: String!
	metadata: CreditNoteMetadata
	memo: String
	livemode: Boolean!
	lines: CreditNoteLines!
	invoice: InvoiceUnion!
	id: String!
	discountAmounts: [DiscountsResourceDiscountAmount!]!
	discountAmount: Int!
	customerBalanceTransaction: CustomerBalanceTransactionUnion
	customer: DeletedCustomerOrCustomerUnion!
	currency: String!
	created: Int!
	amountShipping: Int!
	amount: Int!
}
type CreditNoteLineItem {
	unitAmountExcludingTax: String
	unitAmountDecimal: String
	unitAmount: Int
	type: String!
	taxRates: [TaxRate!]!
	taxAmounts: [CreditNoteTaxAmount!]!
	quantity: Int
	object: String!
	livemode: Boolean!
	invoiceLineItem: String!
	id: String!
	discountAmounts: [DiscountsResourceDiscountAmount!]!
	discountAmount: Int!
	description: String
	amountExcludingTax: Int
	amount: Int!
}
type CreditNoteLines {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [CreditNoteLineItem!]!
}
type CreditNoteMetadata {
}
type CreditNoteTaxAmount {
	taxRate: TaxRateUnion!
	inclusive: Boolean!
	amount: Int!
}
union CreditNoteUnion = CreditNote
type CustomUnitAmount {
	preset: Int
	minimum: Int
	maximum: Int
}
union CustomUnitAmountUnion = CustomUnitAmount
type Customer {
	testClock: TestHelpersTestClockUnion
	taxIds: CustomerTaxIds!
	taxExempt: String
	tax: CustomerTax!
	subscriptions: CustomerSubscriptions!
	sources: CustomerSources!
	shipping: ShippingUnion
	preferredLocales: [String!]
	phone: String
	object: String!
	nextInvoiceSequence: Int!
	name: String
	metadata: CustomerMetadata!
	livemode: Boolean!
	invoiceSettings: InvoiceSettingCustomerSetting!
	invoicePrefix: String
	invoiceCreditBalance: CustomerInvoiceCreditBalance!
	id: String!
	email: String
	discount: DiscountUnion
	description: String
	delinquent: Boolean
	defaultSource: SourceOrCardOrBankAccountUnion
	currency: String
	created: Int!
	cashBalance: CashBalanceUnion
	balance: Int!
	address: AddressUnion
}
type CustomerAcceptance {
	type: String!
	online: OnlineAcceptance!
	offline: OfflineAcceptance!
	acceptedAt: Int
}
type CustomerBalanceCustomerBalanceSettings {
	usingMerchantDefault: Boolean!
	reconciliationMode: String!
}
type CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction {
	paymentIntent: PaymentIntentUnion!
}
type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction {
	bankTransfer: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer!
}
type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer {
	type: String!
	reference: String
	euBankTransfer: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer!
}
type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer {
	senderName: String
	ibanLast4: String
	bic: String
}
type CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction {
	refund: RefundUnion!
}
type CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction {
	paymentIntent: PaymentIntentUnion!
}
type CustomerBalanceTransaction {
	type: String!
	object: String!
	metadata: CustomerBalanceTransactionMetadata
	livemode: Boolean!
	invoice: InvoiceUnion
	id: String!
	endingBalance: Int!
	description: String
	customer: CustomerUnion!
	currency: String!
	creditNote: CreditNoteUnion
	created: Int!
	amount: Int!
}
type CustomerBalanceTransactionMetadata {
}
union CustomerBalanceTransactionUnion = CustomerBalanceTransaction
type CustomerCashBalanceTransaction {
	unappliedFromPayment: CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction!
	type: String!
	refundedFromPayment: CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction!
	object: String!
	netAmount: Int!
	livemode: Boolean!
	id: String!
	funded: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction!
	endingBalance: Int!
	customer: CustomerUnion!
	currency: String!
	created: Int!
	appliedToPayment: CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction!
}
type CustomerInvoiceCreditBalance {
}
type CustomerMetadata {
}
type CustomerSources {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [SourceOrCardOrBankAccountUnion!]!
}
type CustomerSubscriptions {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Subscription!]!
}
type CustomerTax {
	location: CustomerTaxLocationUnion
	ipAddress: String
	automaticTax: String!
}
type CustomerTaxIds {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [TaxId!]!
}
type CustomerTaxLocation {
	state: String
	source: String!
	country: String!
}
union CustomerTaxLocationUnion = CustomerTaxLocation
union CustomerUnion = Customer
type DeletedApplication {
	object: String!
	name: String
	id: String!
	deleted: Boolean!
}
union DeletedApplicationOrApplicationUnion = DeletedApplication | Application
type DeletedBankAccount {
	object: String!
	id: String!
	deleted: Boolean!
	currency: String
}
type DeletedCard {
	object: String!
	id: String!
	deleted: Boolean!
	currency: String
}
union DeletedCardOrDeletedBankAccountOrCardOrBankAccountUnion = DeletedCard | DeletedBankAccount | Card | BankAccount
type DeletedCoupon {
	object: String!
	id: String!
	deleted: Boolean!
}
union DeletedCouponOrCouponUnion = DeletedCoupon | Coupon
type DeletedCustomer {
	object: String!
	id: String!
	deleted: Boolean!
}
union DeletedCustomerOrCustomerUnion = DeletedCustomer | Customer
type DeletedDiscount {
	subscription: String
	start: Int!
	promotionCode: PromotionCodeUnion
	object: String!
	invoiceItem: String
	invoice: String
	id: String!
	deleted: Boolean!
	customer: DeletedCustomerOrCustomerUnion
	coupon: Coupon!
	checkoutSession: String
}
union DeletedDiscountOrDiscountUnion = DeletedDiscount | Discount
type DeletedInvoice {
	object: String!
	id: String!
	deleted: Boolean!
}
union DeletedInvoiceOrInvoiceUnion = DeletedInvoice | Invoice
type DeletedPrice {
	object: String!
	id: String!
	deleted: Boolean!
}
union DeletedPriceOrPriceUnion = DeletedPrice | Price
type DeletedProduct {
	object: String!
	id: String!
	deleted: Boolean!
}
union DeletedProductOrProductUnion = DeletedProduct | Product
type DeletedTaxId {
	object: String!
	id: String!
	deleted: Boolean!
}
union DeletedTaxIdOrTaxIdUnion = DeletedTaxId | TaxId
type DeletedTerminalConfiguration {
	object: String!
	id: String!
	deleted: Boolean!
}
union DeletedTerminalConfigurationOrTerminalConfigurationUnion = DeletedTerminalConfiguration | TerminalConfiguration
type DeletedTerminalLocation {
	object: String!
	id: String!
	deleted: Boolean!
}
union DeletedTerminalLocationOrTerminalLocationUnion = DeletedTerminalLocation | TerminalLocation
type DeletedTerminalReader {
	object: String!
	id: String!
	deleted: Boolean!
}
union DeletedTerminalReaderOrTerminalReaderUnion = DeletedTerminalReader | TerminalReader
type Discount {
	subscription: String
	start: Int!
	promotionCode: PromotionCodeUnion
	object: String!
	invoiceItem: String
	invoice: String
	id: String!
	end: Int
	customer: DeletedCustomerOrCustomerUnion
	coupon: Coupon!
	checkoutSession: String
}
union DiscountUnion = Discount
type DiscountsResourceDiscountAmount {
	discount: DeletedDiscountOrDiscountUnion!
	amount: Int!
}
type Dispute {
	status: String!
	reason: String!
	paymentIntent: PaymentIntentUnion
	object: String!
	metadata: DisputeMetadata!
	livemode: Boolean!
	isChargeRefundable: Boolean!
	id: String!
	evidenceDetails: DisputeEvidenceDetails!
	evidence: DisputeEvidence!
	currency: String!
	created: Int!
	charge: ChargeUnion!
	balanceTransactions: [BalanceTransaction!]!
	amount: Int!
}
type DisputeEvidence {
	uncategorizedText: String
	uncategorizedFile: FileUnion
	shippingTrackingNumber: String
	shippingDocumentation: FileUnion
	shippingDate: String
	shippingCarrier: String
	shippingAddress: String
	serviceDocumentation: FileUnion
	serviceDate: String
	refundRefusalExplanation: String
	refundPolicyDisclosure: String
	refundPolicy: FileUnion
	receipt: FileUnion
	productDescription: String
	duplicateChargeId: String
	duplicateChargeExplanation: String
	duplicateChargeDocumentation: FileUnion
	customerSignature: FileUnion
	customerPurchaseIp: String
	customerName: String
	customerEmailAddress: String
	customerCommunication: FileUnion
	cancellationRebuttal: String
	cancellationPolicyDisclosure: String
	cancellationPolicy: FileUnion
	billingAddress: String
	accessActivityLog: String
}
type DisputeEvidenceDetails {
	submissionCount: Int!
	pastDue: Boolean!
	hasEvidence: Boolean!
	dueBy: Int
}
type DisputeMetadata {
}
type EmailSent {
	emailSentTo: String!
	emailSentAt: Int!
}
type Event {
	type: String!
	request: NotificationEventRequestUnion
	pendingWebhooks: Int!
	object: String!
	livemode: Boolean!
	id: String!
	data: NotificationEventData!
	created: Int!
	apiVersion: String
	account: String!
}
type ExchangeRate {
	rates: ExchangeRateRates!
	object: String!
	id: String!
}
type ExchangeRateRates {
}
type Fee {
	type: String!
	description: String
	currency: String!
	application: String
	amount: Int!
}
type FeeRefund {
	object: String!
	metadata: FeeRefundMetadata
	id: String!
	fee: ApplicationFeeUnion!
	currency: String!
	created: Int!
	balanceTransaction: BalanceTransactionUnion
	amount: Int!
}
type FeeRefundMetadata {
}
type File {
	url: String
	type: String
	title: String
	size: Int!
	purpose: String!
	object: String!
	links: FileLinks
	id: String!
	filename: String
	expiresAt: Int
	created: Int!
}
type FileLink {
	url: String
	object: String!
	metadata: FileLinkMetadata!
	livemode: Boolean!
	id: String!
	file: FileUnion!
	expiresAt: Int
	expired: Boolean!
	created: Int!
}
type FileLinkMetadata {
}
type FileLinks {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [FileLink!]!
}
union FileUnion = File
type FinancialConnectionsAccount {
	supportedPaymentMethodTypes: [String!]!
	subcategory: String!
	status: String!
	permissions: [String!]
	ownershipRefresh: BankConnectionsResourceOwnershipRefreshUnion
	ownership: FinancialConnectionsAccountOwnershipUnion
	object: String!
	livemode: Boolean!
	last4: String
	institutionName: String!
	id: String!
	displayName: String
	created: Int!
	category: String!
	balanceRefresh: BankConnectionsResourceBalanceRefreshUnion
	balance: BankConnectionsResourceBalanceUnion
	accountHolder: BankConnectionsResourceAccountholderUnion
}
type FinancialConnectionsAccountOwner {
	refreshedAt: Int
	rawAddress: String
	phone: String
	ownership: String!
	object: String!
	name: String!
	id: String!
	email: String
}
type FinancialConnectionsAccountOwnership {
	owners: FinancialConnectionsAccountOwnershipOwners!
	object: String!
	id: String!
	created: Int!
}
type FinancialConnectionsAccountOwnershipOwners {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [FinancialConnectionsAccountOwner!]!
}
union FinancialConnectionsAccountOwnershipUnion = FinancialConnectionsAccountOwnership
type FinancialConnectionsSession {
	returnUrl: String!
	permissions: [String!]!
	object: String!
	livemode: Boolean!
	id: String!
	filters: BankConnectionsResourceLinkAccountSessionFilters!
	clientSecret: String!
	accounts: FinancialConnectionsSessionAccounts!
	accountHolder: BankConnectionsResourceAccountholderUnion
}
type FinancialConnectionsSessionAccounts {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [FinancialConnectionsAccount!]!
}
type FinancialReportingFinanceReportRunRunParameters {
	timezone: String!
	reportingCategory: String!
	payout: String!
	intervalStart: Int!
	intervalEnd: Int!
	currency: String!
	connectedAccount: String!
	columns: [String!]!
}
type FundingInstructionsBankTransferFinancialAddress {
	zengin: FundingInstructionsBankTransferZenginRecord!
	type: String!
	supportedNetworks: [String!]!
	spei: FundingInstructionsBankTransferSpeiRecord!
	sortCode: FundingInstructionsBankTransferSortCodeRecord!
	iban: FundingInstructionsBankTransferIbanRecord!
}
type FundingInstructionsBankTransferIbanRecord {
	iban: String!
	country: String!
	bic: String!
	accountHolderName: String!
}
type FundingInstructionsBankTransferSortCodeRecord {
	sortCode: String!
	accountNumber: String!
	accountHolderName: String!
}
type FundingInstructionsBankTransferSpeiRecord {
	clabe: String!
	bankName: String!
	bankCode: String!
}
type FundingInstructionsBankTransferZenginRecord {
	branchName: String
	branchCode: String
	bankName: String
	bankCode: String
	accountType: String
	accountNumber: String
	accountHolderName: String
}
type GelatoDataDocumentReportDateOfBirth {
	year: Int
	month: Int
	day: Int
}
union GelatoDataDocumentReportDateOfBirthUnion = GelatoDataDocumentReportDateOfBirth
type GelatoDataDocumentReportExpirationDate {
	year: Int
	month: Int
	day: Int
}
union GelatoDataDocumentReportExpirationDateUnion = GelatoDataDocumentReportExpirationDate
type GelatoDataDocumentReportIssuedDate {
	year: Int
	month: Int
	day: Int
}
union GelatoDataDocumentReportIssuedDateUnion = GelatoDataDocumentReportIssuedDate
type GelatoDataIdNumberReportDate {
	year: Int
	month: Int
	day: Int
}
union GelatoDataIdNumberReportDateUnion = GelatoDataIdNumberReportDate
type GelatoDataVerifiedOutputsDate {
	year: Int
	month: Int
	day: Int
}
union GelatoDataVerifiedOutputsDateUnion = GelatoDataVerifiedOutputsDate
type GelatoDocumentReport {
	type: String
	status: String!
	number: String
	lastName: String
	issuingCountry: String
	issuedDate: GelatoDataDocumentReportIssuedDateUnion
	firstName: String
	files: [String!]
	expirationDate: GelatoDataDocumentReportExpirationDateUnion
	error: GelatoDocumentReportErrorUnion
	dob: GelatoDataDocumentReportDateOfBirthUnion
	address: AddressUnion
}
type GelatoDocumentReportError {
	reason: String
	code: String
}
union GelatoDocumentReportErrorUnion = GelatoDocumentReportError
type GelatoIdNumberReport {
	status: String!
	lastName: String
	idNumberType: String
	idNumber: String
	firstName: String
	error: GelatoIdNumberReportErrorUnion
	dob: GelatoDataIdNumberReportDateUnion
}
type GelatoIdNumberReportError {
	reason: String
	code: String
}
union GelatoIdNumberReportErrorUnion = GelatoIdNumberReportError
type GelatoReportDocumentOptions {
	requireMatchingSelfie: Boolean!
	requireLiveCapture: Boolean!
	requireIdNumber: Boolean!
	allowedTypes: [String!]!
}
type GelatoReportIdNumberOptions {
}
type GelatoSelfieReport {
	status: String!
	selfie: String
	error: GelatoSelfieReportErrorUnion
	document: String
}
type GelatoSelfieReportError {
	reason: String
	code: String
}
union GelatoSelfieReportErrorUnion = GelatoSelfieReportError
type GelatoSessionDocumentOptions {
	requireMatchingSelfie: Boolean!
	requireLiveCapture: Boolean!
	requireIdNumber: Boolean!
	allowedTypes: [String!]!
}
type GelatoSessionIdNumberOptions {
}
type GelatoSessionLastError {
	reason: String
	code: String
}
union GelatoSessionLastErrorUnion = GelatoSessionLastError
type GelatoVerificationReportOptions {
	idNumber: GelatoReportIdNumberOptions!
	document: GelatoReportDocumentOptions!
}
type GelatoVerificationSessionOptions {
	idNumber: GelatoSessionIdNumberOptions!
	document: GelatoSessionDocumentOptions!
}
type GelatoVerifiedOutputs {
	lastName: String
	idNumberType: String
	idNumber: String
	firstName: String
	dob: GelatoDataVerifiedOutputsDateUnion
	address: AddressUnion
}
union GelatoVerifiedOutputsUnion = GelatoVerifiedOutputs
type GetAccounts {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Account!]!
}
type GetAccountsAccountCapabilities {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Capability!]!
}
type GetAccountsAccountExternalAccounts {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [CardOrBankAccountUnion!]!
}
type GetAccountsAccountPeople {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Person!]!
}
type GetAccountsAccountPersons {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Person!]!
}
type GetApplePayDomains {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [ApplePayDomain!]!
}
type GetApplicationFees {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [ApplicationFee!]!
}
type GetApplicationFeesIdRefunds {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [FeeRefund!]!
}
type GetAppsSecrets {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [AppsSecret!]!
}
type GetBalanceHistory {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [BalanceTransaction!]!
}
type GetBalanceTransactions {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [BalanceTransaction!]!
}
type GetBillingPortalConfigurations {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [BillingPortalConfiguration!]!
}
type GetCharges {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Charge!]!
}
type GetChargesChargeRefunds {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Refund!]!
}
type GetChargesSearch {
	url: String!
	totalCount: Int!
	object: String!
	nextPage: String
	hasMore: Boolean!
	data: [Charge!]!
}
type GetCheckoutSessions {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [CheckoutSession!]!
}
type GetCheckoutSessionsSessionLineItems {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Item!]!
}
type GetCountrySpecs {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [CountrySpec!]!
}
type GetCoupons {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Coupon!]!
}
type GetCreditNotes {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [CreditNote!]!
}
type GetCreditNotesCreditNoteLines {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [CreditNoteLineItem!]!
}
type GetCreditNotesPreviewLines {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [CreditNoteLineItem!]!
}
type GetCustomers {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Customer!]!
}
type GetCustomersCustomerBalanceTransactions {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [CustomerBalanceTransaction!]!
}
type GetCustomersCustomerBankAccounts {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [BankAccount!]!
}
type GetCustomersCustomerCards {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Card!]!
}
type GetCustomersCustomerCashBalanceTransactions {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [CustomerCashBalanceTransaction!]!
}
type GetCustomersCustomerPaymentMethods {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [PaymentMethod!]!
}
type GetCustomersCustomerSources {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [SourceOrCardOrBankAccountUnion!]!
}
type GetCustomersCustomerSubscriptions {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Subscription!]!
}
type GetCustomersCustomerTaxIds {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [TaxId!]!
}
type GetCustomersSearch {
	url: String!
	totalCount: Int!
	object: String!
	nextPage: String
	hasMore: Boolean!
	data: [Customer!]!
}
type GetDisputes {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Dispute!]!
}
type GetEvents {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Event!]!
}
type GetExchangeRates {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [ExchangeRate!]!
}
type GetFileLinks {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [FileLink!]!
}
type GetFiles {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [File!]!
}
type GetFinancialConnectionsAccounts {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [FinancialConnectionsAccount!]!
}
type GetFinancialConnectionsAccountsAccountOwners {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [FinancialConnectionsAccountOwner!]!
}
type GetIdentityVerificationReports {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [IdentityVerificationReport!]!
}
type GetIdentityVerificationSessions {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [IdentityVerificationSession!]!
}
type GetInvoiceitems {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Invoiceitem!]!
}
type GetInvoices {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Invoice!]!
}
type GetInvoicesInvoiceLines {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [LineItem!]!
}
type GetInvoicesSearch {
	url: String!
	totalCount: Int!
	object: String!
	nextPage: String
	hasMore: Boolean!
	data: [Invoice!]!
}
type GetInvoicesUpcomingLines {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [LineItem!]!
}
type GetIssuingAuthorizations {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [IssuingAuthorization!]!
}
type GetIssuingCardholders {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [IssuingCardholder!]!
}
type GetIssuingCards {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [IssuingCard!]!
}
type GetIssuingDisputes {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [IssuingDispute!]!
}
type GetIssuingSettlements {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [IssuingSettlement!]!
}
type GetIssuingTransactions {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [IssuingTransaction!]!
}
type GetLinkedAccounts {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [FinancialConnectionsAccount!]!
}
type GetLinkedAccountsAccountOwners {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [FinancialConnectionsAccountOwner!]!
}
type GetPaymentIntents {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [PaymentIntent!]!
}
type GetPaymentIntentsSearch {
	url: String!
	totalCount: Int!
	object: String!
	nextPage: String
	hasMore: Boolean!
	data: [PaymentIntent!]!
}
type GetPaymentLinks {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [PaymentLink!]!
}
type GetPaymentLinksPaymentLinkLineItems {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Item!]!
}
type GetPaymentMethods {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [PaymentMethod!]!
}
type GetPayouts {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Payout!]!
}
type GetPlans {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Plan!]!
}
type GetPrices {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Price!]!
}
type GetPricesSearch {
	url: String!
	totalCount: Int!
	object: String!
	nextPage: String
	hasMore: Boolean!
	data: [Price!]!
}
type GetProducts {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Product!]!
}
type GetProductsSearch {
	url: String!
	totalCount: Int!
	object: String!
	nextPage: String
	hasMore: Boolean!
	data: [Product!]!
}
type GetPromotionCodes {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [PromotionCode!]!
}
type GetQuotes {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Quote!]!
}
type GetQuotesQuoteComputedUpfrontLineItems {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Item!]!
}
type GetQuotesQuoteLineItems {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Item!]!
}
type GetRadarEarlyFraudWarnings {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [RadarEarlyFraudWarning!]!
}
type GetRadarValueListItems {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [RadarValueListItem!]!
}
type GetRadarValueLists {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [RadarValueList!]!
}
type GetRefunds {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Refund!]!
}
type GetReportingReportRuns {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [ReportingReportRun!]!
}
type GetReportingReportTypes {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [ReportingReportType!]!
}
type GetReviews {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Review!]!
}
type GetSetupAttempts {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [SetupAttempt!]!
}
type GetSetupIntents {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [SetupIntent!]!
}
type GetShippingRates {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [ShippingRate!]!
}
type GetSigmaScheduledQueryRuns {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [ScheduledQueryRun!]!
}
type GetSourcesSourceSourceTransactions {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [SourceTransaction!]!
}
type GetSubscriptionItems {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [SubscriptionItem!]!
}
type GetSubscriptionItemsSubscriptionItemUsageRecordSummaries {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [UsageRecordSummary!]!
}
type GetSubscriptionSchedules {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [SubscriptionSchedule!]!
}
type GetSubscriptions {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Subscription!]!
}
type GetSubscriptionsSearch {
	url: String!
	totalCount: Int!
	object: String!
	nextPage: String
	hasMore: Boolean!
	data: [Subscription!]!
}
type GetTaxCodes {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [TaxCode!]!
}
type GetTaxRates {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [TaxRate!]!
}
type GetTerminalConfigurations {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [TerminalConfiguration!]!
}
type GetTerminalLocations {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [TerminalLocation!]!
}
type GetTerminalReaders {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [TerminalReader!]!
}
type GetTestHelpersTestClocks {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [TestHelpersTestClock!]!
}
type GetTopups {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Topup!]!
}
type GetTransfers {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Transfer!]!
}
type GetTransfersIdReversals {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [TransferReversal!]!
}
type GetTreasuryCreditReversals {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [TreasuryCreditReversal!]!
}
type GetTreasuryDebitReversals {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [TreasuryDebitReversal!]!
}
type GetTreasuryFinancialAccounts {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [TreasuryFinancialAccount!]!
}
type GetTreasuryInboundTransfers {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [TreasuryInboundTransfer!]!
}
type GetTreasuryOutboundPayments {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [TreasuryOutboundPayment!]!
}
type GetTreasuryOutboundTransfers {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [TreasuryOutboundTransfer!]!
}
type GetTreasuryReceivedCredits {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [TreasuryReceivedCredit!]!
}
type GetTreasuryReceivedDebits {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [TreasuryReceivedDebit!]!
}
type GetTreasuryTransactionEntries {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [TreasuryTransactionEntry!]!
}
type GetTreasuryTransactions {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [TreasuryTransaction!]!
}
type GetWebhookEndpoints {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [WebhookEndpoint!]!
}
type IdentityVerificationReport {
	verificationSession: String
	type: String!
	selfie: GelatoSelfieReport!
	options: GelatoVerificationReportOptions!
	object: String!
	livemode: Boolean!
	idNumber: GelatoIdNumberReport!
	id: String!
	document: GelatoDocumentReport!
	created: Int!
}
union IdentityVerificationReportUnion = IdentityVerificationReport
type IdentityVerificationSession {
	verifiedOutputs: GelatoVerifiedOutputsUnion
	url: String
	type: String!
	status: String!
	redaction: VerificationSessionRedactionUnion
	options: GelatoVerificationSessionOptions!
	object: String!
	metadata: IdentityVerificationSessionMetadata!
	livemode: Boolean!
	lastVerificationReport: IdentityVerificationReportUnion
	lastError: GelatoSessionLastErrorUnion
	id: String!
	created: Int!
	clientSecret: String
}
type IdentityVerificationSessionMetadata {
}
type InboundTransfers {
	usBankAccount: InboundTransfersPaymentMethodDetailsUsBankAccount!
	type: String!
	billingDetails: TreasurySharedResourceBillingDetails!
}
type InboundTransfersPaymentMethodDetailsUsBankAccount {
	routingNumber: String
	network: String!
	last4: String
	fingerprint: String
	bankName: String
	accountType: String
	accountHolderType: String
}
union InboundTransfersUnion = InboundTransfers
type Invoice {
	webhooksDeliveredAt: Int
	transferData: InvoiceTransferDataUnion
	totalTaxAmounts: [InvoiceTaxAmount!]!
	totalExcludingTax: Int
	totalDiscountAmounts: [DiscountsResourceDiscountAmount!]
	total: Int!
	thresholdReason: InvoiceThresholdReason!
	testClock: TestHelpersTestClockUnion
	tax: Int
	subtotalExcludingTax: Int
	subtotal: Int!
	subscriptionProrationDate: Int!
	subscription: SubscriptionUnion
	statusTransitions: InvoicesStatusTransitions!
	status: String
	statementDescriptor: String
	startingBalance: Int!
	shippingDetails: ShippingUnion
	shippingCost: InvoicesShippingCostUnion
	renderingOptions: InvoiceSettingRenderingOptionsUnion
	receiptNumber: String
	quote: QuoteUnion
	prePaymentCreditNotesAmount: Int!
	postPaymentCreditNotesAmount: Int!
	periodStart: Int!
	periodEnd: Int!
	paymentSettings: InvoicesPaymentSettings!
	paymentIntent: PaymentIntentUnion
	paidOutOfBand: Boolean!
	paid: Boolean!
	onBehalfOf: AccountUnion
	object: String!
	number: String
	nextPaymentAttempt: Int
	metadata: InvoiceMetadata
	livemode: Boolean!
	lines: InvoiceLines!
	latestRevision: InvoiceUnion
	lastFinalizationError: ApiErrorsUnion
	invoicePdf: String
	id: String!
	hostedInvoiceUrl: String
	fromInvoice: InvoicesFromInvoiceUnion
	footer: String
	endingBalance: Int
	dueDate: Int
	discounts: [DeletedDiscountOrDiscountUnion!]
	discount: DiscountUnion
	description: String
	defaultTaxRates: [TaxRate!]!
	defaultSource: SourceOrCardOrBankAccountUnion
	defaultPaymentMethod: PaymentMethodUnion
	customerTaxIds: [InvoicesResourceInvoiceTaxId!]
	customerTaxExempt: String
	customerShipping: ShippingUnion
	customerPhone: String
	customerName: String
	customerEmail: String
	customerAddress: AddressUnion
	customer: DeletedCustomerOrCustomerUnion
	customFields: [InvoiceSettingCustomField!]
	currency: String!
	created: Int!
	collectionMethod: String!
	charge: ChargeUnion
	billingReason: String
	automaticTax: AutomaticTax!
	autoAdvance: Boolean!
	attempted: Boolean!
	attemptCount: Int!
	applicationFeeAmount: Int
	application: DeletedApplicationOrApplicationUnion
	amountShipping: Int!
	amountRemaining: Int!
	amountPaid: Int!
	amountDue: Int!
	accountTaxIds: [DeletedTaxIdOrTaxIdUnion!]
	accountName: String
	accountCountry: String
}
type InvoiceInstallmentsCard {
	enabled: Boolean
}
type InvoiceItemThresholdReason {
	usageGte: Int!
	lineItemIds: [String!]!
}
type InvoiceLineItemPeriod {
	start: Int!
	end: Int!
}
type InvoiceLines {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [LineItem!]!
}
type InvoiceMandateOptionsCard {
	description: String
	amountType: String
	amount: Int
}
type InvoiceMetadata {
}
type InvoicePaymentMethodOptionsAcssDebit {
	verificationMethod: String!
	mandateOptions: InvoicePaymentMethodOptionsAcssDebitMandateOptions!
}
type InvoicePaymentMethodOptionsAcssDebitMandateOptions {
	transactionType: String
}
union InvoicePaymentMethodOptionsAcssDebitUnion = InvoicePaymentMethodOptionsAcssDebit
type InvoicePaymentMethodOptionsBancontact {
	preferredLanguage: String!
}
union InvoicePaymentMethodOptionsBancontactUnion = InvoicePaymentMethodOptionsBancontact
type InvoicePaymentMethodOptionsCard {
	requestThreeDSecure: String
	installments: InvoiceInstallmentsCard!
}
union InvoicePaymentMethodOptionsCardUnion = InvoicePaymentMethodOptionsCard
type InvoicePaymentMethodOptionsCustomerBalance {
	fundingType: String
	bankTransfer: InvoicePaymentMethodOptionsCustomerBalanceBankTransfer!
}
type InvoicePaymentMethodOptionsCustomerBalanceBankTransfer {
	type: String
	euBankTransfer: InvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransfer!
}
type InvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransfer {
	country: String!
}
union InvoicePaymentMethodOptionsCustomerBalanceUnion = InvoicePaymentMethodOptionsCustomerBalance
type InvoicePaymentMethodOptionsKonbini {
}
union InvoicePaymentMethodOptionsKonbiniUnion = InvoicePaymentMethodOptionsKonbini
type InvoicePaymentMethodOptionsUsBankAccount {
	verificationMethod: String!
	financialConnections: InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptions!
}
type InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptions {
	permissions: [String!]!
}
union InvoicePaymentMethodOptionsUsBankAccountUnion = InvoicePaymentMethodOptionsUsBankAccount
type InvoiceSettingCustomField {
	value: String!
	name: String!
}
type InvoiceSettingCustomerSetting {
	renderingOptions: InvoiceSettingRenderingOptionsUnion
	footer: String
	defaultPaymentMethod: PaymentMethodUnion
	customFields: [InvoiceSettingCustomField!]
}
type InvoiceSettingQuoteSetting {
	daysUntilDue: Int
}
union InvoiceSettingQuoteSettingUnion = InvoiceSettingQuoteSetting
type InvoiceSettingRenderingOptions {
	amountTaxDisplay: String
}
union InvoiceSettingRenderingOptionsUnion = InvoiceSettingRenderingOptions
type InvoiceSettingSubscriptionScheduleSetting {
	daysUntilDue: Int
}
union InvoiceSettingSubscriptionScheduleSettingUnion = InvoiceSettingSubscriptionScheduleSetting
type InvoiceTaxAmount {
	taxRate: TaxRateUnion!
	inclusive: Boolean!
	amount: Int!
}
type InvoiceThresholdReason {
	itemReasons: [InvoiceItemThresholdReason!]!
	amountGte: Int
}
type InvoiceTransferData {
	destination: AccountUnion!
	amount: Int
}
union InvoiceTransferDataUnion = InvoiceTransferData
union InvoiceUnion = Invoice
type Invoiceitem {
	unitAmountDecimal: String
	unitAmount: Int
	testClock: TestHelpersTestClockUnion
	taxRates: [TaxRate!]
	subscriptionItem: String!
	subscription: SubscriptionUnion
	quantity: Int!
	proration: Boolean!
	price: PriceUnion
	period: InvoiceLineItemPeriod!
	object: String!
	metadata: InvoiceitemMetadata
	livemode: Boolean!
	invoice: InvoiceUnion
	id: String!
	discounts: [DiscountUnion!]
	discountable: Boolean!
	description: String
	date: Int!
	customer: DeletedCustomerOrCustomerUnion!
	currency: String!
	amount: Int!
}
type InvoiceitemMetadata {
}
type InvoicesFromInvoice {
	invoice: InvoiceUnion!
	action: String!
}
union InvoicesFromInvoiceUnion = InvoicesFromInvoice
type InvoicesLineItemsCreditedItems {
	invoiceLineItems: [String!]!
	invoice: String!
}
union InvoicesLineItemsCreditedItemsUnion = InvoicesLineItemsCreditedItems
type InvoicesLineItemsProrationDetails {
	creditedItems: InvoicesLineItemsCreditedItemsUnion
}
union InvoicesLineItemsProrationDetailsUnion = InvoicesLineItemsProrationDetails
type InvoicesPaymentMethodOptions {
	usBankAccount: InvoicePaymentMethodOptionsUsBankAccountUnion
	konbini: InvoicePaymentMethodOptionsKonbiniUnion
	customerBalance: InvoicePaymentMethodOptionsCustomerBalanceUnion
	card: InvoicePaymentMethodOptionsCardUnion
	bancontact: InvoicePaymentMethodOptionsBancontactUnion
	acssDebit: InvoicePaymentMethodOptionsAcssDebitUnion
}
union InvoicesPaymentMethodOptionsUnion = InvoicesPaymentMethodOptions
type InvoicesPaymentSettings {
	paymentMethodTypes: [String!]
	paymentMethodOptions: InvoicesPaymentMethodOptionsUnion
	defaultMandate: String
}
type InvoicesResourceInvoiceTaxId {
	value: String
	type: String!
}
type InvoicesShippingCost {
	taxes: [LineItemsTaxAmount!]!
	shippingRate: ShippingRateUnion
	amountTotal: Int!
	amountTax: Int!
	amountSubtotal: Int!
}
union InvoicesShippingCostUnion = InvoicesShippingCost
type InvoicesStatusTransitions {
	voidedAt: Int
	paidAt: Int
	markedUncollectibleAt: Int
	finalizedAt: Int
}
type IssuingAuthorization {
	wallet: String
	verificationData: IssuingAuthorizationVerificationData!
	treasury: IssuingAuthorizationTreasuryUnion
	transactions: [IssuingTransaction!]!
	status: String!
	requestHistory: [IssuingAuthorizationRequest!]!
	pendingRequest: IssuingAuthorizationPendingRequestUnion
	object: String!
	networkData: IssuingAuthorizationNetworkDataUnion
	metadata: IssuingAuthorizationMetadata!
	merchantData: IssuingAuthorizationMerchantData!
	merchantCurrency: String!
	merchantAmount: Int!
	livemode: Boolean!
	id: String!
	currency: String!
	created: Int!
	cardholder: IssuingCardholderUnion
	card: IssuingCard!
	balanceTransactions: [BalanceTransaction!]!
	authorizationMethod: String!
	approved: Boolean!
	amountDetails: IssuingAuthorizationAmountDetailsUnion
	amount: Int!
}
type IssuingAuthorizationAmountDetails {
	atmFee: Int
}
union IssuingAuthorizationAmountDetailsUnion = IssuingAuthorizationAmountDetails
type IssuingAuthorizationMerchantData {
	state: String
	postalCode: String
	networkId: String!
	name: String
	country: String
	city: String
	categoryCode: String!
	category: String!
}
type IssuingAuthorizationMetadata {
}
type IssuingAuthorizationNetworkData {
	acquiringInstitutionId: String
}
union IssuingAuthorizationNetworkDataUnion = IssuingAuthorizationNetworkData
type IssuingAuthorizationPendingRequest {
	merchantCurrency: String!
	merchantAmount: Int!
	isAmountControllable: Boolean!
	currency: String!
	amountDetails: IssuingAuthorizationAmountDetailsUnion
	amount: Int!
}
union IssuingAuthorizationPendingRequestUnion = IssuingAuthorizationPendingRequest
type IssuingAuthorizationRequest {
	reasonMessage: String
	reason: String!
	merchantCurrency: String!
	merchantAmount: Int!
	currency: String!
	created: Int!
	approved: Boolean!
	amountDetails: IssuingAuthorizationAmountDetailsUnion
	amount: Int!
}
type IssuingAuthorizationTreasury {
	transaction: String
	receivedDebits: [String!]!
	receivedCredits: [String!]!
}
union IssuingAuthorizationTreasuryUnion = IssuingAuthorizationTreasury
union IssuingAuthorizationUnion = IssuingAuthorization
type IssuingAuthorizationVerificationData {
	expiryCheck: String!
	cvcCheck: String!
	addressPostalCodeCheck: String!
	addressLine1Check: String!
}
type IssuingCard {
	wallets: IssuingCardWalletsUnion
	type: String!
	status: String!
	spendingControls: IssuingCardAuthorizationControls!
	shipping: IssuingCardShippingUnion
	replacementReason: String
	replacementFor: IssuingCardUnion
	replacedBy: IssuingCardUnion
	object: String!
	number: String!
	metadata: IssuingCardMetadata!
	livemode: Boolean!
	last4: String!
	id: String!
	financialAccount: String
	expYear: Int!
	expMonth: Int!
	cvc: String!
	currency: String!
	created: Int!
	cardholder: IssuingCardholder!
	cancellationReason: String
	brand: String!
}
type IssuingCardApplePay {
	ineligibleReason: String
	eligible: Boolean!
}
type IssuingCardAuthorizationControls {
	spendingLimitsCurrency: String
	spendingLimits: [IssuingCardSpendingLimit!]
	blockedCategories: [String!]
	allowedCategories: [String!]
}
type IssuingCardGooglePay {
	ineligibleReason: String
	eligible: Boolean!
}
type IssuingCardMetadata {
}
type IssuingCardShipping {
	type: String!
	trackingUrl: String
	trackingNumber: String
	status: String
	service: String!
	requireSignature: Boolean
	phoneNumber: String
	name: String!
	eta: Int
	customs: IssuingCardShippingCustomsUnion
	carrier: String
	address: Address!
}
type IssuingCardShippingCustoms {
	eoriNumber: String
}
union IssuingCardShippingCustomsUnion = IssuingCardShippingCustoms
union IssuingCardShippingUnion = IssuingCardShipping
type IssuingCardSpendingLimit {
	interval: String!
	categories: [String!]
	amount: Int!
}
union IssuingCardUnion = IssuingCard
type IssuingCardWallets {
	primaryAccountIdentifier: String
	googlePay: IssuingCardGooglePay!
	applePay: IssuingCardApplePay!
}
union IssuingCardWalletsUnion = IssuingCardWallets
type IssuingCardholder {
	type: String!
	status: String!
	spendingControls: IssuingCardholderAuthorizationControlsUnion
	requirements: IssuingCardholderRequirements!
	phoneNumber: String
	object: String!
	name: String!
	metadata: IssuingCardholderMetadata!
	livemode: Boolean!
	individual: IssuingCardholderIndividualUnion
	id: String!
	email: String
	created: Int!
	company: IssuingCardholderCompanyUnion
	billing: IssuingCardholderAddress!
}
type IssuingCardholderAddress {
	address: Address!
}
type IssuingCardholderAuthorizationControls {
	spendingLimitsCurrency: String
	spendingLimits: [IssuingCardholderSpendingLimit!]
	blockedCategories: [String!]
	allowedCategories: [String!]
}
union IssuingCardholderAuthorizationControlsUnion = IssuingCardholderAuthorizationControls
type IssuingCardholderCompany {
	taxIdProvided: Boolean!
}
union IssuingCardholderCompanyUnion = IssuingCardholderCompany
type IssuingCardholderIdDocument {
	front: FileUnion
	back: FileUnion
}
union IssuingCardholderIdDocumentUnion = IssuingCardholderIdDocument
type IssuingCardholderIndividual {
	verification: IssuingCardholderVerificationUnion
	lastName: String
	firstName: String
	dob: IssuingCardholderIndividualDobUnion
}
type IssuingCardholderIndividualDob {
	year: Int
	month: Int
	day: Int
}
union IssuingCardholderIndividualDobUnion = IssuingCardholderIndividualDob
union IssuingCardholderIndividualUnion = IssuingCardholderIndividual
type IssuingCardholderMetadata {
}
type IssuingCardholderRequirements {
	pastDue: [String!]
	disabledReason: String
}
type IssuingCardholderSpendingLimit {
	interval: String!
	categories: [String!]
	amount: Int!
}
union IssuingCardholderUnion = IssuingCardholder
type IssuingCardholderVerification {
	document: IssuingCardholderIdDocumentUnion
}
union IssuingCardholderVerificationUnion = IssuingCardholderVerification
type IssuingDispute {
	treasury: IssuingDisputeTreasuryUnion
	transaction: IssuingTransactionUnion!
	status: String!
	object: String!
	metadata: IssuingDisputeMetadata!
	livemode: Boolean!
	id: String!
	evidence: IssuingDisputeEvidence!
	currency: String!
	created: Int!
	balanceTransactions: [BalanceTransaction!]
	amount: Int!
}
type IssuingDisputeCanceledEvidence {
	returnedAt: Int
	returnStatus: String
	productType: String
	productDescription: String
	explanation: String
	expectedAt: Int
	cancellationReason: String
	cancellationPolicyProvided: Boolean
	canceledAt: Int
	additionalDocumentation: FileUnion
}
type IssuingDisputeDuplicateEvidence {
	originalTransaction: String
	explanation: String
	checkImage: FileUnion
	cashReceipt: FileUnion
	cardStatement: FileUnion
	additionalDocumentation: FileUnion
}
type IssuingDisputeEvidence {
	serviceNotAsDescribed: IssuingDisputeServiceNotAsDescribedEvidence!
	reason: String!
	other: IssuingDisputeOtherEvidence!
	notReceived: IssuingDisputeNotReceivedEvidence!
	merchandiseNotAsDescribed: IssuingDisputeMerchandiseNotAsDescribedEvidence!
	fraudulent: IssuingDisputeFraudulentEvidence!
	duplicate: IssuingDisputeDuplicateEvidence!
	canceled: IssuingDisputeCanceledEvidence!
}
type IssuingDisputeFraudulentEvidence {
	explanation: String
	additionalDocumentation: FileUnion
}
type IssuingDisputeMerchandiseNotAsDescribedEvidence {
	returnedAt: Int
	returnStatus: String
	returnDescription: String
	receivedAt: Int
	explanation: String
	additionalDocumentation: FileUnion
}
type IssuingDisputeMetadata {
}
type IssuingDisputeNotReceivedEvidence {
	productType: String
	productDescription: String
	explanation: String
	expectedAt: Int
	additionalDocumentation: FileUnion
}
type IssuingDisputeOtherEvidence {
	productType: String
	productDescription: String
	explanation: String
	additionalDocumentation: FileUnion
}
type IssuingDisputeServiceNotAsDescribedEvidence {
	receivedAt: Int
	explanation: String
	cancellationReason: String
	canceledAt: Int
	additionalDocumentation: FileUnion
}
type IssuingDisputeTreasury {
	receivedDebit: String!
	debitReversal: String
}
union IssuingDisputeTreasuryUnion = IssuingDisputeTreasury
union IssuingDisputeUnion = IssuingDispute
type IssuingSettlement {
	transactionVolume: Int!
	transactionCount: Int!
	settlementService: String!
	object: String!
	networkSettlementIdentifier: String!
	networkFees: Int!
	network: String!
	netTotal: Int!
	metadata: IssuingSettlementMetadata!
	livemode: Boolean!
	interchangeFees: Int!
	id: String!
	currency: String!
	created: Int!
	clearingDate: Int!
	bin: String!
}
type IssuingSettlementMetadata {
}
type IssuingTransaction {
	wallet: String
	type: String!
	treasury: IssuingTransactionTreasuryUnion
	purchaseDetails: IssuingTransactionPurchaseDetailsUnion
	object: String!
	metadata: IssuingTransactionMetadata!
	merchantData: IssuingAuthorizationMerchantData!
	merchantCurrency: String!
	merchantAmount: Int!
	livemode: Boolean!
	id: String!
	dispute: IssuingDisputeUnion
	currency: String!
	created: Int!
	cardholder: IssuingCardholderUnion
	card: IssuingCardUnion!
	balanceTransaction: BalanceTransactionUnion
	authorization: IssuingAuthorizationUnion
	amountDetails: IssuingTransactionAmountDetailsUnion
	amount: Int!
}
type IssuingTransactionAmountDetails {
	atmFee: Int
}
union IssuingTransactionAmountDetailsUnion = IssuingTransactionAmountDetails
type IssuingTransactionFlightData {
	travelAgency: String
	segments: [IssuingTransactionFlightDataLeg!]
	refundable: Boolean
	passengerName: String
	departureAt: Int
}
type IssuingTransactionFlightDataLeg {
	stopoverAllowed: Boolean
	serviceClass: String
	flightNumber: String
	departureAirportCode: String
	carrier: String
	arrivalAirportCode: String
}
union IssuingTransactionFlightDataUnion = IssuingTransactionFlightData
type IssuingTransactionFuelData {
	volumeDecimal: String
	unitCostDecimal: String!
	unit: String!
	type: String!
}
union IssuingTransactionFuelDataUnion = IssuingTransactionFuelData
type IssuingTransactionLodgingData {
	nights: Int
	checkInAt: Int
}
union IssuingTransactionLodgingDataUnion = IssuingTransactionLodgingData
type IssuingTransactionMetadata {
}
type IssuingTransactionPurchaseDetails {
	reference: String
	receipt: [IssuingTransactionReceiptData!]
	lodging: IssuingTransactionLodgingDataUnion
	fuel: IssuingTransactionFuelDataUnion
	flight: IssuingTransactionFlightDataUnion
}
union IssuingTransactionPurchaseDetailsUnion = IssuingTransactionPurchaseDetails
type IssuingTransactionReceiptData {
	unitCost: Int
	total: Int
	quantity: Float
	description: String
}
type IssuingTransactionTreasury {
	receivedDebit: String
	receivedCredit: String
}
union IssuingTransactionTreasuryUnion = IssuingTransactionTreasury
union IssuingTransactionUnion = IssuingTransaction
type Item {
	taxes: [LineItemsTaxAmount!]!
	quantity: Int
	price: PriceUnion
	object: String!
	id: String!
	discounts: [LineItemsDiscountAmount!]!
	description: String!
	currency: String!
	amountTotal: Int!
	amountTax: Int!
	amountSubtotal: Int!
	amountDiscount: Int!
}
type LegalEntityCompany {
	verification: LegalEntityCompanyVerificationUnion
	vatIdProvided: Boolean!
	taxIdRegistrar: String!
	taxIdProvided: Boolean!
	structure: String!
	phone: String
	ownershipDeclaration: LegalEntityUboDeclarationUnion
	ownersProvided: Boolean!
	nameKanji: String
	nameKana: String
	name: String
	executivesProvided: Boolean!
	directorsProvided: Boolean!
	addressKanji: LegalEntityJapanAddressUnion
	addressKana: LegalEntityJapanAddressUnion
	address: Address!
}
type LegalEntityCompanyVerification {
	document: LegalEntityCompanyVerificationDocument!
}
type LegalEntityCompanyVerificationDocument {
	front: FileUnion
	detailsCode: String
	details: String
	back: FileUnion
}
union LegalEntityCompanyVerificationUnion = LegalEntityCompanyVerification
type LegalEntityDob {
	year: Int
	month: Int
	day: Int
}
type LegalEntityJapanAddress {
	town: String
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
union LegalEntityJapanAddressUnion = LegalEntityJapanAddress
type LegalEntityPersonVerification {
	status: String!
	document: LegalEntityPersonVerificationDocument!
	detailsCode: String
	details: String
	additionalDocument: LegalEntityPersonVerificationDocumentUnion
}
type LegalEntityPersonVerificationDocument {
	front: FileUnion
	detailsCode: String
	details: String
	back: FileUnion
}
union LegalEntityPersonVerificationDocumentUnion = LegalEntityPersonVerificationDocument
type LegalEntityUboDeclaration {
	userAgent: String
	ip: String
	date: Int
}
union LegalEntityUboDeclarationUnion = LegalEntityUboDeclaration
type LineItem {
	unitAmountExcludingTax: String
	type: String!
	taxRates: [TaxRate!]!
	taxAmounts: [InvoiceTaxAmount!]!
	subscriptionItem: String!
	subscription: String
	quantity: Int
	prorationDetails: InvoicesLineItemsProrationDetailsUnion
	proration: Boolean!
	price: PriceUnion
	period: InvoiceLineItemPeriod!
	object: String!
	metadata: LineItemMetadata!
	livemode: Boolean!
	invoiceItem: String!
	id: String!
	discounts: [DiscountUnion!]
	discountable: Boolean!
	discountAmounts: [DiscountsResourceDiscountAmount!]
	description: String
	currency: String!
	amountExcludingTax: Int
	amount: Int!
}
type LineItemMetadata {
}
type LineItemsDiscountAmount {
	discount: Discount!
	amount: Int!
}
type LineItemsTaxAmount {
	rate: TaxRate!
	amount: Int!
}
type LinkedAccountOptionsUsBankAccount {
	returnUrl: String!
	permissions: [String!]!
}
type Mandate {
	type: String!
	status: String!
	singleUse: MandateSingleUse!
	paymentMethodDetails: MandatePaymentMethodDetails!
	paymentMethod: PaymentMethodUnion!
	object: String!
	multiUse: MandateMultiUse!
	livemode: Boolean!
	id: String!
	customerAcceptance: CustomerAcceptance!
}
type MandateAcssDebit {
	transactionType: String!
	paymentSchedule: String!
	intervalDescription: String
	defaultFor: [String!]!
}
type MandateAuBecsDebit {
	url: String!
}
type MandateBacsDebit {
	url: String!
	reference: String!
	networkStatus: String!
}
type MandateBlik {
	type: String
	offSession: MandateOptionsOffSessionDetailsBlik!
	expiresAfter: Int
}
type MandateLink {
}
type MandateMultiUse {
}
type MandateOptionsOffSessionDetailsBlik {
	intervalCount: Int
	interval: String
	currency: String
	amount: Int
}
type MandatePaymentMethodDetails {
	usBankAccount: MandateUsBankAccount!
	type: String!
	sepaDebit: MandateSepaDebit!
	link: MandateLink!
	card: CardMandatePaymentMethodDetails!
	blik: MandateBlik!
	bacsDebit: MandateBacsDebit!
	auBecsDebit: MandateAuBecsDebit!
	acssDebit: MandateAcssDebit!
}
type MandateSepaDebit {
	url: String!
	reference: String!
}
type MandateSingleUse {
	currency: String!
	amount: Int!
}
union MandateUnion = Mandate
type MandateUsBankAccount {
}
type Networks {
	preferred: String
	available: [String!]!
}
union NetworksUnion = Networks
type NotificationEventData {
	previousAttributes: NotificationEventDataPreviousAttributes!
	object: NotificationEventDataObject!
}
type NotificationEventDataObject {
}
type NotificationEventDataPreviousAttributes {
}
type NotificationEventRequest {
	idempotencyKey: String
	id: String
}
union NotificationEventRequestUnion = NotificationEventRequest
type OfflineAcceptance {
}
type OnlineAcceptance {
	userAgent: String
	ipAddress: String
}
type OutboundPaymentsPaymentMethodDetails {
	usBankAccount: OutboundPaymentsPaymentMethodDetailsUsBankAccount!
	type: String!
	financialAccount: OutboundPaymentsPaymentMethodDetailsFinancialAccount!
	billingDetails: TreasurySharedResourceBillingDetails!
}
type OutboundPaymentsPaymentMethodDetailsFinancialAccount {
	network: String!
	id: String!
}
union OutboundPaymentsPaymentMethodDetailsUnion = OutboundPaymentsPaymentMethodDetails
type OutboundPaymentsPaymentMethodDetailsUsBankAccount {
	routingNumber: String
	network: String!
	last4: String
	fingerprint: String
	bankName: String
	accountType: String
	accountHolderType: String
}
type OutboundTransfersPaymentMethodDetails {
	usBankAccount: OutboundTransfersPaymentMethodDetailsUsBankAccount!
	type: String!
	billingDetails: TreasurySharedResourceBillingDetails!
}
type OutboundTransfersPaymentMethodDetailsUsBankAccount {
	routingNumber: String
	network: String!
	last4: String
	fingerprint: String
	bankName: String
	accountType: String
	accountHolderType: String
}
type PackageDimensions {
	width: Float!
	weight: Float!
	length: Float!
	height: Float!
}
union PackageDimensionsUnion = PackageDimensions
type PaymentFlowsAmountDetails {
	tip: PaymentFlowsAmountDetailsResourceTip!
}
type PaymentFlowsAmountDetailsResourceTip {
	amount: Int!
}
type PaymentFlowsAutomaticPaymentMethodsPaymentIntent {
	enabled: Boolean!
}
union PaymentFlowsAutomaticPaymentMethodsPaymentIntentUnion = PaymentFlowsAutomaticPaymentMethodsPaymentIntent
type PaymentFlowsInstallmentOptions {
	plan: PaymentMethodDetailsCardInstallmentsPlan!
	enabled: Boolean!
}
type PaymentFlowsPrivatePaymentMethodsAlipay {
}
type PaymentFlowsPrivatePaymentMethodsAlipayDetails {
	transactionId: String
	fingerprint: String
	buyerId: String!
}
type PaymentFlowsPrivatePaymentMethodsKlarnaDob {
	year: Int
	month: Int
	day: Int
}
union PaymentFlowsPrivatePaymentMethodsKlarnaDobUnion = PaymentFlowsPrivatePaymentMethodsKlarnaDob
type PaymentIntent {
	transferGroup: String
	transferData: TransferDataUnion
	status: String!
	statementDescriptorSuffix: String
	statementDescriptor: String
	shipping: ShippingUnion
	setupFutureUsage: String
	review: ReviewUnion
	receiptEmail: String
	processing: PaymentIntentProcessingUnion
	paymentMethodTypes: [String!]!
	paymentMethodOptions: PaymentIntentPaymentMethodOptionsUnion
	paymentMethod: PaymentMethodUnion
	onBehalfOf: AccountUnion
	object: String!
	nextAction: PaymentIntentNextActionUnion
	metadata: PaymentIntentMetadata!
	livemode: Boolean!
	latestCharge: ChargeUnion
	lastPaymentError: ApiErrorsUnion
	invoice: InvoiceUnion
	id: String!
	description: String
	customer: DeletedCustomerOrCustomerUnion
	currency: String!
	created: Int!
	confirmationMethod: String!
	clientSecret: String
	captureMethod: String!
	cancellationReason: String
	canceledAt: Int
	automaticPaymentMethods: PaymentFlowsAutomaticPaymentMethodsPaymentIntentUnion
	applicationFeeAmount: Int
	application: ApplicationUnion
	amountReceived: Int!
	amountDetails: PaymentFlowsAmountDetails!
	amountCapturable: Int!
	amount: Int!
}
type PaymentIntentCardProcessing {
	customerNotification: PaymentIntentProcessingCustomerNotification!
}
type PaymentIntentMetadata {
}
type PaymentIntentNextAction {
	wechatPayRedirectToIosApp: PaymentIntentNextActionWechatPayRedirectToIosApp!
	wechatPayRedirectToAndroidApp: PaymentIntentNextActionWechatPayRedirectToAndroidApp!
	wechatPayDisplayQrCode: PaymentIntentNextActionWechatPayDisplayQrCode!
	verifyWithMicrodeposits: PaymentIntentNextActionVerifyWithMicrodeposits!
	useStripeSdk: PaymentIntentNextActionUseStripeSdk!
	type: String!
	redirectToUrl: PaymentIntentNextActionRedirectToUrl!
	promptpayDisplayQrCode: PaymentIntentNextActionPromptpayDisplayQrCode!
	pixDisplayQrCode: PaymentIntentNextActionPixDisplayQrCode!
	paynowDisplayQrCode: PaymentIntentNextActionPaynowDisplayQrCode!
	oxxoDisplayDetails: PaymentIntentNextActionDisplayOxxoDetails!
	konbiniDisplayDetails: PaymentIntentNextActionKonbini!
	displayBankTransferInstructions: PaymentIntentNextActionDisplayBankTransferInstructions!
	cardAwaitNotification: PaymentIntentNextActionCardAwaitNotification!
	boletoDisplayDetails: PaymentIntentNextActionBoleto!
	alipayHandleRedirect: PaymentIntentNextActionAlipayHandleRedirect!
}
type PaymentIntentNextActionAlipayHandleRedirect {
	url: String
	returnUrl: String
	nativeUrl: String
	nativeData: String
}
type PaymentIntentNextActionBoleto {
	pdf: String
	number: String
	hostedVoucherUrl: String
	expiresAt: Int
}
type PaymentIntentNextActionCardAwaitNotification {
	customerApprovalRequired: Boolean
	chargeAttemptAt: Int
}
type PaymentIntentNextActionDisplayBankTransferInstructions {
	type: String!
	reference: String
	hostedInstructionsUrl: String
	financialAddresses: [FundingInstructionsBankTransferFinancialAddress!]!
	currency: String
	amountRemaining: Int
}
type PaymentIntentNextActionDisplayOxxoDetails {
	number: String
	hostedVoucherUrl: String
	expiresAfter: Int
}
type PaymentIntentNextActionKonbini {
	stores: PaymentIntentNextActionKonbiniStores!
	hostedVoucherUrl: String
	expiresAt: Int!
}
type PaymentIntentNextActionKonbiniFamilymart {
	paymentCode: String!
	confirmationNumber: String!
}
union PaymentIntentNextActionKonbiniFamilymartUnion = PaymentIntentNextActionKonbiniFamilymart
type PaymentIntentNextActionKonbiniLawson {
	paymentCode: String!
	confirmationNumber: String!
}
union PaymentIntentNextActionKonbiniLawsonUnion = PaymentIntentNextActionKonbiniLawson
type PaymentIntentNextActionKonbiniMinistop {
	paymentCode: String!
	confirmationNumber: String!
}
union PaymentIntentNextActionKonbiniMinistopUnion = PaymentIntentNextActionKonbiniMinistop
type PaymentIntentNextActionKonbiniSeicomart {
	paymentCode: String!
	confirmationNumber: String!
}
union PaymentIntentNextActionKonbiniSeicomartUnion = PaymentIntentNextActionKonbiniSeicomart
type PaymentIntentNextActionKonbiniStores {
	seicomart: PaymentIntentNextActionKonbiniSeicomartUnion
	ministop: PaymentIntentNextActionKonbiniMinistopUnion
	lawson: PaymentIntentNextActionKonbiniLawsonUnion
	familymart: PaymentIntentNextActionKonbiniFamilymartUnion
}
type PaymentIntentNextActionPaynowDisplayQrCode {
	imageUrlSvg: String!
	imageUrlPng: String!
	hostedInstructionsUrl: String
	data: String!
}
type PaymentIntentNextActionPixDisplayQrCode {
	imageUrlSvg: String!
	imageUrlPng: String!
	hostedInstructionsUrl: String!
	expiresAt: Int!
	data: String!
}
type PaymentIntentNextActionPromptpayDisplayQrCode {
	imageUrlSvg: String!
	imageUrlPng: String!
	hostedInstructionsUrl: String!
	data: String!
}
type PaymentIntentNextActionRedirectToUrl {
	url: String
	returnUrl: String
}
union PaymentIntentNextActionUnion = PaymentIntentNextAction
type PaymentIntentNextActionUseStripeSdk {
}
type PaymentIntentNextActionVerifyWithMicrodeposits {
	microdepositType: String
	hostedVerificationUrl: String!
	arrivalDate: Int!
}
type PaymentIntentNextActionWechatPayDisplayQrCode {
	imageUrlSvg: String!
	imageUrlPng: String!
	imageDataUrl: String!
	hostedInstructionsUrl: String!
	data: String!
}
type PaymentIntentNextActionWechatPayRedirectToAndroidApp {
	timestamp: String!
	sign: String!
	prepayId: String!
	partnerId: String!
	package: String!
	nonceStr: String!
	appId: String!
}
type PaymentIntentNextActionWechatPayRedirectToIosApp {
	nativeUrl: String!
}
type PaymentIntentPaymentMethodOptions {
	wechatPay: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsWechatPayUnion!
	usBankAccount: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsUsBankAccountUnion!
	sofort: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsSofortUnion!
	sepaDebit: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsSepaDebitUnion!
	promptpay: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPromptpayUnion!
	pix: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPixUnion!
	paynow: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPaynowUnion!
	p24: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsP24Union!
	oxxo: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsOxxoUnion!
	link: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsLinkUnion!
	konbini: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsKonbiniUnion!
	klarna: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsKlarnaUnion!
	interacPresent: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsInteracPresentUnion!
	ideal: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsIdealUnion!
	grabpay: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsGrabpayUnion!
	giropay: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsGiropayUnion!
	fpx: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsFpxUnion!
	eps: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsEpsUnion!
	customerBalance: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsCustomerBalanceUnion!
	cardPresent: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsCardPresentUnion!
	card: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsCardUnion!
	boleto: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBoletoUnion!
	blik: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsBlikUnion!
	bancontact: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBancontactUnion!
	bacsDebit: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBacsDebitUnion!
	auBecsDebit: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsAuBecsDebitUnion!
	alipay: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAlipayUnion!
	afterpayClearpay: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAfterpayClearpayUnion!
	affirm: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAffirmUnion!
	acssDebit: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsAcssDebitUnion!
}
type PaymentIntentPaymentMethodOptionsAcssDebit {
	verificationMethod: String!
	setupFutureUsage: String!
	mandateOptions: PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit!
}
type PaymentIntentPaymentMethodOptionsAuBecsDebit {
	setupFutureUsage: String!
}
type PaymentIntentPaymentMethodOptionsBlik {
}
type PaymentIntentPaymentMethodOptionsCard {
	statementDescriptorSuffixKanji: String!
	statementDescriptorSuffixKana: String!
	setupFutureUsage: String!
	requestThreeDSecure: String
	network: String
	mandateOptions: PaymentMethodOptionsCardMandateOptionsUnion
	installments: PaymentMethodOptionsCardInstallmentsUnion
	captureMethod: String!
}
type PaymentIntentPaymentMethodOptionsEps {
	setupFutureUsage: String!
}
type PaymentIntentPaymentMethodOptionsLink {
	setupFutureUsage: String!
	persistentToken: String
	captureMethod: String!
}
type PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit {
	transactionType: String
	paymentSchedule: String
	intervalDescription: String
	customMandateUrl: String!
}
type PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit {
}
type PaymentIntentPaymentMethodOptionsSepaDebit {
	setupFutureUsage: String!
	mandateOptions: PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit!
}
union PaymentIntentPaymentMethodOptionsUnion = PaymentIntentPaymentMethodOptions
type PaymentIntentPaymentMethodOptionsUsBankAccount {
	verificationMethod: String!
	setupFutureUsage: String!
	financialConnections: LinkedAccountOptionsUsBankAccount!
}
type PaymentIntentProcessing {
	type: String!
	card: PaymentIntentCardProcessing!
}
type PaymentIntentProcessingCustomerNotification {
	completesAt: Int
	approvalRequested: Boolean
}
union PaymentIntentProcessingUnion = PaymentIntentProcessing
type PaymentIntentTypeSpecificPaymentMethodOptionsClient {
	verificationMethod: String!
	setupFutureUsage: String!
	installments: PaymentFlowsInstallmentOptions!
	captureMethod: String!
}
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsAcssDebitUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentIntentPaymentMethodOptionsAcssDebit
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsAuBecsDebitUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentIntentPaymentMethodOptionsAuBecsDebit
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsBlikUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentIntentPaymentMethodOptionsBlik
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsCardUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentIntentPaymentMethodOptionsCard
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsEpsUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentIntentPaymentMethodOptionsEps
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsLinkUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentIntentPaymentMethodOptionsLink
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsSepaDebitUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentIntentPaymentMethodOptionsSepaDebit
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsUsBankAccountUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentIntentPaymentMethodOptionsUsBankAccount
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAffirmUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsAffirm
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAfterpayClearpayUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsAfterpayClearpay
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAlipayUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsAlipay
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBacsDebitUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsBacsDebit
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBancontactUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsBancontact
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBoletoUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsBoleto
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsCardPresentUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsCardPresent
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsCustomerBalanceUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsCustomerBalance
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsFpxUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsFpx
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsGiropayUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsGiropay
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsGrabpayUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsGrabpay
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsIdealUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsIdeal
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsInteracPresentUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsInteracPresent
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsKlarnaUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsKlarna
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsKonbiniUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsKonbini
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsOxxoUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsOxxo
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsP24Union = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsP24
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPaynowUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsPaynow
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPixUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsPix
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPromptpayUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsPromptpay
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsSofortUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsSofort
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsWechatPayUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsWechatPay
union PaymentIntentUnion = PaymentIntent
type PaymentLink {
	url: String!
	transferData: PaymentLinksResourceTransferDataUnion
	taxIdCollection: PaymentLinksResourceTaxIdCollection!
	subscriptionData: PaymentLinksResourceSubscriptionDataUnion
	submitType: String!
	shippingOptions: [PaymentLinksResourceShippingOption!]!
	shippingAddressCollection: PaymentLinksResourceShippingAddressCollectionUnion
	phoneNumberCollection: PaymentLinksResourcePhoneNumberCollection!
	paymentMethodTypes: [String!]
	paymentMethodCollection: String!
	paymentIntentData: PaymentLinksResourcePaymentIntentDataUnion
	onBehalfOf: AccountUnion
	object: String!
	metadata: PaymentLinkMetadata!
	livemode: Boolean!
	lineItems: PaymentLinkLineItems!
	invoiceCreation: PaymentLinksResourceInvoiceCreationUnion
	id: String!
	customerCreation: String!
	customText: PaymentLinksResourceCustomText!
	currency: String!
	consentCollection: PaymentLinksResourceConsentCollectionUnion
	billingAddressCollection: String!
	automaticTax: PaymentLinksResourceAutomaticTax!
	applicationFeePercent: Float
	applicationFeeAmount: Int
	allowPromotionCodes: Boolean!
	afterCompletion: PaymentLinksResourceAfterCompletion!
	active: Boolean!
}
type PaymentLinkLineItems {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Item!]!
}
type PaymentLinkMetadata {
}
union PaymentLinkUnion = PaymentLink
type PaymentLinksResourceAfterCompletion {
	type: String!
	redirect: PaymentLinksResourceCompletionBehaviorRedirect!
	hostedConfirmation: PaymentLinksResourceCompletionBehaviorConfirmationPage!
}
type PaymentLinksResourceAutomaticTax {
	enabled: Boolean!
}
type PaymentLinksResourceCompletionBehaviorConfirmationPage {
	customMessage: String
}
type PaymentLinksResourceCompletionBehaviorRedirect {
	url: String!
}
type PaymentLinksResourceConsentCollection {
	termsOfService: String
	promotions: String
}
union PaymentLinksResourceConsentCollectionUnion = PaymentLinksResourceConsentCollection
type PaymentLinksResourceCustomText {
	submit: PaymentLinksResourceCustomTextPositionUnion
	shippingAddress: PaymentLinksResourceCustomTextPositionUnion
}
type PaymentLinksResourceCustomTextPosition {
	message: String!
}
union PaymentLinksResourceCustomTextPositionUnion = PaymentLinksResourceCustomTextPosition
type PaymentLinksResourceInvoiceCreation {
	invoiceData: PaymentLinksResourceInvoiceSettingsUnion
	enabled: Boolean!
}
union PaymentLinksResourceInvoiceCreationUnion = PaymentLinksResourceInvoiceCreation
type PaymentLinksResourceInvoiceSettings {
	renderingOptions: InvoiceSettingRenderingOptionsUnion
	metadata: PaymentLinksResourceInvoiceSettingsMetadata
	footer: String
	description: String
	customFields: [InvoiceSettingCustomField!]
	accountTaxIds: [DeletedTaxIdOrTaxIdUnion!]
}
type PaymentLinksResourceInvoiceSettingsMetadata {
}
union PaymentLinksResourceInvoiceSettingsUnion = PaymentLinksResourceInvoiceSettings
type PaymentLinksResourcePaymentIntentData {
	setupFutureUsage: String
	captureMethod: String
}
union PaymentLinksResourcePaymentIntentDataUnion = PaymentLinksResourcePaymentIntentData
type PaymentLinksResourcePhoneNumberCollection {
	enabled: Boolean!
}
type PaymentLinksResourceShippingAddressCollection {
	allowedCountries: [String!]!
}
union PaymentLinksResourceShippingAddressCollectionUnion = PaymentLinksResourceShippingAddressCollection
type PaymentLinksResourceShippingOption {
	shippingRate: ShippingRateUnion!
	shippingAmount: Int!
}
type PaymentLinksResourceSubscriptionData {
	trialPeriodDays: Int
	description: String
}
union PaymentLinksResourceSubscriptionDataUnion = PaymentLinksResourceSubscriptionData
type PaymentLinksResourceTaxIdCollection {
	enabled: Boolean!
}
type PaymentLinksResourceTransferData {
	destination: AccountUnion!
	amount: Int
}
union PaymentLinksResourceTransferDataUnion = PaymentLinksResourceTransferData
type PaymentMethod {
	wechatPay: PaymentMethodWechatPay!
	usBankAccount: PaymentMethodUsBankAccount!
	type: String!
	sofort: PaymentMethodSofort!
	sepaDebit: PaymentMethodSepaDebit!
	radarOptions: RadarRadarOptions!
	promptpay: PaymentMethodPromptpay!
	pix: PaymentMethodPix!
	paynow: PaymentMethodPaynow!
	p24: PaymentMethodP24!
	oxxo: PaymentMethodOxxo!
	object: String!
	metadata: PaymentMethodMetadata
	livemode: Boolean!
	link: PaymentMethodLink!
	konbini: PaymentMethodKonbini!
	klarna: PaymentMethodKlarna!
	interacPresent: PaymentMethodInteracPresent!
	ideal: PaymentMethodIdeal!
	id: String!
	grabpay: PaymentMethodGrabpay!
	giropay: PaymentMethodGiropay!
	fpx: PaymentMethodFpx!
	eps: PaymentMethodEps!
	customerBalance: PaymentMethodCustomerBalance!
	customer: CustomerUnion
	created: Int!
	cardPresent: PaymentMethodCardPresent!
	card: PaymentMethodCard!
	boleto: PaymentMethodBoleto!
	blik: PaymentMethodBlik!
	billingDetails: BillingDetails!
	bancontact: PaymentMethodBancontact!
	bacsDebit: PaymentMethodBacsDebit!
	auBecsDebit: PaymentMethodAuBecsDebit!
	alipay: PaymentFlowsPrivatePaymentMethodsAlipay!
	afterpayClearpay: PaymentMethodAfterpayClearpay!
	affirm: PaymentMethodAffirm!
	acssDebit: PaymentMethodAcssDebit!
}
type PaymentMethodAcssDebit {
	transitNumber: String
	last4: String
	institutionNumber: String
	fingerprint: String
	bankName: String
}
type PaymentMethodAffirm {
}
type PaymentMethodAfterpayClearpay {
}
type PaymentMethodAuBecsDebit {
	last4: String
	fingerprint: String
	bsbNumber: String
}
type PaymentMethodBacsDebit {
	sortCode: String
	last4: String
	fingerprint: String
}
type PaymentMethodBancontact {
}
type PaymentMethodBlik {
}
type PaymentMethodBoleto {
	taxId: String!
}
type PaymentMethodCard {
	wallet: PaymentMethodCardWalletUnion
	threeDSecureUsage: ThreeDSecureUsageUnion
	networks: NetworksUnion
	last4: String!
	generatedFrom: PaymentMethodCardGeneratedCardUnion
	funding: String!
	fingerprint: String
	expYear: Int!
	expMonth: Int!
	country: String
	checks: PaymentMethodCardChecksUnion
	brand: String!
}
type PaymentMethodCardChecks {
	cvcCheck: String
	addressPostalCodeCheck: String
	addressLine1Check: String
}
union PaymentMethodCardChecksUnion = PaymentMethodCardChecks
type PaymentMethodCardGeneratedCard {
	setupAttempt: SetupAttemptUnion
	paymentMethodDetails: CardGeneratedFromPaymentMethodDetailsUnion
	charge: String
}
union PaymentMethodCardGeneratedCardUnion = PaymentMethodCardGeneratedCard
type PaymentMethodCardPresent {
}
type PaymentMethodCardWallet {
	visaCheckout: PaymentMethodCardWalletVisaCheckout!
	type: String!
	samsungPay: PaymentMethodCardWalletSamsungPay!
	masterpass: PaymentMethodCardWalletMasterpass!
	googlePay: PaymentMethodCardWalletGooglePay!
	dynamicLast4: String
	applePay: PaymentMethodCardWalletApplePay!
	amexExpressCheckout: PaymentMethodCardWalletAmexExpressCheckout!
}
type PaymentMethodCardWalletAmexExpressCheckout {
}
type PaymentMethodCardWalletApplePay {
}
type PaymentMethodCardWalletGooglePay {
}
type PaymentMethodCardWalletMasterpass {
	shippingAddress: AddressUnion
	name: String
	email: String
	billingAddress: AddressUnion
}
type PaymentMethodCardWalletSamsungPay {
}
union PaymentMethodCardWalletUnion = PaymentMethodCardWallet
type PaymentMethodCardWalletVisaCheckout {
	shippingAddress: AddressUnion
	name: String
	email: String
	billingAddress: AddressUnion
}
type PaymentMethodCustomerBalance {
}
type PaymentMethodDetails {
	wechatPay: PaymentMethodDetailsWechatPay!
	wechat: PaymentMethodDetailsWechat!
	usBankAccount: PaymentMethodDetailsUsBankAccount!
	type: String!
	stripeAccount: PaymentMethodDetailsStripeAccount!
	sofort: PaymentMethodDetailsSofort!
	sepaDebit: PaymentMethodDetailsSepaDebit!
	promptpay: PaymentMethodDetailsPromptpay!
	pix: PaymentMethodDetailsPix!
	paynow: PaymentMethodDetailsPaynow!
	p24: PaymentMethodDetailsP24!
	oxxo: PaymentMethodDetailsOxxo!
	multibanco: PaymentMethodDetailsMultibanco!
	link: PaymentMethodDetailsLink!
	konbini: PaymentMethodDetailsKonbini!
	klarna: PaymentMethodDetailsKlarna!
	interacPresent: PaymentMethodDetailsInteracPresent!
	ideal: PaymentMethodDetailsIdeal!
	grabpay: PaymentMethodDetailsGrabpay!
	giropay: PaymentMethodDetailsGiropay!
	fpx: PaymentMethodDetailsFpx!
	eps: PaymentMethodDetailsEps!
	customerBalance: PaymentMethodDetailsCustomerBalance!
	cardPresent: PaymentMethodDetailsCardPresent!
	card: PaymentMethodDetailsCard!
	boleto: PaymentMethodDetailsBoleto!
	blik: PaymentMethodDetailsBlik!
	bancontact: PaymentMethodDetailsBancontact!
	bacsDebit: PaymentMethodDetailsBacsDebit!
	auBecsDebit: PaymentMethodDetailsAuBecsDebit!
	alipay: PaymentFlowsPrivatePaymentMethodsAlipayDetails!
	afterpayClearpay: PaymentMethodDetailsAfterpayClearpay!
	affirm: PaymentMethodDetailsAffirm!
	acssDebit: PaymentMethodDetailsAcssDebit!
	achDebit: PaymentMethodDetailsAchDebit!
	achCreditTransfer: PaymentMethodDetailsAchCreditTransfer!
}
type PaymentMethodDetailsAchCreditTransfer {
	swiftCode: String
	routingNumber: String
	bankName: String
	accountNumber: String
}
type PaymentMethodDetailsAchDebit {
	routingNumber: String
	last4: String
	fingerprint: String
	country: String
	bankName: String
	accountHolderType: String
}
type PaymentMethodDetailsAcssDebit {
	transitNumber: String
	mandate: String!
	last4: String
	institutionNumber: String
	fingerprint: String
	bankName: String
}
type PaymentMethodDetailsAffirm {
}
type PaymentMethodDetailsAfterpayClearpay {
	reference: String
}
type PaymentMethodDetailsAuBecsDebit {
	mandate: String!
	last4: String
	fingerprint: String
	bsbNumber: String
}
type PaymentMethodDetailsBacsDebit {
	sortCode: String
	mandate: String
	last4: String
	fingerprint: String
}
type PaymentMethodDetailsBancontact {
	verifiedName: String
	preferredLanguage: String
	ibanLast4: String
	generatedSepaDebitMandate: MandateUnion
	generatedSepaDebit: PaymentMethodUnion
	bic: String
	bankName: String
	bankCode: String
}
type PaymentMethodDetailsBlik {
}
type PaymentMethodDetailsBoleto {
	taxId: String!
}
type PaymentMethodDetailsCard {
	wallet: PaymentMethodDetailsCardWalletUnion
	threeDSecure: ThreeDSecureDetailsUnion
	network: String
	mandate: String
	last4: String
	installments: PaymentMethodDetailsCardInstallmentsUnion
	funding: String
	fingerprint: String
	expYear: Int!
	expMonth: Int!
	country: String
	checks: PaymentMethodDetailsCardChecksUnion
	brand: String
}
type PaymentMethodDetailsCardChecks {
	cvcCheck: String
	addressPostalCodeCheck: String
	addressLine1Check: String
}
union PaymentMethodDetailsCardChecksUnion = PaymentMethodDetailsCardChecks
type PaymentMethodDetailsCardInstallments {
	plan: PaymentMethodDetailsCardInstallmentsPlanUnion
}
type PaymentMethodDetailsCardInstallmentsPlan {
	type: String!
	interval: String
	count: Int
}
union PaymentMethodDetailsCardInstallmentsPlanUnion = PaymentMethodDetailsCardInstallmentsPlan
union PaymentMethodDetailsCardInstallmentsUnion = PaymentMethodDetailsCardInstallments
type PaymentMethodDetailsCardPresent {
	receipt: PaymentMethodDetailsCardPresentReceiptUnion
	readMethod: String
	overcaptureSupported: Boolean!
	network: String
	last4: String
	incrementalAuthorizationSupported: Boolean!
	generatedCard: String
	funding: String
	fingerprint: String
	expYear: Int!
	expMonth: Int!
	emvAuthData: String
	country: String
	cardholderName: String
	captureBefore: Int!
	brand: String
	amountAuthorized: Int
}
type PaymentMethodDetailsCardPresentReceipt {
	transactionStatusInformation: String
	terminalVerificationResults: String
	dedicatedFileName: String
	cardholderVerificationMethod: String
	authorizationResponseCode: String
	authorizationCode: String
	applicationPreferredName: String
	applicationCryptogram: String
	accountType: String!
}
union PaymentMethodDetailsCardPresentReceiptUnion = PaymentMethodDetailsCardPresentReceipt
type PaymentMethodDetailsCardWallet {
	visaCheckout: PaymentMethodDetailsCardWalletVisaCheckout!
	type: String!
	samsungPay: PaymentMethodDetailsCardWalletSamsungPay!
	masterpass: PaymentMethodDetailsCardWalletMasterpass!
	googlePay: PaymentMethodDetailsCardWalletGooglePay!
	dynamicLast4: String
	applePay: PaymentMethodDetailsCardWalletApplePay!
	amexExpressCheckout: PaymentMethodDetailsCardWalletAmexExpressCheckout!
}
type PaymentMethodDetailsCardWalletAmexExpressCheckout {
}
type PaymentMethodDetailsCardWalletApplePay {
}
type PaymentMethodDetailsCardWalletGooglePay {
}
type PaymentMethodDetailsCardWalletMasterpass {
	shippingAddress: AddressUnion
	name: String
	email: String
	billingAddress: AddressUnion
}
type PaymentMethodDetailsCardWalletSamsungPay {
}
union PaymentMethodDetailsCardWalletUnion = PaymentMethodDetailsCardWallet
type PaymentMethodDetailsCardWalletVisaCheckout {
	shippingAddress: AddressUnion
	name: String
	email: String
	billingAddress: AddressUnion
}
type PaymentMethodDetailsCustomerBalance {
}
type PaymentMethodDetailsEps {
	verifiedName: String
	bank: String
}
type PaymentMethodDetailsFpx {
	transactionId: String
	bank: String!
}
type PaymentMethodDetailsGiropay {
	verifiedName: String
	bic: String
	bankName: String
	bankCode: String
}
type PaymentMethodDetailsGrabpay {
	transactionId: String
}
type PaymentMethodDetailsIdeal {
	verifiedName: String
	ibanLast4: String
	generatedSepaDebitMandate: MandateUnion
	generatedSepaDebit: PaymentMethodUnion
	bic: String
	bank: String
}
type PaymentMethodDetailsInteracPresent {
	receipt: PaymentMethodDetailsInteracPresentReceiptUnion
	readMethod: String
	preferredLocales: [String!]
	network: String
	last4: String
	generatedCard: String
	funding: String
	fingerprint: String
	expYear: Int!
	expMonth: Int!
	emvAuthData: String
	country: String
	cardholderName: String
	brand: String
}
type PaymentMethodDetailsInteracPresentReceipt {
	transactionStatusInformation: String
	terminalVerificationResults: String
	dedicatedFileName: String
	cardholderVerificationMethod: String
	authorizationResponseCode: String
	authorizationCode: String
	applicationPreferredName: String
	applicationCryptogram: String
	accountType: String!
}
union PaymentMethodDetailsInteracPresentReceiptUnion = PaymentMethodDetailsInteracPresentReceipt
type PaymentMethodDetailsKlarna {
	preferredLocale: String
	paymentMethodCategory: String
}
type PaymentMethodDetailsKonbini {
	store: PaymentMethodDetailsKonbiniStoreUnion
}
type PaymentMethodDetailsKonbiniStore {
	chain: String
}
union PaymentMethodDetailsKonbiniStoreUnion = PaymentMethodDetailsKonbiniStore
type PaymentMethodDetailsLink {
}
type PaymentMethodDetailsMultibanco {
	reference: String
	entity: String
}
type PaymentMethodDetailsOxxo {
	number: String
}
type PaymentMethodDetailsP24 {
	verifiedName: String
	reference: String
	bank: String
}
type PaymentMethodDetailsPaynow {
	reference: String
}
type PaymentMethodDetailsPix {
	bankTransactionId: String
}
type PaymentMethodDetailsPromptpay {
	reference: String
}
type PaymentMethodDetailsSepaDebit {
	mandate: String
	last4: String
	fingerprint: String
	country: String
	branchCode: String
	bankCode: String
}
type PaymentMethodDetailsSofort {
	verifiedName: String
	preferredLanguage: String
	ibanLast4: String
	generatedSepaDebitMandate: MandateUnion
	generatedSepaDebit: PaymentMethodUnion
	country: String
	bic: String
	bankName: String
	bankCode: String
}
type PaymentMethodDetailsStripeAccount {
}
union PaymentMethodDetailsUnion = PaymentMethodDetails
type PaymentMethodDetailsUsBankAccount {
	routingNumber: String
	last4: String
	fingerprint: String
	bankName: String
	accountType: String
	accountHolderType: String
}
type PaymentMethodDetailsWechat {
}
type PaymentMethodDetailsWechatPay {
	transactionId: String
	fingerprint: String
}
type PaymentMethodEps {
	bank: String
}
type PaymentMethodFpx {
	bank: String!
}
type PaymentMethodGiropay {
}
type PaymentMethodGrabpay {
}
type PaymentMethodIdeal {
	bic: String
	bank: String
}
type PaymentMethodInteracPresent {
}
type PaymentMethodKlarna {
	dob: PaymentFlowsPrivatePaymentMethodsKlarnaDobUnion
}
type PaymentMethodKonbini {
}
type PaymentMethodLink {
	persistentToken: String!
	email: String
}
type PaymentMethodMetadata {
}
type PaymentMethodOptionsAffirm {
	setupFutureUsage: String!
	captureMethod: String!
}
type PaymentMethodOptionsAfterpayClearpay {
	setupFutureUsage: String!
	reference: String
	captureMethod: String!
}
type PaymentMethodOptionsAlipay {
	setupFutureUsage: String!
}
type PaymentMethodOptionsBacsDebit {
	setupFutureUsage: String!
}
type PaymentMethodOptionsBancontact {
	setupFutureUsage: String!
	preferredLanguage: String!
}
type PaymentMethodOptionsBoleto {
	setupFutureUsage: String!
	expiresAfterDays: Int!
}
type PaymentMethodOptionsCardInstallments {
	plan: PaymentMethodDetailsCardInstallmentsPlanUnion
	enabled: Boolean!
	availablePlans: [PaymentMethodDetailsCardInstallmentsPlan!]
}
union PaymentMethodOptionsCardInstallmentsUnion = PaymentMethodOptionsCardInstallments
type PaymentMethodOptionsCardMandateOptions {
	supportedTypes: [String!]
	startDate: Int!
	reference: String!
	intervalCount: Int
	interval: String!
	endDate: Int
	description: String
	amountType: String!
	amount: Int!
}
union PaymentMethodOptionsCardMandateOptionsUnion = PaymentMethodOptionsCardMandateOptions
type PaymentMethodOptionsCardPresent {
	requestIncrementalAuthorizationSupport: Boolean
	requestExtendedAuthorization: Boolean
}
type PaymentMethodOptionsCustomerBalance {
	setupFutureUsage: String!
	fundingType: String
	bankTransfer: PaymentMethodOptionsCustomerBalanceBankTransfer!
}
type PaymentMethodOptionsCustomerBalanceBankTransfer {
	type: String
	requestedAddressTypes: [String!]!
	euBankTransfer: PaymentMethodOptionsCustomerBalanceEuBankAccount!
}
type PaymentMethodOptionsCustomerBalanceEuBankAccount {
	country: String!
}
type PaymentMethodOptionsFpx {
	setupFutureUsage: String!
}
type PaymentMethodOptionsGiropay {
	setupFutureUsage: String!
}
type PaymentMethodOptionsGrabpay {
	setupFutureUsage: String!
}
type PaymentMethodOptionsIdeal {
	setupFutureUsage: String!
}
type PaymentMethodOptionsInteracPresent {
}
type PaymentMethodOptionsKlarna {
	setupFutureUsage: String!
	preferredLocale: String
	captureMethod: String!
}
type PaymentMethodOptionsKonbini {
	setupFutureUsage: String!
	productDescription: String
	expiresAt: Int
	expiresAfterDays: Int
	confirmationNumber: String
}
type PaymentMethodOptionsOxxo {
	setupFutureUsage: String!
	expiresAfterDays: Int!
}
type PaymentMethodOptionsP24 {
	setupFutureUsage: String!
}
type PaymentMethodOptionsPaynow {
	setupFutureUsage: String!
}
type PaymentMethodOptionsPix {
	setupFutureUsage: String!
	expiresAt: Int
	expiresAfterSeconds: Int
}
type PaymentMethodOptionsPromptpay {
	setupFutureUsage: String!
}
type PaymentMethodOptionsSofort {
	setupFutureUsage: String!
	preferredLanguage: String
}
type PaymentMethodOptionsWechatPay {
	setupFutureUsage: String!
	client: String
	appId: String
}
type PaymentMethodOxxo {
}
type PaymentMethodP24 {
	bank: String
}
type PaymentMethodPaynow {
}
type PaymentMethodPix {
}
type PaymentMethodPromptpay {
}
type PaymentMethodSepaDebit {
	last4: String
	generatedFrom: SepaDebitGeneratedFromUnion
	fingerprint: String
	country: String
	branchCode: String
	bankCode: String
}
type PaymentMethodSofort {
	country: String
}
union PaymentMethodUnion = PaymentMethod
type PaymentMethodUsBankAccount {
	routingNumber: String
	networks: UsBankAccountNetworksUnion
	last4: String
	fingerprint: String
	financialConnectionsAccount: String
	bankName: String
	accountType: String
	accountHolderType: String
}
type PaymentMethodWechatPay {
}
type PaymentPagesCheckoutSessionAfterExpiration {
	recovery: PaymentPagesCheckoutSessionAfterExpirationRecoveryUnion
}
type PaymentPagesCheckoutSessionAfterExpirationRecovery {
	url: String
	expiresAt: Int
	enabled: Boolean!
	allowPromotionCodes: Boolean!
}
union PaymentPagesCheckoutSessionAfterExpirationRecoveryUnion = PaymentPagesCheckoutSessionAfterExpirationRecovery
union PaymentPagesCheckoutSessionAfterExpirationUnion = PaymentPagesCheckoutSessionAfterExpiration
type PaymentPagesCheckoutSessionAutomaticTax {
	status: String
	enabled: Boolean!
}
type PaymentPagesCheckoutSessionConsent {
	termsOfService: String
	promotions: String
}
type PaymentPagesCheckoutSessionConsentCollection {
	termsOfService: String
	promotions: String
}
union PaymentPagesCheckoutSessionConsentCollectionUnion = PaymentPagesCheckoutSessionConsentCollection
union PaymentPagesCheckoutSessionConsentUnion = PaymentPagesCheckoutSessionConsent
type PaymentPagesCheckoutSessionCustomText {
	submit: PaymentPagesCheckoutSessionCustomTextPositionUnion
	shippingAddress: PaymentPagesCheckoutSessionCustomTextPositionUnion
}
type PaymentPagesCheckoutSessionCustomTextPosition {
	message: String!
}
union PaymentPagesCheckoutSessionCustomTextPositionUnion = PaymentPagesCheckoutSessionCustomTextPosition
type PaymentPagesCheckoutSessionCustomerDetails {
	taxIds: [PaymentPagesCheckoutSessionTaxId!]
	taxExempt: String
	phone: String
	name: String
	email: String
	address: AddressUnion
}
union PaymentPagesCheckoutSessionCustomerDetailsUnion = PaymentPagesCheckoutSessionCustomerDetails
type PaymentPagesCheckoutSessionInvoiceCreation {
	invoiceData: PaymentPagesCheckoutSessionInvoiceSettings!
	enabled: Boolean!
}
union PaymentPagesCheckoutSessionInvoiceCreationUnion = PaymentPagesCheckoutSessionInvoiceCreation
type PaymentPagesCheckoutSessionInvoiceSettings {
	renderingOptions: InvoiceSettingRenderingOptionsUnion
	metadata: PaymentPagesCheckoutSessionInvoiceSettingsMetadata
	footer: String
	description: String
	customFields: [InvoiceSettingCustomField!]
	accountTaxIds: [DeletedTaxIdOrTaxIdUnion!]
}
type PaymentPagesCheckoutSessionInvoiceSettingsMetadata {
}
type PaymentPagesCheckoutSessionPhoneNumberCollection {
	enabled: Boolean!
}
type PaymentPagesCheckoutSessionShippingAddressCollection {
	allowedCountries: [String!]!
}
union PaymentPagesCheckoutSessionShippingAddressCollectionUnion = PaymentPagesCheckoutSessionShippingAddressCollection
type PaymentPagesCheckoutSessionShippingCost {
	taxes: [LineItemsTaxAmount!]!
	shippingRate: ShippingRateUnion
	amountTotal: Int!
	amountTax: Int!
	amountSubtotal: Int!
}
union PaymentPagesCheckoutSessionShippingCostUnion = PaymentPagesCheckoutSessionShippingCost
type PaymentPagesCheckoutSessionShippingOption {
	shippingRate: ShippingRateUnion!
	shippingAmount: Int!
}
type PaymentPagesCheckoutSessionTaxId {
	value: String
	type: String!
}
type PaymentPagesCheckoutSessionTaxIdCollection {
	enabled: Boolean!
}
type PaymentPagesCheckoutSessionTotalDetails {
	breakdown: PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown!
	amountTax: Int!
	amountShipping: Int
	amountDiscount: Int!
}
type PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown {
	taxes: [LineItemsTaxAmount!]!
	discounts: [LineItemsDiscountAmount!]!
}
union PaymentPagesCheckoutSessionTotalDetailsUnion = PaymentPagesCheckoutSessionTotalDetails
type Payout {
	type: String!
	status: String!
	statementDescriptor: String
	sourceType: String!
	reversedBy: PayoutUnion
	originalPayout: PayoutUnion
	object: String!
	method: String!
	metadata: PayoutMetadata
	livemode: Boolean!
	id: String!
	failureMessage: String
	failureCode: String
	failureBalanceTransaction: BalanceTransactionUnion
	destination: DeletedCardOrDeletedBankAccountOrCardOrBankAccountUnion
	description: String
	currency: String!
	created: Int!
	balanceTransaction: BalanceTransactionUnion
	automatic: Boolean!
	arrivalDate: Int!
	amount: Int!
}
type PayoutMetadata {
}
union PayoutUnion = Payout
type Period {
	start: Int
	end: Int
}
type Person {
	verification: LegalEntityPersonVerification!
	ssnLast4Provided: Boolean!
	requirements: PersonRequirementsUnion
	relationship: PersonRelationship!
	registeredAddress: Address!
	politicalExposure: String!
	phone: String
	object: String!
	nationality: String
	metadata: PersonMetadata!
	maidenName: String
	lastNameKanji: String
	lastNameKana: String
	lastName: String
	idNumberSecondaryProvided: Boolean!
	idNumberProvided: Boolean!
	id: String!
	gender: String
	futureRequirements: PersonFutureRequirementsUnion
	fullNameAliases: [String!]!
	firstNameKanji: String
	firstNameKana: String
	firstName: String
	email: String
	dob: LegalEntityDob!
	created: Int!
	addressKanji: LegalEntityJapanAddressUnion
	addressKana: LegalEntityJapanAddressUnion
	address: Address!
	account: String!
}
type PersonFutureRequirements {
	pendingVerification: [String!]!
	pastDue: [String!]!
	eventuallyDue: [String!]!
	errors: [AccountRequirementsError!]!
	currentlyDue: [String!]!
	alternatives: [AccountRequirementsAlternative!]
}
union PersonFutureRequirementsUnion = PersonFutureRequirements
type PersonMetadata {
}
type PersonRelationship {
	title: String
	representative: Boolean
	percentOwnership: Float
	owner: Boolean
	executive: Boolean
	director: Boolean
}
type PersonRequirements {
	pendingVerification: [String!]!
	pastDue: [String!]!
	eventuallyDue: [String!]!
	errors: [AccountRequirementsError!]!
	currentlyDue: [String!]!
	alternatives: [AccountRequirementsAlternative!]
}
union PersonRequirementsUnion = PersonRequirements
type Plan {
	usageType: String!
	trialPeriodDays: Int
	transformUsage: TransformUsageUnion
	tiersMode: String
	tiers: [PlanTier!]!
	product: DeletedProductOrProductUnion
	object: String!
	nickname: String
	metadata: PlanMetadata
	livemode: Boolean!
	intervalCount: Int!
	interval: String!
	id: String!
	currency: String!
	created: Int!
	billingScheme: String!
	amountDecimal: String
	amount: Int
	aggregateUsage: String
	active: Boolean!
}
type PlanMetadata {
}
type PlanTier {
	upTo: Int
	unitAmountDecimal: String
	unitAmount: Int
	flatAmountDecimal: String
	flatAmount: Int
}
type PlatformTaxFee {
	type: String!
	sourceTransaction: String!
	object: String!
	id: String!
	account: String!
}
type PortalBusinessProfile {
	termsOfServiceUrl: String
	privacyPolicyUrl: String
	headline: String
}
type PortalCustomerUpdate {
	enabled: Boolean!
	allowedUpdates: [String!]!
}
type PortalFeatures {
	subscriptionUpdate: PortalSubscriptionUpdate!
	subscriptionPause: PortalSubscriptionPause!
	subscriptionCancel: PortalSubscriptionCancel!
	paymentMethodUpdate: PortalPaymentMethodUpdate!
	invoiceHistory: PortalInvoiceList!
	customerUpdate: PortalCustomerUpdate!
}
type PortalInvoiceList {
	enabled: Boolean!
}
type PortalLoginPage {
	url: String
	enabled: Boolean!
}
type PortalPaymentMethodUpdate {
	enabled: Boolean!
}
type PortalSubscriptionCancel {
	prorationBehavior: String!
	mode: String!
	enabled: Boolean!
	cancellationReason: PortalSubscriptionCancellationReason!
}
type PortalSubscriptionCancellationReason {
	options: [String!]!
	enabled: Boolean!
}
type PortalSubscriptionPause {
	enabled: Boolean!
}
type PortalSubscriptionUpdate {
	prorationBehavior: String!
	products: [PortalSubscriptionUpdateProduct!]
	enabled: Boolean!
	defaultAllowedUpdates: [String!]!
}
type PortalSubscriptionUpdateProduct {
	product: String!
	prices: [String!]!
}
type Price {
	unitAmountDecimal: String
	unitAmount: Int
	type: String!
	transformQuantity: TransformQuantityUnion
	tiersMode: String
	tiers: [PriceTier!]!
	taxBehavior: String
	recurring: RecurringUnion
	product: DeletedProductOrProductUnion!
	object: String!
	nickname: String
	metadata: PriceMetadata!
	lookupKey: String
	livemode: Boolean!
	id: String!
	customUnitAmount: CustomUnitAmountUnion
	currencyOptions: PriceCurrencyOptions!
	currency: String!
	created: Int!
	billingScheme: String!
	active: Boolean!
}
type PriceCurrencyOptions {
}
type PriceMetadata {
}
type PriceTier {
	upTo: Int
	unitAmountDecimal: String
	unitAmount: Int
	flatAmountDecimal: String
	flatAmount: Int
}
union PriceUnion = Price
type Product {
	url: String
	updated: Int!
	unitLabel: String
	taxCode: TaxCodeUnion
	statementDescriptor: String
	shippable: Boolean
	packageDimensions: PackageDimensionsUnion
	object: String!
	name: String!
	metadata: ProductMetadata!
	livemode: Boolean!
	images: [String!]!
	id: String!
	description: String
	defaultPrice: PriceUnion
	created: Int!
	active: Boolean!
}
type ProductMetadata {
}
type PromotionCode {
	timesRedeemed: Int!
	restrictions: PromotionCodesResourceRestrictions!
	object: String!
	metadata: PromotionCodeMetadata
	maxRedemptions: Int
	livemode: Boolean!
	id: String!
	expiresAt: Int
	customer: DeletedCustomerOrCustomerUnion
	created: Int!
	coupon: Coupon!
	code: String!
	active: Boolean!
}
type PromotionCodeMetadata {
}
union PromotionCodeUnion = PromotionCode
type PromotionCodesResourceRestrictions {
	minimumAmountCurrency: String
	minimumAmount: Int
	firstTimeTransaction: Boolean!
	currencyOptions: PromotionCodesResourceRestrictionsCurrencyOptions!
}
type PromotionCodesResourceRestrictionsCurrencyOptions {
}
type Query {
	getAccount: Account!
	getAccounts: GetAccounts!
	getAccountsAccount: Account!
	getAccountsAccountBankAccountsId: ExternalAccount!
	getAccountsAccountCapabilities: GetAccountsAccountCapabilities!
	getAccountsAccountCapabilitiesCapability: Capability!
	getAccountsAccountExternalAccounts: GetAccountsAccountExternalAccounts!
	getAccountsAccountExternalAccountsId: ExternalAccount!
	getAccountsAccountPeople: GetAccountsAccountPeople!
	getAccountsAccountPeoplePerson: Person!
	getAccountsAccountPersons: GetAccountsAccountPersons!
	getAccountsAccountPersonsPerson: Person!
	getApplePayDomains: GetApplePayDomains!
	getApplePayDomainsDomain: ApplePayDomain!
	getApplicationFees: GetApplicationFees!
	getApplicationFeesFeeRefundsId: FeeRefund!
	getApplicationFeesId: ApplicationFee!
	getApplicationFeesIdRefunds: GetApplicationFeesIdRefunds!
	getAppsSecrets: GetAppsSecrets!
	getAppsSecretsFind: AppsSecret!
	getBalance: Balance!
	getBalanceHistory: GetBalanceHistory!
	getBalanceHistoryId: BalanceTransaction!
	getBalanceTransactions: GetBalanceTransactions!
	getBalanceTransactionsId: BalanceTransaction!
	getBillingPortalConfigurations: GetBillingPortalConfigurations!
	getBillingPortalConfigurationsConfiguration: BillingPortalConfiguration!
	getCharges: GetCharges!
	getChargesSearch: GetChargesSearch!
	getChargesCharge: Charge!
	getChargesChargeDispute: Dispute!
	getChargesChargeRefunds: GetChargesChargeRefunds!
	getChargesChargeRefundsRefund: Refund!
	getCheckoutSessions: GetCheckoutSessions!
	getCheckoutSessionsSession: CheckoutSession!
	getCheckoutSessionsSessionLineItems: GetCheckoutSessionsSessionLineItems!
	getCountrySpecs: GetCountrySpecs!
	getCountrySpecsCountry: CountrySpec!
	getCoupons: GetCoupons!
	getCouponsCoupon: Coupon!
	getCreditNotes: GetCreditNotes!
	getCreditNotesPreview: CreditNote!
	getCreditNotesPreviewLines: GetCreditNotesPreviewLines!
	getCreditNotesCreditNoteLines: GetCreditNotesCreditNoteLines!
	getCreditNotesId: CreditNote!
	getCustomers: GetCustomers!
	getCustomersSearch: GetCustomersSearch!
	getCustomersCustomer: DeletedCustomerOrCustomerUnion!
	getCustomersCustomerBalanceTransactions: GetCustomersCustomerBalanceTransactions!
	getCustomersCustomerBalanceTransactionsTransaction: CustomerBalanceTransaction!
	getCustomersCustomerBankAccounts: GetCustomersCustomerBankAccounts!
	getCustomersCustomerBankAccountsId: BankAccount!
	getCustomersCustomerCards: GetCustomersCustomerCards!
	getCustomersCustomerCardsId: Card!
	getCustomersCustomerCashBalance: CashBalance!
	getCustomersCustomerCashBalanceTransactions: GetCustomersCustomerCashBalanceTransactions!
	getCustomersCustomerCashBalanceTransactionsTransaction: CustomerCashBalanceTransaction!
	getCustomersCustomerDiscount: Discount!
	getCustomersCustomerPaymentMethods: GetCustomersCustomerPaymentMethods!
	getCustomersCustomerPaymentMethodsPaymentMethod: PaymentMethod!
	getCustomersCustomerSources: GetCustomersCustomerSources!
	getCustomersCustomerSourcesId: PaymentSource!
	getCustomersCustomerSubscriptions: GetCustomersCustomerSubscriptions!
	getCustomersCustomerSubscriptionsSubscriptionExposedId: Subscription!
	getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount: Discount!
	getCustomersCustomerTaxIds: GetCustomersCustomerTaxIds!
	getCustomersCustomerTaxIdsId: TaxId!
	getDisputes: GetDisputes!
	getDisputesDispute: Dispute!
	getEvents: GetEvents!
	getEventsId: Event!
	getExchangeRates: GetExchangeRates!
	getExchangeRatesRateId: ExchangeRate!
	getFileLinks: GetFileLinks!
	getFileLinksLink: FileLink!
	getFiles: GetFiles!
	getFilesFile: File!
	getFinancialConnectionsAccounts: GetFinancialConnectionsAccounts!
	getFinancialConnectionsAccountsAccount: FinancialConnectionsAccount!
	getFinancialConnectionsAccountsAccountOwners: GetFinancialConnectionsAccountsAccountOwners!
	getFinancialConnectionsSessionsSession: FinancialConnectionsSession!
	getIdentityVerificationReports: GetIdentityVerificationReports!
	getIdentityVerificationReportsReport: IdentityVerificationReport!
	getIdentityVerificationSessions: GetIdentityVerificationSessions!
	getIdentityVerificationSessionsSession: IdentityVerificationSession!
	getInvoiceitems: GetInvoiceitems!
	getInvoiceitemsInvoiceitem: Invoiceitem!
	getInvoices: GetInvoices!
	getInvoicesSearch: GetInvoicesSearch!
	getInvoicesUpcoming: Invoice!
	getInvoicesUpcomingLines: GetInvoicesUpcomingLines!
	getInvoicesInvoice: Invoice!
	getInvoicesInvoiceLines: GetInvoicesInvoiceLines!
	getIssuingAuthorizations: GetIssuingAuthorizations!
	getIssuingAuthorizationsAuthorization: IssuingAuthorization!
	getIssuingCardholders: GetIssuingCardholders!
	getIssuingCardholdersCardholder: IssuingCardholder!
	getIssuingCards: GetIssuingCards!
	getIssuingCardsCard: IssuingCard!
	getIssuingDisputes: GetIssuingDisputes!
	getIssuingDisputesDispute: IssuingDispute!
	getIssuingSettlements: GetIssuingSettlements!
	getIssuingSettlementsSettlement: IssuingSettlement!
	getIssuingTransactions: GetIssuingTransactions!
	getIssuingTransactionsTransaction: IssuingTransaction!
	getLinkAccountSessionsSession: FinancialConnectionsSession!
	getLinkedAccounts: GetLinkedAccounts!
	getLinkedAccountsAccount: FinancialConnectionsAccount!
	getLinkedAccountsAccountOwners: GetLinkedAccountsAccountOwners!
	getMandatesMandate: Mandate!
	getPaymentIntents: GetPaymentIntents!
	getPaymentIntentsSearch: GetPaymentIntentsSearch!
	getPaymentIntentsIntent: PaymentIntent!
	getPaymentLinks: GetPaymentLinks!
	getPaymentLinksPaymentLink: PaymentLink!
	getPaymentLinksPaymentLinkLineItems: GetPaymentLinksPaymentLinkLineItems!
	getPaymentMethods: GetPaymentMethods!
	getPaymentMethodsPaymentMethod: PaymentMethod!
	getPayouts: GetPayouts!
	getPayoutsPayout: Payout!
	getPlans: GetPlans!
	getPlansPlan: Plan!
	getPrices: GetPrices!
	getPricesSearch: GetPricesSearch!
	getPricesPrice: Price!
	getProducts: GetProducts!
	getProductsSearch: GetProductsSearch!
	getProductsId: Product!
	getPromotionCodes: GetPromotionCodes!
	getPromotionCodesPromotionCode: PromotionCode!
	getQuotes: GetQuotes!
	getQuotesQuote: Quote!
	getQuotesQuoteComputedUpfrontLineItems: GetQuotesQuoteComputedUpfrontLineItems!
	getQuotesQuoteLineItems: GetQuotesQuoteLineItems!
	getQuotesQuotePdf: String!
	getRadarEarlyFraudWarnings: GetRadarEarlyFraudWarnings!
	getRadarEarlyFraudWarningsEarlyFraudWarning: RadarEarlyFraudWarning!
	getRadarValueListItems: GetRadarValueListItems!
	getRadarValueListItemsItem: RadarValueListItem!
	getRadarValueLists: GetRadarValueLists!
	getRadarValueListsValueList: RadarValueList!
	getRefunds: GetRefunds!
	getRefundsRefund: Refund!
	getReportingReportRuns: GetReportingReportRuns!
	getReportingReportRunsReportRun: ReportingReportRun!
	getReportingReportTypes: GetReportingReportTypes!
	getReportingReportTypesReportType: ReportingReportType!
	getReviews: GetReviews!
	getReviewsReview: Review!
	getSetupAttempts: GetSetupAttempts!
	getSetupIntents: GetSetupIntents!
	getSetupIntentsIntent: SetupIntent!
	getShippingRates: GetShippingRates!
	getShippingRatesShippingRateToken: ShippingRate!
	getSigmaScheduledQueryRuns: GetSigmaScheduledQueryRuns!
	getSigmaScheduledQueryRunsScheduledQueryRun: ScheduledQueryRun!
	getSourcesSource: Source!
	getSourcesSourceMandateNotificationsMandateNotification: SourceMandateNotification!
	getSourcesSourceSourceTransactions: GetSourcesSourceSourceTransactions!
	getSourcesSourceSourceTransactionsSourceTransaction: SourceTransaction!
	getSubscriptionItems: GetSubscriptionItems!
	getSubscriptionItemsItem: SubscriptionItem!
	getSubscriptionItemsSubscriptionItemUsageRecordSummaries: GetSubscriptionItemsSubscriptionItemUsageRecordSummaries!
	getSubscriptionSchedules: GetSubscriptionSchedules!
	getSubscriptionSchedulesSchedule: SubscriptionSchedule!
	getSubscriptions: GetSubscriptions!
	getSubscriptionsSearch: GetSubscriptionsSearch!
	getSubscriptionsSubscriptionExposedId: Subscription!
	getTaxCodes: GetTaxCodes!
	getTaxCodesId: TaxCode!
	getTaxRates: GetTaxRates!
	getTaxRatesTaxRate: TaxRate!
	getTerminalConfigurations: GetTerminalConfigurations!
	getTerminalConfigurationsConfiguration: DeletedTerminalConfigurationOrTerminalConfigurationUnion!
	getTerminalLocations: GetTerminalLocations!
	getTerminalLocationsLocation: DeletedTerminalLocationOrTerminalLocationUnion!
	getTerminalReaders: GetTerminalReaders!
	getTerminalReadersReader: DeletedTerminalReaderOrTerminalReaderUnion!
	getTestHelpersTestClocks: GetTestHelpersTestClocks!
	getTestHelpersTestClocksTestClock: TestHelpersTestClock!
	getTokensToken: Token!
	getTopups: GetTopups!
	getTopupsTopup: Topup!
	getTransfers: GetTransfers!
	getTransfersIdReversals: GetTransfersIdReversals!
	getTransfersTransfer: Transfer!
	getTransfersTransferReversalsId: TransferReversal!
	getTreasuryCreditReversals: GetTreasuryCreditReversals!
	getTreasuryCreditReversalsCreditReversal: TreasuryCreditReversal!
	getTreasuryDebitReversals: GetTreasuryDebitReversals!
	getTreasuryDebitReversalsDebitReversal: TreasuryDebitReversal!
	getTreasuryFinancialAccounts: GetTreasuryFinancialAccounts!
	getTreasuryFinancialAccountsFinancialAccount: TreasuryFinancialAccount!
	getTreasuryFinancialAccountsFinancialAccountFeatures: TreasuryFinancialAccountFeatures!
	getTreasuryInboundTransfers: GetTreasuryInboundTransfers!
	getTreasuryInboundTransfersId: TreasuryInboundTransfer!
	getTreasuryOutboundPayments: GetTreasuryOutboundPayments!
	getTreasuryOutboundPaymentsId: TreasuryOutboundPayment!
	getTreasuryOutboundTransfers: GetTreasuryOutboundTransfers!
	getTreasuryOutboundTransfersOutboundTransfer: TreasuryOutboundTransfer!
	getTreasuryReceivedCredits: GetTreasuryReceivedCredits!
	getTreasuryReceivedCreditsId: TreasuryReceivedCredit!
	getTreasuryReceivedDebits: GetTreasuryReceivedDebits!
	getTreasuryReceivedDebitsId: TreasuryReceivedDebit!
	getTreasuryTransactionEntries: GetTreasuryTransactionEntries!
	getTreasuryTransactionEntriesId: TreasuryTransactionEntry!
	getTreasuryTransactions: GetTreasuryTransactions!
	getTreasuryTransactionsId: TreasuryTransaction!
	getWebhookEndpoints: GetWebhookEndpoints!
	getWebhookEndpointsWebhookEndpoint: WebhookEndpoint!
}
type Quote {
	transferData: QuotesResourceTransferDataUnion
	totalDetails: QuotesResourceTotalDetails!
	testClock: TestHelpersTestClockUnion
	subscriptionSchedule: SubscriptionScheduleUnion
	subscriptionData: QuotesResourceSubscriptionDataSubscriptionData!
	subscription: SubscriptionUnion
	statusTransitions: QuotesResourceStatusTransitions!
	status: String!
	onBehalfOf: AccountUnion
	object: String!
	number: String
	metadata: QuoteMetadata!
	livemode: Boolean!
	lineItems: QuoteLineItems!
	invoiceSettings: InvoiceSettingQuoteSettingUnion
	invoice: DeletedInvoiceOrInvoiceUnion
	id: String!
	header: String
	fromQuote: QuotesResourceFromQuoteUnion
	footer: String
	expiresAt: Int!
	discounts: [DiscountUnion!]!
	description: String
	defaultTaxRates: [TaxRateUnion!]!
	customer: DeletedCustomerOrCustomerUnion
	currency: String
	created: Int!
	computed: QuotesResourceComputed!
	collectionMethod: String!
	automaticTax: QuotesResourceAutomaticTax!
	applicationFeePercent: Float
	applicationFeeAmount: Int
	application: DeletedApplicationOrApplicationUnion
	amountTotal: Int!
	amountSubtotal: Int!
}
type QuoteLineItems {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Item!]!
}
type QuoteMetadata {
}
union QuoteUnion = Quote
type QuotesResourceAutomaticTax {
	status: String
	enabled: Boolean!
}
type QuotesResourceComputed {
	upfront: QuotesResourceUpfront!
	recurring: QuotesResourceRecurringUnion
}
type QuotesResourceFromQuote {
	quote: QuoteUnion!
	isRevision: Boolean!
}
union QuotesResourceFromQuoteUnion = QuotesResourceFromQuote
type QuotesResourceRecurring {
	totalDetails: QuotesResourceTotalDetails!
	intervalCount: Int!
	interval: String!
	amountTotal: Int!
	amountSubtotal: Int!
}
union QuotesResourceRecurringUnion = QuotesResourceRecurring
type QuotesResourceStatusTransitions {
	finalizedAt: Int
	canceledAt: Int
	acceptedAt: Int
}
type QuotesResourceSubscriptionDataSubscriptionData {
	trialPeriodDays: Int
	effectiveDate: Int
	description: String
}
type QuotesResourceTotalDetails {
	breakdown: QuotesResourceTotalDetailsResourceBreakdown!
	amountTax: Int!
	amountShipping: Int
	amountDiscount: Int!
}
type QuotesResourceTotalDetailsResourceBreakdown {
	taxes: [LineItemsTaxAmount!]!
	discounts: [LineItemsDiscountAmount!]!
}
type QuotesResourceTransferData {
	destination: AccountUnion!
	amountPercent: Float
	amount: Int
}
union QuotesResourceTransferDataUnion = QuotesResourceTransferData
type QuotesResourceUpfront {
	totalDetails: QuotesResourceTotalDetails!
	lineItems: QuotesResourceUpfrontLineItems!
	amountTotal: Int!
	amountSubtotal: Int!
}
type QuotesResourceUpfrontLineItems {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [Item!]!
}
type RadarEarlyFraudWarning {
	paymentIntent: PaymentIntentUnion!
	object: String!
	livemode: Boolean!
	id: String!
	fraudType: String!
	created: Int!
	charge: ChargeUnion!
	actionable: Boolean!
}
type RadarRadarOptions {
	session: String!
}
type RadarReviewResourceLocation {
	region: String
	longitude: Float
	latitude: Float
	country: String
	city: String
}
union RadarReviewResourceLocationUnion = RadarReviewResourceLocation
type RadarReviewResourceSession {
	version: String
	platform: String
	device: String
	browser: String
}
union RadarReviewResourceSessionUnion = RadarReviewResourceSession
type RadarValueList {
	object: String!
	name: String!
	metadata: RadarValueListMetadata!
	livemode: Boolean!
	listItems: RadarValueListListItems!
	itemType: String!
	id: String!
	createdBy: String!
	created: Int!
	alias: String!
}
type RadarValueListItem {
	valueList: String!
	value: String!
	object: String!
	livemode: Boolean!
	id: String!
	createdBy: String!
	created: Int!
}
type RadarValueListListItems {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [RadarValueListItem!]!
}
type RadarValueListMetadata {
}
type ReceivedPaymentMethodDetailsFinancialAccount {
	network: String!
	id: String!
}
type Recurring {
	usageType: String!
	intervalCount: Int!
	interval: String!
	aggregateUsage: String
}
union RecurringUnion = Recurring
type Refund {
	transferReversal: TransferReversalUnion
	status: String
	sourceTransferReversal: TransferReversalUnion
	receiptNumber: String
	reason: String
	paymentIntent: PaymentIntentUnion
	object: String!
	nextAction: RefundNextAction!
	metadata: RefundMetadata
	instructionsEmail: String!
	id: String!
	failureReason: String!
	failureBalanceTransaction: BalanceTransactionUnion!
	description: String!
	currency: String!
	created: Int!
	charge: ChargeUnion
	balanceTransaction: BalanceTransactionUnion
	amount: Int!
}
type RefundMetadata {
}
type RefundNextAction {
	type: String!
	displayDetails: RefundNextActionDisplayDetailsUnion
}
type RefundNextActionDisplayDetails {
	expiresAt: Int!
	emailSent: EmailSent!
}
union RefundNextActionDisplayDetailsUnion = RefundNextActionDisplayDetails
union RefundUnion = Refund
type ReportingReportRun {
	succeededAt: Int
	status: String!
	result: FileUnion
	reportType: String!
	parameters: FinancialReportingFinanceReportRunRunParameters!
	object: String!
	livemode: Boolean!
	id: String!
	error: String
	created: Int!
}
type ReportingReportType {
	version: Int!
	updated: Int!
	object: String!
	name: String!
	livemode: Boolean!
	id: String!
	defaultColumns: [String!]
	dataAvailableStart: Int!
	dataAvailableEnd: Int!
}
type ReserveTransaction {
	object: String!
	id: String!
	description: String
	currency: String!
	amount: Int!
}
type Review {
	session: RadarReviewResourceSessionUnion
	reason: String!
	paymentIntent: PaymentIntentUnion!
	openedReason: String!
	open: Boolean!
	object: String!
	livemode: Boolean!
	ipAddressLocation: RadarReviewResourceLocationUnion
	ipAddress: String
	id: String!
	created: Int!
	closedReason: String
	charge: ChargeUnion
	billingZip: String
}
union ReviewUnion = Review
type Rule {
	predicate: String!
	id: String!
	action: String!
}
union RuleUnion = Rule
type ScheduledQueryRun {
	title: String!
	status: String!
	sql: String!
	resultAvailableUntil: Int!
	object: String!
	livemode: Boolean!
	id: String!
	file: FileUnion
	error: SigmaScheduledQueryRunError!
	dataLoadTime: Int!
	created: Int!
}
type SchedulesPhaseAutomaticTax {
	enabled: Boolean!
}
type SecretServiceResourceScope {
	user: String!
	type: String!
}
type SepaDebitGeneratedFrom {
	setupAttempt: SetupAttemptUnion
	charge: ChargeUnion
}
union SepaDebitGeneratedFromUnion = SepaDebitGeneratedFrom
type SetupAttempt {
	usage: String!
	status: String!
	setupIntent: SetupIntentUnion!
	setupError: ApiErrorsUnion
	paymentMethodDetails: SetupAttemptPaymentMethodDetails!
	paymentMethod: PaymentMethodUnion!
	onBehalfOf: AccountUnion
	object: String!
	livemode: Boolean!
	id: String!
	flowDirections: [String!]
	customer: DeletedCustomerOrCustomerUnion
	created: Int!
	attachToSelf: Boolean!
	application: ApplicationUnion
}
type SetupAttemptPaymentMethodDetails {
	usBankAccount: SetupAttemptPaymentMethodDetailsUsBankAccount!
	type: String!
	sofort: SetupAttemptPaymentMethodDetailsSofort!
	sepaDebit: SetupAttemptPaymentMethodDetailsSepaDebit!
	link: SetupAttemptPaymentMethodDetailsLink!
	klarna: SetupAttemptPaymentMethodDetailsKlarna!
	ideal: SetupAttemptPaymentMethodDetailsIdeal!
	cardPresent: SetupAttemptPaymentMethodDetailsCardPresent!
	card: SetupAttemptPaymentMethodDetailsCard!
	boleto: SetupAttemptPaymentMethodDetailsBoleto!
	blik: SetupAttemptPaymentMethodDetailsBlik!
	bancontact: SetupAttemptPaymentMethodDetailsBancontact!
	bacsDebit: SetupAttemptPaymentMethodDetailsBacsDebit!
	auBecsDebit: SetupAttemptPaymentMethodDetailsAuBecsDebit!
	acssDebit: SetupAttemptPaymentMethodDetailsAcssDebit!
}
type SetupAttemptPaymentMethodDetailsAcssDebit {
}
type SetupAttemptPaymentMethodDetailsAuBecsDebit {
}
type SetupAttemptPaymentMethodDetailsBacsDebit {
}
type SetupAttemptPaymentMethodDetailsBancontact {
	verifiedName: String
	preferredLanguage: String
	ibanLast4: String
	generatedSepaDebitMandate: MandateUnion
	generatedSepaDebit: PaymentMethodUnion
	bic: String
	bankName: String
	bankCode: String
}
type SetupAttemptPaymentMethodDetailsBlik {
}
type SetupAttemptPaymentMethodDetailsBoleto {
}
type SetupAttemptPaymentMethodDetailsCard {
	threeDSecure: ThreeDSecureDetailsUnion
}
type SetupAttemptPaymentMethodDetailsCardPresent {
	generatedCard: PaymentMethodUnion
}
type SetupAttemptPaymentMethodDetailsIdeal {
	verifiedName: String
	ibanLast4: String
	generatedSepaDebitMandate: MandateUnion
	generatedSepaDebit: PaymentMethodUnion
	bic: String
	bank: String
}
type SetupAttemptPaymentMethodDetailsKlarna {
}
type SetupAttemptPaymentMethodDetailsLink {
}
type SetupAttemptPaymentMethodDetailsSepaDebit {
}
type SetupAttemptPaymentMethodDetailsSofort {
	verifiedName: String
	preferredLanguage: String
	ibanLast4: String
	generatedSepaDebitMandate: MandateUnion
	generatedSepaDebit: PaymentMethodUnion
	bic: String
	bankName: String
	bankCode: String
}
type SetupAttemptPaymentMethodDetailsUsBankAccount {
}
union SetupAttemptUnion = SetupAttempt
type SetupIntent {
	usage: String!
	status: String!
	singleUseMandate: MandateUnion
	paymentMethodTypes: [String!]!
	paymentMethodOptions: SetupIntentPaymentMethodOptionsUnion
	paymentMethod: PaymentMethodUnion
	onBehalfOf: AccountUnion
	object: String!
	nextAction: SetupIntentNextActionUnion
	metadata: SetupIntentMetadata
	mandate: MandateUnion
	livemode: Boolean!
	latestAttempt: SetupAttemptUnion
	lastSetupError: ApiErrorsUnion
	id: String!
	flowDirections: [String!]
	description: String
	customer: DeletedCustomerOrCustomerUnion
	created: Int!
	clientSecret: String
	cancellationReason: String
	attachToSelf: Boolean!
	application: ApplicationUnion
}
type SetupIntentMetadata {
}
type SetupIntentNextAction {
	verifyWithMicrodeposits: SetupIntentNextActionVerifyWithMicrodeposits!
	useStripeSdk: SetupIntentNextActionUseStripeSdk!
	type: String!
	redirectToUrl: SetupIntentNextActionRedirectToUrl!
}
type SetupIntentNextActionRedirectToUrl {
	url: String
	returnUrl: String
}
union SetupIntentNextActionUnion = SetupIntentNextAction
type SetupIntentNextActionUseStripeSdk {
}
type SetupIntentNextActionVerifyWithMicrodeposits {
	microdepositType: String
	hostedVerificationUrl: String!
	arrivalDate: Int!
}
type SetupIntentPaymentMethodOptions {
	usBankAccount: SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsUsBankAccountUnion!
	sepaDebit: SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsSepaDebitUnion!
	link: SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsLinkUnion!
	card: SetupIntentPaymentMethodOptionsCard!
	blik: SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsBlikUnion!
	acssDebit: SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsAcssDebitUnion!
}
type SetupIntentPaymentMethodOptionsAcssDebit {
	verificationMethod: String!
	mandateOptions: SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit!
	currency: String
}
type SetupIntentPaymentMethodOptionsBlik {
	mandateOptions: SetupIntentPaymentMethodOptionsMandateOptionsBlik!
}
type SetupIntentPaymentMethodOptionsCard {
	requestThreeDSecure: String
	network: String
	mandateOptions: SetupIntentPaymentMethodOptionsCardMandateOptionsUnion
}
type SetupIntentPaymentMethodOptionsCardMandateOptions {
	supportedTypes: [String!]
	startDate: Int!
	reference: String!
	intervalCount: Int
	interval: String!
	endDate: Int
	description: String
	currency: String!
	amountType: String!
	amount: Int!
}
union SetupIntentPaymentMethodOptionsCardMandateOptionsUnion = SetupIntentPaymentMethodOptionsCardMandateOptions
type SetupIntentPaymentMethodOptionsLink {
	persistentToken: String
}
type SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit {
	transactionType: String
	paymentSchedule: String
	intervalDescription: String
	defaultFor: [String!]!
	customMandateUrl: String!
}
type SetupIntentPaymentMethodOptionsMandateOptionsBlik {
	type: String
	offSession: MandateOptionsOffSessionDetailsBlik!
	expiresAfter: Int
}
type SetupIntentPaymentMethodOptionsMandateOptionsSepaDebit {
}
type SetupIntentPaymentMethodOptionsSepaDebit {
	mandateOptions: SetupIntentPaymentMethodOptionsMandateOptionsSepaDebit!
}
union SetupIntentPaymentMethodOptionsUnion = SetupIntentPaymentMethodOptions
type SetupIntentPaymentMethodOptionsUsBankAccount {
	verificationMethod: String!
	financialConnections: LinkedAccountOptionsUsBankAccount!
}
type SetupIntentTypeSpecificPaymentMethodOptionsClient {
	verificationMethod: String!
}
union SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsAcssDebitUnion = SetupIntentTypeSpecificPaymentMethodOptionsClient | SetupIntentPaymentMethodOptionsAcssDebit
union SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsBlikUnion = SetupIntentTypeSpecificPaymentMethodOptionsClient | SetupIntentPaymentMethodOptionsBlik
union SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsLinkUnion = SetupIntentTypeSpecificPaymentMethodOptionsClient | SetupIntentPaymentMethodOptionsLink
union SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsSepaDebitUnion = SetupIntentTypeSpecificPaymentMethodOptionsClient | SetupIntentPaymentMethodOptionsSepaDebit
union SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsUsBankAccountUnion = SetupIntentTypeSpecificPaymentMethodOptionsClient | SetupIntentPaymentMethodOptionsUsBankAccount
union SetupIntentUnion = SetupIntent
type Shipping {
	trackingNumber: String
	phone: String
	name: String!
	carrier: String
	address: Address!
}
type ShippingRate {
	type: String!
	taxCode: TaxCodeUnion
	taxBehavior: String
	object: String!
	metadata: ShippingRateMetadata!
	livemode: Boolean!
	id: String!
	fixedAmount: ShippingRateFixedAmount!
	displayName: String
	deliveryEstimate: ShippingRateDeliveryEstimateUnion
	created: Int!
	active: Boolean!
}
type ShippingRateDeliveryEstimate {
	minimum: ShippingRateDeliveryEstimateBoundUnion
	maximum: ShippingRateDeliveryEstimateBoundUnion
}
type ShippingRateDeliveryEstimateBound {
	value: Int!
	unit: String!
}
union ShippingRateDeliveryEstimateBoundUnion = ShippingRateDeliveryEstimateBound
union ShippingRateDeliveryEstimateUnion = ShippingRateDeliveryEstimate
type ShippingRateFixedAmount {
	currencyOptions: ShippingRateFixedAmountCurrencyOptions!
	currency: String!
	amount: Int!
}
type ShippingRateFixedAmountCurrencyOptions {
}
type ShippingRateMetadata {
}
union ShippingRateUnion = ShippingRate
union ShippingUnion = Shipping
type SigmaScheduledQueryRunError {
	message: String!
}
type Source {
	wechat: SourceTypeWechat!
	usage: String
	type: String!
	threeDSecure: SourceTypeThreeDSecure!
	status: String!
	statementDescriptor: String
	sourceOrder: SourceOrder!
	sofort: SourceTypeSofort!
	sepaDebit: SourceTypeSepaDebit!
	redirect: SourceRedirectFlow!
	receiver: SourceReceiverFlow!
	p24: SourceTypeP24!
	owner: SourceOwnerUnion
	object: String!
	multibanco: SourceTypeMultibanco!
	metadata: SourceMetadata
	livemode: Boolean!
	klarna: SourceTypeKlarna!
	ideal: SourceTypeIdeal!
	id: String!
	giropay: SourceTypeGiropay!
	flow: String!
	eps: SourceTypeEps!
	customer: String!
	currency: String
	created: Int!
	codeVerification: SourceCodeVerificationFlow!
	clientSecret: String!
	cardPresent: SourceTypeCardPresent!
	card: SourceTypeCard!
	bancontact: SourceTypeBancontact!
	auBecsDebit: SourceTypeAuBecsDebit!
	amount: Int
	alipay: SourceTypeAlipay!
	acssDebit: SourceTypeAcssDebit!
	achDebit: SourceTypeAchDebit!
	achCreditTransfer: SourceTypeAchCreditTransfer!
}
type SourceCodeVerificationFlow {
	status: String!
	attemptsRemaining: Int!
}
type SourceMandateNotification {
	type: String!
	status: String!
	source: Source!
	sepaDebit: SourceMandateNotificationSepaDebitData!
	reason: String!
	object: String!
	livemode: Boolean!
	id: String!
	created: Int!
	bacsDebit: SourceMandateNotificationBacsDebitData!
	amount: Int
	acssDebit: SourceMandateNotificationAcssDebitData!
}
type SourceMandateNotificationAcssDebitData {
	statementDescriptor: String!
}
type SourceMandateNotificationBacsDebitData {
	last4: String!
}
type SourceMandateNotificationSepaDebitData {
	mandateReference: String!
	last4: String!
	creditorIdentifier: String!
}
type SourceMetadata {
}
union SourceOrCardOrBankAccountOrAccountUnion = Source | Card | BankAccount | Account
union SourceOrCardOrBankAccountUnion = Source | Card | BankAccount
type SourceOrder {
	shipping: Shipping!
	items: [SourceOrderItem!]
	email: String!
	currency: String!
	amount: Int!
}
type SourceOrderItem {
	type: String
	quantity: Int!
	parent: String
	description: String
	currency: String
	amount: Int
}
type SourceOwner {
	verifiedPhone: String
	verifiedName: String
	verifiedEmail: String
	verifiedAddress: AddressUnion
	phone: String
	name: String
	email: String
	address: AddressUnion
}
union SourceOwnerUnion = SourceOwner
type SourceReceiverFlow {
	refundAttributesStatus: String!
	refundAttributesMethod: String!
	amountReturned: Int!
	amountReceived: Int!
	amountCharged: Int!
	address: String
}
type SourceRedirectFlow {
	url: String!
	status: String!
	returnUrl: String!
	failureReason: String
}
type SourceTransaction {
	type: String!
	status: String!
	source: String!
	sepaCreditTransfer: SourceTransactionSepaCreditTransferData!
	paperCheck: SourceTransactionPaperCheckData!
	object: String!
	livemode: Boolean!
	id: String!
	gbpCreditTransfer: SourceTransactionGbpCreditTransferData!
	currency: String!
	created: Int!
	chfCreditTransfer: SourceTransactionChfCreditTransferData!
	amount: Int!
	achCreditTransfer: SourceTransactionAchCreditTransferData!
}
type SourceTransactionAchCreditTransferData {
	routingNumber: String!
	last4: String!
	fingerprint: String!
	customerData: String!
}
type SourceTransactionChfCreditTransferData {
	senderName: String!
	senderIban: String!
	senderAddressLine1: String!
	senderAddressCountry: String!
	reference: String!
}
type SourceTransactionGbpCreditTransferData {
	senderSortCode: String!
	senderName: String!
	senderAccountNumber: String!
	reference: String!
	last4: String!
	fundingMethod: String!
	fingerprint: String!
}
type SourceTransactionPaperCheckData {
	invoices: String!
	availableAt: String!
}
type SourceTransactionSepaCreditTransferData {
	senderName: String!
	senderIban: String!
	reference: String!
}
type SourceTypeAchCreditTransfer {
	swiftCode: String
	routingNumber: String
	refundRoutingNumber: String
	refundAccountHolderType: String
	refundAccountHolderName: String
	fingerprint: String
	bankName: String
	accountNumber: String
}
type SourceTypeAchDebit {
	type: String
	routingNumber: String
	last4: String
	fingerprint: String
	country: String
	bankName: String
}
type SourceTypeAcssDebit {
	routingNumber: String
	last4: String
	fingerprint: String
	country: String
	category: String
	bankName: String
	bankAddressPostalCode: String
	bankAddressLine2: String
	bankAddressLine1: String
	bankAddressCity: String
}
type SourceTypeAlipay {
	statementDescriptor: String
	nativeUrl: String
	dataString: String
}
type SourceTypeAuBecsDebit {
	last4: String
	fingerprint: String
	bsbNumber: String
}
type SourceTypeBancontact {
	statementDescriptor: String
	preferredLanguage: String
	ibanLast4: String
	bic: String
	bankName: String
	bankCode: String
}
type SourceTypeCard {
	tokenizationMethod: String
	threeDSecure: String!
	name: String
	last4: String
	funding: String
	fingerprint: String!
	expYear: Int
	expMonth: Int
	dynamicLast4: String
	cvcCheck: String
	country: String
	brand: String
	addressZipCheck: String
	addressLine1Check: String
}
type SourceTypeCardPresent {
	transactionStatusInformation: String!
	terminalVerificationResults: String!
	reader: String
	readMethod: String
	posEntryMode: String!
	posDeviceId: String
	last4: String
	funding: String
	fingerprint: String!
	expYear: Int
	expMonth: Int
	evidenceTransactionCertificate: String
	evidenceCustomerSignature: String
	emvAuthData: String!
	dedicatedFileName: String!
	dataType: String
	cvmType: String!
	country: String
	brand: String
	authorizationResponseCode: String!
	authorizationCode: String
	applicationPreferredName: String!
	applicationCryptogram: String!
}
type SourceTypeEps {
	statementDescriptor: String
	reference: String
}
type SourceTypeGiropay {
	statementDescriptor: String
	bic: String
	bankName: String
	bankCode: String
}
type SourceTypeIdeal {
	statementDescriptor: String
	ibanLast4: String
	bic: String
	bank: String
}
type SourceTypeKlarna {
	shippingLastName: String!
	shippingFirstName: String!
	shippingDelay: Int!
	redirectUrl: String!
	purchaseType: String!
	purchaseCountry: String!
	paymentMethodCategories: String!
	payOverTimeRedirectUrl: String!
	payOverTimeName: String!
	payOverTimeAssetUrlsStandard: String!
	payOverTimeAssetUrlsDescriptive: String!
	payNowRedirectUrl: String!
	payNowName: String!
	payNowAssetUrlsStandard: String!
	payNowAssetUrlsDescriptive: String!
	payLaterRedirectUrl: String!
	payLaterName: String!
	payLaterAssetUrlsStandard: String!
	payLaterAssetUrlsDescriptive: String!
	pageTitle: String!
	logoUrl: String!
	locale: String!
	lastName: String!
	firstName: String!
	clientToken: String
	backgroundImageUrl: String!
}
type SourceTypeMultibanco {
	refundIban: String
	refundAccountHolderName: String
	refundAccountHolderAddressState: String
	refundAccountHolderAddressPostalCode: String
	refundAccountHolderAddressLine2: String
	refundAccountHolderAddressLine1: String
	refundAccountHolderAddressCountry: String
	refundAccountHolderAddressCity: String
	reference: String
	entity: String
}
type SourceTypeP24 {
	reference: String
}
type SourceTypeSepaDebit {
	mandateUrl: String
	mandateReference: String
	last4: String
	fingerprint: String
	country: String
	branchCode: String
	bankCode: String
}
type SourceTypeSofort {
	statementDescriptor: String
	preferredLanguage: String
	ibanLast4: String
	country: String
	bic: String
	bankName: String
	bankCode: String
}
type SourceTypeThreeDSecure {
	tokenizationMethod: String
	threeDSecure: String!
	name: String
	last4: String
	funding: String
	fingerprint: String!
	expYear: Int
	expMonth: Int
	dynamicLast4: String
	cvcCheck: String
	customer: String
	country: String
	card: String
	brand: String
	authenticated: Boolean
	addressZipCheck: String
	addressLine1Check: String
}
type SourceTypeWechat {
	statementDescriptor: String!
	qrCodeUrl: String
	prepayId: String!
}
union SourceUnion = Source
type Subscription {
	trialStart: Int
	trialSettings: SubscriptionsTrialsResourceTrialSettingsUnion
	trialEnd: Int
	transferData: SubscriptionTransferDataUnion
	testClock: TestHelpersTestClockUnion
	status: String!
	startDate: Int!
	schedule: SubscriptionScheduleUnion
	pendingUpdate: SubscriptionsResourcePendingUpdateUnion
	pendingSetupIntent: SetupIntentUnion
	pendingInvoiceItemInterval: SubscriptionPendingInvoiceItemIntervalUnion
	paymentSettings: SubscriptionsResourcePaymentSettingsUnion
	pauseCollection: SubscriptionsResourcePauseCollectionUnion
	onBehalfOf: AccountUnion
	object: String!
	nextPendingInvoiceItemInvoice: Int
	metadata: SubscriptionMetadata!
	livemode: Boolean!
	latestInvoice: InvoiceUnion
	items: SubscriptionItems!
	id: String!
	endedAt: Int
	discount: DiscountUnion
	description: String
	defaultTaxRates: [TaxRate!]
	defaultSource: SourceOrCardOrBankAccountUnion
	defaultPaymentMethod: PaymentMethodUnion
	daysUntilDue: Int
	customer: DeletedCustomerOrCustomerUnion!
	currentPeriodStart: Int!
	currentPeriodEnd: Int!
	currency: String!
	created: Int!
	collectionMethod: String!
	canceledAt: Int
	cancelAtPeriodEnd: Boolean!
	cancelAt: Int
	billingThresholds: SubscriptionBillingThresholdsUnion
	billingCycleAnchor: Int!
	automaticTax: SubscriptionAutomaticTax!
	applicationFeePercent: Float
	application: DeletedApplicationOrApplicationUnion
}
type SubscriptionAutomaticTax {
	enabled: Boolean!
}
type SubscriptionBillingThresholds {
	resetBillingCycleAnchor: Boolean
	amountGte: Int
}
union SubscriptionBillingThresholdsUnion = SubscriptionBillingThresholds
type SubscriptionItem {
	taxRates: [TaxRate!]
	subscription: String!
	quantity: Int!
	price: Price!
	object: String!
	metadata: SubscriptionItemMetadata!
	id: String!
	created: Int!
	billingThresholds: SubscriptionItemBillingThresholdsUnion
}
type SubscriptionItemBillingThresholds {
	usageGte: Int
}
union SubscriptionItemBillingThresholdsUnion = SubscriptionItemBillingThresholds
type SubscriptionItemMetadata {
}
type SubscriptionItems {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [SubscriptionItem!]!
}
type SubscriptionMetadata {
}
type SubscriptionPaymentMethodOptionsCard {
	requestThreeDSecure: String
	network: String
	mandateOptions: InvoiceMandateOptionsCard!
}
union SubscriptionPaymentMethodOptionsCardUnion = SubscriptionPaymentMethodOptionsCard
type SubscriptionPendingInvoiceItemInterval {
	intervalCount: Int!
	interval: String!
}
union SubscriptionPendingInvoiceItemIntervalUnion = SubscriptionPendingInvoiceItemInterval
type SubscriptionSchedule {
	testClock: TestHelpersTestClockUnion
	subscription: SubscriptionUnion
	status: String!
	releasedSubscription: String
	releasedAt: Int
	phases: [SubscriptionSchedulePhaseConfiguration!]!
	object: String!
	metadata: SubscriptionScheduleMetadata
	livemode: Boolean!
	id: String!
	endBehavior: String!
	defaultSettings: SubscriptionSchedulesResourceDefaultSettings!
	customer: DeletedCustomerOrCustomerUnion!
	currentPhase: SubscriptionScheduleCurrentPhaseUnion
	created: Int!
	completedAt: Int
	canceledAt: Int
	application: DeletedApplicationOrApplicationUnion
}
type SubscriptionScheduleAddInvoiceItem {
	taxRates: [TaxRate!]
	quantity: Int
	price: DeletedPriceOrPriceUnion!
}
type SubscriptionScheduleConfigurationItem {
	taxRates: [TaxRate!]
	quantity: Int!
	price: DeletedPriceOrPriceUnion!
	metadata: SubscriptionScheduleConfigurationItemMetadata
	billingThresholds: SubscriptionItemBillingThresholdsUnion
}
type SubscriptionScheduleConfigurationItemMetadata {
}
type SubscriptionScheduleCurrentPhase {
	startDate: Int!
	endDate: Int!
}
union SubscriptionScheduleCurrentPhaseUnion = SubscriptionScheduleCurrentPhase
type SubscriptionScheduleMetadata {
}
type SubscriptionSchedulePhaseConfiguration {
	trialEnd: Int
	transferData: SubscriptionTransferDataUnion
	startDate: Int!
	prorationBehavior: String!
	onBehalfOf: AccountUnion
	metadata: SubscriptionSchedulePhaseConfigurationMetadata
	items: [SubscriptionScheduleConfigurationItem!]!
	invoiceSettings: InvoiceSettingSubscriptionScheduleSettingUnion
	endDate: Int!
	description: String
	defaultTaxRates: [TaxRate!]
	defaultPaymentMethod: PaymentMethodUnion
	currency: String!
	coupon: DeletedCouponOrCouponUnion
	collectionMethod: String
	billingThresholds: SubscriptionBillingThresholdsUnion
	billingCycleAnchor: String
	automaticTax: SchedulesPhaseAutomaticTax!
	applicationFeePercent: Float
	addInvoiceItems: [SubscriptionScheduleAddInvoiceItem!]!
}
type SubscriptionSchedulePhaseConfigurationMetadata {
}
union SubscriptionScheduleUnion = SubscriptionSchedule
type SubscriptionSchedulesResourceDefaultSettings {
	transferData: SubscriptionTransferDataUnion
	onBehalfOf: AccountUnion
	invoiceSettings: InvoiceSettingSubscriptionScheduleSettingUnion
	description: String
	defaultPaymentMethod: PaymentMethodUnion
	collectionMethod: String
	billingThresholds: SubscriptionBillingThresholdsUnion
	billingCycleAnchor: String!
	automaticTax: SubscriptionSchedulesResourceDefaultSettingsAutomaticTax!
	applicationFeePercent: Float
}
type SubscriptionSchedulesResourceDefaultSettingsAutomaticTax {
	enabled: Boolean!
}
type SubscriptionTransferData {
	destination: AccountUnion!
	amountPercent: Float
}
union SubscriptionTransferDataUnion = SubscriptionTransferData
union SubscriptionUnion = Subscription
type SubscriptionsResourcePauseCollection {
	resumesAt: Int
	behavior: String!
}
union SubscriptionsResourcePauseCollectionUnion = SubscriptionsResourcePauseCollection
type SubscriptionsResourcePaymentMethodOptions {
	usBankAccount: InvoicePaymentMethodOptionsUsBankAccountUnion
	konbini: InvoicePaymentMethodOptionsKonbiniUnion
	customerBalance: InvoicePaymentMethodOptionsCustomerBalanceUnion
	card: SubscriptionPaymentMethodOptionsCardUnion
	bancontact: InvoicePaymentMethodOptionsBancontactUnion
	acssDebit: InvoicePaymentMethodOptionsAcssDebitUnion
}
union SubscriptionsResourcePaymentMethodOptionsUnion = SubscriptionsResourcePaymentMethodOptions
type SubscriptionsResourcePaymentSettings {
	saveDefaultPaymentMethod: String
	paymentMethodTypes: [String!]
	paymentMethodOptions: SubscriptionsResourcePaymentMethodOptionsUnion
}
union SubscriptionsResourcePaymentSettingsUnion = SubscriptionsResourcePaymentSettings
type SubscriptionsResourcePendingUpdate {
	trialFromPlan: Boolean
	trialEnd: Int
	subscriptionItems: [SubscriptionItem!]
	expiresAt: Int!
	billingCycleAnchor: Int
}
union SubscriptionsResourcePendingUpdateUnion = SubscriptionsResourcePendingUpdate
type SubscriptionsTrialsResourceEndBehavior {
	missingPaymentMethod: String!
}
type SubscriptionsTrialsResourceTrialSettings {
	endBehavior: SubscriptionsTrialsResourceEndBehavior!
}
union SubscriptionsTrialsResourceTrialSettingsUnion = SubscriptionsTrialsResourceTrialSettings
type TaxCode {
	object: String!
	name: String!
	id: String!
	description: String!
}
union TaxCodeUnion = TaxCode
type TaxDeductedAtSource {
	taxDeductionAccountNumber: String!
	periodStart: Int!
	periodEnd: Int!
	object: String!
	id: String!
}
type TaxId {
	verification: TaxIdVerificationUnion
	value: String!
	type: String!
	object: String!
	livemode: Boolean!
	id: String!
	customer: CustomerUnion
	created: Int!
	country: String
}
type TaxIdVerification {
	verifiedName: String
	verifiedAddress: String
	status: String!
}
union TaxIdVerificationUnion = TaxIdVerification
type TaxRate {
	taxType: String
	state: String
	percentage: Float!
	object: String!
	metadata: TaxRateMetadata
	livemode: Boolean!
	jurisdiction: String
	inclusive: Boolean!
	id: String!
	displayName: String!
	description: String
	created: Int!
	country: String
	active: Boolean!
}
type TaxRateMetadata {
}
union TaxRateUnion = TaxRate
type TerminalConfiguration {
	verifoneP400: TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig!
	tipping: TerminalConfigurationConfigurationResourceTipping!
	object: String!
	livemode: Boolean!
	isAccountDefault: Boolean
	id: String!
	bbposWiseposE: TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig!
}
type TerminalConfigurationConfigurationResourceCurrencySpecificConfig {
	smartTipThreshold: Int!
	percentages: [Int!]
	fixedAmounts: [Int!]
}
type TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig {
	splashscreen: FileUnion!
}
type TerminalConfigurationConfigurationResourceTipping {
	usd: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	sgd: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	sek: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	nzd: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	nok: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	myr: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	hkd: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	gbp: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	eur: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	dkk: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	czk: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	chf: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	cad: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	aud: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
}
type TerminalLocation {
	object: String!
	metadata: TerminalLocationMetadata!
	livemode: Boolean!
	id: String!
	displayName: String!
	configurationOverrides: String!
	address: Address!
}
type TerminalLocationMetadata {
}
union TerminalLocationUnion = TerminalLocation
type TerminalReader {
	status: String
	serialNumber: String!
	object: String!
	metadata: TerminalReaderMetadata!
	location: TerminalLocationUnion
	livemode: Boolean!
	label: String!
	ipAddress: String
	id: String!
	deviceType: String!
	deviceSwVersion: String
	action: TerminalReaderReaderResourceReaderActionUnion
}
type TerminalReaderMetadata {
}
type TerminalReaderReaderResourceCart {
	total: Int!
	tax: Int
	lineItems: [TerminalReaderReaderResourceLineItem!]!
	currency: String!
}
union TerminalReaderReaderResourceCartUnion = TerminalReaderReaderResourceCart
type TerminalReaderReaderResourceLineItem {
	quantity: Int!
	description: String!
	amount: Int!
}
type TerminalReaderReaderResourceProcessConfig {
	tipping: TerminalReaderReaderResourceTippingConfig!
	skipTipping: Boolean!
}
type TerminalReaderReaderResourceProcessPaymentIntentAction {
	processConfig: TerminalReaderReaderResourceProcessConfig!
	paymentIntent: PaymentIntentUnion!
}
type TerminalReaderReaderResourceProcessSetupIntentAction {
	setupIntent: SetupIntentUnion!
	generatedCard: String!
}
type TerminalReaderReaderResourceReaderAction {
	type: String!
	status: String!
	setReaderDisplay: TerminalReaderReaderResourceSetReaderDisplayAction!
	processSetupIntent: TerminalReaderReaderResourceProcessSetupIntentAction!
	processPaymentIntent: TerminalReaderReaderResourceProcessPaymentIntentAction!
	failureMessage: String
	failureCode: String
}
union TerminalReaderReaderResourceReaderActionUnion = TerminalReaderReaderResourceReaderAction
type TerminalReaderReaderResourceSetReaderDisplayAction {
	type: String!
	cart: TerminalReaderReaderResourceCartUnion
}
type TerminalReaderReaderResourceTippingConfig {
	amountEligible: Int!
}
type TestHelpersTestClock {
	status: String!
	object: String!
	name: String
	livemode: Boolean!
	id: String!
	frozenTime: Int!
	deletesAfter: Int!
	created: Int!
}
union TestHelpersTestClockUnion = TestHelpersTestClock
type ThreeDSecureDetails {
	version: String
	resultReason: String
	result: String
	authenticationFlow: String
}
union ThreeDSecureDetailsUnion = ThreeDSecureDetails
type ThreeDSecureUsage {
	supported: Boolean!
}
union ThreeDSecureUsageUnion = ThreeDSecureUsage
type Token {
	used: Boolean!
	type: String!
	object: String!
	livemode: Boolean!
	id: String!
	created: Int!
	clientIp: String
	card: Card!
	bankAccount: BankAccount!
}
type Topup {
	transferGroup: String
	status: String!
	statementDescriptor: String
	source: SourceUnion
	object: String!
	metadata: TopupMetadata!
	livemode: Boolean!
	id: String!
	failureMessage: String
	failureCode: String
	expectedAvailabilityDate: Int
	description: String
	currency: String!
	created: Int!
	balanceTransaction: BalanceTransactionUnion
	amount: Int!
}
type TopupMetadata {
}
type Transfer {
	transferGroup: String
	sourceType: String!
	sourceTransaction: ChargeUnion
	reversed: Boolean!
	reversals: TransferReversals!
	object: String!
	metadata: TransferMetadata!
	livemode: Boolean!
	id: String!
	destinationPayment: ChargeUnion!
	destination: AccountUnion
	description: String
	currency: String!
	created: Int!
	balanceTransaction: BalanceTransactionUnion
	amountReversed: Int!
	amount: Int!
}
type TransferData {
	destination: AccountUnion!
	amount: Int!
}
union TransferDataUnion = TransferData
type TransferMetadata {
}
type TransferReversal {
	transfer: TransferUnion!
	sourceRefund: RefundUnion
	object: String!
	metadata: TransferReversalMetadata
	id: String!
	destinationPaymentRefund: RefundUnion
	currency: String!
	created: Int!
	balanceTransaction: BalanceTransactionUnion
	amount: Int!
}
type TransferReversalMetadata {
}
union TransferReversalOrTransferOrTopupOrTaxDeductedAtSourceOrReserveTransactionOrRefundOrPlatformTaxFeeOrPayoutOrIssuingTransactionOrIssuingDisputeOrIssuingAuthorizationOrFeeRefundOrDisputeOrConnectCollectionTransferOrChargeOrApplicationFeeUnion = TransferReversal | Transfer | Topup | TaxDeductedAtSource | ReserveTransaction | Refund | PlatformTaxFee | Payout | IssuingTransaction | IssuingDispute | IssuingAuthorization | FeeRefund | Dispute | ConnectCollectionTransfer | Charge | ApplicationFee
union TransferReversalUnion = TransferReversal
type TransferReversals {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [TransferReversal!]!
}
type TransferSchedule {
	weeklyAnchor: String!
	monthlyAnchor: Int!
	interval: String!
	delayDays: Int!
}
union TransferUnion = Transfer
type TransformQuantity {
	round: String!
	divideBy: Int!
}
union TransformQuantityUnion = TransformQuantity
type TransformUsage {
	round: String!
	divideBy: Int!
}
union TransformUsageUnion = TransformUsage
type TreasuryCreditReversal {
	transaction: TreasuryTransactionUnion
	statusTransitions: TreasuryReceivedCreditsResourceStatusTransitions!
	status: String!
	receivedCredit: String!
	object: String!
	network: String!
	metadata: TreasuryCreditReversalMetadata!
	livemode: Boolean!
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String!
	currency: String!
	created: Int!
	amount: Int!
}
type TreasuryCreditReversalMetadata {
}
type TreasuryDebitReversal {
	transaction: TreasuryTransactionUnion
	statusTransitions: TreasuryReceivedDebitsResourceStatusTransitions!
	status: String!
	receivedDebit: String!
	object: String!
	network: String!
	metadata: TreasuryDebitReversalMetadata!
	livemode: Boolean!
	linkedFlows: TreasuryReceivedDebitsResourceDebitReversalLinkedFlowsUnion
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String
	currency: String!
	created: Int!
	amount: Int!
}
type TreasuryDebitReversalMetadata {
}
type TreasuryFinancialAccount {
	supportedCurrencies: [String!]!
	statusDetails: TreasuryFinancialAccountsResourceStatusDetails!
	status: String!
	restrictedFeatures: [String!]!
	platformRestrictions: TreasuryFinancialAccountsResourcePlatformRestrictionsUnion
	pendingFeatures: [String!]!
	object: String!
	metadata: TreasuryFinancialAccountMetadata
	livemode: Boolean!
	id: String!
	financialAddresses: [TreasuryFinancialAccountsResourceFinancialAddress!]!
	features: TreasuryFinancialAccountFeatures!
	created: Int!
	country: String!
	balance: TreasuryFinancialAccountsResourceBalance!
	activeFeatures: [String!]!
}
type TreasuryFinancialAccountFeatures {
	outboundTransfers: TreasuryFinancialAccountsResourceOutboundTransfers!
	outboundPayments: TreasuryFinancialAccountsResourceOutboundPayments!
	object: String!
	intraStripeFlows: TreasuryFinancialAccountsResourceToggleSettings!
	inboundTransfers: TreasuryFinancialAccountsResourceInboundTransfers!
	financialAddresses: TreasuryFinancialAccountsResourceFinancialAddressesFeatures!
	depositInsurance: TreasuryFinancialAccountsResourceToggleSettings!
	cardIssuing: TreasuryFinancialAccountsResourceToggleSettings!
}
type TreasuryFinancialAccountMetadata {
}
type TreasuryFinancialAccountsResourceAbaRecord {
	routingNumber: String!
	bankName: String!
	accountNumberLast4: String!
	accountNumber: String
	accountHolderName: String!
}
type TreasuryFinancialAccountsResourceAchToggleSettings {
	statusDetails: [TreasuryFinancialAccountsResourceTogglesSettingStatusDetails!]!
	status: String!
	requested: Boolean!
}
type TreasuryFinancialAccountsResourceBalance {
	outboundPending: TreasuryFinancialAccountsResourceBalanceOutboundPending!
	inboundPending: TreasuryFinancialAccountsResourceBalanceInboundPending!
	cash: TreasuryFinancialAccountsResourceBalanceCash!
}
type TreasuryFinancialAccountsResourceBalanceCash {
}
type TreasuryFinancialAccountsResourceBalanceInboundPending {
}
type TreasuryFinancialAccountsResourceBalanceOutboundPending {
}
type TreasuryFinancialAccountsResourceClosedStatusDetails {
	reasons: [String!]!
}
union TreasuryFinancialAccountsResourceClosedStatusDetailsUnion = TreasuryFinancialAccountsResourceClosedStatusDetails
type TreasuryFinancialAccountsResourceFinancialAddress {
	type: String!
	supportedNetworks: [String!]!
	aba: TreasuryFinancialAccountsResourceAbaRecord!
}
type TreasuryFinancialAccountsResourceFinancialAddressesFeatures {
	aba: TreasuryFinancialAccountsResourceToggleSettings!
}
type TreasuryFinancialAccountsResourceInboundTransfers {
	ach: TreasuryFinancialAccountsResourceAchToggleSettings!
}
type TreasuryFinancialAccountsResourceOutboundPayments {
	usDomesticWire: TreasuryFinancialAccountsResourceToggleSettings!
	ach: TreasuryFinancialAccountsResourceAchToggleSettings!
}
type TreasuryFinancialAccountsResourceOutboundTransfers {
	usDomesticWire: TreasuryFinancialAccountsResourceToggleSettings!
	ach: TreasuryFinancialAccountsResourceAchToggleSettings!
}
type TreasuryFinancialAccountsResourcePlatformRestrictions {
	outboundFlows: String
	inboundFlows: String
}
union TreasuryFinancialAccountsResourcePlatformRestrictionsUnion = TreasuryFinancialAccountsResourcePlatformRestrictions
type TreasuryFinancialAccountsResourceStatusDetails {
	closed: TreasuryFinancialAccountsResourceClosedStatusDetailsUnion
}
type TreasuryFinancialAccountsResourceToggleSettings {
	statusDetails: [TreasuryFinancialAccountsResourceTogglesSettingStatusDetails!]!
	status: String!
	requested: Boolean!
}
type TreasuryFinancialAccountsResourceTogglesSettingStatusDetails {
	restriction: String!
	resolution: String
	code: String!
}
type TreasuryInboundTransfer {
	transaction: TreasuryTransactionUnion
	statusTransitions: TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions!
	status: String!
	statementDescriptor: String!
	returned: Boolean
	originPaymentMethodDetails: InboundTransfersUnion
	originPaymentMethod: String!
	object: String!
	metadata: TreasuryInboundTransferMetadata!
	livemode: Boolean!
	linkedFlows: TreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows!
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String!
	failureDetails: TreasuryInboundTransfersResourceFailureDetailsUnion
	description: String
	currency: String!
	created: Int!
	cancelable: Boolean!
	amount: Int!
}
type TreasuryInboundTransferMetadata {
}
type TreasuryInboundTransfersResourceFailureDetails {
	code: String!
}
union TreasuryInboundTransfersResourceFailureDetailsUnion = TreasuryInboundTransfersResourceFailureDetails
type TreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows {
	receivedDebit: String
}
type TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions {
	succeededAt: Int
	failedAt: Int
	canceledAt: Int
}
type TreasuryOutboundPayment {
	transaction: TreasuryTransactionUnion!
	statusTransitions: TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions!
	status: String!
	statementDescriptor: String!
	returnedDetails: TreasuryOutboundPaymentsResourceReturnedStatusUnion
	object: String!
	metadata: TreasuryOutboundPaymentMetadata!
	livemode: Boolean!
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String!
	expectedArrivalDate: Int!
	endUserDetails: TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetailsUnion
	destinationPaymentMethodDetails: OutboundPaymentsPaymentMethodDetailsUnion
	destinationPaymentMethod: String
	description: String
	customer: String
	currency: String!
	created: Int!
	cancelable: Boolean!
	amount: Int!
}
type TreasuryOutboundPaymentMetadata {
}
type TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetails {
	present: Boolean!
	ipAddress: String
}
union TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetailsUnion = TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetails
type TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions {
	returnedAt: Int
	postedAt: Int
	failedAt: Int
	canceledAt: Int
}
type TreasuryOutboundPaymentsResourceReturnedStatus {
	transaction: TreasuryTransactionUnion!
	code: String!
}
union TreasuryOutboundPaymentsResourceReturnedStatusUnion = TreasuryOutboundPaymentsResourceReturnedStatus
type TreasuryOutboundTransfer {
	transaction: TreasuryTransactionUnion!
	statusTransitions: TreasuryOutboundTransfersResourceStatusTransitions!
	status: String!
	statementDescriptor: String!
	returnedDetails: TreasuryOutboundTransfersResourceReturnedDetailsUnion
	object: String!
	metadata: TreasuryOutboundTransferMetadata!
	livemode: Boolean!
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String!
	expectedArrivalDate: Int!
	destinationPaymentMethodDetails: OutboundTransfersPaymentMethodDetails!
	destinationPaymentMethod: String
	description: String
	currency: String!
	created: Int!
	cancelable: Boolean!
	amount: Int!
}
type TreasuryOutboundTransferMetadata {
}
type TreasuryOutboundTransfersResourceReturnedDetails {
	transaction: TreasuryTransactionUnion!
	code: String!
}
union TreasuryOutboundTransfersResourceReturnedDetailsUnion = TreasuryOutboundTransfersResourceReturnedDetails
type TreasuryOutboundTransfersResourceStatusTransitions {
	returnedAt: Int
	postedAt: Int
	failedAt: Int
	canceledAt: Int
}
type TreasuryReceivedCredit {
	transaction: TreasuryTransactionUnion
	status: String!
	reversalDetails: TreasuryReceivedCreditsResourceReversalDetailsUnion
	object: String!
	network: String!
	livemode: Boolean!
	linkedFlows: TreasuryReceivedCreditsResourceLinkedFlows!
	initiatingPaymentMethodDetails: TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails!
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String
	failureCode: String
	description: String!
	currency: String!
	created: Int!
	amount: Int!
}
type TreasuryReceivedCreditsResourceLinkedFlows {
	sourceFlowType: String
	sourceFlowDetails: TreasuryReceivedCreditsResourceSourceFlowsDetailsUnion
	sourceFlow: String
	issuingTransaction: String
	issuingAuthorization: String
	creditReversal: String
}
type TreasuryReceivedCreditsResourceReversalDetails {
	restrictedReason: String
	deadline: Int
}
union TreasuryReceivedCreditsResourceReversalDetailsUnion = TreasuryReceivedCreditsResourceReversalDetails
type TreasuryReceivedCreditsResourceSourceFlowsDetails {
	type: String!
	payout: Payout!
	outboundPayment: TreasuryOutboundPayment!
	creditReversal: TreasuryCreditReversal!
}
union TreasuryReceivedCreditsResourceSourceFlowsDetailsUnion = TreasuryReceivedCreditsResourceSourceFlowsDetails
type TreasuryReceivedCreditsResourceStatusTransitions {
	postedAt: Int
}
type TreasuryReceivedDebit {
	transaction: TreasuryTransactionUnion
	status: String!
	reversalDetails: TreasuryReceivedDebitsResourceReversalDetailsUnion
	object: String!
	network: String!
	livemode: Boolean!
	linkedFlows: TreasuryReceivedDebitsResourceLinkedFlows!
	initiatingPaymentMethodDetails: TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails!
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String
	failureCode: String
	description: String!
	currency: String!
	created: Int!
	amount: Int!
}
type TreasuryReceivedDebitsResourceDebitReversalLinkedFlows {
	issuingDispute: String
}
union TreasuryReceivedDebitsResourceDebitReversalLinkedFlowsUnion = TreasuryReceivedDebitsResourceDebitReversalLinkedFlows
type TreasuryReceivedDebitsResourceLinkedFlows {
	issuingTransaction: String
	issuingAuthorization: String
	inboundTransfer: String
	debitReversal: String
}
type TreasuryReceivedDebitsResourceReversalDetails {
	restrictedReason: String
	deadline: Int
}
union TreasuryReceivedDebitsResourceReversalDetailsUnion = TreasuryReceivedDebitsResourceReversalDetails
type TreasuryReceivedDebitsResourceStatusTransitions {
	completedAt: Int
}
type TreasurySharedResourceBillingDetails {
	name: String
	email: String
	address: Address!
}
type TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails {
	usBankAccount: TreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccount!
	type: String!
	issuingCard: String!
	financialAccount: ReceivedPaymentMethodDetailsFinancialAccount!
	billingDetails: TreasurySharedResourceBillingDetails!
	balance: String!
}
type TreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccount {
	routingNumber: String
	last4: String
	bankName: String
}
type TreasuryTransaction {
	statusTransitions: TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions!
	status: String!
	object: String!
	livemode: Boolean!
	id: String!
	flowType: String!
	flowDetails: TreasuryTransactionsResourceFlowDetailsUnion
	flow: String
	financialAccount: String!
	entries: TreasuryTransactionEntries
	description: String!
	currency: String!
	created: Int!
	balanceImpact: TreasuryTransactionsResourceBalanceImpact!
	amount: Int!
}
type TreasuryTransactionEntries {
	url: String!
	object: String!
	hasMore: Boolean!
	data: [TreasuryTransactionEntry!]!
}
type TreasuryTransactionEntry {
	type: String!
	transaction: TreasuryTransactionUnion!
	object: String!
	livemode: Boolean!
	id: String!
	flowType: String!
	flowDetails: TreasuryTransactionsResourceFlowDetailsUnion
	flow: String
	financialAccount: String!
	effectiveAt: Int!
	currency: String!
	created: Int!
	balanceImpact: TreasuryTransactionsResourceBalanceImpact!
}
union TreasuryTransactionUnion = TreasuryTransaction
type TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions {
	voidAt: Int
	postedAt: Int
}
type TreasuryTransactionsResourceBalanceImpact {
	outboundPending: Int!
	inboundPending: Int!
	cash: Int!
}
type TreasuryTransactionsResourceFlowDetails {
	type: String!
	receivedDebit: TreasuryReceivedDebit!
	receivedCredit: TreasuryReceivedCredit!
	outboundTransfer: TreasuryOutboundTransfer!
	outboundPayment: TreasuryOutboundPayment!
	issuingAuthorization: IssuingAuthorization!
	inboundTransfer: TreasuryInboundTransfer!
	debitReversal: TreasuryDebitReversal!
	creditReversal: TreasuryCreditReversal!
}
union TreasuryTransactionsResourceFlowDetailsUnion = TreasuryTransactionsResourceFlowDetails
type UsBankAccountNetworks {
	supported: [String!]!
	preferred: String
}
union UsBankAccountNetworksUnion = UsBankAccountNetworks
type UsageRecordSummary {
	totalUsage: Int!
	subscriptionItem: String!
	period: Period!
	object: String!
	livemode: Boolean!
	invoice: String
	id: String!
}
type VerificationSessionRedaction {
	status: String!
}
union VerificationSessionRedactionUnion = VerificationSessionRedaction
type WebhookEndpoint {
	url: String!
	status: String!
	secret: String!
	object: String!
	metadata: WebhookEndpointMetadata!
	livemode: Boolean!
	id: String!
	enabledEvents: [String!]!
	description: String
	created: Int!
	application: String
	apiVersion: String
}
type WebhookEndpointMetadata {
}
schema {
	query: Query
}


---
source: common/parser-openapi/src/lib.rs
expression: registry.export_sdl(false)
---
type Account {
	type: AccountType!
	tosAcceptance: AccountTosAcceptance!
	settings: AccountSettingsUnion
	requirements: AccountRequirements!
	payoutsEnabled: Boolean!
	object: AccountObject!
	metadata: JSON!
	individual: Person!
	id: String!
	futureRequirements: AccountFutureRequirements!
	externalAccounts: AccountExternalAccounts!
	email: String
	detailsSubmitted: Boolean!
	defaultCurrency: String!
	created: Int!
	country: String!
	controller: AccountUnificationAccountController!
	company: LegalEntityCompany!
	chargesEnabled: Boolean!
	capabilities: AccountCapabilities!
	businessType: AccountBusinessType
	businessProfile: AccountBusinessProfileUnion
}
type AccountBacsDebitPaymentsSettings {
	displayName: String!
}
type AccountBrandingSettings {
	secondaryColor: String
	primaryColor: String
	logo: FileUnion
	icon: FileUnion
}
type AccountBusinessProfile {
	url: String
	supportUrl: String
	supportPhone: String
	supportEmail: String
	supportAddress: AddressUnion
	productDescription: String
	name: String
	mcc: String
}
union AccountBusinessProfileUnion = AccountBusinessProfile
enum AccountBusinessType {
	COMPANY
	GOVERNMENT_ENTITY
	INDIVIDUAL
	NON_PROFIT
}
type AccountCapabilities {
	usBankAccountAchPayments: AccountCapabilitiesUsBankAccountAchPayments!
	treasury: AccountCapabilitiesTreasury!
	transfers: AccountCapabilitiesTransfers!
	taxReportingUs1099Misc: AccountCapabilitiesTaxReportingUs1099Misc!
	taxReportingUs1099K: AccountCapabilitiesTaxReportingUs1099K!
	sofortPayments: AccountCapabilitiesSofortPayments!
	sepaDebitPayments: AccountCapabilitiesSepaDebitPayments!
	promptpayPayments: AccountCapabilitiesPromptpayPayments!
	paynowPayments: AccountCapabilitiesPaynowPayments!
	p24Payments: AccountCapabilitiesP24Payments!
	oxxoPayments: AccountCapabilitiesOxxoPayments!
	linkPayments: AccountCapabilitiesLinkPayments!
	legacyPayments: AccountCapabilitiesLegacyPayments!
	konbiniPayments: AccountCapabilitiesKonbiniPayments!
	klarnaPayments: AccountCapabilitiesKlarnaPayments!
	jcbPayments: AccountCapabilitiesJcbPayments!
	indiaInternationalPayments: AccountCapabilitiesIndiaInternationalPayments!
	idealPayments: AccountCapabilitiesIdealPayments!
	grabpayPayments: AccountCapabilitiesGrabpayPayments!
	giropayPayments: AccountCapabilitiesGiropayPayments!
	fpxPayments: AccountCapabilitiesFpxPayments!
	epsPayments: AccountCapabilitiesEpsPayments!
	cartesBancairesPayments: AccountCapabilitiesCartesBancairesPayments!
	cardPayments: AccountCapabilitiesCardPayments!
	cardIssuing: AccountCapabilitiesCardIssuing!
	boletoPayments: AccountCapabilitiesBoletoPayments!
	blikPayments: AccountCapabilitiesBlikPayments!
	bankTransferPayments: AccountCapabilitiesBankTransferPayments!
	bancontactPayments: AccountCapabilitiesBancontactPayments!
	bacsDebitPayments: AccountCapabilitiesBacsDebitPayments!
	auBecsDebitPayments: AccountCapabilitiesAuBecsDebitPayments!
	afterpayClearpayPayments: AccountCapabilitiesAfterpayClearpayPayments!
	affirmPayments: AccountCapabilitiesAffirmPayments!
	acssDebitPayments: AccountCapabilitiesAcssDebitPayments!
}
enum AccountCapabilitiesAcssDebitPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesAffirmPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesAfterpayClearpayPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesAuBecsDebitPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesBacsDebitPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesBancontactPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesBankTransferPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesBlikPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesBoletoPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesCardIssuing {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesCardPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesCartesBancairesPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesEpsPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesFpxPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesGiropayPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesGrabpayPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesIdealPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesIndiaInternationalPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesJcbPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesKlarnaPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesKonbiniPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesLegacyPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesLinkPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesOxxoPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesP24Payments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesPaynowPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesPromptpayPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesSepaDebitPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesSofortPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesTaxReportingUs1099K {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesTaxReportingUs1099Misc {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesTransfers {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesTreasury {
	ACTIVE
	INACTIVE
	PENDING
}
enum AccountCapabilitiesUsBankAccountAchPayments {
	ACTIVE
	INACTIVE
	PENDING
}
type AccountCapabilityFutureRequirements {
	pendingVerification: [String!]!
	pastDue: [String!]!
	eventuallyDue: [String!]!
	errors: [AccountRequirementsError!]!
	disabledReason: String
	currentlyDue: [String!]!
	currentDeadline: Int
	alternatives: [AccountRequirementsAlternative!]
}
type AccountCapabilityRequirements {
	pendingVerification: [String!]!
	pastDue: [String!]!
	eventuallyDue: [String!]!
	errors: [AccountRequirementsError!]!
	disabledReason: String
	currentlyDue: [String!]!
	currentDeadline: Int
	alternatives: [AccountRequirementsAlternative!]
}
type AccountCardIssuingSettings {
	tosAcceptance: CardIssuingAccountTermsOfService!
}
type AccountCardPaymentsSettings {
	statementDescriptorPrefixKanji: String
	statementDescriptorPrefixKana: String
	statementDescriptorPrefix: String
	declineOn: AccountDeclineChargeOn!
}
type AccountDashboardSettings {
	timezone: String
	displayName: String
}
type AccountDeclineChargeOn {
	cvcFailure: Boolean!
	avsFailure: Boolean!
}
type AccountExternalAccounts {
	url: String!
	object: AccountObjectExternalAccounts!
	hasMore: Boolean!
	data: [CardOrBankAccountUnion!]!
}
type AccountFutureRequirements {
	pendingVerification: [String!]
	pastDue: [String!]
	eventuallyDue: [String!]
	errors: [AccountRequirementsError!]
	disabledReason: String
	currentlyDue: [String!]
	currentDeadline: Int
	alternatives: [AccountRequirementsAlternative!]
}
type AccountLink {
	url: String!
	object: AccountLinkObject!
	expiresAt: Int!
	created: Int!
}
enum AccountLinkObject {
	ACCOUNT_LINK
}
enum AccountObject {
	ACCOUNT
}
enum AccountObjectExternalAccounts {
	LIST
}
type AccountPaymentsSettings {
	statementDescriptorPrefixKanji: String
	statementDescriptorPrefixKana: String
	statementDescriptorKanji: String
	statementDescriptorKana: String
	statementDescriptor: String
}
type AccountPayoutSettings {
	statementDescriptor: String
	schedule: TransferSchedule!
	debitNegativeBalances: Boolean!
}
type AccountRequirements {
	pendingVerification: [String!]
	pastDue: [String!]
	eventuallyDue: [String!]
	errors: [AccountRequirementsError!]
	disabledReason: String
	currentlyDue: [String!]
	currentDeadline: Int
	alternatives: [AccountRequirementsAlternative!]
}
type AccountRequirementsAlternative {
	originalFieldsDue: [String!]!
	alternativeFieldsDue: [String!]!
}
type AccountRequirementsError {
	requirement: String!
	reason: String!
	code: AccountRequirementsErrorCode!
}
enum AccountRequirementsErrorCode {
	INVALID_ADDRESS_CITY_STATE_POSTAL_CODE
	INVALID_DOB_AGE_UNDER_18
	INVALID_REPRESENTATIVE_COUNTRY
	INVALID_STREET_ADDRESS
	INVALID_TOS_ACCEPTANCE
	INVALID_VALUE_OTHER
	VERIFICATION_DOCUMENT_ADDRESS_MISMATCH
	VERIFICATION_DOCUMENT_ADDRESS_MISSING
	VERIFICATION_DOCUMENT_CORRUPT
	VERIFICATION_DOCUMENT_COUNTRY_NOT_SUPPORTED
	VERIFICATION_DOCUMENT_DOB_MISMATCH
	VERIFICATION_DOCUMENT_DUPLICATE_TYPE
	VERIFICATION_DOCUMENT_EXPIRED
	VERIFICATION_DOCUMENT_FAILED_COPY
	VERIFICATION_DOCUMENT_FAILED_GREYSCALE
	VERIFICATION_DOCUMENT_FAILED_OTHER
	VERIFICATION_DOCUMENT_FAILED_TEST_MODE
	VERIFICATION_DOCUMENT_FRAUDULENT
	VERIFICATION_DOCUMENT_ID_NUMBER_MISMATCH
	VERIFICATION_DOCUMENT_ID_NUMBER_MISSING
	VERIFICATION_DOCUMENT_INCOMPLETE
	VERIFICATION_DOCUMENT_INVALID
	VERIFICATION_DOCUMENT_ISSUE_OR_EXPIRY_DATE_MISSING
	VERIFICATION_DOCUMENT_MANIPULATED
	VERIFICATION_DOCUMENT_MISSING_BACK
	VERIFICATION_DOCUMENT_MISSING_FRONT
	VERIFICATION_DOCUMENT_NAME_MISMATCH
	VERIFICATION_DOCUMENT_NAME_MISSING
	VERIFICATION_DOCUMENT_NATIONALITY_MISMATCH
	VERIFICATION_DOCUMENT_NOT_READABLE
	VERIFICATION_DOCUMENT_NOT_SIGNED
	VERIFICATION_DOCUMENT_NOT_UPLOADED
	VERIFICATION_DOCUMENT_PHOTO_MISMATCH
	VERIFICATION_DOCUMENT_TOO_LARGE
	VERIFICATION_DOCUMENT_TYPE_NOT_SUPPORTED
	VERIFICATION_FAILED_ADDRESS_MATCH
	VERIFICATION_FAILED_BUSINESS_IEC_NUMBER
	VERIFICATION_FAILED_DOCUMENT_MATCH
	VERIFICATION_FAILED_ID_NUMBER_MATCH
	VERIFICATION_FAILED_KEYED_IDENTITY
	VERIFICATION_FAILED_KEYED_MATCH
	VERIFICATION_FAILED_NAME_MATCH
	VERIFICATION_FAILED_OTHER
	VERIFICATION_FAILED_RESIDENTIAL_ADDRESS
	VERIFICATION_FAILED_TAX_ID_MATCH
	VERIFICATION_FAILED_TAX_ID_NOT_ISSUED
	VERIFICATION_MISSING_EXECUTIVES
	VERIFICATION_MISSING_OWNERS
	VERIFICATION_REQUIRES_ADDITIONAL_MEMORANDUM_OF_ASSOCIATIONS
}
type AccountSepaDebitPaymentsSettings {
	creditorId: String!
}
type AccountSettings {
	treasury: AccountTreasurySettings!
	sepaDebitPayments: AccountSepaDebitPaymentsSettings!
	payouts: AccountPayoutSettings!
	payments: AccountPaymentsSettings!
	dashboard: AccountDashboardSettings!
	cardPayments: AccountCardPaymentsSettings!
	cardIssuing: AccountCardIssuingSettings!
	branding: AccountBrandingSettings!
	bacsDebitPayments: AccountBacsDebitPaymentsSettings!
}
union AccountSettingsUnion = AccountSettings
type AccountTermsOfService {
	userAgent: String!
	ip: String
	date: Int
}
type AccountTosAcceptance {
	userAgent: String
	serviceAgreement: String!
	ip: String
	date: Int
}
type AccountTreasurySettings {
	tosAcceptance: AccountTermsOfService!
}
enum AccountType {
	CUSTOM
	EXPRESS
	STANDARD
}
type AccountUnificationAccountController {
	type: AccountUnificationAccountControllerType!
	isController: Boolean!
}
enum AccountUnificationAccountControllerType {
	ACCOUNT
	APPLICATION
}
union AccountUnion = Account
type Address {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
union AddressUnion = Address
type ApiErrors {
	type: ApiErrorsType!
	source: SourceOrCardOrBankAccountUnion!
	setupIntent: SetupIntent!
	requestLogUrl: String!
	paymentMethodType: String!
	paymentMethod: PaymentMethod!
	paymentIntent: PaymentIntent!
	param: String!
	message: String!
	docUrl: String!
	declineCode: String!
	code: String!
	charge: String!
}
enum ApiErrorsType {
	API_ERROR
	CARD_ERROR
	IDEMPOTENCY_ERROR
	INVALID_REQUEST_ERROR
}
union ApiErrorsUnion = ApiErrors
type ApplePayDomain {
	object: ApplePayDomainObject!
	livemode: Boolean!
	id: String!
	domainName: String!
	created: Int!
}
enum ApplePayDomainObject {
	APPLE_PAY_DOMAIN
}
type Application {
	object: ApplicationObject!
	name: String
	id: String!
}
type ApplicationFee {
	refunds: ApplicationFeeRefunds!
	refunded: Boolean!
	originatingTransaction: ChargeUnion
	object: ApplicationFeeObject!
	livemode: Boolean!
	id: String!
	currency: String!
	created: Int!
	charge: ChargeUnion!
	balanceTransaction: BalanceTransactionUnion
	application: ApplicationUnion!
	amountRefunded: Int!
	amount: Int!
	account: AccountUnion!
}
enum ApplicationFeeObject {
	APPLICATION_FEE
}
enum ApplicationFeeObjectRefunds {
	LIST
}
type ApplicationFeeRefunds {
	url: String!
	object: ApplicationFeeObjectRefunds!
	hasMore: Boolean!
	data: [FeeRefund!]!
}
union ApplicationFeeUnion = ApplicationFee
enum ApplicationObject {
	APPLICATION
}
union ApplicationUnion = Application
type AppsSecret {
	scope: SecretServiceResourceScope!
	payload: String
	object: AppsSecretObject!
	name: String!
	livemode: Boolean!
	id: String!
	expiresAt: Int
	deleted: Boolean!
	created: Int!
}
enum AppsSecretObject {
	APPS_SECRET
}
type AutomaticTax {
	status: AutomaticTaxStatus
	enabled: Boolean!
}
enum AutomaticTaxStatus {
	COMPLETE
	FAILED
	REQUIRES_LOCATION_INPUTS
}
type Balance {
	pending: [BalanceAmount!]!
	object: BalanceObject!
	livemode: Boolean!
	issuing: BalanceDetail!
	instantAvailable: [BalanceAmount!]!
	connectReserved: [BalanceAmount!]!
	available: [BalanceAmount!]!
}
type BalanceAmount {
	sourceTypes: BalanceAmountBySourceType!
	currency: String!
	amount: Int!
}
type BalanceAmountBySourceType {
	fpx: Int!
	card: Int!
	bankAccount: Int!
}
type BalanceDetail {
	available: [BalanceAmount!]!
}
enum BalanceObject {
	BALANCE
}
type BalanceTransaction {
	type: BalanceTransactionType!
	status: String!
	source: TransferReversalOrTransferOrTopupOrTaxDeductedAtSourceOrReserveTransactionOrRefundOrPlatformTaxFeeOrPayoutOrIssuingTransactionOrIssuingDisputeOrIssuingAuthorizationOrFeeRefundOrDisputeOrConnectCollectionTransferOrChargeOrApplicationFeeUnion
	reportingCategory: String!
	object: BalanceTransactionObject!
	net: Int!
	id: String!
	feeDetails: [Fee!]!
	fee: Int!
	exchangeRate: Float
	description: String
	currency: String!
	created: Int!
	availableOn: Int!
	amount: Int!
}
enum BalanceTransactionObject {
	BALANCE_TRANSACTION
}
enum BalanceTransactionType {
	ADJUSTMENT
	ADVANCE
	ADVANCE_FUNDING
	ANTICIPATION_REPAYMENT
	APPLICATION_FEE
	APPLICATION_FEE_REFUND
	CHARGE
	CONNECT_COLLECTION_TRANSFER
	CONTRIBUTION
	ISSUING_AUTHORIZATION_HOLD
	ISSUING_AUTHORIZATION_RELEASE
	ISSUING_DISPUTE
	ISSUING_TRANSACTION
	PAYMENT
	PAYMENT_FAILURE_REFUND
	PAYMENT_REFUND
	PAYOUT
	PAYOUT_CANCEL
	PAYOUT_FAILURE
	REFUND
	REFUND_FAILURE
	RESERVE_TRANSACTION
	RESERVED_FUNDS
	STRIPE_FEE
	STRIPE_FX_FEE
	TAX_FEE
	TOPUP
	TOPUP_REVERSAL
	TRANSFER
	TRANSFER_CANCEL
	TRANSFER_FAILURE
	TRANSFER_REFUND
}
union BalanceTransactionUnion = BalanceTransaction
type BankAccount {
	status: String!
	routingNumber: String
	object: BankAccountObject!
	metadata: JSON!
	last4: String!
	id: String!
	fingerprint: String
	defaultForCurrency: Boolean
	customer: DeletedCustomerOrCustomerUnion
	currency: String!
	country: String!
	bankName: String
	availablePayoutMethods: [BankAccountAvailablePayoutMethods!]
	accountType: String
	accountHolderType: String
	accountHolderName: String
	account: AccountUnion
}
enum BankAccountAvailablePayoutMethods {
	INSTANT
	STANDARD
}
enum BankAccountObject {
	BANK_ACCOUNT
}
type BankConnectionsResourceAccountholder {
	type: BankConnectionsResourceAccountholderType!
	customer: CustomerUnion!
	account: AccountUnion!
}
enum BankConnectionsResourceAccountholderType {
	ACCOUNT
	CUSTOMER
}
union BankConnectionsResourceAccountholderUnion = BankConnectionsResourceAccountholder
type BankConnectionsResourceBalance {
	type: BankConnectionsResourceBalanceType!
	current: JSON!
	credit: BankConnectionsResourceBalanceApiResourceCreditBalance!
	cash: BankConnectionsResourceBalanceApiResourceCashBalance!
	asOf: Int!
}
type BankConnectionsResourceBalanceApiResourceCashBalance {
	available: JSON!
}
type BankConnectionsResourceBalanceApiResourceCreditBalance {
	used: JSON!
}
type BankConnectionsResourceBalanceRefresh {
	status: BankConnectionsResourceBalanceRefreshStatus!
	lastAttemptedAt: Int!
}
enum BankConnectionsResourceBalanceRefreshStatus {
	FAILED
	PENDING
	SUCCEEDED
}
union BankConnectionsResourceBalanceRefreshUnion = BankConnectionsResourceBalanceRefresh
enum BankConnectionsResourceBalanceType {
	CASH
	CREDIT
}
union BankConnectionsResourceBalanceUnion = BankConnectionsResourceBalance
type BankConnectionsResourceLinkAccountSessionFilters {
	countries: [String!]
}
type BankConnectionsResourceOwnershipRefresh {
	status: BankConnectionsResourceOwnershipRefreshStatus!
	lastAttemptedAt: Int!
}
enum BankConnectionsResourceOwnershipRefreshStatus {
	FAILED
	PENDING
	SUCCEEDED
}
union BankConnectionsResourceOwnershipRefreshUnion = BankConnectionsResourceOwnershipRefresh
type BillingDetails {
	phone: String
	name: String
	email: String
	address: AddressUnion
}
type BillingPortalConfiguration {
	updated: Int!
	object: BillingPortalConfigurationObject!
	metadata: JSON!
	loginPage: PortalLoginPage!
	livemode: Boolean!
	isDefault: Boolean!
	id: String!
	features: PortalFeatures!
	defaultReturnUrl: String
	created: Int!
	businessProfile: PortalBusinessProfile!
	application: DeletedApplicationOrApplicationUnion
	active: Boolean!
}
enum BillingPortalConfigurationObject {
	BILLING_PORTAL_CONFIGURATION
}
union BillingPortalConfigurationUnion = BillingPortalConfiguration
type BillingPortalSession {
	url: String!
	returnUrl: String
	onBehalfOf: String
	object: BillingPortalSessionObject!
	locale: BillingPortalSessionLocale
	livemode: Boolean!
	id: String!
	flow: PortalFlowsFlowUnion
	customer: String!
	created: Int!
	configuration: BillingPortalConfigurationUnion!
}
enum BillingPortalSessionLocale {
	AUTO
	BG
	CS
	DA
	DE
	EL
	EN
	EN_AU
	EN_CA
	EN_GB
	EN_IE
	EN_IN
	EN_NZ
	EN_SG
	ES
	ES_419
	ET
	FI
	FIL
	FR
	FR_CA
	HR
	HU
	ID
	IT
	JA
	KO
	LT
	LV
	MS
	MT
	NB
	NL
	PL
	PT
	PT_BR
	RO
	RU
	SK
	SL
	SV
	TH
	TR
	VI
	ZH
	ZH_HK
	ZH_TW
}
enum BillingPortalSessionObject {
	BILLING_PORTAL_SESSION
}
type Capability {
	status: CapabilityStatus!
	requirements: AccountCapabilityRequirements!
	requestedAt: Int
	requested: Boolean!
	object: CapabilityObject!
	id: String!
	futureRequirements: AccountCapabilityFutureRequirements!
	account: AccountUnion!
}
enum CapabilityObject {
	CAPABILITY
}
enum CapabilityStatus {
	ACTIVE
	DISABLED
	INACTIVE
	PENDING
	UNREQUESTED
}
type Card {
	tokenizationMethod: String
	status: String
	object: CardObject!
	name: String
	metadata: JSON!
	last4: String!
	id: String!
	funding: String!
	fingerprint: String
	expYear: Int!
	expMonth: Int!
	dynamicLast4: String
	defaultForCurrency: Boolean
	cvcCheck: String
	customer: DeletedCustomerOrCustomerUnion
	currency: String
	country: String
	brand: String!
	availablePayoutMethods: [CardAvailablePayoutMethods!]
	addressZipCheck: String
	addressZip: String
	addressState: String
	addressLine2: String
	addressLine1Check: String
	addressLine1: String
	addressCountry: String
	addressCity: String
	account: AccountUnion
}
enum CardAvailablePayoutMethods {
	INSTANT
	STANDARD
}
type CardGeneratedFromPaymentMethodDetails {
	type: String!
	cardPresent: PaymentMethodDetailsCardPresent!
}
union CardGeneratedFromPaymentMethodDetailsUnion = CardGeneratedFromPaymentMethodDetails
type CardIssuingAccountTermsOfService {
	userAgent: String!
	ip: String
	date: Int
}
enum CardObject {
	CARD
}
union CardOrBankAccountUnion = Card | BankAccount
type CashBalance {
	settings: CustomerBalanceCustomerBalanceSettings!
	object: CashBalanceObject!
	livemode: Boolean!
	customer: String!
	available: JSON!
}
enum CashBalanceObject {
	CASH_BALANCE
}
union CashBalanceUnion = CashBalance
type Charge {
	transferGroup: String
	transferData: ChargeTransferDataUnion
	transfer: TransferUnion!
	status: ChargeStatus!
	statementDescriptorSuffix: String
	statementDescriptor: String
	sourceTransfer: TransferUnion
	shipping: ShippingUnion
	review: ReviewUnion
	refunds: ChargeRefunds
	refunded: Boolean!
	receiptUrl: String
	receiptNumber: String
	receiptEmail: String
	radarOptions: RadarRadarOptions!
	paymentMethodDetails: PaymentMethodDetailsUnion
	paymentMethod: String
	paymentIntent: PaymentIntentUnion
	paid: Boolean!
	outcome: ChargeOutcomeUnion
	onBehalfOf: AccountUnion
	object: ChargeObject!
	metadata: JSON!
	livemode: Boolean!
	invoice: InvoiceUnion
	id: String!
	fraudDetails: ChargeFraudDetailsUnion
	failureMessage: String
	failureCode: String
	failureBalanceTransaction: BalanceTransactionUnion
	disputed: Boolean!
	description: String
	customer: DeletedCustomerOrCustomerUnion
	currency: String!
	created: Int!
	captured: Boolean!
	calculatedStatementDescriptor: String
	billingDetails: BillingDetails!
	balanceTransaction: BalanceTransactionUnion
	applicationFeeAmount: Int
	applicationFee: ApplicationFeeUnion
	application: ApplicationUnion
	amountRefunded: Int!
	amountCaptured: Int!
	amount: Int!
}
type ChargeFraudDetails {
	userReport: String!
	stripeReport: String!
}
union ChargeFraudDetailsUnion = ChargeFraudDetails
enum ChargeObject {
	CHARGE
}
enum ChargeObjectRefunds {
	LIST
}
type ChargeOutcome {
	type: String!
	sellerMessage: String
	rule: RuleUnion!
	riskScore: Int!
	riskLevel: String!
	reason: String
	networkStatus: String
}
union ChargeOutcomeUnion = ChargeOutcome
type ChargeRefunds {
	url: String!
	object: ChargeObjectRefunds!
	hasMore: Boolean!
	data: [Refund!]!
}
enum ChargeStatus {
	FAILED
	PENDING
	SUCCEEDED
}
type ChargeTransferData {
	destination: AccountUnion!
	amount: Int
}
union ChargeTransferDataUnion = ChargeTransferData
union ChargeUnion = Charge
type CheckoutAcssDebitMandateOptions {
	transactionType: CheckoutAcssDebitMandateOptionsTransactionType
	paymentSchedule: CheckoutAcssDebitMandateOptionsPaymentSchedule
	intervalDescription: String
	defaultFor: [CheckoutAcssDebitMandateOptionsDefaultFor!]!
	customMandateUrl: String!
}
enum CheckoutAcssDebitMandateOptionsDefaultFor {
	INVOICE
	SUBSCRIPTION
}
enum CheckoutAcssDebitMandateOptionsPaymentSchedule {
	COMBINED
	INTERVAL
	SPORADIC
}
enum CheckoutAcssDebitMandateOptionsTransactionType {
	BUSINESS
	PERSONAL
}
type CheckoutAcssDebitPaymentMethodOptions {
	verificationMethod: CheckoutAcssDebitPaymentMethodOptionsVerificationMethod!
	setupFutureUsage: CheckoutAcssDebitPaymentMethodOptionsSetupFutureUsage!
	mandateOptions: CheckoutAcssDebitMandateOptions!
	currency: CheckoutAcssDebitPaymentMethodOptionsCurrency!
}
enum CheckoutAcssDebitPaymentMethodOptionsCurrency {
	CAD
	USD
}
enum CheckoutAcssDebitPaymentMethodOptionsSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
enum CheckoutAcssDebitPaymentMethodOptionsVerificationMethod {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
type CheckoutAffirmPaymentMethodOptions {
	setupFutureUsage: CheckoutAffirmPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutAffirmPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type CheckoutAfterpayClearpayPaymentMethodOptions {
	setupFutureUsage: CheckoutAfterpayClearpayPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutAfterpayClearpayPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type CheckoutAlipayPaymentMethodOptions {
	setupFutureUsage: CheckoutAlipayPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutAlipayPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type CheckoutAuBecsDebitPaymentMethodOptions {
	setupFutureUsage: CheckoutAuBecsDebitPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutAuBecsDebitPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type CheckoutBacsDebitPaymentMethodOptions {
	setupFutureUsage: CheckoutBacsDebitPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutBacsDebitPaymentMethodOptionsSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
type CheckoutBancontactPaymentMethodOptions {
	setupFutureUsage: CheckoutBancontactPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutBancontactPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type CheckoutBoletoPaymentMethodOptions {
	setupFutureUsage: CheckoutBoletoPaymentMethodOptionsSetupFutureUsage!
	expiresAfterDays: Int!
}
enum CheckoutBoletoPaymentMethodOptionsSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
type CheckoutCardInstallmentsOptions {
	enabled: Boolean!
}
type CheckoutCardPaymentMethodOptions {
	statementDescriptorSuffixKanji: String!
	statementDescriptorSuffixKana: String!
	setupFutureUsage: CheckoutCardPaymentMethodOptionsSetupFutureUsage!
	installments: CheckoutCardInstallmentsOptions!
}
enum CheckoutCardPaymentMethodOptionsSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
type CheckoutCustomerBalanceBankTransferPaymentMethodOptions {
	type: CheckoutCustomerBalanceBankTransferPaymentMethodOptionsType
	requestedAddressTypes: [CheckoutCustomerBalanceBankTransferPaymentMethodOptionsRequestedAddressTypes!]!
	euBankTransfer: PaymentMethodOptionsCustomerBalanceEuBankAccount!
}
enum CheckoutCustomerBalanceBankTransferPaymentMethodOptionsRequestedAddressTypes {
	IBAN
	SEPA
	SORT_CODE
	SPEI
	ZENGIN
}
enum CheckoutCustomerBalanceBankTransferPaymentMethodOptionsType {
	EU_BANK_TRANSFER
	GB_BANK_TRANSFER
	JP_BANK_TRANSFER
	MX_BANK_TRANSFER
}
type CheckoutCustomerBalancePaymentMethodOptions {
	setupFutureUsage: CheckoutCustomerBalancePaymentMethodOptionsSetupFutureUsage!
	fundingType: CheckoutCustomerBalancePaymentMethodOptionsFundingType
	bankTransfer: CheckoutCustomerBalanceBankTransferPaymentMethodOptions!
}
enum CheckoutCustomerBalancePaymentMethodOptionsFundingType {
	BANK_TRANSFER
}
enum CheckoutCustomerBalancePaymentMethodOptionsSetupFutureUsage {
	NONE
}
type CheckoutEpsPaymentMethodOptions {
	setupFutureUsage: CheckoutEpsPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutEpsPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type CheckoutFpxPaymentMethodOptions {
	setupFutureUsage: CheckoutFpxPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutFpxPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type CheckoutGiropayPaymentMethodOptions {
	setupFutureUsage: CheckoutGiropayPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutGiropayPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type CheckoutGrabPayPaymentMethodOptions {
	setupFutureUsage: CheckoutGrabPayPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutGrabPayPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type CheckoutIdealPaymentMethodOptions {
	setupFutureUsage: CheckoutIdealPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutIdealPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type CheckoutKlarnaPaymentMethodOptions {
	setupFutureUsage: CheckoutKlarnaPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutKlarnaPaymentMethodOptionsSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
type CheckoutKonbiniPaymentMethodOptions {
	setupFutureUsage: CheckoutKonbiniPaymentMethodOptionsSetupFutureUsage!
	expiresAfterDays: Int
}
enum CheckoutKonbiniPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type CheckoutOxxoPaymentMethodOptions {
	setupFutureUsage: CheckoutOxxoPaymentMethodOptionsSetupFutureUsage!
	expiresAfterDays: Int!
}
enum CheckoutOxxoPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type CheckoutP24PaymentMethodOptions {
	setupFutureUsage: CheckoutP24PaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutP24PaymentMethodOptionsSetupFutureUsage {
	NONE
}
type CheckoutPaynowPaymentMethodOptions {
	setupFutureUsage: CheckoutPaynowPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutPaynowPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type CheckoutPixPaymentMethodOptions {
	expiresAfterSeconds: Int
}
type CheckoutSepaDebitPaymentMethodOptions {
	setupFutureUsage: CheckoutSepaDebitPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutSepaDebitPaymentMethodOptionsSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
type CheckoutSession {
	url: String
	totalDetails: PaymentPagesCheckoutSessionTotalDetailsUnion
	taxIdCollection: PaymentPagesCheckoutSessionTaxIdCollection!
	successUrl: String!
	subscription: SubscriptionUnion
	submitType: CheckoutSessionSubmitType
	status: CheckoutSessionStatus
	shippingOptions: [PaymentPagesCheckoutSessionShippingOption!]!
	shippingDetails: ShippingUnion
	shippingCost: PaymentPagesCheckoutSessionShippingCostUnion
	shippingAddressCollection: PaymentPagesCheckoutSessionShippingAddressCollectionUnion
	setupIntent: SetupIntentUnion
	recoveredFrom: String
	phoneNumberCollection: PaymentPagesCheckoutSessionPhoneNumberCollection!
	paymentStatus: CheckoutSessionPaymentStatus!
	paymentMethodTypes: [String!]!
	paymentMethodOptions: CheckoutSessionPaymentMethodOptionsUnion
	paymentMethodCollection: CheckoutSessionPaymentMethodCollection
	paymentLink: PaymentLinkUnion
	paymentIntent: PaymentIntentUnion
	object: CheckoutSessionObject!
	mode: CheckoutSessionMode!
	metadata: JSON!
	locale: CheckoutSessionLocale
	livemode: Boolean!
	lineItems: CheckoutSessionLineItems!
	invoiceCreation: PaymentPagesCheckoutSessionInvoiceCreationUnion
	invoice: InvoiceUnion
	id: String!
	expiresAt: Int!
	customerEmail: String
	customerDetails: PaymentPagesCheckoutSessionCustomerDetailsUnion
	customerCreation: CheckoutSessionCustomerCreation
	customer: DeletedCustomerOrCustomerUnion
	customText: PaymentPagesCheckoutSessionCustomText!
	currency: String
	created: Int!
	consentCollection: PaymentPagesCheckoutSessionConsentCollectionUnion
	consent: PaymentPagesCheckoutSessionConsentUnion
	clientReferenceId: String
	cancelUrl: String
	billingAddressCollection: CheckoutSessionBillingAddressCollection
	automaticTax: PaymentPagesCheckoutSessionAutomaticTax!
	amountTotal: Int
	amountSubtotal: Int
	allowPromotionCodes: Boolean
	afterExpiration: PaymentPagesCheckoutSessionAfterExpirationUnion
}
enum CheckoutSessionBillingAddressCollection {
	AUTO
	REQUIRED
}
enum CheckoutSessionCustomerCreation {
	ALWAYS
	IF_REQUIRED
}
type CheckoutSessionLineItems {
	url: String!
	object: CheckoutSessionObjectLineItems!
	hasMore: Boolean!
	data: [Item!]!
}
enum CheckoutSessionLocale {
	AUTO
	BG
	CS
	DA
	DE
	EL
	EN
	EN_GB
	ES
	ES_419
	ET
	FI
	FIL
	FR
	FR_CA
	HR
	HU
	ID
	IT
	JA
	KO
	LT
	LV
	MS
	MT
	NB
	NL
	PL
	PT
	PT_BR
	RO
	RU
	SK
	SL
	SV
	TH
	TR
	VI
	ZH
	ZH_HK
	ZH_TW
}
enum CheckoutSessionMode {
	PAYMENT
	SETUP
	SUBSCRIPTION
}
enum CheckoutSessionObject {
	CHECKOUT_SESSION
}
enum CheckoutSessionObjectLineItems {
	LIST
}
enum CheckoutSessionPaymentMethodCollection {
	ALWAYS
	IF_REQUIRED
}
type CheckoutSessionPaymentMethodOptions {
	usBankAccount: CheckoutUsBankAccountPaymentMethodOptions!
	sofort: CheckoutSofortPaymentMethodOptions!
	sepaDebit: CheckoutSepaDebitPaymentMethodOptions!
	pix: CheckoutPixPaymentMethodOptions!
	paynow: CheckoutPaynowPaymentMethodOptions!
	p24: CheckoutP24PaymentMethodOptions!
	oxxo: CheckoutOxxoPaymentMethodOptions!
	konbini: CheckoutKonbiniPaymentMethodOptions!
	klarna: CheckoutKlarnaPaymentMethodOptions!
	ideal: CheckoutIdealPaymentMethodOptions!
	grabpay: CheckoutGrabPayPaymentMethodOptions!
	giropay: CheckoutGiropayPaymentMethodOptions!
	fpx: CheckoutFpxPaymentMethodOptions!
	eps: CheckoutEpsPaymentMethodOptions!
	customerBalance: CheckoutCustomerBalancePaymentMethodOptions!
	card: CheckoutCardPaymentMethodOptions!
	boleto: CheckoutBoletoPaymentMethodOptions!
	bancontact: CheckoutBancontactPaymentMethodOptions!
	bacsDebit: CheckoutBacsDebitPaymentMethodOptions!
	auBecsDebit: CheckoutAuBecsDebitPaymentMethodOptions!
	alipay: CheckoutAlipayPaymentMethodOptions!
	afterpayClearpay: CheckoutAfterpayClearpayPaymentMethodOptions!
	affirm: CheckoutAffirmPaymentMethodOptions!
	acssDebit: CheckoutAcssDebitPaymentMethodOptions!
}
union CheckoutSessionPaymentMethodOptionsUnion = CheckoutSessionPaymentMethodOptions
enum CheckoutSessionPaymentStatus {
	NO_PAYMENT_REQUIRED
	PAID
	UNPAID
}
enum CheckoutSessionStatus {
	COMPLETE
	EXPIRED
	OPEN
}
enum CheckoutSessionSubmitType {
	AUTO
	BOOK
	DONATE
	PAY
}
type CheckoutSofortPaymentMethodOptions {
	setupFutureUsage: CheckoutSofortPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutSofortPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type CheckoutUsBankAccountPaymentMethodOptions {
	verificationMethod: CheckoutUsBankAccountPaymentMethodOptionsVerificationMethod!
	setupFutureUsage: CheckoutUsBankAccountPaymentMethodOptionsSetupFutureUsage!
	financialConnections: LinkedAccountOptionsUsBankAccount!
}
enum CheckoutUsBankAccountPaymentMethodOptionsSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
enum CheckoutUsBankAccountPaymentMethodOptionsVerificationMethod {
	AUTOMATIC
	INSTANT
}
type ConnectCollectionTransfer {
	object: ConnectCollectionTransferObject!
	livemode: Boolean!
	id: String!
	destination: AccountUnion!
	currency: String!
	amount: Int!
}
enum ConnectCollectionTransferObject {
	CONNECT_COLLECTION_TRANSFER
}
type CountrySpec {
	verificationFields: CountrySpecVerificationFields!
	supportedTransferCountries: [String!]!
	supportedPaymentMethods: [String!]!
	supportedPaymentCurrencies: [String!]!
	supportedBankAccountCurrencies: JSON!
	object: CountrySpecObject!
	id: String!
	defaultCurrency: String!
}
enum CountrySpecObject {
	COUNTRY_SPEC
}
type CountrySpecVerificationFieldDetails {
	minimum: [String!]!
	additional: [String!]!
}
type CountrySpecVerificationFields {
	individual: CountrySpecVerificationFieldDetails!
	company: CountrySpecVerificationFieldDetails!
}
type Coupon {
	valid: Boolean!
	timesRedeemed: Int!
	redeemBy: Int
	percentOff: Float
	object: CouponObject!
	name: String
	metadata: JSON!
	maxRedemptions: Int
	livemode: Boolean!
	id: String!
	durationInMonths: Int
	duration: CouponDuration!
	currencyOptions: JSON!
	currency: String
	created: Int!
	appliesTo: CouponAppliesTo!
	amountOff: Int
}
type CouponAppliesTo {
	products: [String!]!
}
enum CouponDuration {
	FOREVER
	ONCE
	REPEATING
}
enum CouponObject {
	COUPON
}
type CreditNote {
	voidedAt: Int
	type: CreditNoteType!
	totalExcludingTax: Int
	total: Int!
	taxAmounts: [CreditNoteTaxAmount!]!
	subtotalExcludingTax: Int
	subtotal: Int!
	status: CreditNoteStatus!
	shippingCost: InvoicesShippingCostUnion
	refund: RefundUnion
	reason: CreditNoteReason
	pdf: String!
	outOfBandAmount: Int
	object: CreditNoteObject!
	number: String!
	metadata: JSON!
	memo: String
	livemode: Boolean!
	lines: CreditNoteLines!
	invoice: InvoiceUnion!
	id: String!
	discountAmounts: [DiscountsResourceDiscountAmount!]!
	discountAmount: Int!
	customerBalanceTransaction: CustomerBalanceTransactionUnion
	customer: DeletedCustomerOrCustomerUnion!
	currency: String!
	created: Int!
	amountShipping: Int!
	amount: Int!
}
type CreditNoteLineItem {
	unitAmountExcludingTax: String
	unitAmountDecimal: String
	unitAmount: Int
	type: CreditNoteLineItemType!
	taxRates: [TaxRate!]!
	taxAmounts: [CreditNoteTaxAmount!]!
	quantity: Int
	object: CreditNoteLineItemObject!
	livemode: Boolean!
	invoiceLineItem: String!
	id: String!
	discountAmounts: [DiscountsResourceDiscountAmount!]!
	discountAmount: Int!
	description: String
	amountExcludingTax: Int
	amount: Int!
}
enum CreditNoteLineItemObject {
	CREDIT_NOTE_LINE_ITEM
}
enum CreditNoteLineItemType {
	CUSTOM_LINE_ITEM
	INVOICE_LINE_ITEM
}
type CreditNoteLines {
	url: String!
	object: CreditNoteObjectLines!
	hasMore: Boolean!
	data: [CreditNoteLineItem!]!
}
enum CreditNoteObject {
	CREDIT_NOTE
}
enum CreditNoteObjectLines {
	LIST
}
enum CreditNoteReason {
	DUPLICATE
	FRAUDULENT
	ORDER_CHANGE
	PRODUCT_UNSATISFACTORY
}
enum CreditNoteStatus {
	ISSUED
	VOID
}
type CreditNoteTaxAmount {
	taxRate: TaxRateUnion!
	inclusive: Boolean!
	amount: Int!
}
enum CreditNoteType {
	POST_PAYMENT
	PRE_PAYMENT
}
union CreditNoteUnion = CreditNote
type CustomUnitAmount {
	preset: Int
	minimum: Int
	maximum: Int
}
union CustomUnitAmountUnion = CustomUnitAmount
type Customer {
	testClock: TestHelpersTestClockUnion
	taxIds: CustomerTaxIds!
	taxExempt: CustomerTaxExempt
	tax: CustomerTax!
	subscriptions: CustomerSubscriptions!
	sources: CustomerSources!
	shipping: ShippingUnion
	preferredLocales: [String!]
	phone: String
	object: CustomerObject!
	nextInvoiceSequence: Int!
	name: String
	metadata: JSON!
	livemode: Boolean!
	invoiceSettings: InvoiceSettingCustomerSetting!
	invoicePrefix: String
	invoiceCreditBalance: JSON!
	id: String!
	email: String
	discount: DiscountUnion
	description: String
	delinquent: Boolean
	defaultSource: SourceOrCardOrBankAccountUnion
	currency: String
	created: Int!
	cashBalance: CashBalanceUnion
	balance: Int!
	address: AddressUnion
}
type CustomerAcceptance {
	type: CustomerAcceptanceType!
	online: OnlineAcceptance!
	offline: OfflineAcceptance!
	acceptedAt: Int
}
enum CustomerAcceptanceType {
	OFFLINE
	ONLINE
}
type CustomerBalanceCustomerBalanceSettings {
	usingMerchantDefault: Boolean!
	reconciliationMode: CustomerBalanceCustomerBalanceSettingsReconciliationMode!
}
enum CustomerBalanceCustomerBalanceSettingsReconciliationMode {
	AUTOMATIC
	MANUAL
}
type CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction {
	paymentIntent: PaymentIntentUnion!
}
type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction {
	bankTransfer: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer!
}
type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer {
	type: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType!
	reference: String
	euBankTransfer: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer!
}
type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer {
	senderName: String
	ibanLast4: String
	bic: String
}
enum CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType {
	EU_BANK_TRANSFER
	GB_BANK_TRANSFER
	JP_BANK_TRANSFER
	MX_BANK_TRANSFER
}
type CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction {
	refund: RefundUnion!
}
type CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction {
	paymentIntent: PaymentIntentUnion!
}
type CustomerBalanceTransaction {
	type: CustomerBalanceTransactionType!
	object: CustomerBalanceTransactionObject!
	metadata: JSON!
	livemode: Boolean!
	invoice: InvoiceUnion
	id: String!
	endingBalance: Int!
	description: String
	customer: CustomerUnion!
	currency: String!
	creditNote: CreditNoteUnion
	created: Int!
	amount: Int!
}
enum CustomerBalanceTransactionObject {
	CUSTOMER_BALANCE_TRANSACTION
}
enum CustomerBalanceTransactionType {
	ADJUSTMENT
	APPLIED_TO_INVOICE
	CREDIT_NOTE
	INITIAL
	INVOICE_OVERPAID
	INVOICE_TOO_LARGE
	INVOICE_TOO_SMALL
	MIGRATION
	UNAPPLIED_FROM_INVOICE
	UNSPENT_RECEIVER_CREDIT
}
union CustomerBalanceTransactionUnion = CustomerBalanceTransaction
type CustomerCashBalanceTransaction {
	unappliedFromPayment: CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction!
	type: CustomerCashBalanceTransactionType!
	refundedFromPayment: CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction!
	object: CustomerCashBalanceTransactionObject!
	netAmount: Int!
	livemode: Boolean!
	id: String!
	funded: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction!
	endingBalance: Int!
	customer: CustomerUnion!
	currency: String!
	created: Int!
	appliedToPayment: CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction!
}
enum CustomerCashBalanceTransactionObject {
	CUSTOMER_CASH_BALANCE_TRANSACTION
}
enum CustomerCashBalanceTransactionType {
	APPLIED_TO_PAYMENT
	FUNDED
	FUNDING_REVERSED
	REFUNDED_FROM_PAYMENT
	RETURN_CANCELED
	RETURN_INITIATED
	UNAPPLIED_FROM_PAYMENT
}
enum CustomerObject {
	CUSTOMER
}
enum CustomerObjectSources {
	LIST
}
enum CustomerObjectSubscriptions {
	LIST
}
enum CustomerObjectTaxIds {
	LIST
}
type CustomerSources {
	url: String!
	object: CustomerObjectSources!
	hasMore: Boolean!
	data: [SourceOrCardOrBankAccountUnion!]!
}
type CustomerSubscriptions {
	url: String!
	object: CustomerObjectSubscriptions!
	hasMore: Boolean!
	data: [Subscription!]!
}
type CustomerTax {
	location: CustomerTaxLocationUnion
	ipAddress: String
	automaticTax: CustomerTaxAutomaticTax!
}
enum CustomerTaxAutomaticTax {
	FAILED
	NOT_COLLECTING
	SUPPORTED
	UNRECOGNIZED_LOCATION
}
enum CustomerTaxExempt {
	EXEMPT
	NONE
	REVERSE
}
type CustomerTaxIds {
	url: String!
	object: CustomerObjectTaxIds!
	hasMore: Boolean!
	data: [TaxId!]!
}
type CustomerTaxLocation {
	state: String
	source: CustomerTaxLocationSource!
	country: String!
}
enum CustomerTaxLocationSource {
	BILLING_ADDRESS
	IP_ADDRESS
	PAYMENT_METHOD
	SHIPPING_DESTINATION
}
union CustomerTaxLocationUnion = CustomerTaxLocation
union CustomerUnion = Customer
input DeleteCustomersCustomerBankAccountsIdInput {
	expand: [String!]!
}
input DeleteCustomersCustomerCardsIdInput {
	expand: [String!]!
}
input DeleteCustomersCustomerSourcesIdInput {
	expand: [String!]!
}
input DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdInput {
	prorate: Boolean!
	invoiceNow: Boolean!
	expand: [String!]!
}
input DeleteEphemeralKeysKeyInput {
	expand: [String!]!
}
input DeleteSubscriptionItemsItemInput {
	prorationDate: Int!
	prorationBehavior: DeleteSubscriptionItemsItemProrationBehavior!
	clearUsage: Boolean!
}
enum DeleteSubscriptionItemsItemProrationBehavior {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
input DeleteSubscriptionsSubscriptionExposedIdInput {
	prorate: Boolean!
	invoiceNow: Boolean!
	expand: [String!]!
}
type DeletedAccount {
	object: DeletedAccountObject!
	id: String!
	deleted: Boolean!
}
enum DeletedAccountObject {
	ACCOUNT
}
type DeletedApplePayDomain {
	object: DeletedApplePayDomainObject!
	id: String!
	deleted: Boolean!
}
enum DeletedApplePayDomainObject {
	APPLE_PAY_DOMAIN
}
type DeletedApplication {
	object: DeletedApplicationObject!
	name: String
	id: String!
	deleted: Boolean!
}
enum DeletedApplicationObject {
	APPLICATION
}
union DeletedApplicationOrApplicationUnion = DeletedApplication | Application
type DeletedBankAccount {
	object: DeletedBankAccountObject!
	id: String!
	deleted: Boolean!
	currency: String
}
enum DeletedBankAccountObject {
	BANK_ACCOUNT
}
type DeletedCard {
	object: DeletedCardObject!
	id: String!
	deleted: Boolean!
	currency: String
}
enum DeletedCardObject {
	CARD
}
union DeletedCardOrDeletedBankAccountOrCardOrBankAccountUnion = DeletedCard | DeletedBankAccount | Card | BankAccount
union DeletedCardOrDeletedBankAccountUnion = DeletedCard | DeletedBankAccount
union DeletedCardOrDeletedBankAccountUnionOrSourceOrCardOrBankAccountOrAccountUnionUnion = DeletedCardOrDeletedBankAccountUnion | SourceOrCardOrBankAccountOrAccountUnion
type DeletedCoupon {
	object: DeletedCouponObject!
	id: String!
	deleted: Boolean!
}
enum DeletedCouponObject {
	COUPON
}
union DeletedCouponOrCouponUnion = DeletedCoupon | Coupon
type DeletedCustomer {
	object: DeletedCustomerObject!
	id: String!
	deleted: Boolean!
}
enum DeletedCustomerObject {
	CUSTOMER
}
union DeletedCustomerOrCustomerUnion = DeletedCustomer | Customer
type DeletedDiscount {
	subscription: String
	start: Int!
	promotionCode: PromotionCodeUnion
	object: DeletedDiscountObject!
	invoiceItem: String
	invoice: String
	id: String!
	deleted: Boolean!
	customer: DeletedCustomerOrCustomerUnion
	coupon: Coupon!
	checkoutSession: String
}
enum DeletedDiscountObject {
	DISCOUNT
}
union DeletedDiscountOrDiscountUnion = DeletedDiscount | Discount
type DeletedInvoice {
	object: DeletedInvoiceObject!
	id: String!
	deleted: Boolean!
}
enum DeletedInvoiceObject {
	INVOICE
}
union DeletedInvoiceOrInvoiceUnion = DeletedInvoice | Invoice
type DeletedInvoiceitem {
	object: DeletedInvoiceitemObject!
	id: String!
	deleted: Boolean!
}
enum DeletedInvoiceitemObject {
	INVOICEITEM
}
type DeletedPerson {
	object: DeletedPersonObject!
	id: String!
	deleted: Boolean!
}
enum DeletedPersonObject {
	PERSON
}
type DeletedPlan {
	object: DeletedPlanObject!
	id: String!
	deleted: Boolean!
}
enum DeletedPlanObject {
	PLAN
}
type DeletedPrice {
	object: DeletedPriceObject!
	id: String!
	deleted: Boolean!
}
enum DeletedPriceObject {
	PRICE
}
union DeletedPriceOrPriceUnion = DeletedPrice | Price
type DeletedProduct {
	object: DeletedProductObject!
	id: String!
	deleted: Boolean!
}
enum DeletedProductObject {
	PRODUCT
}
union DeletedProductOrProductUnion = DeletedProduct | Product
type DeletedRadarValueList {
	object: DeletedRadarValueListObject!
	id: String!
	deleted: Boolean!
}
type DeletedRadarValueListItem {
	object: DeletedRadarValueListItemObject!
	id: String!
	deleted: Boolean!
}
enum DeletedRadarValueListItemObject {
	RADAR_VALUE_LIST_ITEM
}
enum DeletedRadarValueListObject {
	RADAR_VALUE_LIST
}
type DeletedSubscriptionItem {
	object: DeletedSubscriptionItemObject!
	id: String!
	deleted: Boolean!
}
enum DeletedSubscriptionItemObject {
	SUBSCRIPTION_ITEM
}
type DeletedTaxId {
	object: DeletedTaxIdObject!
	id: String!
	deleted: Boolean!
}
enum DeletedTaxIdObject {
	TAX_ID
}
union DeletedTaxIdOrTaxIdUnion = DeletedTaxId | TaxId
type DeletedTerminalConfiguration {
	object: DeletedTerminalConfigurationObject!
	id: String!
	deleted: Boolean!
}
enum DeletedTerminalConfigurationObject {
	TERMINAL_CONFIGURATION
}
union DeletedTerminalConfigurationOrTerminalConfigurationUnion = DeletedTerminalConfiguration | TerminalConfiguration
type DeletedTerminalLocation {
	object: DeletedTerminalLocationObject!
	id: String!
	deleted: Boolean!
}
enum DeletedTerminalLocationObject {
	TERMINAL_LOCATION
}
union DeletedTerminalLocationOrTerminalLocationUnion = DeletedTerminalLocation | TerminalLocation
type DeletedTerminalReader {
	object: DeletedTerminalReaderObject!
	id: String!
	deleted: Boolean!
}
enum DeletedTerminalReaderObject {
	TERMINAL_READER
}
union DeletedTerminalReaderOrTerminalReaderUnion = DeletedTerminalReader | TerminalReader
type DeletedTestHelpersTestClock {
	object: DeletedTestHelpersTestClockObject!
	id: String!
	deleted: Boolean!
}
enum DeletedTestHelpersTestClockObject {
	TEST_HELPERS_TEST_CLOCK
}
type DeletedWebhookEndpoint {
	object: DeletedWebhookEndpointObject!
	id: String!
	deleted: Boolean!
}
enum DeletedWebhookEndpointObject {
	WEBHOOK_ENDPOINT
}
type Discount {
	subscription: String
	start: Int!
	promotionCode: PromotionCodeUnion
	object: DiscountObject!
	invoiceItem: String
	invoice: String
	id: String!
	end: Int
	customer: DeletedCustomerOrCustomerUnion
	coupon: Coupon!
	checkoutSession: String
}
enum DiscountObject {
	DISCOUNT
}
union DiscountUnion = Discount
type DiscountsResourceDiscountAmount {
	discount: DeletedDiscountOrDiscountUnion!
	amount: Int!
}
type Dispute {
	status: DisputeStatus!
	reason: String!
	paymentIntent: PaymentIntentUnion
	object: DisputeObject!
	metadata: JSON!
	livemode: Boolean!
	isChargeRefundable: Boolean!
	id: String!
	evidenceDetails: DisputeEvidenceDetails!
	evidence: DisputeEvidence!
	currency: String!
	created: Int!
	charge: ChargeUnion!
	balanceTransactions: [BalanceTransaction!]!
	amount: Int!
}
type DisputeEvidence {
	uncategorizedText: String
	uncategorizedFile: FileUnion
	shippingTrackingNumber: String
	shippingDocumentation: FileUnion
	shippingDate: String
	shippingCarrier: String
	shippingAddress: String
	serviceDocumentation: FileUnion
	serviceDate: String
	refundRefusalExplanation: String
	refundPolicyDisclosure: String
	refundPolicy: FileUnion
	receipt: FileUnion
	productDescription: String
	duplicateChargeId: String
	duplicateChargeExplanation: String
	duplicateChargeDocumentation: FileUnion
	customerSignature: FileUnion
	customerPurchaseIp: String
	customerName: String
	customerEmailAddress: String
	customerCommunication: FileUnion
	cancellationRebuttal: String
	cancellationPolicyDisclosure: String
	cancellationPolicy: FileUnion
	billingAddress: String
	accessActivityLog: String
}
type DisputeEvidenceDetails {
	submissionCount: Int!
	pastDue: Boolean!
	hasEvidence: Boolean!
	dueBy: Int
}
enum DisputeObject {
	DISPUTE
}
enum DisputeStatus {
	CHARGE_REFUNDED
	LOST
	NEEDS_RESPONSE
	UNDER_REVIEW
	WARNING_CLOSED
	WARNING_NEEDS_RESPONSE
	WARNING_UNDER_REVIEW
	WON
}
type EmailSent {
	emailSentTo: String!
	emailSentAt: Int!
}
type EphemeralKey {
	secret: String!
	object: EphemeralKeyObject!
	livemode: Boolean!
	id: String!
	expires: Int!
	created: Int!
}
enum EphemeralKeyObject {
	EPHEMERAL_KEY
}
type Event {
	type: String!
	request: NotificationEventRequestUnion
	pendingWebhooks: Int!
	object: EventObject!
	livemode: Boolean!
	id: String!
	data: NotificationEventData!
	created: Int!
	apiVersion: String
	account: String!
}
enum EventObject {
	EVENT
}
type ExchangeRate {
	rates: JSON!
	object: ExchangeRateObject!
	id: String!
}
enum ExchangeRateObject {
	EXCHANGE_RATE
}
type Fee {
	type: String!
	description: String
	currency: String!
	application: String
	amount: Int!
}
type FeeRefund {
	object: FeeRefundObject!
	metadata: JSON!
	id: String!
	fee: ApplicationFeeUnion!
	currency: String!
	created: Int!
	balanceTransaction: BalanceTransactionUnion
	amount: Int!
}
enum FeeRefundObject {
	FEE_REFUND
}
type File {
	url: String
	type: String
	title: String
	size: Int!
	purpose: FilePurpose!
	object: FileObject!
	links: FileLinks
	id: String!
	filename: String
	expiresAt: Int
	created: Int!
}
type FileLink {
	url: String
	object: FileLinkObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	file: FileUnion!
	expiresAt: Int
	expired: Boolean!
	created: Int!
}
enum FileLinkObject {
	FILE_LINK
}
type FileLinks {
	url: String!
	object: FileObjectLinks!
	hasMore: Boolean!
	data: [FileLink!]!
}
enum FileObject {
	FILE
}
enum FileObjectLinks {
	LIST
}
enum FilePurpose {
	ACCOUNT_REQUIREMENT
	ADDITIONAL_VERIFICATION
	BUSINESS_ICON
	BUSINESS_LOGO
	CUSTOMER_SIGNATURE
	DISPUTE_EVIDENCE
	DOCUMENT_PROVIDER_IDENTITY_DOCUMENT
	FINANCE_REPORT_RUN
	IDENTITY_DOCUMENT
	IDENTITY_DOCUMENT_DOWNLOADABLE
	PCI_DOCUMENT
	SELFIE
	SIGMA_SCHEDULED_QUERY
	TAX_DOCUMENT_USER_UPLOAD
	TERMINAL_READER_SPLASHSCREEN
}
union FileUnion = File
type FinancialConnectionsAccount {
	supportedPaymentMethodTypes: [FinancialConnectionsAccountSupportedPaymentMethodTypes!]!
	subcategory: FinancialConnectionsAccountSubcategory!
	status: FinancialConnectionsAccountStatus!
	permissions: [FinancialConnectionsAccountPermissions!]
	ownershipRefresh: BankConnectionsResourceOwnershipRefreshUnion
	ownership: FinancialConnectionsAccountOwnershipUnion
	object: FinancialConnectionsAccountObject!
	livemode: Boolean!
	last4: String
	institutionName: String!
	id: String!
	displayName: String
	created: Int!
	category: FinancialConnectionsAccountCategory!
	balanceRefresh: BankConnectionsResourceBalanceRefreshUnion
	balance: BankConnectionsResourceBalanceUnion
	accountHolder: BankConnectionsResourceAccountholderUnion
}
enum FinancialConnectionsAccountCategory {
	CASH
	CREDIT
	INVESTMENT
	OTHER
}
enum FinancialConnectionsAccountObject {
	FINANCIAL_CONNECTIONS_ACCOUNT
}
type FinancialConnectionsAccountOwner {
	refreshedAt: Int
	rawAddress: String
	phone: String
	ownership: String!
	object: FinancialConnectionsAccountOwnerObject!
	name: String!
	id: String!
	email: String
}
enum FinancialConnectionsAccountOwnerObject {
	FINANCIAL_CONNECTIONS_ACCOUNT_OWNER
}
type FinancialConnectionsAccountOwnership {
	owners: FinancialConnectionsAccountOwnershipOwners!
	object: FinancialConnectionsAccountOwnershipObject!
	id: String!
	created: Int!
}
enum FinancialConnectionsAccountOwnershipObject {
	FINANCIAL_CONNECTIONS_ACCOUNT_OWNERSHIP
}
enum FinancialConnectionsAccountOwnershipObjectOwners {
	LIST
}
type FinancialConnectionsAccountOwnershipOwners {
	url: String!
	object: FinancialConnectionsAccountOwnershipObjectOwners!
	hasMore: Boolean!
	data: [FinancialConnectionsAccountOwner!]!
}
union FinancialConnectionsAccountOwnershipUnion = FinancialConnectionsAccountOwnership
enum FinancialConnectionsAccountPermissions {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
enum FinancialConnectionsAccountStatus {
	ACTIVE
	DISCONNECTED
	INACTIVE
}
enum FinancialConnectionsAccountSubcategory {
	CHECKING
	CREDIT_CARD
	LINE_OF_CREDIT
	MORTGAGE
	OTHER
	SAVINGS
}
enum FinancialConnectionsAccountSupportedPaymentMethodTypes {
	LINK
	US_BANK_ACCOUNT
}
type FinancialConnectionsSession {
	returnUrl: String!
	permissions: [FinancialConnectionsSessionPermissions!]!
	object: FinancialConnectionsSessionObject!
	livemode: Boolean!
	id: String!
	filters: BankConnectionsResourceLinkAccountSessionFilters!
	clientSecret: String!
	accounts: FinancialConnectionsSessionAccounts!
	accountHolder: BankConnectionsResourceAccountholderUnion
}
type FinancialConnectionsSessionAccounts {
	url: String!
	object: FinancialConnectionsSessionObjectAccounts!
	hasMore: Boolean!
	data: [FinancialConnectionsAccount!]!
}
enum FinancialConnectionsSessionObject {
	FINANCIAL_CONNECTIONS_SESSION
}
enum FinancialConnectionsSessionObjectAccounts {
	LIST
}
enum FinancialConnectionsSessionPermissions {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
type FinancialReportingFinanceReportRunRunParameters {
	timezone: String!
	reportingCategory: String!
	payout: String!
	intervalStart: Int!
	intervalEnd: Int!
	currency: String!
	connectedAccount: String!
	columns: [String!]!
}
type FundingInstructions {
	object: FundingInstructionsObject!
	livemode: Boolean!
	fundingType: FundingInstructionsFundingType!
	currency: String!
	bankTransfer: FundingInstructionsBankTransfer!
}
type FundingInstructionsBankTransfer {
	type: FundingInstructionsBankTransferType!
	financialAddresses: [FundingInstructionsBankTransferFinancialAddress!]!
	country: String!
}
type FundingInstructionsBankTransferFinancialAddress {
	zengin: FundingInstructionsBankTransferZenginRecord!
	type: FundingInstructionsBankTransferFinancialAddressType!
	supportedNetworks: [FundingInstructionsBankTransferFinancialAddressSupportedNetworks!]!
	spei: FundingInstructionsBankTransferSpeiRecord!
	sortCode: FundingInstructionsBankTransferSortCodeRecord!
	iban: FundingInstructionsBankTransferIbanRecord!
}
enum FundingInstructionsBankTransferFinancialAddressSupportedNetworks {
	BACS
	FPS
	SEPA
	SPEI
	ZENGIN
}
enum FundingInstructionsBankTransferFinancialAddressType {
	IBAN
	SORT_CODE
	SPEI
	ZENGIN
}
type FundingInstructionsBankTransferIbanRecord {
	iban: String!
	country: String!
	bic: String!
	accountHolderName: String!
}
type FundingInstructionsBankTransferSortCodeRecord {
	sortCode: String!
	accountNumber: String!
	accountHolderName: String!
}
type FundingInstructionsBankTransferSpeiRecord {
	clabe: String!
	bankName: String!
	bankCode: String!
}
enum FundingInstructionsBankTransferType {
	EU_BANK_TRANSFER
	JP_BANK_TRANSFER
}
type FundingInstructionsBankTransferZenginRecord {
	branchName: String
	branchCode: String
	bankName: String
	bankCode: String
	accountType: String
	accountNumber: String
	accountHolderName: String
}
enum FundingInstructionsFundingType {
	BANK_TRANSFER
}
enum FundingInstructionsObject {
	FUNDING_INSTRUCTIONS
}
type GelatoDataDocumentReportDateOfBirth {
	year: Int
	month: Int
	day: Int
}
union GelatoDataDocumentReportDateOfBirthUnion = GelatoDataDocumentReportDateOfBirth
type GelatoDataDocumentReportExpirationDate {
	year: Int
	month: Int
	day: Int
}
union GelatoDataDocumentReportExpirationDateUnion = GelatoDataDocumentReportExpirationDate
type GelatoDataDocumentReportIssuedDate {
	year: Int
	month: Int
	day: Int
}
union GelatoDataDocumentReportIssuedDateUnion = GelatoDataDocumentReportIssuedDate
type GelatoDataIdNumberReportDate {
	year: Int
	month: Int
	day: Int
}
union GelatoDataIdNumberReportDateUnion = GelatoDataIdNumberReportDate
type GelatoDataVerifiedOutputsDate {
	year: Int
	month: Int
	day: Int
}
union GelatoDataVerifiedOutputsDateUnion = GelatoDataVerifiedOutputsDate
type GelatoDocumentReport {
	type: GelatoDocumentReportType
	status: GelatoDocumentReportStatus!
	number: String
	lastName: String
	issuingCountry: String
	issuedDate: GelatoDataDocumentReportIssuedDateUnion
	firstName: String
	files: [String!]
	expirationDate: GelatoDataDocumentReportExpirationDateUnion
	error: GelatoDocumentReportErrorUnion
	dob: GelatoDataDocumentReportDateOfBirthUnion
	address: AddressUnion
}
type GelatoDocumentReportError {
	reason: String
	code: GelatoDocumentReportErrorCode
}
enum GelatoDocumentReportErrorCode {
	DOCUMENT_EXPIRED
	DOCUMENT_TYPE_NOT_SUPPORTED
	DOCUMENT_UNVERIFIED_OTHER
}
union GelatoDocumentReportErrorUnion = GelatoDocumentReportError
enum GelatoDocumentReportStatus {
	UNVERIFIED
	VERIFIED
}
enum GelatoDocumentReportType {
	DRIVING_LICENSE
	ID_CARD
	PASSPORT
}
type GelatoIdNumberReport {
	status: GelatoIdNumberReportStatus!
	lastName: String
	idNumberType: GelatoIdNumberReportIdNumberType
	idNumber: String
	firstName: String
	error: GelatoIdNumberReportErrorUnion
	dob: GelatoDataIdNumberReportDateUnion
}
type GelatoIdNumberReportError {
	reason: String
	code: GelatoIdNumberReportErrorCode
}
enum GelatoIdNumberReportErrorCode {
	ID_NUMBER_INSUFFICIENT_DOCUMENT_DATA
	ID_NUMBER_MISMATCH
	ID_NUMBER_UNVERIFIED_OTHER
}
union GelatoIdNumberReportErrorUnion = GelatoIdNumberReportError
enum GelatoIdNumberReportIdNumberType {
	BR_CPF
	SG_NRIC
	US_SSN
}
enum GelatoIdNumberReportStatus {
	UNVERIFIED
	VERIFIED
}
type GelatoReportDocumentOptions {
	requireMatchingSelfie: Boolean!
	requireLiveCapture: Boolean!
	requireIdNumber: Boolean!
	allowedTypes: [GelatoReportDocumentOptionsAllowedTypes!]!
}
enum GelatoReportDocumentOptionsAllowedTypes {
	DRIVING_LICENSE
	ID_CARD
	PASSPORT
}
type GelatoSelfieReport {
	status: GelatoSelfieReportStatus!
	selfie: String
	error: GelatoSelfieReportErrorUnion
	document: String
}
type GelatoSelfieReportError {
	reason: String
	code: GelatoSelfieReportErrorCode
}
enum GelatoSelfieReportErrorCode {
	SELFIE_DOCUMENT_MISSING_PHOTO
	SELFIE_FACE_MISMATCH
	SELFIE_MANIPULATED
	SELFIE_UNVERIFIED_OTHER
}
union GelatoSelfieReportErrorUnion = GelatoSelfieReportError
enum GelatoSelfieReportStatus {
	UNVERIFIED
	VERIFIED
}
type GelatoSessionDocumentOptions {
	requireMatchingSelfie: Boolean!
	requireLiveCapture: Boolean!
	requireIdNumber: Boolean!
	allowedTypes: [GelatoSessionDocumentOptionsAllowedTypes!]!
}
enum GelatoSessionDocumentOptionsAllowedTypes {
	DRIVING_LICENSE
	ID_CARD
	PASSPORT
}
type GelatoSessionLastError {
	reason: String
	code: GelatoSessionLastErrorCode
}
enum GelatoSessionLastErrorCode {
	ABANDONED
	CONSENT_DECLINED
	COUNTRY_NOT_SUPPORTED
	DEVICE_NOT_SUPPORTED
	DOCUMENT_EXPIRED
	DOCUMENT_TYPE_NOT_SUPPORTED
	DOCUMENT_UNVERIFIED_OTHER
	ID_NUMBER_INSUFFICIENT_DOCUMENT_DATA
	ID_NUMBER_MISMATCH
	ID_NUMBER_UNVERIFIED_OTHER
	SELFIE_DOCUMENT_MISSING_PHOTO
	SELFIE_FACE_MISMATCH
	SELFIE_MANIPULATED
	SELFIE_UNVERIFIED_OTHER
	UNDER_SUPPORTED_AGE
}
union GelatoSessionLastErrorUnion = GelatoSessionLastError
type GelatoVerificationReportOptions {
	idNumber: GelatoReportIdNumberOptions!
	document: GelatoReportDocumentOptions!
}
type GelatoVerificationSessionOptions {
	idNumber: GelatoSessionIdNumberOptions!
	document: GelatoSessionDocumentOptions!
}
type GelatoVerifiedOutputs {
	lastName: String
	idNumberType: GelatoVerifiedOutputsIdNumberType
	idNumber: String
	firstName: String
	dob: GelatoDataVerifiedOutputsDateUnion
	address: AddressUnion
}
enum GelatoVerifiedOutputsIdNumberType {
	BR_CPF
	SG_NRIC
	US_SSN
}
union GelatoVerifiedOutputsUnion = GelatoVerifiedOutputs
type GetAccounts {
	url: String!
	object: GetAccountsObject!
	hasMore: Boolean!
	data: [Account!]!
}
type GetAccountsAccountCapabilities {
	url: String!
	object: GetAccountsAccountCapabilitiesObject!
	hasMore: Boolean!
	data: [Capability!]!
}
enum GetAccountsAccountCapabilitiesObject {
	LIST
}
type GetAccountsAccountExternalAccounts {
	url: String!
	object: GetAccountsAccountExternalAccountsObject!
	hasMore: Boolean!
	data: [CardOrBankAccountUnion!]!
}
enum GetAccountsAccountExternalAccountsObject {
	LIST
}
type GetAccountsAccountPeople {
	url: String!
	object: GetAccountsAccountPeopleObject!
	hasMore: Boolean!
	data: [Person!]!
}
input GetAccountsAccountPeopleInput {
	representative: Boolean!
	owner: Boolean!
	executive: Boolean!
	director: Boolean!
}
enum GetAccountsAccountPeopleObject {
	LIST
}
type GetAccountsAccountPersons {
	url: String!
	object: GetAccountsAccountPersonsObject!
	hasMore: Boolean!
	data: [Person!]!
}
input GetAccountsAccountPersonsInput {
	representative: Boolean!
	owner: Boolean!
	executive: Boolean!
	director: Boolean!
}
enum GetAccountsAccountPersonsObject {
	LIST
}
input GetAccountsInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetAccountsObject {
	LIST
}
input GetAccountsUnionInput {
	int: Int
	getAccountsInput: GetAccountsInput
}
type GetApplePayDomains {
	url: String!
	object: GetApplePayDomainsObject!
	hasMore: Boolean!
	data: [ApplePayDomain!]!
}
enum GetApplePayDomainsObject {
	LIST
}
type GetApplicationFees {
	url: String!
	object: GetApplicationFeesObject!
	hasMore: Boolean!
	data: [ApplicationFee!]!
}
type GetApplicationFeesIdRefunds {
	url: String!
	object: GetApplicationFeesIdRefundsObject!
	hasMore: Boolean!
	data: [FeeRefund!]!
}
enum GetApplicationFeesIdRefundsObject {
	LIST
}
input GetApplicationFeesInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetApplicationFeesObject {
	LIST
}
input GetApplicationFeesUnionInput {
	int: Int
	getApplicationFeesInput: GetApplicationFeesInput
}
type GetAppsSecrets {
	url: String!
	object: GetAppsSecretsObject!
	hasMore: Boolean!
	data: [AppsSecret!]!
}
input GetAppsSecretsFindInput {
	user: String!
	type: GetAppsSecretsFindType!
}
enum GetAppsSecretsFindType {
	ACCOUNT
	USER
}
input GetAppsSecretsInput {
	user: String!
	type: GetAppsSecretsType!
}
enum GetAppsSecretsObject {
	LIST
}
enum GetAppsSecretsType {
	ACCOUNT
	USER
}
type GetBalanceHistory {
	url: String!
	object: GetBalanceHistoryObject!
	hasMore: Boolean!
	data: [BalanceTransaction!]!
}
input GetBalanceHistoryInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetBalanceHistoryObject {
	LIST
}
input GetBalanceHistoryUnionInput {
	int: Int
	getBalanceHistoryInput: GetBalanceHistoryInput
}
type GetBalanceTransactions {
	url: String!
	object: GetBalanceTransactionsObject!
	hasMore: Boolean!
	data: [BalanceTransaction!]!
}
input GetBalanceTransactionsInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetBalanceTransactionsObject {
	LIST
}
input GetBalanceTransactionsUnionInput {
	int: Int
	getBalanceTransactionsInput: GetBalanceTransactionsInput
}
type GetBillingPortalConfigurations {
	url: String!
	object: GetBillingPortalConfigurationsObject!
	hasMore: Boolean!
	data: [BillingPortalConfiguration!]!
}
enum GetBillingPortalConfigurationsObject {
	LIST
}
type GetCharges {
	url: String!
	object: GetChargesObject!
	hasMore: Boolean!
	data: [Charge!]!
}
type GetChargesChargeRefunds {
	url: String!
	object: GetChargesChargeRefundsObject!
	hasMore: Boolean!
	data: [Refund!]!
}
enum GetChargesChargeRefundsObject {
	LIST
}
input GetChargesInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetChargesObject {
	LIST
}
type GetChargesSearch {
	url: String!
	totalCount: Int!
	object: GetChargesSearchObject!
	nextPage: String
	hasMore: Boolean!
	data: [Charge!]!
}
enum GetChargesSearchObject {
	SEARCH_RESULT
}
input GetChargesUnionInput {
	int: Int
	getChargesInput: GetChargesInput
}
type GetCheckoutSessions {
	url: String!
	object: GetCheckoutSessionsObject!
	hasMore: Boolean!
	data: [CheckoutSession!]!
}
input GetCheckoutSessionsInput {
	email: String!
}
enum GetCheckoutSessionsObject {
	LIST
}
type GetCheckoutSessionsSessionLineItems {
	url: String!
	object: GetCheckoutSessionsSessionLineItemsObject!
	hasMore: Boolean!
	data: [Item!]!
}
enum GetCheckoutSessionsSessionLineItemsObject {
	LIST
}
type GetCountrySpecs {
	url: String!
	object: GetCountrySpecsObject!
	hasMore: Boolean!
	data: [CountrySpec!]!
}
enum GetCountrySpecsObject {
	LIST
}
type GetCoupons {
	url: String!
	object: GetCouponsObject!
	hasMore: Boolean!
	data: [Coupon!]!
}
input GetCouponsInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetCouponsObject {
	LIST
}
input GetCouponsUnionInput {
	int: Int
	getCouponsInput: GetCouponsInput
}
type GetCreditNotes {
	url: String!
	object: GetCreditNotesObject!
	hasMore: Boolean!
	data: [CreditNote!]!
}
type GetCreditNotesCreditNoteLines {
	url: String!
	object: GetCreditNotesCreditNoteLinesObject!
	hasMore: Boolean!
	data: [CreditNoteLineItem!]!
}
enum GetCreditNotesCreditNoteLinesObject {
	LIST
}
enum GetCreditNotesObject {
	LIST
}
enum GetCreditNotesPreview {
	DUPLICATE
	FRAUDULENT
	ORDER_CHANGE
	PRODUCT_UNSATISFACTORY
}
input GetCreditNotesPreviewInput {
	shippingRate: String!
}
enum GetCreditNotesPreviewLines {
	DUPLICATE
	FRAUDULENT
	ORDER_CHANGE
	PRODUCT_UNSATISFACTORY
}
input GetCreditNotesPreviewLinesInput {
	shippingRate: String!
}
type GetCustomers {
	url: String!
	object: GetCustomersObject!
	hasMore: Boolean!
	data: [Customer!]!
}
type GetCustomersCustomerBalanceTransactions {
	url: String!
	object: GetCustomersCustomerBalanceTransactionsObject!
	hasMore: Boolean!
	data: [CustomerBalanceTransaction!]!
}
enum GetCustomersCustomerBalanceTransactionsObject {
	LIST
}
type GetCustomersCustomerBankAccounts {
	url: String!
	object: GetCustomersCustomerBankAccountsObject!
	hasMore: Boolean!
	data: [BankAccount!]!
}
enum GetCustomersCustomerBankAccountsObject {
	LIST
}
type GetCustomersCustomerCards {
	url: String!
	object: GetCustomersCustomerCardsObject!
	hasMore: Boolean!
	data: [Card!]!
}
enum GetCustomersCustomerCardsObject {
	LIST
}
type GetCustomersCustomerCashBalanceTransactions {
	url: String!
	object: GetCustomersCustomerCashBalanceTransactionsObject!
	hasMore: Boolean!
	data: [CustomerCashBalanceTransaction!]!
}
enum GetCustomersCustomerCashBalanceTransactionsObject {
	LIST
}
enum GetCustomersCustomerPaymentMethods {
	ACSS_DEBIT
	AFFIRM
	AFTERPAY_CLEARPAY
	ALIPAY
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BLIK
	BOLETO
	CARD
	CUSTOMER_BALANCE
	EPS
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KLARNA
	KONBINI
	LINK
	OXXO
	P_24
	PAYNOW
	PIX
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
type GetCustomersCustomerSources {
	url: String!
	object: GetCustomersCustomerSourcesObject!
	hasMore: Boolean!
	data: [SourceOrCardOrBankAccountUnion!]!
}
enum GetCustomersCustomerSourcesObject {
	LIST
}
type GetCustomersCustomerSubscriptions {
	url: String!
	object: GetCustomersCustomerSubscriptionsObject!
	hasMore: Boolean!
	data: [Subscription!]!
}
enum GetCustomersCustomerSubscriptionsObject {
	LIST
}
type GetCustomersCustomerTaxIds {
	url: String!
	object: GetCustomersCustomerTaxIdsObject!
	hasMore: Boolean!
	data: [TaxId!]!
}
enum GetCustomersCustomerTaxIdsObject {
	LIST
}
input GetCustomersInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetCustomersObject {
	LIST
}
type GetCustomersSearch {
	url: String!
	totalCount: Int!
	object: GetCustomersSearchObject!
	nextPage: String
	hasMore: Boolean!
	data: [Customer!]!
}
enum GetCustomersSearchObject {
	SEARCH_RESULT
}
input GetCustomersUnionInput {
	int: Int
	getCustomersInput: GetCustomersInput
}
type GetDisputes {
	url: String!
	object: GetDisputesObject!
	hasMore: Boolean!
	data: [Dispute!]!
}
input GetDisputesInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetDisputesObject {
	LIST
}
input GetDisputesUnionInput {
	int: Int
	getDisputesInput: GetDisputesInput
}
type GetEvents {
	url: String!
	object: GetEventsObject!
	hasMore: Boolean!
	data: [Event!]!
}
input GetEventsInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetEventsObject {
	LIST
}
input GetEventsUnionInput {
	int: Int
	getEventsInput: GetEventsInput
}
type GetExchangeRates {
	url: String!
	object: GetExchangeRatesObject!
	hasMore: Boolean!
	data: [ExchangeRate!]!
}
enum GetExchangeRatesObject {
	LIST
}
type GetFileLinks {
	url: String!
	object: GetFileLinksObject!
	hasMore: Boolean!
	data: [FileLink!]!
}
input GetFileLinksInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetFileLinksObject {
	LIST
}
input GetFileLinksUnionInput {
	int: Int
	getFileLinksInput: GetFileLinksInput
}
enum GetFiles {
	ACCOUNT_REQUIREMENT
	ADDITIONAL_VERIFICATION
	BUSINESS_ICON
	BUSINESS_LOGO
	CUSTOMER_SIGNATURE
	DISPUTE_EVIDENCE
	DOCUMENT_PROVIDER_IDENTITY_DOCUMENT
	FINANCE_REPORT_RUN
	IDENTITY_DOCUMENT
	IDENTITY_DOCUMENT_DOWNLOADABLE
	PCI_DOCUMENT
	SELFIE
	SIGMA_SCHEDULED_QUERY
	TAX_DOCUMENT_USER_UPLOAD
	TERMINAL_READER_SPLASHSCREEN
}
input GetFilesInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
input GetFilesUnionInput {
	int: Int
	getFilesInput: GetFilesInput
}
type GetFinancialConnectionsAccounts {
	url: String!
	object: GetFinancialConnectionsAccountsObject!
	hasMore: Boolean!
	data: [FinancialConnectionsAccount!]!
}
type GetFinancialConnectionsAccountsAccountOwners {
	url: String!
	object: GetFinancialConnectionsAccountsAccountOwnersObject!
	hasMore: Boolean!
	data: [FinancialConnectionsAccountOwner!]!
}
enum GetFinancialConnectionsAccountsAccountOwnersObject {
	LIST
}
input GetFinancialConnectionsAccountsInput {
	customer: String!
	account: String!
}
enum GetFinancialConnectionsAccountsObject {
	LIST
}
enum GetIdentityVerificationReports {
	DOCUMENT
	ID_NUMBER
}
input GetIdentityVerificationReportsInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
input GetIdentityVerificationReportsUnionInput {
	int: Int
	getIdentityVerificationReportsInput: GetIdentityVerificationReportsInput
}
enum GetIdentityVerificationSessions {
	CANCELED
	PROCESSING
	REQUIRES_INPUT
	VERIFIED
}
input GetIdentityVerificationSessionsInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
input GetIdentityVerificationSessionsUnionInput {
	int: Int
	getIdentityVerificationSessionsInput: GetIdentityVerificationSessionsInput
}
type GetInvoiceitems {
	url: String!
	object: GetInvoiceitemsObject!
	hasMore: Boolean!
	data: [Invoiceitem!]!
}
input GetInvoiceitemsInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetInvoiceitemsObject {
	LIST
}
input GetInvoiceitemsUnionInput {
	int: Int
	getInvoiceitemsInput: GetInvoiceitemsInput
}
enum GetInvoices {
	DRAFT
	OPEN
	PAID
	UNCOLLECTIBLE
	VOID
}
input GetInvoicesInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
type GetInvoicesInvoiceLines {
	url: String!
	object: GetInvoicesInvoiceLinesObject!
	hasMore: Boolean!
	data: [LineItem!]!
}
enum GetInvoicesInvoiceLinesObject {
	LIST
}
type GetInvoicesSearch {
	url: String!
	totalCount: Int!
	object: GetInvoicesSearchObject!
	nextPage: String
	hasMore: Boolean!
	data: [Invoice!]!
}
enum GetInvoicesSearchObject {
	SEARCH_RESULT
}
input GetInvoicesUnionInput {
	int: Int
	getInvoicesInput: GetInvoicesInput
}
enum GetInvoicesUpcoming {
	NOW
}
enum GetInvoicesUpcomingBillingThresholds {
	
}
input GetInvoicesUpcomingBillingThresholdsInput {
	usageGte: Int!
}
input GetInvoicesUpcomingBillingThresholdsUnionInput {
	getInvoicesUpcomingBillingThresholds: GetInvoicesUpcomingBillingThresholds
	getInvoicesUpcomingBillingThresholdsInput: GetInvoicesUpcomingBillingThresholdsInput
}
input GetInvoicesUpcomingInput {
	taxRates: UnionInput!
	quantity: Int!
	priceData: GetInvoicesUpcomingPriceDataInput!
	price: String!
	metadata: UnionInput!
	id: String!
	deleted: Boolean!
	clearUsage: Boolean!
	billingThresholds: GetInvoicesUpcomingBillingThresholdsUnionInput!
}
enum GetInvoicesUpcomingIntervalRecurringPriceData {
	DAY
	MONTH
	WEEK
	YEAR
}
enum GetInvoicesUpcomingLines {
	NOW
}
enum GetInvoicesUpcomingLinesBillingThresholds {
	
}
input GetInvoicesUpcomingLinesBillingThresholdsInput {
	usageGte: Int!
}
input GetInvoicesUpcomingLinesBillingThresholdsUnionInput {
	getInvoicesUpcomingLinesBillingThresholds: GetInvoicesUpcomingLinesBillingThresholds
	getInvoicesUpcomingLinesBillingThresholdsInput: GetInvoicesUpcomingLinesBillingThresholdsInput
}
input GetInvoicesUpcomingLinesInput {
	taxRates: UnionInput!
	quantity: Int!
	priceData: GetInvoicesUpcomingLinesPriceDataInput!
	price: String!
	metadata: UnionInput!
	id: String!
	deleted: Boolean!
	clearUsage: Boolean!
	billingThresholds: GetInvoicesUpcomingLinesBillingThresholdsUnionInput!
}
enum GetInvoicesUpcomingLinesIntervalRecurringPriceData {
	DAY
	MONTH
	WEEK
	YEAR
}
input GetInvoicesUpcomingLinesPriceDataInput {
	unitAmountDecimal: String!
	unitAmount: Int!
	taxBehavior: GetInvoicesUpcomingLinesTaxBehaviorPriceData!
	recurring: GetInvoicesUpcomingLinesRecurringPriceDataInput!
	product: String!
	currency: String!
}
input GetInvoicesUpcomingLinesRecurringPriceDataInput {
	intervalCount: Int!
	interval: GetInvoicesUpcomingLinesIntervalRecurringPriceData!
}
enum GetInvoicesUpcomingLinesTaxBehaviorPriceData {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
input GetInvoicesUpcomingLinesUnionInput {
	getInvoicesUpcomingLines: GetInvoicesUpcomingLines
	getInvoicesUpcomingLinesInput: GetInvoicesUpcomingLinesInput
}
input GetInvoicesUpcomingPriceDataInput {
	unitAmountDecimal: String!
	unitAmount: Int!
	taxBehavior: GetInvoicesUpcomingTaxBehaviorPriceData!
	recurring: GetInvoicesUpcomingRecurringPriceDataInput!
	product: String!
	currency: String!
}
input GetInvoicesUpcomingRecurringPriceDataInput {
	intervalCount: Int!
	interval: GetInvoicesUpcomingIntervalRecurringPriceData!
}
enum GetInvoicesUpcomingTaxBehaviorPriceData {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
input GetInvoicesUpcomingUnionInput {
	getInvoicesUpcoming: GetInvoicesUpcoming
	getInvoicesUpcomingInput: GetInvoicesUpcomingInput
}
enum GetIssuingAuthorizations {
	CLOSED
	PENDING
	REVERSED
}
input GetIssuingAuthorizationsInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
input GetIssuingAuthorizationsUnionInput {
	int: Int
	getIssuingAuthorizationsInput: GetIssuingAuthorizationsInput
}
enum GetIssuingCardholders {
	COMPANY
	INDIVIDUAL
}
input GetIssuingCardholdersInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
input GetIssuingCardholdersUnionInput {
	int: Int
	getIssuingCardholdersInput: GetIssuingCardholdersInput
}
enum GetIssuingCards {
	PHYSICAL
	VIRTUAL
}
input GetIssuingCardsInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
input GetIssuingCardsUnionInput {
	int: Int
	getIssuingCardsInput: GetIssuingCardsInput
}
enum GetIssuingDisputes {
	EXPIRED
	LOST
	SUBMITTED
	UNSUBMITTED
	WON
}
input GetIssuingDisputesInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
input GetIssuingDisputesUnionInput {
	int: Int
	getIssuingDisputesInput: GetIssuingDisputesInput
}
type GetIssuingSettlements {
	url: String!
	object: GetIssuingSettlementsObject!
	hasMore: Boolean!
	data: [IssuingSettlement!]!
}
input GetIssuingSettlementsInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetIssuingSettlementsObject {
	LIST
}
input GetIssuingSettlementsUnionInput {
	int: Int
	getIssuingSettlementsInput: GetIssuingSettlementsInput
}
enum GetIssuingTransactions {
	CAPTURE
	REFUND
}
input GetIssuingTransactionsInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
input GetIssuingTransactionsUnionInput {
	int: Int
	getIssuingTransactionsInput: GetIssuingTransactionsInput
}
type GetLinkedAccounts {
	url: String!
	object: GetLinkedAccountsObject!
	hasMore: Boolean!
	data: [FinancialConnectionsAccount!]!
}
type GetLinkedAccountsAccountOwners {
	url: String!
	object: GetLinkedAccountsAccountOwnersObject!
	hasMore: Boolean!
	data: [FinancialConnectionsAccountOwner!]!
}
enum GetLinkedAccountsAccountOwnersObject {
	LIST
}
input GetLinkedAccountsInput {
	customer: String!
	account: String!
}
enum GetLinkedAccountsObject {
	LIST
}
type GetPaymentIntents {
	url: String!
	object: GetPaymentIntentsObject!
	hasMore: Boolean!
	data: [PaymentIntent!]!
}
input GetPaymentIntentsInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetPaymentIntentsObject {
	LIST
}
type GetPaymentIntentsSearch {
	url: String!
	totalCount: Int!
	object: GetPaymentIntentsSearchObject!
	nextPage: String
	hasMore: Boolean!
	data: [PaymentIntent!]!
}
enum GetPaymentIntentsSearchObject {
	SEARCH_RESULT
}
input GetPaymentIntentsUnionInput {
	int: Int
	getPaymentIntentsInput: GetPaymentIntentsInput
}
type GetPaymentLinks {
	url: String!
	object: GetPaymentLinksObject!
	hasMore: Boolean!
	data: [PaymentLink!]!
}
enum GetPaymentLinksObject {
	LIST
}
type GetPaymentLinksPaymentLinkLineItems {
	url: String!
	object: GetPaymentLinksPaymentLinkLineItemsObject!
	hasMore: Boolean!
	data: [Item!]!
}
enum GetPaymentLinksPaymentLinkLineItemsObject {
	LIST
}
enum GetPaymentMethods {
	ACSS_DEBIT
	AFFIRM
	AFTERPAY_CLEARPAY
	ALIPAY
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BLIK
	BOLETO
	CARD
	CUSTOMER_BALANCE
	EPS
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KLARNA
	KONBINI
	LINK
	OXXO
	P_24
	PAYNOW
	PIX
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
type GetPayouts {
	url: String!
	object: GetPayoutsObject!
	hasMore: Boolean!
	data: [Payout!]!
}
input GetPayoutsInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetPayoutsObject {
	LIST
}
input GetPayoutsUnionInput {
	int: Int
	getPayoutsInput: GetPayoutsInput
}
type GetPlans {
	url: String!
	object: GetPlansObject!
	hasMore: Boolean!
	data: [Plan!]!
}
input GetPlansInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetPlansObject {
	LIST
}
input GetPlansUnionInput {
	int: Int
	getPlansInput: GetPlansInput
}
enum GetPrices {
	ONE_TIME
	RECURRING
}
input GetPricesInput {
	usageType: GetPricesUsageType!
	interval: GetPricesInterval!
}
enum GetPricesInterval {
	DAY
	MONTH
	WEEK
	YEAR
}
type GetPricesSearch {
	url: String!
	totalCount: Int!
	object: GetPricesSearchObject!
	nextPage: String
	hasMore: Boolean!
	data: [Price!]!
}
enum GetPricesSearchObject {
	SEARCH_RESULT
}
input GetPricesUnionInput {
	int: Int
	getPricesInput: GetPricesInput
}
enum GetPricesUsageType {
	LICENSED
	METERED
}
type GetProducts {
	url: String!
	object: GetProductsObject!
	hasMore: Boolean!
	data: [Product!]!
}
input GetProductsInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetProductsObject {
	LIST
}
type GetProductsSearch {
	url: String!
	totalCount: Int!
	object: GetProductsSearchObject!
	nextPage: String
	hasMore: Boolean!
	data: [Product!]!
}
enum GetProductsSearchObject {
	SEARCH_RESULT
}
input GetProductsUnionInput {
	int: Int
	getProductsInput: GetProductsInput
}
type GetPromotionCodes {
	url: String!
	object: GetPromotionCodesObject!
	hasMore: Boolean!
	data: [PromotionCode!]!
}
input GetPromotionCodesInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetPromotionCodesObject {
	LIST
}
input GetPromotionCodesUnionInput {
	int: Int
	getPromotionCodesInput: GetPromotionCodesInput
}
enum GetQuotes {
	ACCEPTED
	CANCELED
	DRAFT
	OPEN
}
type GetQuotesQuoteComputedUpfrontLineItems {
	url: String!
	object: GetQuotesQuoteComputedUpfrontLineItemsObject!
	hasMore: Boolean!
	data: [Item!]!
}
enum GetQuotesQuoteComputedUpfrontLineItemsObject {
	LIST
}
type GetQuotesQuoteLineItems {
	url: String!
	object: GetQuotesQuoteLineItemsObject!
	hasMore: Boolean!
	data: [Item!]!
}
enum GetQuotesQuoteLineItemsObject {
	LIST
}
type GetRadarEarlyFraudWarnings {
	url: String!
	object: GetRadarEarlyFraudWarningsObject!
	hasMore: Boolean!
	data: [RadarEarlyFraudWarning!]!
}
enum GetRadarEarlyFraudWarningsObject {
	LIST
}
type GetRadarValueListItems {
	url: String!
	object: GetRadarValueListItemsObject!
	hasMore: Boolean!
	data: [RadarValueListItem!]!
}
input GetRadarValueListItemsInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetRadarValueListItemsObject {
	LIST
}
input GetRadarValueListItemsUnionInput {
	int: Int
	getRadarValueListItemsInput: GetRadarValueListItemsInput
}
type GetRadarValueLists {
	url: String!
	object: GetRadarValueListsObject!
	hasMore: Boolean!
	data: [RadarValueList!]!
}
input GetRadarValueListsInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetRadarValueListsObject {
	LIST
}
input GetRadarValueListsUnionInput {
	int: Int
	getRadarValueListsInput: GetRadarValueListsInput
}
type GetRefunds {
	url: String!
	object: GetRefundsObject!
	hasMore: Boolean!
	data: [Refund!]!
}
input GetRefundsInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetRefundsObject {
	LIST
}
input GetRefundsUnionInput {
	int: Int
	getRefundsInput: GetRefundsInput
}
type GetReportingReportRuns {
	url: String!
	object: GetReportingReportRunsObject!
	hasMore: Boolean!
	data: [ReportingReportRun!]!
}
input GetReportingReportRunsInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetReportingReportRunsObject {
	LIST
}
input GetReportingReportRunsUnionInput {
	int: Int
	getReportingReportRunsInput: GetReportingReportRunsInput
}
type GetReportingReportTypes {
	url: String!
	object: GetReportingReportTypesObject!
	hasMore: Boolean!
	data: [ReportingReportType!]!
}
enum GetReportingReportTypesObject {
	LIST
}
type GetReviews {
	url: String!
	object: GetReviewsObject!
	hasMore: Boolean!
	data: [Review!]!
}
input GetReviewsInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetReviewsObject {
	LIST
}
input GetReviewsUnionInput {
	int: Int
	getReviewsInput: GetReviewsInput
}
type GetSetupAttempts {
	url: String!
	object: GetSetupAttemptsObject!
	hasMore: Boolean!
	data: [SetupAttempt!]!
}
input GetSetupAttemptsInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetSetupAttemptsObject {
	LIST
}
input GetSetupAttemptsUnionInput {
	int: Int
	getSetupAttemptsInput: GetSetupAttemptsInput
}
type GetSetupIntents {
	url: String!
	object: GetSetupIntentsObject!
	hasMore: Boolean!
	data: [SetupIntent!]!
}
input GetSetupIntentsInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetSetupIntentsObject {
	LIST
}
input GetSetupIntentsUnionInput {
	int: Int
	getSetupIntentsInput: GetSetupIntentsInput
}
type GetShippingRates {
	url: String!
	object: GetShippingRatesObject!
	hasMore: Boolean!
	data: [ShippingRate!]!
}
input GetShippingRatesInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetShippingRatesObject {
	LIST
}
input GetShippingRatesUnionInput {
	int: Int
	getShippingRatesInput: GetShippingRatesInput
}
type GetSigmaScheduledQueryRuns {
	url: String!
	object: GetSigmaScheduledQueryRunsObject!
	hasMore: Boolean!
	data: [ScheduledQueryRun!]!
}
enum GetSigmaScheduledQueryRunsObject {
	LIST
}
type GetSourcesSourceSourceTransactions {
	url: String!
	object: GetSourcesSourceSourceTransactionsObject!
	hasMore: Boolean!
	data: [SourceTransaction!]!
}
enum GetSourcesSourceSourceTransactionsObject {
	LIST
}
type GetSubscriptionItems {
	url: String!
	object: GetSubscriptionItemsObject!
	hasMore: Boolean!
	data: [SubscriptionItem!]!
}
enum GetSubscriptionItemsObject {
	LIST
}
type GetSubscriptionItemsSubscriptionItemUsageRecordSummaries {
	url: String!
	object: GetSubscriptionItemsSubscriptionItemUsageRecordSummariesObject!
	hasMore: Boolean!
	data: [UsageRecordSummary!]!
}
enum GetSubscriptionItemsSubscriptionItemUsageRecordSummariesObject {
	LIST
}
type GetSubscriptionSchedules {
	url: String!
	object: GetSubscriptionSchedulesObject!
	hasMore: Boolean!
	data: [SubscriptionSchedule!]!
}
input GetSubscriptionSchedulesInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetSubscriptionSchedulesObject {
	LIST
}
input GetSubscriptionSchedulesUnionInput {
	int: Int
	getSubscriptionSchedulesInput: GetSubscriptionSchedulesInput
}
enum GetSubscriptions {
	ACTIVE
	ALL
	CANCELED
	ENDED
	INCOMPLETE
	INCOMPLETE_EXPIRED
	PAST_DUE
	PAUSED
	TRIALING
	UNPAID
}
input GetSubscriptionsInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
type GetSubscriptionsSearch {
	url: String!
	totalCount: Int!
	object: GetSubscriptionsSearchObject!
	nextPage: String
	hasMore: Boolean!
	data: [Subscription!]!
}
enum GetSubscriptionsSearchObject {
	SEARCH_RESULT
}
input GetSubscriptionsUnionInput {
	int: Int
	getSubscriptionsInput: GetSubscriptionsInput
}
type GetTaxCodes {
	url: String!
	object: GetTaxCodesObject!
	hasMore: Boolean!
	data: [TaxCode!]!
}
enum GetTaxCodesObject {
	LIST
}
type GetTaxRates {
	url: String!
	object: GetTaxRatesObject!
	hasMore: Boolean!
	data: [TaxRate!]!
}
input GetTaxRatesInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetTaxRatesObject {
	LIST
}
input GetTaxRatesUnionInput {
	int: Int
	getTaxRatesInput: GetTaxRatesInput
}
type GetTerminalConfigurations {
	url: String!
	object: GetTerminalConfigurationsObject!
	hasMore: Boolean!
	data: [TerminalConfiguration!]!
}
enum GetTerminalConfigurationsObject {
	LIST
}
type GetTerminalLocations {
	url: String!
	object: GetTerminalLocationsObject!
	hasMore: Boolean!
	data: [TerminalLocation!]!
}
enum GetTerminalLocationsObject {
	LIST
}
enum GetTerminalReaders {
	OFFLINE
	ONLINE
}
type GetTestHelpersTestClocks {
	url: String!
	object: GetTestHelpersTestClocksObject!
	hasMore: Boolean!
	data: [TestHelpersTestClock!]!
}
enum GetTestHelpersTestClocksObject {
	LIST
}
enum GetTopups {
	CANCELED
	FAILED
	PENDING
	SUCCEEDED
}
input GetTopupsInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
input GetTopupsUnionInput {
	int: Int
	getTopupsInput: GetTopupsInput
}
type GetTransfers {
	url: String!
	object: GetTransfersObject!
	hasMore: Boolean!
	data: [Transfer!]!
}
type GetTransfersIdReversals {
	url: String!
	object: GetTransfersIdReversalsObject!
	hasMore: Boolean!
	data: [TransferReversal!]!
}
enum GetTransfersIdReversalsObject {
	LIST
}
input GetTransfersInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetTransfersObject {
	LIST
}
input GetTransfersUnionInput {
	int: Int
	getTransfersInput: GetTransfersInput
}
enum GetTreasuryCreditReversals {
	CANCELED
	POSTED
	PROCESSING
}
enum GetTreasuryDebitReversals {
	CANCELED
	COMPLETED
	PROCESSING
}
type GetTreasuryFinancialAccounts {
	url: String!
	object: GetTreasuryFinancialAccountsObject!
	hasMore: Boolean!
	data: [TreasuryFinancialAccount!]!
}
input GetTreasuryFinancialAccountsInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
enum GetTreasuryFinancialAccountsObject {
	LIST
}
input GetTreasuryFinancialAccountsUnionInput {
	int: Int
	getTreasuryFinancialAccountsInput: GetTreasuryFinancialAccountsInput
}
enum GetTreasuryInboundTransfers {
	CANCELED
	FAILED
	PROCESSING
	SUCCEEDED
}
enum GetTreasuryOutboundPayments {
	CANCELED
	FAILED
	POSTED
	PROCESSING
	RETURNED
}
enum GetTreasuryOutboundTransfers {
	CANCELED
	FAILED
	POSTED
	PROCESSING
	RETURNED
}
enum GetTreasuryReceivedCredits {
	FAILED
	SUCCEEDED
}
input GetTreasuryReceivedCreditsInput {
	sourceFlowType: GetTreasuryReceivedCreditsSourceFlowType!
}
enum GetTreasuryReceivedCreditsSourceFlowType {
	CREDIT_REVERSAL
	OTHER
	OUTBOUND_PAYMENT
	PAYOUT
}
enum GetTreasuryReceivedDebits {
	FAILED
	SUCCEEDED
}
enum GetTreasuryTransactionEntries {
	CREATED
	EFFECTIVE_AT
}
input GetTreasuryTransactionEntriesInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
input GetTreasuryTransactionEntriesUnionInput {
	int: Int
	getTreasuryTransactionEntriesInput: GetTreasuryTransactionEntriesInput
}
enum GetTreasuryTransactions {
	OPEN
	POSTED
	VOID
}
input GetTreasuryTransactionsInput {
	postedAt: GetTreasuryTransactionsPostedAtUnionInput!
}
input GetTreasuryTransactionsPostedAtInput {
	lte: Int!
	lt: Int!
	gte: Int!
	gt: Int!
}
input GetTreasuryTransactionsPostedAtUnionInput {
	int: Int
	getTreasuryTransactionsPostedAtInput: GetTreasuryTransactionsPostedAtInput
}
input GetTreasuryTransactionsUnionInput {
	int: Int
	getTreasuryTransactionsInput: GetTreasuryTransactionsInput
}
type GetWebhookEndpoints {
	url: String!
	object: GetWebhookEndpointsObject!
	hasMore: Boolean!
	data: [WebhookEndpoint!]!
}
enum GetWebhookEndpointsObject {
	LIST
}
type IdentityVerificationReport {
	verificationSession: String
	type: IdentityVerificationReportType!
	selfie: GelatoSelfieReport!
	options: GelatoVerificationReportOptions!
	object: IdentityVerificationReportObject!
	livemode: Boolean!
	idNumber: GelatoIdNumberReport!
	id: String!
	document: GelatoDocumentReport!
	created: Int!
}
enum IdentityVerificationReportObject {
	IDENTITY_VERIFICATION_REPORT
}
enum IdentityVerificationReportType {
	DOCUMENT
	ID_NUMBER
}
union IdentityVerificationReportUnion = IdentityVerificationReport
type IdentityVerificationSession {
	verifiedOutputs: GelatoVerifiedOutputsUnion
	url: String
	type: IdentityVerificationSessionType!
	status: IdentityVerificationSessionStatus!
	redaction: VerificationSessionRedactionUnion
	options: GelatoVerificationSessionOptions!
	object: IdentityVerificationSessionObject!
	metadata: JSON!
	livemode: Boolean!
	lastVerificationReport: IdentityVerificationReportUnion
	lastError: GelatoSessionLastErrorUnion
	id: String!
	created: Int!
	clientSecret: String
}
enum IdentityVerificationSessionObject {
	IDENTITY_VERIFICATION_SESSION
}
enum IdentityVerificationSessionStatus {
	CANCELED
	PROCESSING
	REQUIRES_INPUT
	VERIFIED
}
enum IdentityVerificationSessionType {
	DOCUMENT
	ID_NUMBER
}
type InboundTransfers {
	usBankAccount: InboundTransfersPaymentMethodDetailsUsBankAccount!
	type: InboundTransfersType!
	billingDetails: TreasurySharedResourceBillingDetails!
}
type InboundTransfersPaymentMethodDetailsUsBankAccount {
	routingNumber: String
	network: InboundTransfersPaymentMethodDetailsUsBankAccountNetwork!
	last4: String
	fingerprint: String
	bankName: String
	accountType: InboundTransfersPaymentMethodDetailsUsBankAccountAccountType
	accountHolderType: InboundTransfersPaymentMethodDetailsUsBankAccountAccountHolderType
}
enum InboundTransfersPaymentMethodDetailsUsBankAccountAccountHolderType {
	COMPANY
	INDIVIDUAL
}
enum InboundTransfersPaymentMethodDetailsUsBankAccountAccountType {
	CHECKING
	SAVINGS
}
enum InboundTransfersPaymentMethodDetailsUsBankAccountNetwork {
	ACH
}
enum InboundTransfersType {
	US_BANK_ACCOUNT
}
union InboundTransfersUnion = InboundTransfers
type Invoice {
	webhooksDeliveredAt: Int
	transferData: InvoiceTransferDataUnion
	totalTaxAmounts: [InvoiceTaxAmount!]!
	totalExcludingTax: Int
	totalDiscountAmounts: [DiscountsResourceDiscountAmount!]
	total: Int!
	thresholdReason: InvoiceThresholdReason!
	testClock: TestHelpersTestClockUnion
	tax: Int
	subtotalExcludingTax: Int
	subtotal: Int!
	subscriptionProrationDate: Int!
	subscription: SubscriptionUnion
	statusTransitions: InvoicesStatusTransitions!
	status: InvoiceStatus
	statementDescriptor: String
	startingBalance: Int!
	shippingDetails: ShippingUnion
	shippingCost: InvoicesShippingCostUnion
	renderingOptions: InvoiceSettingRenderingOptionsUnion
	receiptNumber: String
	quote: QuoteUnion
	prePaymentCreditNotesAmount: Int!
	postPaymentCreditNotesAmount: Int!
	periodStart: Int!
	periodEnd: Int!
	paymentSettings: InvoicesPaymentSettings!
	paymentIntent: PaymentIntentUnion
	paidOutOfBand: Boolean!
	paid: Boolean!
	onBehalfOf: AccountUnion
	object: InvoiceObject!
	number: String
	nextPaymentAttempt: Int
	metadata: JSON!
	livemode: Boolean!
	lines: InvoiceLines!
	latestRevision: InvoiceUnion
	lastFinalizationError: ApiErrorsUnion
	invoicePdf: String
	id: String!
	hostedInvoiceUrl: String
	fromInvoice: InvoicesFromInvoiceUnion
	footer: String
	endingBalance: Int
	dueDate: Int
	discounts: [DeletedDiscountOrDiscountUnion!]
	discount: DiscountUnion
	description: String
	defaultTaxRates: [TaxRate!]!
	defaultSource: SourceOrCardOrBankAccountUnion
	defaultPaymentMethod: PaymentMethodUnion
	customerTaxIds: [InvoicesResourceInvoiceTaxId!]
	customerTaxExempt: InvoiceCustomerTaxExempt
	customerShipping: ShippingUnion
	customerPhone: String
	customerName: String
	customerEmail: String
	customerAddress: AddressUnion
	customer: DeletedCustomerOrCustomerUnion
	customFields: [InvoiceSettingCustomField!]
	currency: String!
	created: Int!
	collectionMethod: InvoiceCollectionMethod!
	charge: ChargeUnion
	billingReason: InvoiceBillingReason
	automaticTax: AutomaticTax!
	autoAdvance: Boolean!
	attempted: Boolean!
	attemptCount: Int!
	applicationFeeAmount: Int
	application: DeletedApplicationOrApplicationUnion
	amountShipping: Int!
	amountRemaining: Int!
	amountPaid: Int!
	amountDue: Int!
	accountTaxIds: [DeletedTaxIdOrTaxIdUnion!]
	accountName: String
	accountCountry: String
}
enum InvoiceBillingReason {
	AUTOMATIC_PENDING_INVOICE_ITEM_INVOICE
	MANUAL
	QUOTE_ACCEPT
	SUBSCRIPTION
	SUBSCRIPTION_CREATE
	SUBSCRIPTION_CYCLE
	SUBSCRIPTION_THRESHOLD
	SUBSCRIPTION_UPDATE
	UPCOMING
}
enum InvoiceCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
enum InvoiceCustomerTaxExempt {
	EXEMPT
	NONE
	REVERSE
}
type InvoiceInstallmentsCard {
	enabled: Boolean
}
type InvoiceItemThresholdReason {
	usageGte: Int!
	lineItemIds: [String!]!
}
type InvoiceLineItemPeriod {
	start: Int!
	end: Int!
}
type InvoiceLines {
	url: String!
	object: InvoiceObjectLines!
	hasMore: Boolean!
	data: [LineItem!]!
}
type InvoiceMandateOptionsCard {
	description: String
	amountType: InvoiceMandateOptionsCardAmountType
	amount: Int
}
enum InvoiceMandateOptionsCardAmountType {
	FIXED
	MAXIMUM
}
enum InvoiceObject {
	INVOICE
}
enum InvoiceObjectLines {
	LIST
}
type InvoicePaymentMethodOptionsAcssDebit {
	verificationMethod: InvoicePaymentMethodOptionsAcssDebitVerificationMethod!
	mandateOptions: InvoicePaymentMethodOptionsAcssDebitMandateOptions!
}
type InvoicePaymentMethodOptionsAcssDebitMandateOptions {
	transactionType: InvoicePaymentMethodOptionsAcssDebitMandateOptionsTransactionType
}
enum InvoicePaymentMethodOptionsAcssDebitMandateOptionsTransactionType {
	BUSINESS
	PERSONAL
}
union InvoicePaymentMethodOptionsAcssDebitUnion = InvoicePaymentMethodOptionsAcssDebit
enum InvoicePaymentMethodOptionsAcssDebitVerificationMethod {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
type InvoicePaymentMethodOptionsBancontact {
	preferredLanguage: InvoicePaymentMethodOptionsBancontactPreferredLanguage!
}
enum InvoicePaymentMethodOptionsBancontactPreferredLanguage {
	DE
	EN
	FR
	NL
}
union InvoicePaymentMethodOptionsBancontactUnion = InvoicePaymentMethodOptionsBancontact
type InvoicePaymentMethodOptionsCard {
	requestThreeDSecure: InvoicePaymentMethodOptionsCardRequestThreeDSecure
	installments: InvoiceInstallmentsCard!
}
enum InvoicePaymentMethodOptionsCardRequestThreeDSecure {
	ANY
	AUTOMATIC
}
union InvoicePaymentMethodOptionsCardUnion = InvoicePaymentMethodOptionsCard
type InvoicePaymentMethodOptionsCustomerBalance {
	fundingType: InvoicePaymentMethodOptionsCustomerBalanceFundingType
	bankTransfer: InvoicePaymentMethodOptionsCustomerBalanceBankTransfer!
}
type InvoicePaymentMethodOptionsCustomerBalanceBankTransfer {
	type: String
	euBankTransfer: InvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransfer!
}
type InvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransfer {
	country: InvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransferCountry!
}
enum InvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransferCountry {
	BE
	DE
	ES
	FR
	IE
	NL
}
enum InvoicePaymentMethodOptionsCustomerBalanceFundingType {
	BANK_TRANSFER
}
union InvoicePaymentMethodOptionsCustomerBalanceUnion = InvoicePaymentMethodOptionsCustomerBalance
type InvoicePaymentMethodOptionsUsBankAccount {
	verificationMethod: InvoicePaymentMethodOptionsUsBankAccountVerificationMethod!
	financialConnections: InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptions!
}
type InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptions {
	permissions: [InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptionsPermissions!]!
}
enum InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptionsPermissions {
	BALANCES
	PAYMENT_METHOD
	TRANSACTIONS
}
union InvoicePaymentMethodOptionsUsBankAccountUnion = InvoicePaymentMethodOptionsUsBankAccount
enum InvoicePaymentMethodOptionsUsBankAccountVerificationMethod {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
type InvoiceSettingCustomField {
	value: String!
	name: String!
}
type InvoiceSettingCustomerSetting {
	renderingOptions: InvoiceSettingRenderingOptionsUnion
	footer: String
	defaultPaymentMethod: PaymentMethodUnion
	customFields: [InvoiceSettingCustomField!]
}
type InvoiceSettingQuoteSetting {
	daysUntilDue: Int
}
union InvoiceSettingQuoteSettingUnion = InvoiceSettingQuoteSetting
type InvoiceSettingRenderingOptions {
	amountTaxDisplay: String
}
union InvoiceSettingRenderingOptionsUnion = InvoiceSettingRenderingOptions
type InvoiceSettingSubscriptionScheduleSetting {
	daysUntilDue: Int
}
union InvoiceSettingSubscriptionScheduleSettingUnion = InvoiceSettingSubscriptionScheduleSetting
enum InvoiceStatus {
	DELETED
	DRAFT
	OPEN
	PAID
	UNCOLLECTIBLE
	VOID
}
type InvoiceTaxAmount {
	taxRate: TaxRateUnion!
	inclusive: Boolean!
	amount: Int!
}
type InvoiceThresholdReason {
	itemReasons: [InvoiceItemThresholdReason!]!
	amountGte: Int
}
type InvoiceTransferData {
	destination: AccountUnion!
	amount: Int
}
union InvoiceTransferDataUnion = InvoiceTransferData
union InvoiceUnion = Invoice
type Invoiceitem {
	unitAmountDecimal: String
	unitAmount: Int
	testClock: TestHelpersTestClockUnion
	taxRates: [TaxRate!]
	subscriptionItem: String!
	subscription: SubscriptionUnion
	quantity: Int!
	proration: Boolean!
	price: PriceUnion
	period: InvoiceLineItemPeriod!
	object: InvoiceitemObject!
	metadata: JSON!
	livemode: Boolean!
	invoice: InvoiceUnion
	id: String!
	discounts: [DiscountUnion!]
	discountable: Boolean!
	description: String
	date: Int!
	customer: DeletedCustomerOrCustomerUnion!
	currency: String!
	amount: Int!
}
enum InvoiceitemObject {
	INVOICEITEM
}
type InvoicesFromInvoice {
	invoice: InvoiceUnion!
	action: String!
}
union InvoicesFromInvoiceUnion = InvoicesFromInvoice
type InvoicesLineItemsCreditedItems {
	invoiceLineItems: [String!]!
	invoice: String!
}
union InvoicesLineItemsCreditedItemsUnion = InvoicesLineItemsCreditedItems
type InvoicesLineItemsProrationDetails {
	creditedItems: InvoicesLineItemsCreditedItemsUnion
}
union InvoicesLineItemsProrationDetailsUnion = InvoicesLineItemsProrationDetails
type InvoicesPaymentMethodOptions {
	usBankAccount: InvoicePaymentMethodOptionsUsBankAccountUnion
	konbini: Union
	customerBalance: InvoicePaymentMethodOptionsCustomerBalanceUnion
	card: InvoicePaymentMethodOptionsCardUnion
	bancontact: InvoicePaymentMethodOptionsBancontactUnion
	acssDebit: InvoicePaymentMethodOptionsAcssDebitUnion
}
union InvoicesPaymentMethodOptionsUnion = InvoicesPaymentMethodOptions
type InvoicesPaymentSettings {
	paymentMethodTypes: [InvoicesPaymentSettingsPaymentMethodTypes!]
	paymentMethodOptions: InvoicesPaymentMethodOptionsUnion
	defaultMandate: String
}
enum InvoicesPaymentSettingsPaymentMethodTypes {
	ACH_CREDIT_TRANSFER
	ACH_DEBIT
	ACSS_DEBIT
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BOLETO
	CARD
	CUSTOMER_BALANCE
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KONBINI
	LINK
	PAYNOW
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
type InvoicesResourceInvoiceTaxId {
	value: String
	type: InvoicesResourceInvoiceTaxIdType!
}
enum InvoicesResourceInvoiceTaxIdType {
	AE_TRN
	AU_ABN
	AU_ARN
	BG_UIC
	BR_CNPJ
	BR_CPF
	CA_BN
	CA_GST_HST
	CA_PST_BC
	CA_PST_MB
	CA_PST_SK
	CA_QST
	CH_VAT
	CL_TIN
	EG_TIN
	ES_CIF
	EU_OSS_VAT
	EU_VAT
	GB_VAT
	GE_VAT
	HK_BR
	HU_TIN
	ID_NPWP
	IL_VAT
	IN_GST
	IS_VAT
	JP_CN
	JP_RN
	JP_TRN
	KE_PIN
	KR_BRN
	LI_UID
	MX_RFC
	MY_FRP
	MY_ITN
	MY_SST
	NO_VAT
	NZ_GST
	PH_TIN
	RU_INN
	RU_KPP
	SA_VAT
	SG_GST
	SG_UEN
	SI_TIN
	TH_VAT
	TR_TIN
	TW_VAT
	UA_VAT
	UNKNOWN
	US_EIN
	ZA_VAT
}
type InvoicesShippingCost {
	taxes: [LineItemsTaxAmount!]!
	shippingRate: ShippingRateUnion
	amountTotal: Int!
	amountTax: Int!
	amountSubtotal: Int!
}
union InvoicesShippingCostUnion = InvoicesShippingCost
type InvoicesStatusTransitions {
	voidedAt: Int
	paidAt: Int
	markedUncollectibleAt: Int
	finalizedAt: Int
}
type IssuingAuthorization {
	wallet: String
	verificationData: IssuingAuthorizationVerificationData!
	treasury: IssuingAuthorizationTreasuryUnion
	transactions: [IssuingTransaction!]!
	status: IssuingAuthorizationStatus!
	requestHistory: [IssuingAuthorizationRequest!]!
	pendingRequest: IssuingAuthorizationPendingRequestUnion
	object: IssuingAuthorizationObject!
	networkData: IssuingAuthorizationNetworkDataUnion
	metadata: JSON!
	merchantData: IssuingAuthorizationMerchantData!
	merchantCurrency: String!
	merchantAmount: Int!
	livemode: Boolean!
	id: String!
	currency: String!
	created: Int!
	cardholder: IssuingCardholderUnion
	card: IssuingCard!
	balanceTransactions: [BalanceTransaction!]!
	authorizationMethod: IssuingAuthorizationAuthorizationMethod!
	approved: Boolean!
	amountDetails: IssuingAuthorizationAmountDetailsUnion
	amount: Int!
}
type IssuingAuthorizationAmountDetails {
	atmFee: Int
}
union IssuingAuthorizationAmountDetailsUnion = IssuingAuthorizationAmountDetails
enum IssuingAuthorizationAuthorizationMethod {
	CHIP
	CONTACTLESS
	KEYED_IN
	ONLINE
	SWIPE
}
type IssuingAuthorizationMerchantData {
	state: String
	postalCode: String
	networkId: String!
	name: String
	country: String
	city: String
	categoryCode: String!
	category: String!
}
type IssuingAuthorizationNetworkData {
	acquiringInstitutionId: String
}
union IssuingAuthorizationNetworkDataUnion = IssuingAuthorizationNetworkData
enum IssuingAuthorizationObject {
	ISSUING_AUTHORIZATION
}
type IssuingAuthorizationPendingRequest {
	merchantCurrency: String!
	merchantAmount: Int!
	isAmountControllable: Boolean!
	currency: String!
	amountDetails: IssuingAuthorizationAmountDetailsUnion
	amount: Int!
}
union IssuingAuthorizationPendingRequestUnion = IssuingAuthorizationPendingRequest
type IssuingAuthorizationRequest {
	reasonMessage: String
	reason: IssuingAuthorizationRequestReason!
	merchantCurrency: String!
	merchantAmount: Int!
	currency: String!
	created: Int!
	approved: Boolean!
	amountDetails: IssuingAuthorizationAmountDetailsUnion
	amount: Int!
}
enum IssuingAuthorizationRequestReason {
	ACCOUNT_DISABLED
	CARD_ACTIVE
	CARD_INACTIVE
	CARDHOLDER_INACTIVE
	CARDHOLDER_VERIFICATION_REQUIRED
	INSUFFICIENT_FUNDS
	NOT_ALLOWED
	SPENDING_CONTROLS
	SUSPECTED_FRAUD
	VERIFICATION_FAILED
	WEBHOOK_APPROVED
	WEBHOOK_DECLINED
	WEBHOOK_ERROR
	WEBHOOK_TIMEOUT
}
enum IssuingAuthorizationStatus {
	CLOSED
	PENDING
	REVERSED
}
type IssuingAuthorizationTreasury {
	transaction: String
	receivedDebits: [String!]!
	receivedCredits: [String!]!
}
union IssuingAuthorizationTreasuryUnion = IssuingAuthorizationTreasury
union IssuingAuthorizationUnion = IssuingAuthorization
type IssuingAuthorizationVerificationData {
	expiryCheck: IssuingAuthorizationVerificationDataExpiryCheck!
	cvcCheck: IssuingAuthorizationVerificationDataCvcCheck!
	addressPostalCodeCheck: IssuingAuthorizationVerificationDataAddressPostalCodeCheck!
	addressLine1Check: IssuingAuthorizationVerificationDataAddressLine1Check!
}
enum IssuingAuthorizationVerificationDataAddressLine1Check {
	MATCH
	MISMATCH
	NOT_PROVIDED
}
enum IssuingAuthorizationVerificationDataAddressPostalCodeCheck {
	MATCH
	MISMATCH
	NOT_PROVIDED
}
enum IssuingAuthorizationVerificationDataCvcCheck {
	MATCH
	MISMATCH
	NOT_PROVIDED
}
enum IssuingAuthorizationVerificationDataExpiryCheck {
	MATCH
	MISMATCH
	NOT_PROVIDED
}
type IssuingCard {
	wallets: IssuingCardWalletsUnion
	type: IssuingCardType!
	status: IssuingCardStatus!
	spendingControls: IssuingCardAuthorizationControls!
	shipping: IssuingCardShippingUnion
	replacementReason: IssuingCardReplacementReason
	replacementFor: IssuingCardUnion
	replacedBy: IssuingCardUnion
	object: IssuingCardObject!
	number: String!
	metadata: JSON!
	livemode: Boolean!
	last4: String!
	id: String!
	financialAccount: String
	expYear: Int!
	expMonth: Int!
	cvc: String!
	currency: String!
	created: Int!
	cardholder: IssuingCardholder!
	cancellationReason: IssuingCardCancellationReason
	brand: String!
}
type IssuingCardApplePay {
	ineligibleReason: IssuingCardApplePayIneligibleReason
	eligible: Boolean!
}
enum IssuingCardApplePayIneligibleReason {
	MISSING_AGREEMENT
	MISSING_CARDHOLDER_CONTACT
	UNSUPPORTED_REGION
}
type IssuingCardAuthorizationControls {
	spendingLimitsCurrency: String
	spendingLimits: [IssuingCardSpendingLimit!]
	blockedCategories: [IssuingCardAuthorizationControlsBlockedCategories!]
	allowedCategories: [IssuingCardAuthorizationControlsAllowedCategories!]
}
enum IssuingCardAuthorizationControlsAllowedCategories {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
enum IssuingCardAuthorizationControlsBlockedCategories {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
enum IssuingCardCancellationReason {
	DESIGN_REJECTED
	LOST
	STOLEN
}
type IssuingCardGooglePay {
	ineligibleReason: IssuingCardGooglePayIneligibleReason
	eligible: Boolean!
}
enum IssuingCardGooglePayIneligibleReason {
	MISSING_AGREEMENT
	MISSING_CARDHOLDER_CONTACT
	UNSUPPORTED_REGION
}
enum IssuingCardObject {
	ISSUING_CARD
}
enum IssuingCardReplacementReason {
	DAMAGED
	EXPIRED
	LOST
	STOLEN
}
type IssuingCardShipping {
	type: IssuingCardShippingType!
	trackingUrl: String
	trackingNumber: String
	status: IssuingCardShippingStatus
	service: IssuingCardShippingService!
	requireSignature: Boolean
	phoneNumber: String
	name: String!
	eta: Int
	customs: IssuingCardShippingCustomsUnion
	carrier: IssuingCardShippingCarrier
	address: Address!
}
enum IssuingCardShippingCarrier {
	DHL
	FEDEX
	ROYAL_MAIL
	USPS
}
type IssuingCardShippingCustoms {
	eoriNumber: String
}
union IssuingCardShippingCustomsUnion = IssuingCardShippingCustoms
enum IssuingCardShippingService {
	EXPRESS
	PRIORITY
	STANDARD
}
enum IssuingCardShippingStatus {
	CANCELED
	DELIVERED
	FAILURE
	PENDING
	RETURNED
	SHIPPED
}
enum IssuingCardShippingType {
	BULK
	INDIVIDUAL
}
union IssuingCardShippingUnion = IssuingCardShipping
type IssuingCardSpendingLimit {
	interval: IssuingCardSpendingLimitInterval!
	categories: [IssuingCardSpendingLimitCategories!]
	amount: Int!
}
enum IssuingCardSpendingLimitCategories {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
enum IssuingCardSpendingLimitInterval {
	ALL_TIME
	DAILY
	MONTHLY
	PER_AUTHORIZATION
	WEEKLY
	YEARLY
}
enum IssuingCardStatus {
	ACTIVE
	CANCELED
	INACTIVE
}
enum IssuingCardType {
	PHYSICAL
	VIRTUAL
}
union IssuingCardUnion = IssuingCard
type IssuingCardWallets {
	primaryAccountIdentifier: String
	googlePay: IssuingCardGooglePay!
	applePay: IssuingCardApplePay!
}
union IssuingCardWalletsUnion = IssuingCardWallets
type IssuingCardholder {
	type: IssuingCardholderType!
	status: IssuingCardholderStatus!
	spendingControls: IssuingCardholderAuthorizationControlsUnion
	requirements: IssuingCardholderRequirements!
	phoneNumber: String
	object: IssuingCardholderObject!
	name: String!
	metadata: JSON!
	livemode: Boolean!
	individual: IssuingCardholderIndividualUnion
	id: String!
	email: String
	created: Int!
	company: IssuingCardholderCompanyUnion
	billing: IssuingCardholderAddress!
}
type IssuingCardholderAddress {
	address: Address!
}
type IssuingCardholderAuthorizationControls {
	spendingLimitsCurrency: String
	spendingLimits: [IssuingCardholderSpendingLimit!]
	blockedCategories: [IssuingCardholderAuthorizationControlsBlockedCategories!]
	allowedCategories: [IssuingCardholderAuthorizationControlsAllowedCategories!]
}
enum IssuingCardholderAuthorizationControlsAllowedCategories {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
enum IssuingCardholderAuthorizationControlsBlockedCategories {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
union IssuingCardholderAuthorizationControlsUnion = IssuingCardholderAuthorizationControls
type IssuingCardholderCompany {
	taxIdProvided: Boolean!
}
union IssuingCardholderCompanyUnion = IssuingCardholderCompany
type IssuingCardholderIdDocument {
	front: FileUnion
	back: FileUnion
}
union IssuingCardholderIdDocumentUnion = IssuingCardholderIdDocument
type IssuingCardholderIndividual {
	verification: IssuingCardholderVerificationUnion
	lastName: String
	firstName: String
	dob: IssuingCardholderIndividualDobUnion
}
type IssuingCardholderIndividualDob {
	year: Int
	month: Int
	day: Int
}
union IssuingCardholderIndividualDobUnion = IssuingCardholderIndividualDob
union IssuingCardholderIndividualUnion = IssuingCardholderIndividual
enum IssuingCardholderObject {
	ISSUING_CARDHOLDER
}
type IssuingCardholderRequirements {
	pastDue: [IssuingCardholderRequirementsPastDue!]
	disabledReason: IssuingCardholderRequirementsDisabledReason
}
enum IssuingCardholderRequirementsDisabledReason {
	LISTED
	REJECTED_LISTED
	UNDER_REVIEW
}
enum IssuingCardholderRequirementsPastDue {
	COMPANY_TAX_ID
	INDIVIDUAL_DOB_DAY
	INDIVIDUAL_DOB_MONTH
	INDIVIDUAL_DOB_YEAR
	INDIVIDUAL_FIRST_NAME
	INDIVIDUAL_LAST_NAME
	INDIVIDUAL_VERIFICATION_DOCUMENT
}
type IssuingCardholderSpendingLimit {
	interval: IssuingCardholderSpendingLimitInterval!
	categories: [IssuingCardholderSpendingLimitCategories!]
	amount: Int!
}
enum IssuingCardholderSpendingLimitCategories {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
enum IssuingCardholderSpendingLimitInterval {
	ALL_TIME
	DAILY
	MONTHLY
	PER_AUTHORIZATION
	WEEKLY
	YEARLY
}
enum IssuingCardholderStatus {
	ACTIVE
	BLOCKED
	INACTIVE
}
enum IssuingCardholderType {
	COMPANY
	INDIVIDUAL
}
union IssuingCardholderUnion = IssuingCardholder
type IssuingCardholderVerification {
	document: IssuingCardholderIdDocumentUnion
}
union IssuingCardholderVerificationUnion = IssuingCardholderVerification
type IssuingDispute {
	treasury: IssuingDisputeTreasuryUnion
	transaction: IssuingTransactionUnion!
	status: IssuingDisputeStatus!
	object: IssuingDisputeObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	evidence: IssuingDisputeEvidence!
	currency: String!
	created: Int!
	balanceTransactions: [BalanceTransaction!]
	amount: Int!
}
type IssuingDisputeCanceledEvidence {
	returnedAt: Int
	returnStatus: IssuingDisputeCanceledEvidenceReturnStatus
	productType: IssuingDisputeCanceledEvidenceProductType
	productDescription: String
	explanation: String
	expectedAt: Int
	cancellationReason: String
	cancellationPolicyProvided: Boolean
	canceledAt: Int
	additionalDocumentation: FileUnion
}
enum IssuingDisputeCanceledEvidenceProductType {
	MERCHANDISE
	SERVICE
}
enum IssuingDisputeCanceledEvidenceReturnStatus {
	MERCHANT_REJECTED
	SUCCESSFUL
}
type IssuingDisputeDuplicateEvidence {
	originalTransaction: String
	explanation: String
	checkImage: FileUnion
	cashReceipt: FileUnion
	cardStatement: FileUnion
	additionalDocumentation: FileUnion
}
type IssuingDisputeEvidence {
	serviceNotAsDescribed: IssuingDisputeServiceNotAsDescribedEvidence!
	reason: IssuingDisputeEvidenceReason!
	other: IssuingDisputeOtherEvidence!
	notReceived: IssuingDisputeNotReceivedEvidence!
	merchandiseNotAsDescribed: IssuingDisputeMerchandiseNotAsDescribedEvidence!
	fraudulent: IssuingDisputeFraudulentEvidence!
	duplicate: IssuingDisputeDuplicateEvidence!
	canceled: IssuingDisputeCanceledEvidence!
}
enum IssuingDisputeEvidenceReason {
	CANCELED
	DUPLICATE
	FRAUDULENT
	MERCHANDISE_NOT_AS_DESCRIBED
	NOT_RECEIVED
	OTHER
	SERVICE_NOT_AS_DESCRIBED
}
type IssuingDisputeFraudulentEvidence {
	explanation: String
	additionalDocumentation: FileUnion
}
type IssuingDisputeMerchandiseNotAsDescribedEvidence {
	returnedAt: Int
	returnStatus: IssuingDisputeMerchandiseNotAsDescribedEvidenceReturnStatus
	returnDescription: String
	receivedAt: Int
	explanation: String
	additionalDocumentation: FileUnion
}
enum IssuingDisputeMerchandiseNotAsDescribedEvidenceReturnStatus {
	MERCHANT_REJECTED
	SUCCESSFUL
}
type IssuingDisputeNotReceivedEvidence {
	productType: IssuingDisputeNotReceivedEvidenceProductType
	productDescription: String
	explanation: String
	expectedAt: Int
	additionalDocumentation: FileUnion
}
enum IssuingDisputeNotReceivedEvidenceProductType {
	MERCHANDISE
	SERVICE
}
enum IssuingDisputeObject {
	ISSUING_DISPUTE
}
type IssuingDisputeOtherEvidence {
	productType: IssuingDisputeOtherEvidenceProductType
	productDescription: String
	explanation: String
	additionalDocumentation: FileUnion
}
enum IssuingDisputeOtherEvidenceProductType {
	MERCHANDISE
	SERVICE
}
type IssuingDisputeServiceNotAsDescribedEvidence {
	receivedAt: Int
	explanation: String
	cancellationReason: String
	canceledAt: Int
	additionalDocumentation: FileUnion
}
enum IssuingDisputeStatus {
	EXPIRED
	LOST
	SUBMITTED
	UNSUBMITTED
	WON
}
type IssuingDisputeTreasury {
	receivedDebit: String!
	debitReversal: String
}
union IssuingDisputeTreasuryUnion = IssuingDisputeTreasury
union IssuingDisputeUnion = IssuingDispute
type IssuingSettlement {
	transactionVolume: Int!
	transactionCount: Int!
	settlementService: String!
	object: IssuingSettlementObject!
	networkSettlementIdentifier: String!
	networkFees: Int!
	network: IssuingSettlementNetwork!
	netTotal: Int!
	metadata: JSON!
	livemode: Boolean!
	interchangeFees: Int!
	id: String!
	currency: String!
	created: Int!
	clearingDate: Int!
	bin: String!
}
enum IssuingSettlementNetwork {
	VISA
}
enum IssuingSettlementObject {
	ISSUING_SETTLEMENT
}
type IssuingTransaction {
	wallet: IssuingTransactionWallet
	type: IssuingTransactionType!
	treasury: IssuingTransactionTreasuryUnion
	purchaseDetails: IssuingTransactionPurchaseDetailsUnion
	object: IssuingTransactionObject!
	metadata: JSON!
	merchantData: IssuingAuthorizationMerchantData!
	merchantCurrency: String!
	merchantAmount: Int!
	livemode: Boolean!
	id: String!
	dispute: IssuingDisputeUnion
	currency: String!
	created: Int!
	cardholder: IssuingCardholderUnion
	card: IssuingCardUnion!
	balanceTransaction: BalanceTransactionUnion
	authorization: IssuingAuthorizationUnion
	amountDetails: IssuingTransactionAmountDetailsUnion
	amount: Int!
}
type IssuingTransactionAmountDetails {
	atmFee: Int
}
union IssuingTransactionAmountDetailsUnion = IssuingTransactionAmountDetails
type IssuingTransactionFlightData {
	travelAgency: String
	segments: [IssuingTransactionFlightDataLeg!]
	refundable: Boolean
	passengerName: String
	departureAt: Int
}
type IssuingTransactionFlightDataLeg {
	stopoverAllowed: Boolean
	serviceClass: String
	flightNumber: String
	departureAirportCode: String
	carrier: String
	arrivalAirportCode: String
}
union IssuingTransactionFlightDataUnion = IssuingTransactionFlightData
type IssuingTransactionFuelData {
	volumeDecimal: String
	unitCostDecimal: String!
	unit: String!
	type: String!
}
union IssuingTransactionFuelDataUnion = IssuingTransactionFuelData
type IssuingTransactionLodgingData {
	nights: Int
	checkInAt: Int
}
union IssuingTransactionLodgingDataUnion = IssuingTransactionLodgingData
enum IssuingTransactionObject {
	ISSUING_TRANSACTION
}
type IssuingTransactionPurchaseDetails {
	reference: String
	receipt: [IssuingTransactionReceiptData!]
	lodging: IssuingTransactionLodgingDataUnion
	fuel: IssuingTransactionFuelDataUnion
	flight: IssuingTransactionFlightDataUnion
}
union IssuingTransactionPurchaseDetailsUnion = IssuingTransactionPurchaseDetails
type IssuingTransactionReceiptData {
	unitCost: Int
	total: Int
	quantity: Float
	description: String
}
type IssuingTransactionTreasury {
	receivedDebit: String
	receivedCredit: String
}
union IssuingTransactionTreasuryUnion = IssuingTransactionTreasury
enum IssuingTransactionType {
	CAPTURE
	REFUND
}
union IssuingTransactionUnion = IssuingTransaction
enum IssuingTransactionWallet {
	APPLE_PAY
	GOOGLE_PAY
	SAMSUNG_PAY
}
type Item {
	taxes: [LineItemsTaxAmount!]!
	quantity: Int
	price: PriceUnion
	object: ItemObject!
	id: String!
	discounts: [LineItemsDiscountAmount!]!
	description: String!
	currency: String!
	amountTotal: Int!
	amountTax: Int!
	amountSubtotal: Int!
	amountDiscount: Int!
}
enum ItemObject {
	ITEM
}
"""
A JSON Value
"""
scalar JSON
type LegalEntityCompany {
	verification: LegalEntityCompanyVerificationUnion
	vatIdProvided: Boolean!
	taxIdRegistrar: String!
	taxIdProvided: Boolean!
	structure: LegalEntityCompanyStructure!
	phone: String
	ownershipDeclaration: LegalEntityUboDeclarationUnion
	ownersProvided: Boolean!
	nameKanji: String
	nameKana: String
	name: String
	executivesProvided: Boolean!
	directorsProvided: Boolean!
	addressKanji: LegalEntityJapanAddressUnion
	addressKana: LegalEntityJapanAddressUnion
	address: Address!
}
enum LegalEntityCompanyStructure {
	FREE_ZONE_ESTABLISHMENT
	FREE_ZONE_LLC
	GOVERNMENT_INSTRUMENTALITY
	GOVERNMENTAL_UNIT
	INCORPORATED_NON_PROFIT
	LIMITED_LIABILITY_PARTNERSHIP
	LLC
	MULTI_MEMBER_LLC
	PRIVATE_COMPANY
	PRIVATE_CORPORATION
	PRIVATE_PARTNERSHIP
	PUBLIC_COMPANY
	PUBLIC_CORPORATION
	PUBLIC_PARTNERSHIP
	SINGLE_MEMBER_LLC
	SOLE_ESTABLISHMENT
	SOLE_PROPRIETORSHIP
	TAX_EXEMPT_GOVERNMENT_INSTRUMENTALITY
	UNINCORPORATED_ASSOCIATION
	UNINCORPORATED_NON_PROFIT
}
type LegalEntityCompanyVerification {
	document: LegalEntityCompanyVerificationDocument!
}
type LegalEntityCompanyVerificationDocument {
	front: FileUnion
	detailsCode: String
	details: String
	back: FileUnion
}
union LegalEntityCompanyVerificationUnion = LegalEntityCompanyVerification
type LegalEntityDob {
	year: Int
	month: Int
	day: Int
}
type LegalEntityJapanAddress {
	town: String
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
union LegalEntityJapanAddressUnion = LegalEntityJapanAddress
type LegalEntityPersonVerification {
	status: String!
	document: LegalEntityPersonVerificationDocument!
	detailsCode: String
	details: String
	additionalDocument: LegalEntityPersonVerificationDocumentUnion
}
type LegalEntityPersonVerificationDocument {
	front: FileUnion
	detailsCode: String
	details: String
	back: FileUnion
}
union LegalEntityPersonVerificationDocumentUnion = LegalEntityPersonVerificationDocument
type LegalEntityUboDeclaration {
	userAgent: String
	ip: String
	date: Int
}
union LegalEntityUboDeclarationUnion = LegalEntityUboDeclaration
type LineItem {
	unitAmountExcludingTax: String
	type: LineItemType!
	taxRates: [TaxRate!]!
	taxAmounts: [InvoiceTaxAmount!]!
	subscriptionItem: String!
	subscription: String
	quantity: Int
	prorationDetails: InvoicesLineItemsProrationDetailsUnion
	proration: Boolean!
	price: PriceUnion
	period: InvoiceLineItemPeriod!
	object: LineItemObject!
	metadata: JSON!
	livemode: Boolean!
	invoiceItem: String!
	id: String!
	discounts: [DiscountUnion!]
	discountable: Boolean!
	discountAmounts: [DiscountsResourceDiscountAmount!]
	description: String
	currency: String!
	amountExcludingTax: Int
	amount: Int!
}
enum LineItemObject {
	LINE_ITEM
}
enum LineItemType {
	INVOICEITEM
	SUBSCRIPTION
}
type LineItemsDiscountAmount {
	discount: Discount!
	amount: Int!
}
type LineItemsTaxAmount {
	rate: TaxRate!
	amount: Int!
}
type LinkedAccountOptionsUsBankAccount {
	returnUrl: String!
	permissions: [LinkedAccountOptionsUsBankAccountPermissions!]!
}
enum LinkedAccountOptionsUsBankAccountPermissions {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
type LoginLink {
	url: String!
	object: LoginLinkObject!
	created: Int!
}
enum LoginLinkObject {
	LOGIN_LINK
}
type Mandate {
	type: MandateType!
	status: MandateStatus!
	singleUse: MandateSingleUse!
	paymentMethodDetails: MandatePaymentMethodDetails!
	paymentMethod: PaymentMethodUnion!
	object: MandateObject!
	multiUse: MandateMultiUse!
	livemode: Boolean!
	id: String!
	customerAcceptance: CustomerAcceptance!
}
type MandateAcssDebit {
	transactionType: MandateAcssDebitTransactionType!
	paymentSchedule: MandateAcssDebitPaymentSchedule!
	intervalDescription: String
	defaultFor: [MandateAcssDebitDefaultFor!]!
}
enum MandateAcssDebitDefaultFor {
	INVOICE
	SUBSCRIPTION
}
enum MandateAcssDebitPaymentSchedule {
	COMBINED
	INTERVAL
	SPORADIC
}
enum MandateAcssDebitTransactionType {
	BUSINESS
	PERSONAL
}
type MandateAuBecsDebit {
	url: String!
}
type MandateBacsDebit {
	url: String!
	reference: String!
	networkStatus: MandateBacsDebitNetworkStatus!
}
enum MandateBacsDebitNetworkStatus {
	ACCEPTED
	PENDING
	REFUSED
	REVOKED
}
type MandateBlik {
	type: MandateBlikType
	offSession: MandateOptionsOffSessionDetailsBlik!
	expiresAfter: Int
}
enum MandateBlikType {
	OFF_SESSION
	ON_SESSION
}
enum MandateObject {
	MANDATE
}
type MandateOptionsOffSessionDetailsBlik {
	intervalCount: Int
	interval: MandateOptionsOffSessionDetailsBlikInterval
	currency: String
	amount: Int
}
enum MandateOptionsOffSessionDetailsBlikInterval {
	DAY
	MONTH
	WEEK
	YEAR
}
type MandatePaymentMethodDetails {
	usBankAccount: MandateUsBankAccount!
	type: String!
	sepaDebit: MandateSepaDebit!
	link: MandateLink!
	card: CardMandatePaymentMethodDetails!
	blik: MandateBlik!
	bacsDebit: MandateBacsDebit!
	auBecsDebit: MandateAuBecsDebit!
	acssDebit: MandateAcssDebit!
}
type MandateSepaDebit {
	url: String!
	reference: String!
}
type MandateSingleUse {
	currency: String!
	amount: Int!
}
enum MandateStatus {
	ACTIVE
	INACTIVE
	PENDING
}
enum MandateType {
	MULTI_USE
	SINGLE_USE
}
union MandateUnion = Mandate
type Mutation {
	postAccountLinks(input: PostAccountLinksInput!): AccountLink!
	postAccounts(input: PostAccountsInput!): Account!
	postAccountsAccount(account: String!, input: PostAccountsAccountInput!): Account!
	deleteAccountsAccount(account: String!, input: JSON!): DeletedAccount!
	postAccountsAccountBankAccounts(account: String!, input: PostAccountsAccountBankAccountsInput!): ExternalAccount!
	postAccountsAccountBankAccountsId(id: String!, account: String!, input: PostAccountsAccountBankAccountsIdInput!): ExternalAccount!
	deleteAccountsAccountBankAccountsId(id: String!, account: String!, input: JSON!): DeletedExternalAccount!
	postAccountsAccountCapabilitiesCapability(capability: String!, account: String!, input: PostAccountsAccountCapabilitiesCapabilityInput!): Capability!
	postAccountsAccountExternalAccounts(account: String!, input: PostAccountsAccountExternalAccountsInput!): ExternalAccount!
	postAccountsAccountExternalAccountsId(id: String!, account: String!, input: PostAccountsAccountExternalAccountsIdInput!): ExternalAccount!
	deleteAccountsAccountExternalAccountsId(id: String!, account: String!, input: JSON!): DeletedExternalAccount!
	postAccountsAccountLoginLinks(account: String!, input: PostAccountsAccountLoginLinksInput!): LoginLink!
	postAccountsAccountPeople(account: String!, input: PostAccountsAccountPeopleInput!): Person!
	postAccountsAccountPeoplePerson(person: String!, account: String!, input: PostAccountsAccountPeoplePersonInput!): Person!
	deleteAccountsAccountPeoplePerson(person: String!, account: String!, input: JSON!): DeletedPerson!
	postAccountsAccountPersons(account: String!, input: PostAccountsAccountPersonsInput!): Person!
	postAccountsAccountPersonsPerson(person: String!, account: String!, input: PostAccountsAccountPersonsPersonInput!): Person!
	deleteAccountsAccountPersonsPerson(person: String!, account: String!, input: JSON!): DeletedPerson!
	postAccountsAccountReject(account: String!, input: PostAccountsAccountRejectInput!): Account!
	postApplePayDomains(input: PostApplePayDomainsInput!): ApplePayDomain!
	deleteApplePayDomainsDomain(domain: String!, input: JSON!): DeletedApplePayDomain!
	postApplicationFeesFeeRefundsId(id: String!, fee: String!, input: PostApplicationFeesFeeRefundsIdInput!): FeeRefund!
	postApplicationFeesIdRefund(id: String!, input: PostApplicationFeesIdRefundInput!): ApplicationFee!
	postApplicationFeesIdRefunds(id: String!, input: PostApplicationFeesIdRefundsInput!): FeeRefund!
	postAppsSecrets(input: PostAppsSecretsInput!): AppsSecret!
	postAppsSecretsDelete(input: PostAppsSecretsDeleteInput!): AppsSecret!
	postBillingPortalConfigurations(input: PostBillingPortalConfigurationsInput!): BillingPortalConfiguration!
	postBillingPortalConfigurationsConfiguration(configuration: String!, input: PostBillingPortalConfigurationsConfigurationInput!): BillingPortalConfiguration!
	postBillingPortalSessions(input: PostBillingPortalSessionsInput!): BillingPortalSession!
	postCharges(input: PostChargesInput!): Charge!
	postChargesCharge(charge: String!, input: PostChargesChargeInput!): Charge!
	postChargesChargeCapture(charge: String!, input: PostChargesChargeCaptureInput!): Charge!
	postChargesChargeDispute(charge: String!, input: PostChargesChargeDisputeInput!): Dispute!
	postChargesChargeDisputeClose(charge: String!, input: PostChargesChargeDisputeCloseInput!): Dispute!
	postChargesChargeRefund(charge: String!, input: PostChargesChargeRefundInput!): Charge!
	postChargesChargeRefunds(charge: String!, input: PostChargesChargeRefundsInput!): Refund!
	postChargesChargeRefundsRefund(refund: String!, charge: String!, input: PostChargesChargeRefundsRefundInput!): Refund!
	postCheckoutSessions(input: PostCheckoutSessionsInput!): CheckoutSession!
	postCheckoutSessionsSessionExpire(session: String!, input: PostCheckoutSessionsSessionExpireInput!): CheckoutSession!
	postCoupons(input: PostCouponsInput!): Coupon!
	postCouponsCoupon(coupon: String!, input: PostCouponsCouponInput!): Coupon!
	deleteCouponsCoupon(coupon: String!, input: JSON!): DeletedCoupon!
	postCreditNotes(input: PostCreditNotesInput!): CreditNote!
	postCreditNotesId(id: String!, input: PostCreditNotesIdInput!): CreditNote!
	postCreditNotesIdVoid(id: String!, input: PostCreditNotesIdVoidInput!): CreditNote!
	postCustomers(input: PostCustomersInput!): Customer!
	postCustomersCustomer(customer: String!, input: PostCustomersCustomerInput!): Customer!
	deleteCustomersCustomer(customer: String!, input: JSON!): DeletedCustomer!
	postCustomersCustomerBalanceTransactions(customer: String!, input: PostCustomersCustomerBalanceTransactionsInput!): CustomerBalanceTransaction!
	postCustomersCustomerBalanceTransactionsTransaction(transaction: String!, customer: String!, input: PostCustomersCustomerBalanceTransactionsTransactionInput!): CustomerBalanceTransaction!
	postCustomersCustomerBankAccounts(customer: String!, input: PostCustomersCustomerBankAccountsInput!): PaymentSource!
	postCustomersCustomerBankAccountsId(id: String!, customer: String!, input: PostCustomersCustomerBankAccountsIdInput!): SourceOrBankAccountOrCardUnion!
	deleteCustomersCustomerBankAccountsId(id: String!, customer: String!, input: DeleteCustomersCustomerBankAccountsIdInput!): DeletedCardOrDeletedBankAccountUnionOrSourceOrCardOrBankAccountOrAccountUnionUnion!
	postCustomersCustomerBankAccountsIdVerify(id: String!, customer: String!, input: PostCustomersCustomerBankAccountsIdVerifyInput!): BankAccount!
	postCustomersCustomerCards(customer: String!, input: PostCustomersCustomerCardsInput!): PaymentSource!
	postCustomersCustomerCardsId(id: String!, customer: String!, input: PostCustomersCustomerCardsIdInput!): SourceOrBankAccountOrCardUnion!
	deleteCustomersCustomerCardsId(id: String!, customer: String!, input: DeleteCustomersCustomerCardsIdInput!): DeletedCardOrDeletedBankAccountUnionOrSourceOrCardOrBankAccountOrAccountUnionUnion!
	postCustomersCustomerCashBalance(customer: String!, input: PostCustomersCustomerCashBalanceInput!): CashBalance!
	deleteCustomersCustomerDiscount(customer: String!, input: JSON!): DeletedDiscount!
	postCustomersCustomerFundingInstructions(customer: String!, input: PostCustomersCustomerFundingInstructionsInput!): FundingInstructions!
	postCustomersCustomerSources(customer: String!, input: PostCustomersCustomerSourcesInput!): PaymentSource!
	postCustomersCustomerSourcesId(id: String!, customer: String!, input: PostCustomersCustomerSourcesIdInput!): SourceOrBankAccountOrCardUnion!
	deleteCustomersCustomerSourcesId(id: String!, customer: String!, input: DeleteCustomersCustomerSourcesIdInput!): DeletedCardOrDeletedBankAccountUnionOrSourceOrCardOrBankAccountOrAccountUnionUnion!
	postCustomersCustomerSourcesIdVerify(id: String!, customer: String!, input: PostCustomersCustomerSourcesIdVerifyInput!): BankAccount!
	postCustomersCustomerSubscriptions(customer: String!, input: PostCustomersCustomerSubscriptionsInput!): Subscription!
	postCustomersCustomerSubscriptionsSubscriptionExposedId(subscriptionExposedId: String!, customer: String!, input: PostCustomersCustomerSubscriptionsSubscriptionExposedIdInput!): Subscription!
	deleteCustomersCustomerSubscriptionsSubscriptionExposedId(subscriptionExposedId: String!, customer: String!, input: DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdInput!): Subscription!
	deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount(subscriptionExposedId: String!, customer: String!, input: JSON!): DeletedDiscount!
	postCustomersCustomerTaxIds(customer: String!, input: PostCustomersCustomerTaxIdsInput!): TaxId!
	deleteCustomersCustomerTaxIdsId(id: String!, customer: String!, input: JSON!): DeletedTaxId!
	postDisputesDispute(dispute: String!, input: PostDisputesDisputeInput!): Dispute!
	postDisputesDisputeClose(dispute: String!, input: PostDisputesDisputeCloseInput!): Dispute!
	postEphemeralKeys(input: PostEphemeralKeysInput!): EphemeralKey!
	deleteEphemeralKeysKey(key: String!, input: DeleteEphemeralKeysKeyInput!): EphemeralKey!
	postFileLinks(input: PostFileLinksInput!): FileLink!
	postFileLinksLink(link: String!, input: PostFileLinksLinkInput!): FileLink!
	postFiles: File!
	postFinancialConnectionsAccountsAccountDisconnect(account: String!, input: PostFinancialConnectionsAccountsAccountDisconnectInput!): FinancialConnectionsAccount!
	postFinancialConnectionsAccountsAccountRefresh(account: String!, input: PostFinancialConnectionsAccountsAccountRefreshInput!): FinancialConnectionsAccount!
	postFinancialConnectionsSessions(input: PostFinancialConnectionsSessionsInput!): FinancialConnectionsSession!
	postIdentityVerificationSessions(input: PostIdentityVerificationSessionsInput!): IdentityVerificationSession!
	postIdentityVerificationSessionsSession(session: String!, input: PostIdentityVerificationSessionsSessionInput!): IdentityVerificationSession!
	postIdentityVerificationSessionsSessionCancel(session: String!, input: PostIdentityVerificationSessionsSessionCancelInput!): IdentityVerificationSession!
	postIdentityVerificationSessionsSessionRedact(session: String!, input: PostIdentityVerificationSessionsSessionRedactInput!): IdentityVerificationSession!
	postInvoiceitems(input: PostInvoiceitemsInput!): Invoiceitem!
	postInvoiceitemsInvoiceitem(invoiceitem: String!, input: PostInvoiceitemsInvoiceitemInput!): Invoiceitem!
	deleteInvoiceitemsInvoiceitem(invoiceitem: String!, input: JSON!): DeletedInvoiceitem!
	postInvoices(input: PostInvoicesInput!): Invoice!
	postInvoicesInvoice(invoice: String!, input: PostInvoicesInvoiceInput!): Invoice!
	deleteInvoicesInvoice(invoice: String!, input: JSON!): DeletedInvoice!
	postInvoicesInvoiceFinalize(invoice: String!, input: PostInvoicesInvoiceFinalizeInput!): Invoice!
	postInvoicesInvoiceMarkUncollectible(invoice: String!, input: PostInvoicesInvoiceMarkUncollectibleInput!): Invoice!
	postInvoicesInvoicePay(invoice: String!, input: PostInvoicesInvoicePayInput!): Invoice!
	postInvoicesInvoiceSend(invoice: String!, input: PostInvoicesInvoiceSendInput!): Invoice!
	postInvoicesInvoiceVoid(invoice: String!, input: PostInvoicesInvoiceVoidInput!): Invoice!
	postIssuingAuthorizationsAuthorization(authorization: String!, input: PostIssuingAuthorizationsAuthorizationInput!): IssuingAuthorization!
	postIssuingAuthorizationsAuthorizationApprove(authorization: String!, input: PostIssuingAuthorizationsAuthorizationApproveInput!): IssuingAuthorization!
	postIssuingAuthorizationsAuthorizationDecline(authorization: String!, input: PostIssuingAuthorizationsAuthorizationDeclineInput!): IssuingAuthorization!
	postIssuingCardholders(input: PostIssuingCardholdersInput!): IssuingCardholder!
	postIssuingCardholdersCardholder(cardholder: String!, input: PostIssuingCardholdersCardholderInput!): IssuingCardholder!
	postIssuingCards(input: PostIssuingCardsInput!): IssuingCard!
	postIssuingCardsCard(card: String!, input: PostIssuingCardsCardInput!): IssuingCard!
	postIssuingDisputes(input: PostIssuingDisputesInput!): IssuingDispute!
	postIssuingDisputesDispute(dispute: String!, input: PostIssuingDisputesDisputeInput!): IssuingDispute!
	postIssuingDisputesDisputeSubmit(dispute: String!, input: PostIssuingDisputesDisputeSubmitInput!): IssuingDispute!
	postIssuingSettlementsSettlement(settlement: String!, input: PostIssuingSettlementsSettlementInput!): IssuingSettlement!
	postIssuingTransactionsTransaction(transaction: String!, input: PostIssuingTransactionsTransactionInput!): IssuingTransaction!
	postLinkAccountSessions(input: PostLinkAccountSessionsInput!): FinancialConnectionsSession!
	postLinkedAccountsAccountDisconnect(account: String!, input: PostLinkedAccountsAccountDisconnectInput!): FinancialConnectionsAccount!
	postLinkedAccountsAccountRefresh(account: String!, input: PostLinkedAccountsAccountRefreshInput!): FinancialConnectionsAccount!
	postPaymentIntents(input: PostPaymentIntentsInput!): PaymentIntent!
	postPaymentIntentsIntent(intent: String!, input: PostPaymentIntentsIntentInput!): PaymentIntent!
	postPaymentIntentsIntentApplyCustomerBalance(intent: String!, input: PostPaymentIntentsIntentApplyCustomerBalanceInput!): PaymentIntent!
	postPaymentIntentsIntentCancel(intent: String!, input: PostPaymentIntentsIntentCancelInput!): PaymentIntent!
	postPaymentIntentsIntentCapture(intent: String!, input: PostPaymentIntentsIntentCaptureInput!): PaymentIntent!
	postPaymentIntentsIntentConfirm(intent: String!, input: PostPaymentIntentsIntentConfirmInput!): PaymentIntent!
	postPaymentIntentsIntentIncrementAuthorization(intent: String!, input: PostPaymentIntentsIntentIncrementAuthorizationInput!): PaymentIntent!
	postPaymentIntentsIntentVerifyMicrodeposits(intent: String!, input: PostPaymentIntentsIntentVerifyMicrodepositsInput!): PaymentIntent!
	postPaymentLinks(input: PostPaymentLinksInput!): PaymentLink!
	postPaymentLinksPaymentLink(paymentLink: String!, input: PostPaymentLinksPaymentLinkInput!): PaymentLink!
	postPaymentMethods(input: PostPaymentMethodsInput!): PaymentMethod!
	postPaymentMethodsPaymentMethod(paymentMethod: String!, input: PostPaymentMethodsPaymentMethodInput!): PaymentMethod!
	postPaymentMethodsPaymentMethodAttach(paymentMethod: String!, input: PostPaymentMethodsPaymentMethodAttachInput!): PaymentMethod!
	postPaymentMethodsPaymentMethodDetach(paymentMethod: String!, input: PostPaymentMethodsPaymentMethodDetachInput!): PaymentMethod!
	postPayouts(input: PostPayoutsInput!): Payout!
	postPayoutsPayout(payout: String!, input: PostPayoutsPayoutInput!): Payout!
	postPayoutsPayoutCancel(payout: String!, input: PostPayoutsPayoutCancelInput!): Payout!
	postPayoutsPayoutReverse(payout: String!, input: PostPayoutsPayoutReverseInput!): Payout!
	postPlans(input: PostPlansInput!): Plan!
	postPlansPlan(plan: String!, input: PostPlansPlanInput!): Plan!
	deletePlansPlan(plan: String!, input: JSON!): DeletedPlan!
	postPrices(input: PostPricesInput!): Price!
	postPricesPrice(price: String!, input: PostPricesPriceInput!): Price!
	postProducts(input: PostProductsInput!): Product!
	postProductsId(id: String!, input: PostProductsIdInput!): Product!
	deleteProductsId(id: String!, input: JSON!): DeletedProduct!
	postPromotionCodes(input: PostPromotionCodesInput!): PromotionCode!
	postPromotionCodesPromotionCode(promotionCode: String!, input: PostPromotionCodesPromotionCodeInput!): PromotionCode!
	postQuotes(input: PostQuotesInput!): Quote!
	postQuotesQuote(quote: String!, input: PostQuotesQuoteInput!): Quote!
	postQuotesQuoteAccept(quote: String!, input: PostQuotesQuoteAcceptInput!): Quote!
	postQuotesQuoteCancel(quote: String!, input: PostQuotesQuoteCancelInput!): Quote!
	postQuotesQuoteFinalize(quote: String!, input: PostQuotesQuoteFinalizeInput!): Quote!
	postRadarValueListItems(input: PostRadarValueListItemsInput!): RadarValueListItem!
	deleteRadarValueListItemsItem(item: String!, input: JSON!): DeletedRadarValueListItem!
	postRadarValueLists(input: PostRadarValueListsInput!): RadarValueList!
	postRadarValueListsValueList(valueList: String!, input: PostRadarValueListsValueListInput!): RadarValueList!
	deleteRadarValueListsValueList(valueList: String!, input: JSON!): DeletedRadarValueList!
	postRefunds(input: PostRefundsInput!): Refund!
	postRefundsRefund(refund: String!, input: PostRefundsRefundInput!): Refund!
	postRefundsRefundCancel(refund: String!, input: PostRefundsRefundCancelInput!): Refund!
	postReportingReportRuns(input: PostReportingReportRunsInput!): ReportingReportRun!
	postReviewsReviewApprove(review: String!, input: PostReviewsReviewApproveInput!): Review!
	postSetupIntents(input: PostSetupIntentsInput!): SetupIntent!
	postSetupIntentsIntent(intent: String!, input: PostSetupIntentsIntentInput!): SetupIntent!
	postSetupIntentsIntentCancel(intent: String!, input: PostSetupIntentsIntentCancelInput!): SetupIntent!
	postSetupIntentsIntentConfirm(intent: String!, input: PostSetupIntentsIntentConfirmInput!): SetupIntent!
	postSetupIntentsIntentVerifyMicrodeposits(intent: String!, input: PostSetupIntentsIntentVerifyMicrodepositsInput!): SetupIntent!
	postShippingRates(input: PostShippingRatesInput!): ShippingRate!
	postShippingRatesShippingRateToken(shippingRateToken: String!, input: PostShippingRatesShippingRateTokenInput!): ShippingRate!
	postSources(input: PostSourcesInput!): Source!
	postSourcesSource(source: String!, input: PostSourcesSourceInput!): Source!
	postSourcesSourceVerify(source: String!, input: PostSourcesSourceVerifyInput!): Source!
	postSubscriptionItems(input: PostSubscriptionItemsInput!): SubscriptionItem!
	postSubscriptionItemsItem(item: String!, input: PostSubscriptionItemsItemInput!): SubscriptionItem!
	deleteSubscriptionItemsItem(item: String!, input: DeleteSubscriptionItemsItemInput!): DeletedSubscriptionItem!
	postSubscriptionItemsSubscriptionItemUsageRecords(subscriptionItem: String!, input: PostSubscriptionItemsSubscriptionItemUsageRecordsInput!): UsageRecord!
	postSubscriptionSchedules(input: PostSubscriptionSchedulesInput!): SubscriptionSchedule!
	postSubscriptionSchedulesSchedule(schedule: String!, input: PostSubscriptionSchedulesScheduleInput!): SubscriptionSchedule!
	postSubscriptionSchedulesScheduleCancel(schedule: String!, input: PostSubscriptionSchedulesScheduleCancelInput!): SubscriptionSchedule!
	postSubscriptionSchedulesScheduleRelease(schedule: String!, input: PostSubscriptionSchedulesScheduleReleaseInput!): SubscriptionSchedule!
	postSubscriptions(input: PostSubscriptionsInput!): Subscription!
	postSubscriptionsSubscriptionExposedId(subscriptionExposedId: String!, input: PostSubscriptionsSubscriptionExposedIdInput!): Subscription!
	deleteSubscriptionsSubscriptionExposedId(subscriptionExposedId: String!, input: DeleteSubscriptionsSubscriptionExposedIdInput!): Subscription!
	deleteSubscriptionsSubscriptionExposedIdDiscount(subscriptionExposedId: String!, input: JSON!): DeletedDiscount!
	postSubscriptionsSubscriptionResume(subscription: String!, input: PostSubscriptionsSubscriptionResumeInput!): Subscription!
	postTaxRates(input: PostTaxRatesInput!): TaxRate!
	postTaxRatesTaxRate(taxRate: String!, input: PostTaxRatesTaxRateInput!): TaxRate!
	postTerminalConfigurations(input: PostTerminalConfigurationsInput!): TerminalConfiguration!
	postTerminalConfigurationsConfiguration(configuration: String!, input: PostTerminalConfigurationsConfigurationInput!): DeletedTerminalConfigurationOrTerminalConfigurationUnion!
	deleteTerminalConfigurationsConfiguration(configuration: String!, input: JSON!): DeletedTerminalConfiguration!
	postTerminalConnectionTokens(input: PostTerminalConnectionTokensInput!): TerminalConnectionToken!
	postTerminalLocations(input: PostTerminalLocationsInput!): TerminalLocation!
	postTerminalLocationsLocation(location: String!, input: PostTerminalLocationsLocationInput!): DeletedTerminalLocationOrTerminalLocationUnion!
	deleteTerminalLocationsLocation(location: String!, input: JSON!): DeletedTerminalLocation!
	postTerminalReaders(input: PostTerminalReadersInput!): TerminalReader!
	postTerminalReadersReader(reader: String!, input: PostTerminalReadersReaderInput!): DeletedTerminalReaderOrTerminalReaderUnion!
	deleteTerminalReadersReader(reader: String!, input: JSON!): DeletedTerminalReader!
	postTerminalReadersReaderCancelAction(reader: String!, input: PostTerminalReadersReaderCancelActionInput!): TerminalReader!
	postTerminalReadersReaderProcessPaymentIntent(reader: String!, input: PostTerminalReadersReaderProcessPaymentIntentInput!): TerminalReader!
	postTerminalReadersReaderProcessSetupIntent(reader: String!, input: PostTerminalReadersReaderProcessSetupIntentInput!): TerminalReader!
	postTerminalReadersReaderSetReaderDisplay(reader: String!, input: PostTerminalReadersReaderSetReaderDisplayInput!): TerminalReader!
	postTestHelpersCustomersCustomerFundCashBalance(customer: String!, input: PostTestHelpersCustomersCustomerFundCashBalanceInput!): CustomerCashBalanceTransaction!
	postTestHelpersIssuingCardsCardShippingDeliver(card: String!, input: PostTestHelpersIssuingCardsCardShippingDeliverInput!): IssuingCard!
	postTestHelpersIssuingCardsCardShippingFail(card: String!, input: PostTestHelpersIssuingCardsCardShippingFailInput!): IssuingCard!
	postTestHelpersIssuingCardsCardShippingReturn(card: String!, input: PostTestHelpersIssuingCardsCardShippingReturnInput!): IssuingCard!
	postTestHelpersIssuingCardsCardShippingShip(card: String!, input: PostTestHelpersIssuingCardsCardShippingShipInput!): IssuingCard!
	postTestHelpersRefundsRefundExpire(refund: String!, input: PostTestHelpersRefundsRefundExpireInput!): Refund!
	postTestHelpersTerminalReadersReaderPresentPaymentMethod(reader: String!, input: PostTestHelpersTerminalReadersReaderPresentPaymentMethodInput!): TerminalReader!
	postTestHelpersTestClocks(input: PostTestHelpersTestClocksInput!): TestHelpersTestClock!
	deleteTestHelpersTestClocksTestClock(testClock: String!, input: JSON!): DeletedTestHelpersTestClock!
	postTestHelpersTestClocksTestClockAdvance(testClock: String!, input: PostTestHelpersTestClocksTestClockAdvanceInput!): TestHelpersTestClock!
	postTestHelpersTreasuryInboundTransfersIdFail(id: String!, input: PostTestHelpersTreasuryInboundTransfersIdFailInput!): TreasuryInboundTransfer!
	postTestHelpersTreasuryInboundTransfersIdReturn(id: String!, input: PostTestHelpersTreasuryInboundTransfersIdReturnInput!): TreasuryInboundTransfer!
	postTestHelpersTreasuryInboundTransfersIdSucceed(id: String!, input: PostTestHelpersTreasuryInboundTransfersIdSucceedInput!): TreasuryInboundTransfer!
	postTestHelpersTreasuryOutboundPaymentsIdFail(id: String!, input: PostTestHelpersTreasuryOutboundPaymentsIdFailInput!): TreasuryOutboundPayment!
	postTestHelpersTreasuryOutboundPaymentsIdPost(id: String!, input: PostTestHelpersTreasuryOutboundPaymentsIdPostInput!): TreasuryOutboundPayment!
	postTestHelpersTreasuryOutboundPaymentsIdReturn(id: String!, input: PostTestHelpersTreasuryOutboundPaymentsIdReturnInput!): TreasuryOutboundPayment!
	postTestHelpersTreasuryOutboundTransfersOutboundTransferFail(outboundTransfer: String!, input: PostTestHelpersTreasuryOutboundTransfersOutboundTransferFailInput!): TreasuryOutboundTransfer!
	postTestHelpersTreasuryOutboundTransfersOutboundTransferPost(outboundTransfer: String!, input: PostTestHelpersTreasuryOutboundTransfersOutboundTransferPostInput!): TreasuryOutboundTransfer!
	postTestHelpersTreasuryOutboundTransfersOutboundTransferReturn(outboundTransfer: String!, input: PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnInput!): TreasuryOutboundTransfer!
	postTestHelpersTreasuryReceivedCredits(input: PostTestHelpersTreasuryReceivedCreditsInput!): TreasuryReceivedCredit!
	postTestHelpersTreasuryReceivedDebits(input: PostTestHelpersTreasuryReceivedDebitsInput!): TreasuryReceivedDebit!
	postTokens(input: PostTokensInput!): Token!
	postTopups(input: PostTopupsInput!): Topup!
	postTopupsTopup(topup: String!, input: PostTopupsTopupInput!): Topup!
	postTopupsTopupCancel(topup: String!, input: PostTopupsTopupCancelInput!): Topup!
	postTransfers(input: PostTransfersInput!): Transfer!
	postTransfersIdReversals(id: String!, input: PostTransfersIdReversalsInput!): TransferReversal!
	postTransfersTransfer(transfer: String!, input: PostTransfersTransferInput!): Transfer!
	postTransfersTransferReversalsId(transfer: String!, id: String!, input: PostTransfersTransferReversalsIdInput!): TransferReversal!
	postTreasuryCreditReversals(input: PostTreasuryCreditReversalsInput!): TreasuryCreditReversal!
	postTreasuryDebitReversals(input: PostTreasuryDebitReversalsInput!): TreasuryDebitReversal!
	postTreasuryFinancialAccounts(input: PostTreasuryFinancialAccountsInput!): TreasuryFinancialAccount!
	postTreasuryFinancialAccountsFinancialAccount(financialAccount: String!, input: PostTreasuryFinancialAccountsFinancialAccountInput!): TreasuryFinancialAccount!
	postTreasuryFinancialAccountsFinancialAccountFeatures(financialAccount: String!, input: PostTreasuryFinancialAccountsFinancialAccountFeaturesInput!): TreasuryFinancialAccountFeatures!
	postTreasuryInboundTransfers(input: PostTreasuryInboundTransfersInput!): TreasuryInboundTransfer!
	postTreasuryInboundTransfersInboundTransferCancel(inboundTransfer: String!, input: PostTreasuryInboundTransfersInboundTransferCancelInput!): TreasuryInboundTransfer!
	postTreasuryOutboundPayments(input: PostTreasuryOutboundPaymentsInput!): TreasuryOutboundPayment!
	postTreasuryOutboundPaymentsIdCancel(id: String!, input: PostTreasuryOutboundPaymentsIdCancelInput!): TreasuryOutboundPayment!
	postTreasuryOutboundTransfers(input: PostTreasuryOutboundTransfersInput!): TreasuryOutboundTransfer!
	postTreasuryOutboundTransfersOutboundTransferCancel(outboundTransfer: String!, input: PostTreasuryOutboundTransfersOutboundTransferCancelInput!): TreasuryOutboundTransfer!
	postWebhookEndpoints(input: PostWebhookEndpointsInput!): WebhookEndpoint!
	postWebhookEndpointsWebhookEndpoint(webhookEndpoint: String!, input: PostWebhookEndpointsWebhookEndpointInput!): WebhookEndpoint!
	deleteWebhookEndpointsWebhookEndpoint(webhookEndpoint: String!, input: JSON!): DeletedWebhookEndpoint!
}
type Networks {
	preferred: String
	available: [String!]!
}
union NetworksUnion = Networks
type NotificationEventData {
	previousAttributes: JSON!
	object: JSON!
}
type NotificationEventRequest {
	idempotencyKey: String
	id: String
}
union NotificationEventRequestUnion = NotificationEventRequest
type OnlineAcceptance {
	userAgent: String
	ipAddress: String
}
type OutboundPaymentsPaymentMethodDetails {
	usBankAccount: OutboundPaymentsPaymentMethodDetailsUsBankAccount!
	type: OutboundPaymentsPaymentMethodDetailsType!
	financialAccount: OutboundPaymentsPaymentMethodDetailsFinancialAccount!
	billingDetails: TreasurySharedResourceBillingDetails!
}
type OutboundPaymentsPaymentMethodDetailsFinancialAccount {
	network: OutboundPaymentsPaymentMethodDetailsFinancialAccountNetwork!
	id: String!
}
enum OutboundPaymentsPaymentMethodDetailsFinancialAccountNetwork {
	STRIPE
}
enum OutboundPaymentsPaymentMethodDetailsType {
	FINANCIAL_ACCOUNT
	US_BANK_ACCOUNT
}
union OutboundPaymentsPaymentMethodDetailsUnion = OutboundPaymentsPaymentMethodDetails
type OutboundPaymentsPaymentMethodDetailsUsBankAccount {
	routingNumber: String
	network: OutboundPaymentsPaymentMethodDetailsUsBankAccountNetwork!
	last4: String
	fingerprint: String
	bankName: String
	accountType: OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountType
	accountHolderType: OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType
}
enum OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType {
	COMPANY
	INDIVIDUAL
}
enum OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountType {
	CHECKING
	SAVINGS
}
enum OutboundPaymentsPaymentMethodDetailsUsBankAccountNetwork {
	ACH
	US_DOMESTIC_WIRE
}
type OutboundTransfersPaymentMethodDetails {
	usBankAccount: OutboundTransfersPaymentMethodDetailsUsBankAccount!
	type: OutboundTransfersPaymentMethodDetailsType!
	billingDetails: TreasurySharedResourceBillingDetails!
}
enum OutboundTransfersPaymentMethodDetailsType {
	US_BANK_ACCOUNT
}
type OutboundTransfersPaymentMethodDetailsUsBankAccount {
	routingNumber: String
	network: OutboundTransfersPaymentMethodDetailsUsBankAccountNetwork!
	last4: String
	fingerprint: String
	bankName: String
	accountType: OutboundTransfersPaymentMethodDetailsUsBankAccountAccountType
	accountHolderType: OutboundTransfersPaymentMethodDetailsUsBankAccountAccountHolderType
}
enum OutboundTransfersPaymentMethodDetailsUsBankAccountAccountHolderType {
	COMPANY
	INDIVIDUAL
}
enum OutboundTransfersPaymentMethodDetailsUsBankAccountAccountType {
	CHECKING
	SAVINGS
}
enum OutboundTransfersPaymentMethodDetailsUsBankAccountNetwork {
	ACH
	US_DOMESTIC_WIRE
}
type PackageDimensions {
	width: Float!
	weight: Float!
	length: Float!
	height: Float!
}
union PackageDimensionsUnion = PackageDimensions
type PaymentFlowsAmountDetails {
	tip: PaymentFlowsAmountDetailsResourceTip!
}
type PaymentFlowsAmountDetailsResourceTip {
	amount: Int!
}
type PaymentFlowsAutomaticPaymentMethodsPaymentIntent {
	enabled: Boolean!
}
union PaymentFlowsAutomaticPaymentMethodsPaymentIntentUnion = PaymentFlowsAutomaticPaymentMethodsPaymentIntent
type PaymentFlowsInstallmentOptions {
	plan: PaymentMethodDetailsCardInstallmentsPlan!
	enabled: Boolean!
}
type PaymentFlowsPrivatePaymentMethodsAlipayDetails {
	transactionId: String
	fingerprint: String
	buyerId: String!
}
type PaymentFlowsPrivatePaymentMethodsKlarnaDob {
	year: Int
	month: Int
	day: Int
}
union PaymentFlowsPrivatePaymentMethodsKlarnaDobUnion = PaymentFlowsPrivatePaymentMethodsKlarnaDob
type PaymentIntent {
	transferGroup: String
	transferData: TransferDataUnion
	status: PaymentIntentStatus!
	statementDescriptorSuffix: String
	statementDescriptor: String
	shipping: ShippingUnion
	setupFutureUsage: PaymentIntentSetupFutureUsage
	review: ReviewUnion
	receiptEmail: String
	processing: PaymentIntentProcessingUnion
	paymentMethodTypes: [String!]!
	paymentMethodOptions: PaymentIntentPaymentMethodOptionsUnion
	paymentMethod: PaymentMethodUnion
	onBehalfOf: AccountUnion
	object: PaymentIntentObject!
	nextAction: PaymentIntentNextActionUnion
	metadata: JSON!
	livemode: Boolean!
	latestCharge: ChargeUnion
	lastPaymentError: ApiErrorsUnion
	invoice: InvoiceUnion
	id: String!
	description: String
	customer: DeletedCustomerOrCustomerUnion
	currency: String!
	created: Int!
	confirmationMethod: PaymentIntentConfirmationMethod!
	clientSecret: String
	captureMethod: PaymentIntentCaptureMethod!
	cancellationReason: PaymentIntentCancellationReason
	canceledAt: Int
	automaticPaymentMethods: PaymentFlowsAutomaticPaymentMethodsPaymentIntentUnion
	applicationFeeAmount: Int
	application: ApplicationUnion
	amountReceived: Int!
	amountDetails: PaymentFlowsAmountDetails!
	amountCapturable: Int!
	amount: Int!
}
enum PaymentIntentCancellationReason {
	ABANDONED
	AUTOMATIC
	DUPLICATE
	FAILED_INVOICE
	FRAUDULENT
	REQUESTED_BY_CUSTOMER
	VOID_INVOICE
}
enum PaymentIntentCaptureMethod {
	AUTOMATIC
	MANUAL
}
type PaymentIntentCardProcessing {
	customerNotification: PaymentIntentProcessingCustomerNotification!
}
enum PaymentIntentConfirmationMethod {
	AUTOMATIC
	MANUAL
}
type PaymentIntentNextAction {
	wechatPayRedirectToIosApp: PaymentIntentNextActionWechatPayRedirectToIosApp!
	wechatPayRedirectToAndroidApp: PaymentIntentNextActionWechatPayRedirectToAndroidApp!
	wechatPayDisplayQrCode: PaymentIntentNextActionWechatPayDisplayQrCode!
	verifyWithMicrodeposits: PaymentIntentNextActionVerifyWithMicrodeposits!
	useStripeSdk: JSON!
	type: String!
	redirectToUrl: PaymentIntentNextActionRedirectToUrl!
	promptpayDisplayQrCode: PaymentIntentNextActionPromptpayDisplayQrCode!
	pixDisplayQrCode: PaymentIntentNextActionPixDisplayQrCode!
	paynowDisplayQrCode: PaymentIntentNextActionPaynowDisplayQrCode!
	oxxoDisplayDetails: PaymentIntentNextActionDisplayOxxoDetails!
	konbiniDisplayDetails: PaymentIntentNextActionKonbini!
	displayBankTransferInstructions: PaymentIntentNextActionDisplayBankTransferInstructions!
	cardAwaitNotification: PaymentIntentNextActionCardAwaitNotification!
	boletoDisplayDetails: PaymentIntentNextActionBoleto!
	alipayHandleRedirect: PaymentIntentNextActionAlipayHandleRedirect!
}
type PaymentIntentNextActionAlipayHandleRedirect {
	url: String
	returnUrl: String
	nativeUrl: String
	nativeData: String
}
type PaymentIntentNextActionBoleto {
	pdf: String
	number: String
	hostedVoucherUrl: String
	expiresAt: Int
}
type PaymentIntentNextActionCardAwaitNotification {
	customerApprovalRequired: Boolean
	chargeAttemptAt: Int
}
type PaymentIntentNextActionDisplayBankTransferInstructions {
	type: PaymentIntentNextActionDisplayBankTransferInstructionsType!
	reference: String
	hostedInstructionsUrl: String
	financialAddresses: [FundingInstructionsBankTransferFinancialAddress!]!
	currency: String
	amountRemaining: Int
}
enum PaymentIntentNextActionDisplayBankTransferInstructionsType {
	EU_BANK_TRANSFER
	GB_BANK_TRANSFER
	JP_BANK_TRANSFER
	MX_BANK_TRANSFER
}
type PaymentIntentNextActionDisplayOxxoDetails {
	number: String
	hostedVoucherUrl: String
	expiresAfter: Int
}
type PaymentIntentNextActionKonbini {
	stores: PaymentIntentNextActionKonbiniStores!
	hostedVoucherUrl: String
	expiresAt: Int!
}
type PaymentIntentNextActionKonbiniFamilymart {
	paymentCode: String!
	confirmationNumber: String!
}
union PaymentIntentNextActionKonbiniFamilymartUnion = PaymentIntentNextActionKonbiniFamilymart
type PaymentIntentNextActionKonbiniLawson {
	paymentCode: String!
	confirmationNumber: String!
}
union PaymentIntentNextActionKonbiniLawsonUnion = PaymentIntentNextActionKonbiniLawson
type PaymentIntentNextActionKonbiniMinistop {
	paymentCode: String!
	confirmationNumber: String!
}
union PaymentIntentNextActionKonbiniMinistopUnion = PaymentIntentNextActionKonbiniMinistop
type PaymentIntentNextActionKonbiniSeicomart {
	paymentCode: String!
	confirmationNumber: String!
}
union PaymentIntentNextActionKonbiniSeicomartUnion = PaymentIntentNextActionKonbiniSeicomart
type PaymentIntentNextActionKonbiniStores {
	seicomart: PaymentIntentNextActionKonbiniSeicomartUnion
	ministop: PaymentIntentNextActionKonbiniMinistopUnion
	lawson: PaymentIntentNextActionKonbiniLawsonUnion
	familymart: PaymentIntentNextActionKonbiniFamilymartUnion
}
type PaymentIntentNextActionPaynowDisplayQrCode {
	imageUrlSvg: String!
	imageUrlPng: String!
	hostedInstructionsUrl: String
	data: String!
}
type PaymentIntentNextActionPixDisplayQrCode {
	imageUrlSvg: String!
	imageUrlPng: String!
	hostedInstructionsUrl: String!
	expiresAt: Int!
	data: String!
}
type PaymentIntentNextActionPromptpayDisplayQrCode {
	imageUrlSvg: String!
	imageUrlPng: String!
	hostedInstructionsUrl: String!
	data: String!
}
type PaymentIntentNextActionRedirectToUrl {
	url: String
	returnUrl: String
}
union PaymentIntentNextActionUnion = PaymentIntentNextAction
type PaymentIntentNextActionVerifyWithMicrodeposits {
	microdepositType: PaymentIntentNextActionVerifyWithMicrodepositsMicrodepositType
	hostedVerificationUrl: String!
	arrivalDate: Int!
}
enum PaymentIntentNextActionVerifyWithMicrodepositsMicrodepositType {
	AMOUNTS
	DESCRIPTOR_CODE
}
type PaymentIntentNextActionWechatPayDisplayQrCode {
	imageUrlSvg: String!
	imageUrlPng: String!
	imageDataUrl: String!
	hostedInstructionsUrl: String!
	data: String!
}
type PaymentIntentNextActionWechatPayRedirectToAndroidApp {
	timestamp: String!
	sign: String!
	prepayId: String!
	partnerId: String!
	package: String!
	nonceStr: String!
	appId: String!
}
type PaymentIntentNextActionWechatPayRedirectToIosApp {
	nativeUrl: String!
}
enum PaymentIntentObject {
	PAYMENT_INTENT
}
type PaymentIntentPaymentMethodOptions {
	wechatPay: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsWechatPayUnion!
	usBankAccount: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsUsBankAccountUnion!
	sofort: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsSofortUnion!
	sepaDebit: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsSepaDebitUnion!
	promptpay: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPromptpayUnion!
	pix: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPixUnion!
	paynow: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPaynowUnion!
	p24: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsP24Union!
	oxxo: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsOxxoUnion!
	link: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsLinkUnion!
	konbini: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsKonbiniUnion!
	klarna: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsKlarnaUnion!
	interacPresent: PaymentIntentTypeSpecificPaymentMethodOptionsClientUnion!
	ideal: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsIdealUnion!
	grabpay: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsGrabpayUnion!
	giropay: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsGiropayUnion!
	fpx: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsFpxUnion!
	eps: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsEpsUnion!
	customerBalance: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsCustomerBalanceUnion!
	cardPresent: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsCardPresentUnion!
	card: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsCardUnion!
	boleto: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBoletoUnion!
	blik: PaymentIntentTypeSpecificPaymentMethodOptionsClientUnion!
	bancontact: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBancontactUnion!
	bacsDebit: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBacsDebitUnion!
	auBecsDebit: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsAuBecsDebitUnion!
	alipay: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAlipayUnion!
	afterpayClearpay: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAfterpayClearpayUnion!
	affirm: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAffirmUnion!
	acssDebit: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsAcssDebitUnion!
}
type PaymentIntentPaymentMethodOptionsAcssDebit {
	verificationMethod: PaymentIntentPaymentMethodOptionsAcssDebitVerificationMethod!
	setupFutureUsage: PaymentIntentPaymentMethodOptionsAcssDebitSetupFutureUsage!
	mandateOptions: PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit!
}
enum PaymentIntentPaymentMethodOptionsAcssDebitSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PaymentIntentPaymentMethodOptionsAcssDebitVerificationMethod {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
type PaymentIntentPaymentMethodOptionsAuBecsDebit {
	setupFutureUsage: PaymentIntentPaymentMethodOptionsAuBecsDebitSetupFutureUsage!
}
enum PaymentIntentPaymentMethodOptionsAuBecsDebitSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
type PaymentIntentPaymentMethodOptionsCard {
	statementDescriptorSuffixKanji: String!
	statementDescriptorSuffixKana: String!
	setupFutureUsage: PaymentIntentPaymentMethodOptionsCardSetupFutureUsage!
	requestThreeDSecure: PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure
	network: PaymentIntentPaymentMethodOptionsCardNetwork
	mandateOptions: PaymentMethodOptionsCardMandateOptionsUnion
	installments: PaymentMethodOptionsCardInstallmentsUnion
	captureMethod: PaymentIntentPaymentMethodOptionsCardCaptureMethod!
}
enum PaymentIntentPaymentMethodOptionsCardCaptureMethod {
	MANUAL
}
enum PaymentIntentPaymentMethodOptionsCardNetwork {
	AMEX
	CARTES_BANCAIRES
	DINERS
	DISCOVER
	INTERAC
	JCB
	MASTERCARD
	UNIONPAY
	UNKNOWN
	VISA
}
enum PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure {
	ANY
	AUTOMATIC
	CHALLENGE_ONLY
}
enum PaymentIntentPaymentMethodOptionsCardSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
type PaymentIntentPaymentMethodOptionsEps {
	setupFutureUsage: PaymentIntentPaymentMethodOptionsEpsSetupFutureUsage!
}
enum PaymentIntentPaymentMethodOptionsEpsSetupFutureUsage {
	NONE
}
type PaymentIntentPaymentMethodOptionsLink {
	setupFutureUsage: PaymentIntentPaymentMethodOptionsLinkSetupFutureUsage!
	persistentToken: String
	captureMethod: PaymentIntentPaymentMethodOptionsLinkCaptureMethod!
}
enum PaymentIntentPaymentMethodOptionsLinkCaptureMethod {
	MANUAL
}
enum PaymentIntentPaymentMethodOptionsLinkSetupFutureUsage {
	NONE
	OFF_SESSION
}
type PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit {
	transactionType: PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionType
	paymentSchedule: PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentSchedule
	intervalDescription: String
	customMandateUrl: String!
}
enum PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentSchedule {
	COMBINED
	INTERVAL
	SPORADIC
}
enum PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionType {
	BUSINESS
	PERSONAL
}
type PaymentIntentPaymentMethodOptionsSepaDebit {
	setupFutureUsage: PaymentIntentPaymentMethodOptionsSepaDebitSetupFutureUsage!
	mandateOptions: PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit!
}
enum PaymentIntentPaymentMethodOptionsSepaDebitSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
union PaymentIntentPaymentMethodOptionsUnion = PaymentIntentPaymentMethodOptions
type PaymentIntentPaymentMethodOptionsUsBankAccount {
	verificationMethod: PaymentIntentPaymentMethodOptionsUsBankAccountVerificationMethod!
	setupFutureUsage: PaymentIntentPaymentMethodOptionsUsBankAccountSetupFutureUsage!
	financialConnections: LinkedAccountOptionsUsBankAccount!
}
enum PaymentIntentPaymentMethodOptionsUsBankAccountSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PaymentIntentPaymentMethodOptionsUsBankAccountVerificationMethod {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
type PaymentIntentProcessing {
	type: PaymentIntentProcessingType!
	card: PaymentIntentCardProcessing!
}
type PaymentIntentProcessingCustomerNotification {
	completesAt: Int
	approvalRequested: Boolean
}
enum PaymentIntentProcessingType {
	CARD
}
union PaymentIntentProcessingUnion = PaymentIntentProcessing
enum PaymentIntentSetupFutureUsage {
	OFF_SESSION
	ON_SESSION
}
enum PaymentIntentStatus {
	CANCELED
	PROCESSING
	REQUIRES_ACTION
	REQUIRES_CAPTURE
	REQUIRES_CONFIRMATION
	REQUIRES_PAYMENT_METHOD
	SUCCEEDED
}
type PaymentIntentTypeSpecificPaymentMethodOptionsClient {
	verificationMethod: PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod!
	setupFutureUsage: PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage!
	installments: PaymentFlowsInstallmentOptions!
	captureMethod: PaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod!
}
enum PaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod {
	MANUAL
	MANUAL_PREFERRED
}
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsAcssDebitUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentIntentPaymentMethodOptionsAcssDebit
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsAuBecsDebitUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentIntentPaymentMethodOptionsAuBecsDebit
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsCardUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentIntentPaymentMethodOptionsCard
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsEpsUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentIntentPaymentMethodOptionsEps
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsLinkUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentIntentPaymentMethodOptionsLink
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsSepaDebitUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentIntentPaymentMethodOptionsSepaDebit
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsUsBankAccountUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentIntentPaymentMethodOptionsUsBankAccount
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAffirmUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsAffirm
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAfterpayClearpayUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsAfterpayClearpay
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAlipayUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsAlipay
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBacsDebitUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsBacsDebit
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBancontactUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsBancontact
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBoletoUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsBoleto
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsCardPresentUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsCardPresent
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsCustomerBalanceUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsCustomerBalance
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsFpxUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsFpx
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsGiropayUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsGiropay
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsGrabpayUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsGrabpay
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsIdealUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsIdeal
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsKlarnaUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsKlarna
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsKonbiniUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsKonbini
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsOxxoUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsOxxo
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsP24Union = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsP24
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPaynowUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsPaynow
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPixUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsPix
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPromptpayUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsPromptpay
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsSofortUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsSofort
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsWechatPayUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsWechatPay
enum PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
union PaymentIntentTypeSpecificPaymentMethodOptionsClientUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient
enum PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
union PaymentIntentUnion = PaymentIntent
type PaymentLink {
	url: String!
	transferData: PaymentLinksResourceTransferDataUnion
	taxIdCollection: PaymentLinksResourceTaxIdCollection!
	subscriptionData: PaymentLinksResourceSubscriptionDataUnion
	submitType: PaymentLinkSubmitType!
	shippingOptions: [PaymentLinksResourceShippingOption!]!
	shippingAddressCollection: PaymentLinksResourceShippingAddressCollectionUnion
	phoneNumberCollection: PaymentLinksResourcePhoneNumberCollection!
	paymentMethodTypes: [PaymentLinkPaymentMethodTypes!]
	paymentMethodCollection: PaymentLinkPaymentMethodCollection!
	paymentIntentData: PaymentLinksResourcePaymentIntentDataUnion
	onBehalfOf: AccountUnion
	object: PaymentLinkObject!
	metadata: JSON!
	livemode: Boolean!
	lineItems: PaymentLinkLineItems!
	invoiceCreation: PaymentLinksResourceInvoiceCreationUnion
	id: String!
	customerCreation: PaymentLinkCustomerCreation!
	customText: PaymentLinksResourceCustomText!
	currency: String!
	consentCollection: PaymentLinksResourceConsentCollectionUnion
	billingAddressCollection: PaymentLinkBillingAddressCollection!
	automaticTax: PaymentLinksResourceAutomaticTax!
	applicationFeePercent: Float
	applicationFeeAmount: Int
	allowPromotionCodes: Boolean!
	afterCompletion: PaymentLinksResourceAfterCompletion!
	active: Boolean!
}
enum PaymentLinkBillingAddressCollection {
	AUTO
	REQUIRED
}
enum PaymentLinkCustomerCreation {
	ALWAYS
	IF_REQUIRED
}
type PaymentLinkLineItems {
	url: String!
	object: PaymentLinkObjectLineItems!
	hasMore: Boolean!
	data: [Item!]!
}
enum PaymentLinkObject {
	PAYMENT_LINK
}
enum PaymentLinkObjectLineItems {
	LIST
}
enum PaymentLinkPaymentMethodCollection {
	ALWAYS
	IF_REQUIRED
}
enum PaymentLinkPaymentMethodTypes {
	AFFIRM
	AFTERPAY_CLEARPAY
	ALIPAY
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BLIK
	BOLETO
	CARD
	EPS
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KLARNA
	KONBINI
	OXXO
	P_24
	PAYNOW
	PIX
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
enum PaymentLinkSubmitType {
	AUTO
	BOOK
	DONATE
	PAY
}
union PaymentLinkUnion = PaymentLink
type PaymentLinksResourceAfterCompletion {
	type: PaymentLinksResourceAfterCompletionType!
	redirect: PaymentLinksResourceCompletionBehaviorRedirect!
	hostedConfirmation: PaymentLinksResourceCompletionBehaviorConfirmationPage!
}
enum PaymentLinksResourceAfterCompletionType {
	HOSTED_CONFIRMATION
	REDIRECT
}
type PaymentLinksResourceAutomaticTax {
	enabled: Boolean!
}
type PaymentLinksResourceCompletionBehaviorConfirmationPage {
	customMessage: String
}
type PaymentLinksResourceCompletionBehaviorRedirect {
	url: String!
}
type PaymentLinksResourceConsentCollection {
	termsOfService: PaymentLinksResourceConsentCollectionTermsOfService
	promotions: PaymentLinksResourceConsentCollectionPromotions
}
enum PaymentLinksResourceConsentCollectionPromotions {
	AUTO
	NONE
}
enum PaymentLinksResourceConsentCollectionTermsOfService {
	NONE
	REQUIRED
}
union PaymentLinksResourceConsentCollectionUnion = PaymentLinksResourceConsentCollection
type PaymentLinksResourceCustomText {
	submit: PaymentLinksResourceCustomTextPositionUnion
	shippingAddress: PaymentLinksResourceCustomTextPositionUnion
}
type PaymentLinksResourceCustomTextPosition {
	message: String!
}
union PaymentLinksResourceCustomTextPositionUnion = PaymentLinksResourceCustomTextPosition
type PaymentLinksResourceInvoiceCreation {
	invoiceData: PaymentLinksResourceInvoiceSettingsUnion
	enabled: Boolean!
}
union PaymentLinksResourceInvoiceCreationUnion = PaymentLinksResourceInvoiceCreation
type PaymentLinksResourceInvoiceSettings {
	renderingOptions: InvoiceSettingRenderingOptionsUnion
	metadata: JSON!
	footer: String
	description: String
	customFields: [InvoiceSettingCustomField!]
	accountTaxIds: [DeletedTaxIdOrTaxIdUnion!]
}
union PaymentLinksResourceInvoiceSettingsUnion = PaymentLinksResourceInvoiceSettings
type PaymentLinksResourcePaymentIntentData {
	setupFutureUsage: PaymentLinksResourcePaymentIntentDataSetupFutureUsage
	captureMethod: PaymentLinksResourcePaymentIntentDataCaptureMethod
}
enum PaymentLinksResourcePaymentIntentDataCaptureMethod {
	AUTOMATIC
	MANUAL
}
enum PaymentLinksResourcePaymentIntentDataSetupFutureUsage {
	OFF_SESSION
	ON_SESSION
}
union PaymentLinksResourcePaymentIntentDataUnion = PaymentLinksResourcePaymentIntentData
type PaymentLinksResourcePhoneNumberCollection {
	enabled: Boolean!
}
type PaymentLinksResourceShippingAddressCollection {
	allowedCountries: [PaymentLinksResourceShippingAddressCollectionAllowedCountries!]!
}
enum PaymentLinksResourceShippingAddressCollectionAllowedCountries {
	AC
	AD
	AE
	AF
	AG
	AI
	AL
	AM
	AO
	AQ
	AR
	AT
	AU
	AW
	AX
	AZ
	BA
	BB
	BD
	BE
	BF
	BG
	BH
	BI
	BJ
	BL
	BM
	BN
	BO
	BQ
	BR
	BS
	BT
	BV
	BW
	BY
	BZ
	CA
	CD
	CF
	CG
	CH
	CI
	CK
	CL
	CM
	CN
	CO
	CR
	CV
	CW
	CY
	CZ
	DE
	DJ
	DK
	DM
	DO
	DZ
	EC
	EE
	EG
	EH
	ER
	ES
	ET
	FI
	FJ
	FK
	FO
	FR
	GA
	GB
	GD
	GE
	GF
	GG
	GH
	GI
	GL
	GM
	GN
	GP
	GQ
	GR
	GS
	GT
	GU
	GW
	GY
	HK
	HN
	HR
	HT
	HU
	ID
	IE
	IL
	IM
	IN
	IO
	IQ
	IS
	IT
	JE
	JM
	JO
	JP
	KE
	KG
	KH
	KI
	KM
	KN
	KR
	KW
	KY
	KZ
	LA
	LB
	LC
	LI
	LK
	LR
	LS
	LT
	LU
	LV
	LY
	MA
	MC
	MD
	ME
	MF
	MG
	MK
	ML
	MM
	MN
	MO
	MQ
	MR
	MS
	MT
	MU
	MV
	MW
	MX
	MY
	MZ
	NA
	NC
	NE
	NG
	NI
	NL
	NO
	NP
	NR
	NU
	NZ
	OM
	PA
	PE
	PF
	PG
	PH
	PK
	PL
	PM
	PN
	PR
	PS
	PT
	PY
	QA
	RE
	RO
	RS
	RU
	RW
	SA
	SB
	SC
	SE
	SG
	SH
	SI
	SJ
	SK
	SL
	SM
	SN
	SO
	SR
	SS
	ST
	SV
	SX
	SZ
	TA
	TC
	TD
	TF
	TG
	TH
	TJ
	TK
	TL
	TM
	TN
	TO
	TR
	TT
	TV
	TW
	TZ
	UA
	UG
	US
	UY
	UZ
	VA
	VC
	VE
	VG
	VN
	VU
	WF
	WS
	XK
	YE
	YT
	ZA
	ZM
	ZW
	ZZ
}
union PaymentLinksResourceShippingAddressCollectionUnion = PaymentLinksResourceShippingAddressCollection
type PaymentLinksResourceShippingOption {
	shippingRate: ShippingRateUnion!
	shippingAmount: Int!
}
type PaymentLinksResourceSubscriptionData {
	trialPeriodDays: Int
	description: String
}
union PaymentLinksResourceSubscriptionDataUnion = PaymentLinksResourceSubscriptionData
type PaymentLinksResourceTaxIdCollection {
	enabled: Boolean!
}
type PaymentLinksResourceTransferData {
	destination: AccountUnion!
	amount: Int
}
union PaymentLinksResourceTransferDataUnion = PaymentLinksResourceTransferData
type PaymentMethod {
	wechatPay: PaymentMethodWechatPay!
	usBankAccount: PaymentMethodUsBankAccount!
	type: PaymentMethodType!
	sofort: PaymentMethodSofort!
	sepaDebit: PaymentMethodSepaDebit!
	radarOptions: RadarRadarOptions!
	promptpay: PaymentMethodPromptpay!
	pix: PaymentMethodPix!
	paynow: PaymentMethodPaynow!
	p24: PaymentMethodP24!
	oxxo: PaymentMethodOxxo!
	object: PaymentMethodObject!
	metadata: JSON!
	livemode: Boolean!
	link: PaymentMethodLink!
	konbini: PaymentMethodKonbini!
	klarna: PaymentMethodKlarna!
	interacPresent: PaymentMethodInteracPresent!
	ideal: PaymentMethodIdeal!
	id: String!
	grabpay: PaymentMethodGrabpay!
	giropay: PaymentMethodGiropay!
	fpx: PaymentMethodFpx!
	eps: PaymentMethodEps!
	customerBalance: PaymentMethodCustomerBalance!
	customer: CustomerUnion
	created: Int!
	cardPresent: PaymentMethodCardPresent!
	card: PaymentMethodCard!
	boleto: PaymentMethodBoleto!
	blik: PaymentMethodBlik!
	billingDetails: BillingDetails!
	bancontact: PaymentMethodBancontact!
	bacsDebit: PaymentMethodBacsDebit!
	auBecsDebit: PaymentMethodAuBecsDebit!
	alipay: PaymentFlowsPrivatePaymentMethodsAlipay!
	afterpayClearpay: PaymentMethodAfterpayClearpay!
	affirm: PaymentMethodAffirm!
	acssDebit: PaymentMethodAcssDebit!
}
type PaymentMethodAcssDebit {
	transitNumber: String
	last4: String
	institutionNumber: String
	fingerprint: String
	bankName: String
}
type PaymentMethodAuBecsDebit {
	last4: String
	fingerprint: String
	bsbNumber: String
}
type PaymentMethodBacsDebit {
	sortCode: String
	last4: String
	fingerprint: String
}
type PaymentMethodBoleto {
	taxId: String!
}
type PaymentMethodCard {
	wallet: PaymentMethodCardWalletUnion
	threeDSecureUsage: ThreeDSecureUsageUnion
	networks: NetworksUnion
	last4: String!
	generatedFrom: PaymentMethodCardGeneratedCardUnion
	funding: String!
	fingerprint: String
	expYear: Int!
	expMonth: Int!
	country: String
	checks: PaymentMethodCardChecksUnion
	brand: String!
}
type PaymentMethodCardChecks {
	cvcCheck: String
	addressPostalCodeCheck: String
	addressLine1Check: String
}
union PaymentMethodCardChecksUnion = PaymentMethodCardChecks
type PaymentMethodCardGeneratedCard {
	setupAttempt: SetupAttemptUnion
	paymentMethodDetails: CardGeneratedFromPaymentMethodDetailsUnion
	charge: String
}
union PaymentMethodCardGeneratedCardUnion = PaymentMethodCardGeneratedCard
type PaymentMethodCardWallet {
	visaCheckout: PaymentMethodCardWalletVisaCheckout!
	type: PaymentMethodCardWalletType!
	samsungPay: PaymentMethodCardWalletSamsungPay!
	masterpass: PaymentMethodCardWalletMasterpass!
	googlePay: PaymentMethodCardWalletGooglePay!
	dynamicLast4: String
	applePay: PaymentMethodCardWalletApplePay!
	amexExpressCheckout: PaymentMethodCardWalletAmexExpressCheckout!
}
type PaymentMethodCardWalletMasterpass {
	shippingAddress: AddressUnion
	name: String
	email: String
	billingAddress: AddressUnion
}
enum PaymentMethodCardWalletType {
	AMEX_EXPRESS_CHECKOUT
	APPLE_PAY
	GOOGLE_PAY
	MASTERPASS
	SAMSUNG_PAY
	VISA_CHECKOUT
}
union PaymentMethodCardWalletUnion = PaymentMethodCardWallet
type PaymentMethodCardWalletVisaCheckout {
	shippingAddress: AddressUnion
	name: String
	email: String
	billingAddress: AddressUnion
}
type PaymentMethodDetails {
	wechatPay: PaymentMethodDetailsWechatPay!
	wechat: PaymentMethodDetailsWechat!
	usBankAccount: PaymentMethodDetailsUsBankAccount!
	type: String!
	stripeAccount: PaymentMethodDetailsStripeAccount!
	sofort: PaymentMethodDetailsSofort!
	sepaDebit: PaymentMethodDetailsSepaDebit!
	promptpay: PaymentMethodDetailsPromptpay!
	pix: PaymentMethodDetailsPix!
	paynow: PaymentMethodDetailsPaynow!
	p24: PaymentMethodDetailsP24!
	oxxo: PaymentMethodDetailsOxxo!
	multibanco: PaymentMethodDetailsMultibanco!
	link: PaymentMethodDetailsLink!
	konbini: PaymentMethodDetailsKonbini!
	klarna: PaymentMethodDetailsKlarna!
	interacPresent: PaymentMethodDetailsInteracPresent!
	ideal: PaymentMethodDetailsIdeal!
	grabpay: PaymentMethodDetailsGrabpay!
	giropay: PaymentMethodDetailsGiropay!
	fpx: PaymentMethodDetailsFpx!
	eps: PaymentMethodDetailsEps!
	customerBalance: PaymentMethodDetailsCustomerBalance!
	cardPresent: PaymentMethodDetailsCardPresent!
	card: PaymentMethodDetailsCard!
	boleto: PaymentMethodDetailsBoleto!
	blik: PaymentMethodDetailsBlik!
	bancontact: PaymentMethodDetailsBancontact!
	bacsDebit: PaymentMethodDetailsBacsDebit!
	auBecsDebit: PaymentMethodDetailsAuBecsDebit!
	alipay: PaymentFlowsPrivatePaymentMethodsAlipayDetails!
	afterpayClearpay: PaymentMethodDetailsAfterpayClearpay!
	affirm: PaymentMethodDetailsAffirm!
	acssDebit: PaymentMethodDetailsAcssDebit!
	achDebit: PaymentMethodDetailsAchDebit!
	achCreditTransfer: PaymentMethodDetailsAchCreditTransfer!
}
type PaymentMethodDetailsAchCreditTransfer {
	swiftCode: String
	routingNumber: String
	bankName: String
	accountNumber: String
}
type PaymentMethodDetailsAchDebit {
	routingNumber: String
	last4: String
	fingerprint: String
	country: String
	bankName: String
	accountHolderType: PaymentMethodDetailsAchDebitAccountHolderType
}
enum PaymentMethodDetailsAchDebitAccountHolderType {
	COMPANY
	INDIVIDUAL
}
type PaymentMethodDetailsAcssDebit {
	transitNumber: String
	mandate: String!
	last4: String
	institutionNumber: String
	fingerprint: String
	bankName: String
}
type PaymentMethodDetailsAfterpayClearpay {
	reference: String
}
type PaymentMethodDetailsAuBecsDebit {
	mandate: String!
	last4: String
	fingerprint: String
	bsbNumber: String
}
type PaymentMethodDetailsBacsDebit {
	sortCode: String
	mandate: String
	last4: String
	fingerprint: String
}
type PaymentMethodDetailsBancontact {
	verifiedName: String
	preferredLanguage: PaymentMethodDetailsBancontactPreferredLanguage
	ibanLast4: String
	generatedSepaDebitMandate: MandateUnion
	generatedSepaDebit: PaymentMethodUnion
	bic: String
	bankName: String
	bankCode: String
}
enum PaymentMethodDetailsBancontactPreferredLanguage {
	DE
	EN
	FR
	NL
}
type PaymentMethodDetailsBoleto {
	taxId: String!
}
type PaymentMethodDetailsCard {
	wallet: PaymentMethodDetailsCardWalletUnion
	threeDSecure: ThreeDSecureDetailsUnion
	network: String
	mandate: String
	last4: String
	installments: PaymentMethodDetailsCardInstallmentsUnion
	funding: String
	fingerprint: String
	expYear: Int!
	expMonth: Int!
	country: String
	checks: PaymentMethodDetailsCardChecksUnion
	brand: String
}
type PaymentMethodDetailsCardChecks {
	cvcCheck: String
	addressPostalCodeCheck: String
	addressLine1Check: String
}
union PaymentMethodDetailsCardChecksUnion = PaymentMethodDetailsCardChecks
type PaymentMethodDetailsCardInstallments {
	plan: PaymentMethodDetailsCardInstallmentsPlanUnion
}
type PaymentMethodDetailsCardInstallmentsPlan {
	type: PaymentMethodDetailsCardInstallmentsPlanType!
	interval: PaymentMethodDetailsCardInstallmentsPlanInterval
	count: Int
}
enum PaymentMethodDetailsCardInstallmentsPlanInterval {
	MONTH
}
enum PaymentMethodDetailsCardInstallmentsPlanType {
	FIXED_COUNT
}
union PaymentMethodDetailsCardInstallmentsPlanUnion = PaymentMethodDetailsCardInstallmentsPlan
union PaymentMethodDetailsCardInstallmentsUnion = PaymentMethodDetailsCardInstallments
type PaymentMethodDetailsCardPresent {
	receipt: PaymentMethodDetailsCardPresentReceiptUnion
	readMethod: PaymentMethodDetailsCardPresentReadMethod
	overcaptureSupported: Boolean!
	network: String
	last4: String
	incrementalAuthorizationSupported: Boolean!
	generatedCard: String
	funding: String
	fingerprint: String
	expYear: Int!
	expMonth: Int!
	emvAuthData: String
	country: String
	cardholderName: String
	captureBefore: Int!
	brand: String
	amountAuthorized: Int
}
enum PaymentMethodDetailsCardPresentReadMethod {
	CONTACT_EMV
	CONTACTLESS_EMV
	CONTACTLESS_MAGSTRIPE_MODE
	MAGNETIC_STRIPE_FALLBACK
	MAGNETIC_STRIPE_TRACK_2
}
type PaymentMethodDetailsCardPresentReceipt {
	transactionStatusInformation: String
	terminalVerificationResults: String
	dedicatedFileName: String
	cardholderVerificationMethod: String
	authorizationResponseCode: String
	authorizationCode: String
	applicationPreferredName: String
	applicationCryptogram: String
	accountType: PaymentMethodDetailsCardPresentReceiptAccountType!
}
enum PaymentMethodDetailsCardPresentReceiptAccountType {
	CHECKING
	CREDIT
	PREPAID
	UNKNOWN
}
union PaymentMethodDetailsCardPresentReceiptUnion = PaymentMethodDetailsCardPresentReceipt
type PaymentMethodDetailsCardWallet {
	visaCheckout: PaymentMethodDetailsCardWalletVisaCheckout!
	type: PaymentMethodDetailsCardWalletType!
	samsungPay: PaymentMethodDetailsCardWalletSamsungPay!
	masterpass: PaymentMethodDetailsCardWalletMasterpass!
	googlePay: PaymentMethodDetailsCardWalletGooglePay!
	dynamicLast4: String
	applePay: PaymentMethodDetailsCardWalletApplePay!
	amexExpressCheckout: PaymentMethodDetailsCardWalletAmexExpressCheckout!
}
type PaymentMethodDetailsCardWalletMasterpass {
	shippingAddress: AddressUnion
	name: String
	email: String
	billingAddress: AddressUnion
}
enum PaymentMethodDetailsCardWalletType {
	AMEX_EXPRESS_CHECKOUT
	APPLE_PAY
	GOOGLE_PAY
	MASTERPASS
	SAMSUNG_PAY
	VISA_CHECKOUT
}
union PaymentMethodDetailsCardWalletUnion = PaymentMethodDetailsCardWallet
type PaymentMethodDetailsCardWalletVisaCheckout {
	shippingAddress: AddressUnion
	name: String
	email: String
	billingAddress: AddressUnion
}
type PaymentMethodDetailsEps {
	verifiedName: String
	bank: PaymentMethodDetailsEpsBank
}
enum PaymentMethodDetailsEpsBank {
	ARZTE_UND_APOTHEKER_BANK
	AUSTRIAN_ANADI_BANK_AG
	BANK_AUSTRIA
	BANKHAUS_CARL_SPANGLER
	BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG
	BAWAG_PSK_AG
	BKS_BANK_AG
	BRULL_KALLMUS_BANK_AG
	BTV_VIER_LANDER_BANK
	CAPITAL_BANK_GRAWE_GRUPPE_AG
	DEUTSCHE_BANK_AG
	DOLOMITENBANK
	EASYBANK_AG
	ERSTE_BANK_UND_SPARKASSEN
	HYPO_ALPEADRIABANK_INTERNATIONAL_AG
	HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT
	HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN
	HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK
	HYPO_TIROL_BANK_AG
	HYPO_VORARLBERG_BANK_AG
	MARCHFELDER_BANK
	OBERBANK_AG
	RAIFFEISEN_BANKENGRUPPE_OSTERREICH
	SCHOELLERBANK_AG
	SPARDA_BANK_WIEN
	VOLKSBANK_GRUPPE
	VOLKSKREDITBANK_AG
	VR_BANK_BRAUNAU
}
type PaymentMethodDetailsFpx {
	transactionId: String
	bank: PaymentMethodDetailsFpxBank!
}
enum PaymentMethodDetailsFpxBank {
	AFFIN_BANK
	AGROBANK
	ALLIANCE_BANK
	AMBANK
	BANK_ISLAM
	BANK_MUAMALAT
	BANK_OF_CHINA
	BANK_RAKYAT
	BSN
	CIMB
	DEUTSCHE_BANK
	HONG_LEONG_BANK
	HSBC
	KFH
	MAYBANK_2E
	MAYBANK_2U
	OCBC
	PB_ENTERPRISE
	PUBLIC_BANK
	RHB
	STANDARD_CHARTERED
	UOB
}
type PaymentMethodDetailsGiropay {
	verifiedName: String
	bic: String
	bankName: String
	bankCode: String
}
type PaymentMethodDetailsGrabpay {
	transactionId: String
}
type PaymentMethodDetailsIdeal {
	verifiedName: String
	ibanLast4: String
	generatedSepaDebitMandate: MandateUnion
	generatedSepaDebit: PaymentMethodUnion
	bic: PaymentMethodDetailsIdealBic
	bank: PaymentMethodDetailsIdealBank
}
enum PaymentMethodDetailsIdealBank {
	ABN_AMRO
	ASN_BANK
	BUNQ
	HANDELSBANKEN
	ING
	KNAB
	MONEYOU
	RABOBANK
	REGIOBANK
	REVOLUT
	SNS_BANK
	TRIODOS_BANK
	VAN_LANSCHOT
}
enum PaymentMethodDetailsIdealBic {
	ABNANL2A
	ASNBNL21
	BUNQNL2A
	FVLBNL22
	HANDNL2A
	INGBNL2A
	KNABNL2H
	MOYONL21
	RABONL2U
	RBRBNL21
	REVOLT21
	SNSBNL2A
	TRIONL2U
}
type PaymentMethodDetailsInteracPresent {
	receipt: PaymentMethodDetailsInteracPresentReceiptUnion
	readMethod: PaymentMethodDetailsInteracPresentReadMethod
	preferredLocales: [String!]
	network: String
	last4: String
	generatedCard: String
	funding: String
	fingerprint: String
	expYear: Int!
	expMonth: Int!
	emvAuthData: String
	country: String
	cardholderName: String
	brand: String
}
enum PaymentMethodDetailsInteracPresentReadMethod {
	CONTACT_EMV
	CONTACTLESS_EMV
	CONTACTLESS_MAGSTRIPE_MODE
	MAGNETIC_STRIPE_FALLBACK
	MAGNETIC_STRIPE_TRACK_2
}
type PaymentMethodDetailsInteracPresentReceipt {
	transactionStatusInformation: String
	terminalVerificationResults: String
	dedicatedFileName: String
	cardholderVerificationMethod: String
	authorizationResponseCode: String
	authorizationCode: String
	applicationPreferredName: String
	applicationCryptogram: String
	accountType: PaymentMethodDetailsInteracPresentReceiptAccountType!
}
enum PaymentMethodDetailsInteracPresentReceiptAccountType {
	CHECKING
	SAVINGS
	UNKNOWN
}
union PaymentMethodDetailsInteracPresentReceiptUnion = PaymentMethodDetailsInteracPresentReceipt
type PaymentMethodDetailsKlarna {
	preferredLocale: String
	paymentMethodCategory: String
}
type PaymentMethodDetailsKonbini {
	store: PaymentMethodDetailsKonbiniStoreUnion
}
type PaymentMethodDetailsKonbiniStore {
	chain: PaymentMethodDetailsKonbiniStoreChain
}
enum PaymentMethodDetailsKonbiniStoreChain {
	FAMILYMART
	LAWSON
	MINISTOP
	SEICOMART
}
union PaymentMethodDetailsKonbiniStoreUnion = PaymentMethodDetailsKonbiniStore
type PaymentMethodDetailsMultibanco {
	reference: String
	entity: String
}
type PaymentMethodDetailsOxxo {
	number: String
}
type PaymentMethodDetailsP24 {
	verifiedName: String
	reference: String
	bank: PaymentMethodDetailsP24Bank
}
enum PaymentMethodDetailsP24Bank {
	ALIOR_BANK
	BANK_MILLENNIUM
	BANK_NOWY_BFG_SA
	BANK_PEKAO_SA
	BANKI_SPBDZIELCZE
	BLIK
	BNP_PARIBAS
	BOZ
	CITI_HANDLOWY
	CREDIT_AGRICOLE
	ENVELOBANK
	ETRANSFER_POCZTOWY_24
	GETIN_BANK
	IDEABANK
	ING
	INTELIGO
	MBANK_MTRANSFER
	NEST_PRZELEW
	NOBLE_PAY
	PBAC_Z_IPKO
	PLUS_BANK
	SANTANDER_PRZELEW_24
	TMOBILE_USBUGI_BANKOWE
	TOYOTA_BANK
	VOLKSWAGEN_BANK
}
type PaymentMethodDetailsPaynow {
	reference: String
}
type PaymentMethodDetailsPix {
	bankTransactionId: String
}
type PaymentMethodDetailsPromptpay {
	reference: String
}
type PaymentMethodDetailsSepaDebit {
	mandate: String
	last4: String
	fingerprint: String
	country: String
	branchCode: String
	bankCode: String
}
type PaymentMethodDetailsSofort {
	verifiedName: String
	preferredLanguage: PaymentMethodDetailsSofortPreferredLanguage
	ibanLast4: String
	generatedSepaDebitMandate: MandateUnion
	generatedSepaDebit: PaymentMethodUnion
	country: String
	bic: String
	bankName: String
	bankCode: String
}
enum PaymentMethodDetailsSofortPreferredLanguage {
	DE
	EN
	ES
	FR
	IT
	NL
	PL
}
union PaymentMethodDetailsUnion = PaymentMethodDetails
type PaymentMethodDetailsUsBankAccount {
	routingNumber: String
	last4: String
	fingerprint: String
	bankName: String
	accountType: PaymentMethodDetailsUsBankAccountAccountType
	accountHolderType: PaymentMethodDetailsUsBankAccountAccountHolderType
}
enum PaymentMethodDetailsUsBankAccountAccountHolderType {
	COMPANY
	INDIVIDUAL
}
enum PaymentMethodDetailsUsBankAccountAccountType {
	CHECKING
	SAVINGS
}
type PaymentMethodDetailsWechatPay {
	transactionId: String
	fingerprint: String
}
type PaymentMethodEps {
	bank: PaymentMethodEpsBank
}
enum PaymentMethodEpsBank {
	ARZTE_UND_APOTHEKER_BANK
	AUSTRIAN_ANADI_BANK_AG
	BANK_AUSTRIA
	BANKHAUS_CARL_SPANGLER
	BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG
	BAWAG_PSK_AG
	BKS_BANK_AG
	BRULL_KALLMUS_BANK_AG
	BTV_VIER_LANDER_BANK
	CAPITAL_BANK_GRAWE_GRUPPE_AG
	DEUTSCHE_BANK_AG
	DOLOMITENBANK
	EASYBANK_AG
	ERSTE_BANK_UND_SPARKASSEN
	HYPO_ALPEADRIABANK_INTERNATIONAL_AG
	HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT
	HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN
	HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK
	HYPO_TIROL_BANK_AG
	HYPO_VORARLBERG_BANK_AG
	MARCHFELDER_BANK
	OBERBANK_AG
	RAIFFEISEN_BANKENGRUPPE_OSTERREICH
	SCHOELLERBANK_AG
	SPARDA_BANK_WIEN
	VOLKSBANK_GRUPPE
	VOLKSKREDITBANK_AG
	VR_BANK_BRAUNAU
}
type PaymentMethodFpx {
	bank: PaymentMethodFpxBank!
}
enum PaymentMethodFpxBank {
	AFFIN_BANK
	AGROBANK
	ALLIANCE_BANK
	AMBANK
	BANK_ISLAM
	BANK_MUAMALAT
	BANK_OF_CHINA
	BANK_RAKYAT
	BSN
	CIMB
	DEUTSCHE_BANK
	HONG_LEONG_BANK
	HSBC
	KFH
	MAYBANK_2E
	MAYBANK_2U
	OCBC
	PB_ENTERPRISE
	PUBLIC_BANK
	RHB
	STANDARD_CHARTERED
	UOB
}
type PaymentMethodIdeal {
	bic: PaymentMethodIdealBic
	bank: PaymentMethodIdealBank
}
enum PaymentMethodIdealBank {
	ABN_AMRO
	ASN_BANK
	BUNQ
	HANDELSBANKEN
	ING
	KNAB
	MONEYOU
	RABOBANK
	REGIOBANK
	REVOLUT
	SNS_BANK
	TRIODOS_BANK
	VAN_LANSCHOT
}
enum PaymentMethodIdealBic {
	ABNANL2A
	ASNBNL21
	BUNQNL2A
	FVLBNL22
	HANDNL2A
	INGBNL2A
	KNABNL2H
	MOYONL21
	RABONL2U
	RBRBNL21
	REVOLT21
	SNSBNL2A
	TRIONL2U
}
type PaymentMethodKlarna {
	dob: PaymentFlowsPrivatePaymentMethodsKlarnaDobUnion
}
type PaymentMethodLink {
	persistentToken: String!
	email: String
}
enum PaymentMethodObject {
	PAYMENT_METHOD
}
type PaymentMethodOptionsAffirm {
	setupFutureUsage: PaymentMethodOptionsAffirmSetupFutureUsage!
	captureMethod: PaymentMethodOptionsAffirmCaptureMethod!
}
enum PaymentMethodOptionsAffirmCaptureMethod {
	MANUAL
}
enum PaymentMethodOptionsAffirmSetupFutureUsage {
	NONE
}
type PaymentMethodOptionsAfterpayClearpay {
	setupFutureUsage: PaymentMethodOptionsAfterpayClearpaySetupFutureUsage!
	reference: String
	captureMethod: PaymentMethodOptionsAfterpayClearpayCaptureMethod!
}
enum PaymentMethodOptionsAfterpayClearpayCaptureMethod {
	MANUAL
}
enum PaymentMethodOptionsAfterpayClearpaySetupFutureUsage {
	NONE
}
type PaymentMethodOptionsAlipay {
	setupFutureUsage: PaymentMethodOptionsAlipaySetupFutureUsage!
}
enum PaymentMethodOptionsAlipaySetupFutureUsage {
	NONE
	OFF_SESSION
}
type PaymentMethodOptionsBacsDebit {
	setupFutureUsage: PaymentMethodOptionsBacsDebitSetupFutureUsage!
}
enum PaymentMethodOptionsBacsDebitSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
type PaymentMethodOptionsBancontact {
	setupFutureUsage: PaymentMethodOptionsBancontactSetupFutureUsage!
	preferredLanguage: PaymentMethodOptionsBancontactPreferredLanguage!
}
enum PaymentMethodOptionsBancontactPreferredLanguage {
	DE
	EN
	FR
	NL
}
enum PaymentMethodOptionsBancontactSetupFutureUsage {
	NONE
	OFF_SESSION
}
type PaymentMethodOptionsBoleto {
	setupFutureUsage: PaymentMethodOptionsBoletoSetupFutureUsage!
	expiresAfterDays: Int!
}
enum PaymentMethodOptionsBoletoSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
type PaymentMethodOptionsCardInstallments {
	plan: PaymentMethodDetailsCardInstallmentsPlanUnion
	enabled: Boolean!
	availablePlans: [PaymentMethodDetailsCardInstallmentsPlan!]
}
union PaymentMethodOptionsCardInstallmentsUnion = PaymentMethodOptionsCardInstallments
type PaymentMethodOptionsCardMandateOptions {
	supportedTypes: [PaymentMethodOptionsCardMandateOptionsSupportedTypes!]
	startDate: Int!
	reference: String!
	intervalCount: Int
	interval: PaymentMethodOptionsCardMandateOptionsInterval!
	endDate: Int
	description: String
	amountType: PaymentMethodOptionsCardMandateOptionsAmountType!
	amount: Int!
}
enum PaymentMethodOptionsCardMandateOptionsAmountType {
	FIXED
	MAXIMUM
}
enum PaymentMethodOptionsCardMandateOptionsInterval {
	DAY
	MONTH
	SPORADIC
	WEEK
	YEAR
}
enum PaymentMethodOptionsCardMandateOptionsSupportedTypes {
	INDIA
}
union PaymentMethodOptionsCardMandateOptionsUnion = PaymentMethodOptionsCardMandateOptions
type PaymentMethodOptionsCardPresent {
	requestIncrementalAuthorizationSupport: Boolean
	requestExtendedAuthorization: Boolean
}
type PaymentMethodOptionsCustomerBalance {
	setupFutureUsage: PaymentMethodOptionsCustomerBalanceSetupFutureUsage!
	fundingType: PaymentMethodOptionsCustomerBalanceFundingType
	bankTransfer: PaymentMethodOptionsCustomerBalanceBankTransfer!
}
type PaymentMethodOptionsCustomerBalanceBankTransfer {
	type: PaymentMethodOptionsCustomerBalanceBankTransferType
	requestedAddressTypes: [PaymentMethodOptionsCustomerBalanceBankTransferRequestedAddressTypes!]!
	euBankTransfer: PaymentMethodOptionsCustomerBalanceEuBankAccount!
}
enum PaymentMethodOptionsCustomerBalanceBankTransferRequestedAddressTypes {
	IBAN
	SEPA
	SORT_CODE
	SPEI
	ZENGIN
}
enum PaymentMethodOptionsCustomerBalanceBankTransferType {
	EU_BANK_TRANSFER
	GB_BANK_TRANSFER
	JP_BANK_TRANSFER
	MX_BANK_TRANSFER
}
type PaymentMethodOptionsCustomerBalanceEuBankAccount {
	country: PaymentMethodOptionsCustomerBalanceEuBankAccountCountry!
}
enum PaymentMethodOptionsCustomerBalanceEuBankAccountCountry {
	BE
	DE
	ES
	FR
	IE
	NL
}
enum PaymentMethodOptionsCustomerBalanceFundingType {
	BANK_TRANSFER
}
enum PaymentMethodOptionsCustomerBalanceSetupFutureUsage {
	NONE
}
type PaymentMethodOptionsFpx {
	setupFutureUsage: PaymentMethodOptionsFpxSetupFutureUsage!
}
enum PaymentMethodOptionsFpxSetupFutureUsage {
	NONE
}
type PaymentMethodOptionsGiropay {
	setupFutureUsage: PaymentMethodOptionsGiropaySetupFutureUsage!
}
enum PaymentMethodOptionsGiropaySetupFutureUsage {
	NONE
}
type PaymentMethodOptionsGrabpay {
	setupFutureUsage: PaymentMethodOptionsGrabpaySetupFutureUsage!
}
enum PaymentMethodOptionsGrabpaySetupFutureUsage {
	NONE
}
type PaymentMethodOptionsIdeal {
	setupFutureUsage: PaymentMethodOptionsIdealSetupFutureUsage!
}
enum PaymentMethodOptionsIdealSetupFutureUsage {
	NONE
	OFF_SESSION
}
type PaymentMethodOptionsKlarna {
	setupFutureUsage: PaymentMethodOptionsKlarnaSetupFutureUsage!
	preferredLocale: String
	captureMethod: PaymentMethodOptionsKlarnaCaptureMethod!
}
enum PaymentMethodOptionsKlarnaCaptureMethod {
	MANUAL
}
enum PaymentMethodOptionsKlarnaSetupFutureUsage {
	NONE
}
type PaymentMethodOptionsKonbini {
	setupFutureUsage: PaymentMethodOptionsKonbiniSetupFutureUsage!
	productDescription: String
	expiresAt: Int
	expiresAfterDays: Int
	confirmationNumber: String
}
enum PaymentMethodOptionsKonbiniSetupFutureUsage {
	NONE
}
type PaymentMethodOptionsOxxo {
	setupFutureUsage: PaymentMethodOptionsOxxoSetupFutureUsage!
	expiresAfterDays: Int!
}
enum PaymentMethodOptionsOxxoSetupFutureUsage {
	NONE
}
type PaymentMethodOptionsP24 {
	setupFutureUsage: PaymentMethodOptionsP24SetupFutureUsage!
}
enum PaymentMethodOptionsP24SetupFutureUsage {
	NONE
}
type PaymentMethodOptionsPaynow {
	setupFutureUsage: PaymentMethodOptionsPaynowSetupFutureUsage!
}
enum PaymentMethodOptionsPaynowSetupFutureUsage {
	NONE
}
type PaymentMethodOptionsPix {
	setupFutureUsage: PaymentMethodOptionsPixSetupFutureUsage!
	expiresAt: Int
	expiresAfterSeconds: Int
}
enum PaymentMethodOptionsPixSetupFutureUsage {
	NONE
}
type PaymentMethodOptionsPromptpay {
	setupFutureUsage: PaymentMethodOptionsPromptpaySetupFutureUsage!
}
enum PaymentMethodOptionsPromptpaySetupFutureUsage {
	NONE
}
type PaymentMethodOptionsSofort {
	setupFutureUsage: PaymentMethodOptionsSofortSetupFutureUsage!
	preferredLanguage: PaymentMethodOptionsSofortPreferredLanguage
}
enum PaymentMethodOptionsSofortPreferredLanguage {
	DE
	EN
	ES
	FR
	IT
	NL
	PL
}
enum PaymentMethodOptionsSofortSetupFutureUsage {
	NONE
	OFF_SESSION
}
type PaymentMethodOptionsWechatPay {
	setupFutureUsage: PaymentMethodOptionsWechatPaySetupFutureUsage!
	client: PaymentMethodOptionsWechatPayClient
	appId: String
}
enum PaymentMethodOptionsWechatPayClient {
	ANDROID
	IOS
	WEB
}
enum PaymentMethodOptionsWechatPaySetupFutureUsage {
	NONE
}
type PaymentMethodP24 {
	bank: PaymentMethodP24Bank
}
enum PaymentMethodP24Bank {
	ALIOR_BANK
	BANK_MILLENNIUM
	BANK_NOWY_BFG_SA
	BANK_PEKAO_SA
	BANKI_SPBDZIELCZE
	BLIK
	BNP_PARIBAS
	BOZ
	CITI_HANDLOWY
	CREDIT_AGRICOLE
	ENVELOBANK
	ETRANSFER_POCZTOWY_24
	GETIN_BANK
	IDEABANK
	ING
	INTELIGO
	MBANK_MTRANSFER
	NEST_PRZELEW
	NOBLE_PAY
	PBAC_Z_IPKO
	PLUS_BANK
	SANTANDER_PRZELEW_24
	TMOBILE_USBUGI_BANKOWE
	TOYOTA_BANK
	VOLKSWAGEN_BANK
}
type PaymentMethodSepaDebit {
	last4: String
	generatedFrom: SepaDebitGeneratedFromUnion
	fingerprint: String
	country: String
	branchCode: String
	bankCode: String
}
type PaymentMethodSofort {
	country: String
}
enum PaymentMethodType {
	ACSS_DEBIT
	AFFIRM
	AFTERPAY_CLEARPAY
	ALIPAY
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BLIK
	BOLETO
	CARD
	CARD_PRESENT
	CUSTOMER_BALANCE
	EPS
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	INTERAC_PRESENT
	KLARNA
	KONBINI
	LINK
	OXXO
	P_24
	PAYNOW
	PIX
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
union PaymentMethodUnion = PaymentMethod
type PaymentMethodUsBankAccount {
	routingNumber: String
	networks: UsBankAccountNetworksUnion
	last4: String
	fingerprint: String
	financialConnectionsAccount: String
	bankName: String
	accountType: PaymentMethodUsBankAccountAccountType
	accountHolderType: PaymentMethodUsBankAccountAccountHolderType
}
enum PaymentMethodUsBankAccountAccountHolderType {
	COMPANY
	INDIVIDUAL
}
enum PaymentMethodUsBankAccountAccountType {
	CHECKING
	SAVINGS
}
type PaymentPagesCheckoutSessionAfterExpiration {
	recovery: PaymentPagesCheckoutSessionAfterExpirationRecoveryUnion
}
type PaymentPagesCheckoutSessionAfterExpirationRecovery {
	url: String
	expiresAt: Int
	enabled: Boolean!
	allowPromotionCodes: Boolean!
}
union PaymentPagesCheckoutSessionAfterExpirationRecoveryUnion = PaymentPagesCheckoutSessionAfterExpirationRecovery
union PaymentPagesCheckoutSessionAfterExpirationUnion = PaymentPagesCheckoutSessionAfterExpiration
type PaymentPagesCheckoutSessionAutomaticTax {
	status: PaymentPagesCheckoutSessionAutomaticTaxStatus
	enabled: Boolean!
}
enum PaymentPagesCheckoutSessionAutomaticTaxStatus {
	COMPLETE
	FAILED
	REQUIRES_LOCATION_INPUTS
}
type PaymentPagesCheckoutSessionConsent {
	termsOfService: PaymentPagesCheckoutSessionConsentTermsOfService
	promotions: PaymentPagesCheckoutSessionConsentPromotions
}
type PaymentPagesCheckoutSessionConsentCollection {
	termsOfService: PaymentPagesCheckoutSessionConsentCollectionTermsOfService
	promotions: PaymentPagesCheckoutSessionConsentCollectionPromotions
}
enum PaymentPagesCheckoutSessionConsentCollectionPromotions {
	AUTO
	NONE
}
enum PaymentPagesCheckoutSessionConsentCollectionTermsOfService {
	NONE
	REQUIRED
}
union PaymentPagesCheckoutSessionConsentCollectionUnion = PaymentPagesCheckoutSessionConsentCollection
enum PaymentPagesCheckoutSessionConsentPromotions {
	OPT_IN
	OPT_OUT
}
enum PaymentPagesCheckoutSessionConsentTermsOfService {
	ACCEPTED
}
union PaymentPagesCheckoutSessionConsentUnion = PaymentPagesCheckoutSessionConsent
type PaymentPagesCheckoutSessionCustomText {
	submit: PaymentPagesCheckoutSessionCustomTextPositionUnion
	shippingAddress: PaymentPagesCheckoutSessionCustomTextPositionUnion
}
type PaymentPagesCheckoutSessionCustomTextPosition {
	message: String!
}
union PaymentPagesCheckoutSessionCustomTextPositionUnion = PaymentPagesCheckoutSessionCustomTextPosition
type PaymentPagesCheckoutSessionCustomerDetails {
	taxIds: [PaymentPagesCheckoutSessionTaxId!]
	taxExempt: PaymentPagesCheckoutSessionCustomerDetailsTaxExempt
	phone: String
	name: String
	email: String
	address: AddressUnion
}
enum PaymentPagesCheckoutSessionCustomerDetailsTaxExempt {
	EXEMPT
	NONE
	REVERSE
}
union PaymentPagesCheckoutSessionCustomerDetailsUnion = PaymentPagesCheckoutSessionCustomerDetails
type PaymentPagesCheckoutSessionInvoiceCreation {
	invoiceData: PaymentPagesCheckoutSessionInvoiceSettings!
	enabled: Boolean!
}
union PaymentPagesCheckoutSessionInvoiceCreationUnion = PaymentPagesCheckoutSessionInvoiceCreation
type PaymentPagesCheckoutSessionInvoiceSettings {
	renderingOptions: InvoiceSettingRenderingOptionsUnion
	metadata: JSON!
	footer: String
	description: String
	customFields: [InvoiceSettingCustomField!]
	accountTaxIds: [DeletedTaxIdOrTaxIdUnion!]
}
type PaymentPagesCheckoutSessionPhoneNumberCollection {
	enabled: Boolean!
}
type PaymentPagesCheckoutSessionShippingAddressCollection {
	allowedCountries: [PaymentPagesCheckoutSessionShippingAddressCollectionAllowedCountries!]!
}
enum PaymentPagesCheckoutSessionShippingAddressCollectionAllowedCountries {
	AC
	AD
	AE
	AF
	AG
	AI
	AL
	AM
	AO
	AQ
	AR
	AT
	AU
	AW
	AX
	AZ
	BA
	BB
	BD
	BE
	BF
	BG
	BH
	BI
	BJ
	BL
	BM
	BN
	BO
	BQ
	BR
	BS
	BT
	BV
	BW
	BY
	BZ
	CA
	CD
	CF
	CG
	CH
	CI
	CK
	CL
	CM
	CN
	CO
	CR
	CV
	CW
	CY
	CZ
	DE
	DJ
	DK
	DM
	DO
	DZ
	EC
	EE
	EG
	EH
	ER
	ES
	ET
	FI
	FJ
	FK
	FO
	FR
	GA
	GB
	GD
	GE
	GF
	GG
	GH
	GI
	GL
	GM
	GN
	GP
	GQ
	GR
	GS
	GT
	GU
	GW
	GY
	HK
	HN
	HR
	HT
	HU
	ID
	IE
	IL
	IM
	IN
	IO
	IQ
	IS
	IT
	JE
	JM
	JO
	JP
	KE
	KG
	KH
	KI
	KM
	KN
	KR
	KW
	KY
	KZ
	LA
	LB
	LC
	LI
	LK
	LR
	LS
	LT
	LU
	LV
	LY
	MA
	MC
	MD
	ME
	MF
	MG
	MK
	ML
	MM
	MN
	MO
	MQ
	MR
	MS
	MT
	MU
	MV
	MW
	MX
	MY
	MZ
	NA
	NC
	NE
	NG
	NI
	NL
	NO
	NP
	NR
	NU
	NZ
	OM
	PA
	PE
	PF
	PG
	PH
	PK
	PL
	PM
	PN
	PR
	PS
	PT
	PY
	QA
	RE
	RO
	RS
	RU
	RW
	SA
	SB
	SC
	SE
	SG
	SH
	SI
	SJ
	SK
	SL
	SM
	SN
	SO
	SR
	SS
	ST
	SV
	SX
	SZ
	TA
	TC
	TD
	TF
	TG
	TH
	TJ
	TK
	TL
	TM
	TN
	TO
	TR
	TT
	TV
	TW
	TZ
	UA
	UG
	US
	UY
	UZ
	VA
	VC
	VE
	VG
	VN
	VU
	WF
	WS
	XK
	YE
	YT
	ZA
	ZM
	ZW
	ZZ
}
union PaymentPagesCheckoutSessionShippingAddressCollectionUnion = PaymentPagesCheckoutSessionShippingAddressCollection
type PaymentPagesCheckoutSessionShippingCost {
	taxes: [LineItemsTaxAmount!]!
	shippingRate: ShippingRateUnion
	amountTotal: Int!
	amountTax: Int!
	amountSubtotal: Int!
}
union PaymentPagesCheckoutSessionShippingCostUnion = PaymentPagesCheckoutSessionShippingCost
type PaymentPagesCheckoutSessionShippingOption {
	shippingRate: ShippingRateUnion!
	shippingAmount: Int!
}
type PaymentPagesCheckoutSessionTaxId {
	value: String
	type: PaymentPagesCheckoutSessionTaxIdType!
}
type PaymentPagesCheckoutSessionTaxIdCollection {
	enabled: Boolean!
}
enum PaymentPagesCheckoutSessionTaxIdType {
	AE_TRN
	AU_ABN
	AU_ARN
	BG_UIC
	BR_CNPJ
	BR_CPF
	CA_BN
	CA_GST_HST
	CA_PST_BC
	CA_PST_MB
	CA_PST_SK
	CA_QST
	CH_VAT
	CL_TIN
	EG_TIN
	ES_CIF
	EU_OSS_VAT
	EU_VAT
	GB_VAT
	GE_VAT
	HK_BR
	HU_TIN
	ID_NPWP
	IL_VAT
	IN_GST
	IS_VAT
	JP_CN
	JP_RN
	JP_TRN
	KE_PIN
	KR_BRN
	LI_UID
	MX_RFC
	MY_FRP
	MY_ITN
	MY_SST
	NO_VAT
	NZ_GST
	PH_TIN
	RU_INN
	RU_KPP
	SA_VAT
	SG_GST
	SG_UEN
	SI_TIN
	TH_VAT
	TR_TIN
	TW_VAT
	UA_VAT
	UNKNOWN
	US_EIN
	ZA_VAT
}
type PaymentPagesCheckoutSessionTotalDetails {
	breakdown: PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown!
	amountTax: Int!
	amountShipping: Int
	amountDiscount: Int!
}
type PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown {
	taxes: [LineItemsTaxAmount!]!
	discounts: [LineItemsDiscountAmount!]!
}
union PaymentPagesCheckoutSessionTotalDetailsUnion = PaymentPagesCheckoutSessionTotalDetails
type Payout {
	type: PayoutType!
	status: String!
	statementDescriptor: String
	sourceType: String!
	reversedBy: PayoutUnion
	originalPayout: PayoutUnion
	object: PayoutObject!
	method: String!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	failureMessage: String
	failureCode: String
	failureBalanceTransaction: BalanceTransactionUnion
	destination: DeletedCardOrDeletedBankAccountOrCardOrBankAccountUnion
	description: String
	currency: String!
	created: Int!
	balanceTransaction: BalanceTransactionUnion
	automatic: Boolean!
	arrivalDate: Int!
	amount: Int!
}
enum PayoutObject {
	PAYOUT
}
enum PayoutType {
	BANK_ACCOUNT
	CARD
}
union PayoutUnion = Payout
type Period {
	start: Int
	end: Int
}
type Person {
	verification: LegalEntityPersonVerification!
	ssnLast4Provided: Boolean!
	requirements: PersonRequirementsUnion
	relationship: PersonRelationship!
	registeredAddress: Address!
	politicalExposure: PersonPoliticalExposure!
	phone: String
	object: PersonObject!
	nationality: String
	metadata: JSON!
	maidenName: String
	lastNameKanji: String
	lastNameKana: String
	lastName: String
	idNumberSecondaryProvided: Boolean!
	idNumberProvided: Boolean!
	id: String!
	gender: String
	futureRequirements: PersonFutureRequirementsUnion
	fullNameAliases: [String!]!
	firstNameKanji: String
	firstNameKana: String
	firstName: String
	email: String
	dob: LegalEntityDob!
	created: Int!
	addressKanji: LegalEntityJapanAddressUnion
	addressKana: LegalEntityJapanAddressUnion
	address: Address!
	account: String!
}
type PersonFutureRequirements {
	pendingVerification: [String!]!
	pastDue: [String!]!
	eventuallyDue: [String!]!
	errors: [AccountRequirementsError!]!
	currentlyDue: [String!]!
	alternatives: [AccountRequirementsAlternative!]
}
union PersonFutureRequirementsUnion = PersonFutureRequirements
enum PersonObject {
	PERSON
}
enum PersonPoliticalExposure {
	EXISTING
	NONE
}
type PersonRelationship {
	title: String
	representative: Boolean
	percentOwnership: Float
	owner: Boolean
	executive: Boolean
	director: Boolean
}
type PersonRequirements {
	pendingVerification: [String!]!
	pastDue: [String!]!
	eventuallyDue: [String!]!
	errors: [AccountRequirementsError!]!
	currentlyDue: [String!]!
	alternatives: [AccountRequirementsAlternative!]
}
union PersonRequirementsUnion = PersonRequirements
type Plan {
	usageType: PlanUsageType!
	trialPeriodDays: Int
	transformUsage: TransformUsageUnion
	tiersMode: PlanTiersMode
	tiers: [PlanTier!]!
	product: DeletedProductOrProductUnion
	object: PlanObject!
	nickname: String
	metadata: JSON!
	livemode: Boolean!
	intervalCount: Int!
	interval: PlanInterval!
	id: String!
	currency: String!
	created: Int!
	billingScheme: PlanBillingScheme!
	amountDecimal: String
	amount: Int
	aggregateUsage: PlanAggregateUsage
	active: Boolean!
}
enum PlanAggregateUsage {
	LAST_DURING_PERIOD
	LAST_EVER
	MAX
	SUM
}
enum PlanBillingScheme {
	PER_UNIT
	TIERED
}
enum PlanInterval {
	DAY
	MONTH
	WEEK
	YEAR
}
enum PlanObject {
	PLAN
}
type PlanTier {
	upTo: Int
	unitAmountDecimal: String
	unitAmount: Int
	flatAmountDecimal: String
	flatAmount: Int
}
enum PlanTiersMode {
	GRADUATED
	VOLUME
}
enum PlanUsageType {
	LICENSED
	METERED
}
type PlatformTaxFee {
	type: String!
	sourceTransaction: String!
	object: PlatformTaxFeeObject!
	id: String!
	account: String!
}
enum PlatformTaxFeeObject {
	PLATFORM_TAX_FEE
}
type PortalBusinessProfile {
	termsOfServiceUrl: String
	privacyPolicyUrl: String
	headline: String
}
type PortalCustomerUpdate {
	enabled: Boolean!
	allowedUpdates: [PortalCustomerUpdateAllowedUpdates!]!
}
enum PortalCustomerUpdateAllowedUpdates {
	ADDRESS
	EMAIL
	PHONE
	SHIPPING
	TAX_ID
}
type PortalFeatures {
	subscriptionUpdate: PortalSubscriptionUpdate!
	subscriptionPause: PortalSubscriptionPause!
	subscriptionCancel: PortalSubscriptionCancel!
	paymentMethodUpdate: PortalPaymentMethodUpdate!
	invoiceHistory: PortalInvoiceList!
	customerUpdate: PortalCustomerUpdate!
}
type PortalFlowsAfterCompletionHostedConfirmation {
	customMessage: String
}
union PortalFlowsAfterCompletionHostedConfirmationUnion = PortalFlowsAfterCompletionHostedConfirmation
type PortalFlowsAfterCompletionRedirect {
	returnUrl: String!
}
union PortalFlowsAfterCompletionRedirectUnion = PortalFlowsAfterCompletionRedirect
type PortalFlowsFlow {
	type: PortalFlowsFlowType!
	subscriptionCancel: PortalFlowsFlowSubscriptionCancelUnion
	afterCompletion: PortalFlowsFlowAfterCompletion!
}
type PortalFlowsFlowAfterCompletion {
	type: PortalFlowsFlowAfterCompletionType!
	redirect: PortalFlowsAfterCompletionRedirectUnion
	hostedConfirmation: PortalFlowsAfterCompletionHostedConfirmationUnion
}
enum PortalFlowsFlowAfterCompletionType {
	HOSTED_CONFIRMATION
	PORTAL_HOMEPAGE
	REDIRECT
}
type PortalFlowsFlowSubscriptionCancel {
	subscription: String!
}
union PortalFlowsFlowSubscriptionCancelUnion = PortalFlowsFlowSubscriptionCancel
enum PortalFlowsFlowType {
	PAYMENT_METHOD_UPDATE
	SUBSCRIPTION_CANCEL
}
union PortalFlowsFlowUnion = PortalFlowsFlow
type PortalInvoiceList {
	enabled: Boolean!
}
type PortalLoginPage {
	url: String
	enabled: Boolean!
}
type PortalPaymentMethodUpdate {
	enabled: Boolean!
}
type PortalSubscriptionCancel {
	prorationBehavior: PortalSubscriptionCancelProrationBehavior!
	mode: PortalSubscriptionCancelMode!
	enabled: Boolean!
	cancellationReason: PortalSubscriptionCancellationReason!
}
enum PortalSubscriptionCancelMode {
	AT_PERIOD_END
	IMMEDIATELY
}
enum PortalSubscriptionCancelProrationBehavior {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
type PortalSubscriptionCancellationReason {
	options: [PortalSubscriptionCancellationReasonOptions!]!
	enabled: Boolean!
}
enum PortalSubscriptionCancellationReasonOptions {
	CUSTOMER_SERVICE
	LOW_QUALITY
	MISSING_FEATURES
	OTHER
	SWITCHED_SERVICE
	TOO_COMPLEX
	TOO_EXPENSIVE
	UNUSED
}
type PortalSubscriptionPause {
	enabled: Boolean!
}
type PortalSubscriptionUpdate {
	prorationBehavior: PortalSubscriptionUpdateProrationBehavior!
	products: [PortalSubscriptionUpdateProduct!]
	enabled: Boolean!
	defaultAllowedUpdates: [PortalSubscriptionUpdateDefaultAllowedUpdates!]!
}
enum PortalSubscriptionUpdateDefaultAllowedUpdates {
	PRICE
	PROMOTION_CODE
	QUANTITY
}
type PortalSubscriptionUpdateProduct {
	product: String!
	prices: [String!]!
}
enum PortalSubscriptionUpdateProrationBehavior {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
enum PostAccountLinksCollect {
	CURRENTLY_DUE
	EVENTUALLY_DUE
}
input PostAccountLinksInput {
	type: PostAccountLinksType!
	returnUrl: String!
	refreshUrl: String!
	expand: [String!]!
	collect: PostAccountLinksCollect!
	account: String!
}
enum PostAccountLinksType {
	ACCOUNT_ONBOARDING
	ACCOUNT_UPDATE
}
input PostAccountsAccountAcssDebitPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountAdditionalDocumentVerificationIndividualInput {
	front: String!
	back: String!
}
input PostAccountsAccountAddressCompanyInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAccountAddressIndividualInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAccountAddressKanaCompanyInput {
	town: String!
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAccountAddressKanaIndividualInput {
	town: String!
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAccountAddressKanjiCompanyInput {
	town: String!
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAccountAddressKanjiIndividualInput {
	town: String!
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAccountAffirmPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountAfterpayClearpayPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountAuBecsDebitPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountBacsDebitPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountBancontactPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountBankAccountOwnershipVerificationDocumentsInput {
	files: [String!]!
}
enum PostAccountsAccountBankAccountsAccountHolderTypeBankAccount {
	COMPANY
	INDIVIDUAL
}
enum PostAccountsAccountBankAccountsAccountTypeBankAccount {
	CHECKING
	FUTSU
	SAVINGS
	TOZA
}
input PostAccountsAccountBankAccountsBankAccountInput {
	routingNumber: String!
	object: PostAccountsAccountBankAccountsObjectBankAccount!
	currency: String!
	country: String!
	accountType: PostAccountsAccountBankAccountsAccountTypeBankAccount!
	accountNumber: String!
	accountHolderType: PostAccountsAccountBankAccountsAccountHolderTypeBankAccount!
	accountHolderName: String!
}
input PostAccountsAccountBankAccountsBankAccountUnionInput {
	string: String
	postAccountsAccountBankAccountsBankAccountInput: PostAccountsAccountBankAccountsBankAccountInput
}
enum PostAccountsAccountBankAccountsIdAccountHolderType {
	
	COMPANY
	INDIVIDUAL
}
enum PostAccountsAccountBankAccountsIdAccountType {
	CHECKING
	FUTSU
	SAVINGS
	TOZA
}
input PostAccountsAccountBankAccountsIdInput {
	name: String!
	metadata: UnionInput!
	expand: [String!]!
	expYear: String!
	expMonth: String!
	defaultForCurrency: Boolean!
	addressZip: String!
	addressState: String!
	addressLine2: String!
	addressLine1: String!
	addressCountry: String!
	addressCity: String!
	accountType: PostAccountsAccountBankAccountsIdAccountType!
	accountHolderType: PostAccountsAccountBankAccountsIdAccountHolderType!
	accountHolderName: String!
}
input PostAccountsAccountBankAccountsInput {
	metadata: JSON!
	externalAccount: String!
	expand: [String!]!
	defaultForCurrency: Boolean!
	bankAccount: PostAccountsAccountBankAccountsBankAccountUnionInput!
}
enum PostAccountsAccountBankAccountsObjectBankAccount {
	BANK_ACCOUNT
}
input PostAccountsAccountBankTransferPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountBlikPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountBoletoPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountBrandingSettingsInput {
	secondaryColor: String!
	primaryColor: String!
	logo: String!
	icon: String!
}
input PostAccountsAccountBusinessProfileInput {
	url: String!
	supportUrl: UnionInput!
	supportPhone: String!
	supportEmail: String!
	supportAddress: PostAccountsAccountSupportAddressBusinessProfileInput!
	productDescription: String!
	name: String!
	mcc: String!
}
enum PostAccountsAccountBusinessType {
	COMPANY
	GOVERNMENT_ENTITY
	INDIVIDUAL
	NON_PROFIT
}
input PostAccountsAccountCapabilitiesCapabilityInput {
	requested: Boolean!
	expand: [String!]!
}
input PostAccountsAccountCapabilitiesInput {
	usBankAccountAchPayments: PostAccountsAccountUsBankAccountAchPaymentsCapabilitiesInput!
	treasury: PostAccountsAccountTreasuryCapabilitiesInput!
	transfers: PostAccountsAccountTransfersCapabilitiesInput!
	taxReportingUs1099Misc: PostAccountsAccountTaxReportingUs1099MiscCapabilitiesInput!
	taxReportingUs1099K: PostAccountsAccountTaxReportingUs1099KCapabilitiesInput!
	sofortPayments: PostAccountsAccountSofortPaymentsCapabilitiesInput!
	sepaDebitPayments: PostAccountsAccountSepaDebitPaymentsCapabilitiesInput!
	promptpayPayments: PostAccountsAccountPromptpayPaymentsCapabilitiesInput!
	paynowPayments: PostAccountsAccountPaynowPaymentsCapabilitiesInput!
	p24Payments: PostAccountsAccountP24PaymentsCapabilitiesInput!
	oxxoPayments: PostAccountsAccountOxxoPaymentsCapabilitiesInput!
	linkPayments: PostAccountsAccountLinkPaymentsCapabilitiesInput!
	legacyPayments: PostAccountsAccountLegacyPaymentsCapabilitiesInput!
	konbiniPayments: PostAccountsAccountKonbiniPaymentsCapabilitiesInput!
	klarnaPayments: PostAccountsAccountKlarnaPaymentsCapabilitiesInput!
	jcbPayments: PostAccountsAccountJcbPaymentsCapabilitiesInput!
	indiaInternationalPayments: PostAccountsAccountIndiaInternationalPaymentsCapabilitiesInput!
	idealPayments: PostAccountsAccountIdealPaymentsCapabilitiesInput!
	grabpayPayments: PostAccountsAccountGrabpayPaymentsCapabilitiesInput!
	giropayPayments: PostAccountsAccountGiropayPaymentsCapabilitiesInput!
	fpxPayments: PostAccountsAccountFpxPaymentsCapabilitiesInput!
	epsPayments: PostAccountsAccountEpsPaymentsCapabilitiesInput!
	cartesBancairesPayments: PostAccountsAccountCartesBancairesPaymentsCapabilitiesInput!
	cardPayments: PostAccountsAccountCardPaymentsCapabilitiesInput!
	cardIssuing: PostAccountsAccountCardIssuingCapabilitiesInput!
	boletoPayments: PostAccountsAccountBoletoPaymentsCapabilitiesInput!
	blikPayments: PostAccountsAccountBlikPaymentsCapabilitiesInput!
	bankTransferPayments: PostAccountsAccountBankTransferPaymentsCapabilitiesInput!
	bancontactPayments: PostAccountsAccountBancontactPaymentsCapabilitiesInput!
	bacsDebitPayments: PostAccountsAccountBacsDebitPaymentsCapabilitiesInput!
	auBecsDebitPayments: PostAccountsAccountAuBecsDebitPaymentsCapabilitiesInput!
	afterpayClearpayPayments: PostAccountsAccountAfterpayClearpayPaymentsCapabilitiesInput!
	affirmPayments: PostAccountsAccountAffirmPaymentsCapabilitiesInput!
	acssDebitPayments: PostAccountsAccountAcssDebitPaymentsCapabilitiesInput!
}
input PostAccountsAccountCardIssuingCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountCardIssuingSettingsInput {
	tosAcceptance: PostAccountsAccountTosAcceptanceCardIssuingSettingsInput!
}
input PostAccountsAccountCardPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountCardPaymentsSettingsInput {
	statementDescriptorPrefixKanji: UnionInput!
	statementDescriptorPrefixKana: UnionInput!
	statementDescriptorPrefix: String!
	declineOn: PostAccountsAccountDeclineOnCardPaymentsSettingsInput!
}
input PostAccountsAccountCartesBancairesPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountCompanyInput {
	verification: PostAccountsAccountVerificationCompanyInput!
	vatId: String!
	taxIdRegistrar: String!
	taxId: String!
	structure: PostAccountsAccountStructureCompany!
	registrationNumber: String!
	phone: String!
	ownershipDeclaration: PostAccountsAccountOwnershipDeclarationCompanyInput!
	ownersProvided: Boolean!
	nameKanji: String!
	nameKana: String!
	name: String!
	executivesProvided: Boolean!
	directorsProvided: Boolean!
	addressKanji: PostAccountsAccountAddressKanjiCompanyInput!
	addressKana: PostAccountsAccountAddressKanaCompanyInput!
	address: PostAccountsAccountAddressCompanyInput!
}
input PostAccountsAccountCompanyLicenseDocumentsInput {
	files: [String!]!
}
input PostAccountsAccountCompanyMemorandumOfAssociationDocumentsInput {
	files: [String!]!
}
input PostAccountsAccountCompanyMinisterialDecreeDocumentsInput {
	files: [String!]!
}
input PostAccountsAccountCompanyRegistrationVerificationDocumentsInput {
	files: [String!]!
}
input PostAccountsAccountCompanyTaxIdVerificationDocumentsInput {
	files: [String!]!
}
input PostAccountsAccountDeclineOnCardPaymentsSettingsInput {
	cvcFailure: Boolean!
	avsFailure: Boolean!
}
enum PostAccountsAccountDobIndividual {
	
}
input PostAccountsAccountDobIndividualInput {
	year: Int!
	month: Int!
	day: Int!
}
input PostAccountsAccountDobIndividualUnionInput {
	postAccountsAccountDobIndividual: PostAccountsAccountDobIndividual
	postAccountsAccountDobIndividualInput: PostAccountsAccountDobIndividualInput
}
input PostAccountsAccountDocumentVerificationCompanyInput {
	front: String!
	back: String!
}
input PostAccountsAccountDocumentVerificationIndividualInput {
	front: String!
	back: String!
}
input PostAccountsAccountDocumentsInput {
	proofOfRegistration: PostAccountsAccountProofOfRegistrationDocumentsInput!
	companyTaxIdVerification: PostAccountsAccountCompanyTaxIdVerificationDocumentsInput!
	companyRegistrationVerification: PostAccountsAccountCompanyRegistrationVerificationDocumentsInput!
	companyMinisterialDecree: PostAccountsAccountCompanyMinisterialDecreeDocumentsInput!
	companyMemorandumOfAssociation: PostAccountsAccountCompanyMemorandumOfAssociationDocumentsInput!
	companyLicense: PostAccountsAccountCompanyLicenseDocumentsInput!
	bankAccountOwnershipVerification: PostAccountsAccountBankAccountOwnershipVerificationDocumentsInput!
}
input PostAccountsAccountEpsPaymentsCapabilitiesInput {
	requested: Boolean!
}
enum PostAccountsAccountExternalAccountsAccountHolderTypeBankAccount {
	COMPANY
	INDIVIDUAL
}
enum PostAccountsAccountExternalAccountsAccountTypeBankAccount {
	CHECKING
	FUTSU
	SAVINGS
	TOZA
}
input PostAccountsAccountExternalAccountsBankAccountInput {
	routingNumber: String!
	object: PostAccountsAccountExternalAccountsObjectBankAccount!
	currency: String!
	country: String!
	accountType: PostAccountsAccountExternalAccountsAccountTypeBankAccount!
	accountNumber: String!
	accountHolderType: PostAccountsAccountExternalAccountsAccountHolderTypeBankAccount!
	accountHolderName: String!
}
input PostAccountsAccountExternalAccountsBankAccountUnionInput {
	string: String
	postAccountsAccountExternalAccountsBankAccountInput: PostAccountsAccountExternalAccountsBankAccountInput
}
enum PostAccountsAccountExternalAccountsIdAccountHolderType {
	
	COMPANY
	INDIVIDUAL
}
enum PostAccountsAccountExternalAccountsIdAccountType {
	CHECKING
	FUTSU
	SAVINGS
	TOZA
}
input PostAccountsAccountExternalAccountsIdInput {
	name: String!
	metadata: UnionInput!
	expand: [String!]!
	expYear: String!
	expMonth: String!
	defaultForCurrency: Boolean!
	addressZip: String!
	addressState: String!
	addressLine2: String!
	addressLine1: String!
	addressCountry: String!
	addressCity: String!
	accountType: PostAccountsAccountExternalAccountsIdAccountType!
	accountHolderType: PostAccountsAccountExternalAccountsIdAccountHolderType!
	accountHolderName: String!
}
input PostAccountsAccountExternalAccountsInput {
	metadata: JSON!
	externalAccount: String!
	expand: [String!]!
	defaultForCurrency: Boolean!
	bankAccount: PostAccountsAccountExternalAccountsBankAccountUnionInput!
}
enum PostAccountsAccountExternalAccountsObjectBankAccount {
	BANK_ACCOUNT
}
input PostAccountsAccountFpxPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountGiropayPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountGrabpayPaymentsCapabilitiesInput {
	requested: Boolean!
}
enum PostAccountsAccountHolderTypeBankAccount {
	COMPANY
	INDIVIDUAL
}
input PostAccountsAccountIdealPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountIndiaInternationalPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountIndividualInput {
	verification: PostAccountsAccountVerificationIndividualInput!
	ssnLast4: String!
	registeredAddress: PostAccountsAccountRegisteredAddressIndividualInput!
	politicalExposure: PostAccountsAccountPoliticalExposureIndividual!
	phone: String!
	metadata: UnionInput!
	maidenName: String!
	lastNameKanji: String!
	lastNameKana: String!
	lastName: String!
	idNumberSecondary: String!
	idNumber: String!
	gender: String!
	fullNameAliases: UnionInput!
	firstNameKanji: String!
	firstNameKana: String!
	firstName: String!
	email: String!
	dob: PostAccountsAccountDobIndividualUnionInput!
	addressKanji: PostAccountsAccountAddressKanjiIndividualInput!
	addressKana: PostAccountsAccountAddressKanaIndividualInput!
	address: PostAccountsAccountAddressIndividualInput!
}
input PostAccountsAccountInput {
	tosAcceptance: PostAccountsAccountTosAcceptanceInput!
	settings: PostAccountsAccountSettingsInput!
	metadata: UnionInput!
	individual: PostAccountsAccountIndividualInput!
	externalAccount: String!
	expand: [String!]!
	email: String!
	documents: PostAccountsAccountDocumentsInput!
	defaultCurrency: String!
	company: PostAccountsAccountCompanyInput!
	capabilities: PostAccountsAccountCapabilitiesInput!
	businessType: PostAccountsAccountBusinessType!
	businessProfile: PostAccountsAccountBusinessProfileInput!
	accountToken: String!
}
enum PostAccountsAccountIntervalSchedulePayoutsSettings {
	DAILY
	MANUAL
	MONTHLY
	WEEKLY
}
input PostAccountsAccountJcbPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountKlarnaPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountKonbiniPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountLegacyPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountLinkPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountLoginLinksInput {
	expand: [String!]!
}
input PostAccountsAccountOwnershipDeclarationCompanyInput {
	userAgent: String!
	ip: String!
	date: Int!
}
input PostAccountsAccountOxxoPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountP24PaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountPaymentsSettingsInput {
	statementDescriptorKanji: String!
	statementDescriptorKana: String!
	statementDescriptor: String!
}
input PostAccountsAccountPaynowPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountPayoutsSettingsInput {
	statementDescriptor: String!
	schedule: PostAccountsAccountSchedulePayoutsSettingsInput!
	debitNegativeBalances: Boolean!
}
input PostAccountsAccountPeopleAdditionalDocumentVerificationInput {
	front: String!
	back: String!
}
input PostAccountsAccountPeopleAddressInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAccountPeopleAddressKanaInput {
	town: String!
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAccountPeopleAddressKanjiInput {
	town: String!
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAccountPeopleCompanyAuthorizationDocumentsInput {
	files: [String!]!
}
enum PostAccountsAccountPeopleDob {
	
}
input PostAccountsAccountPeopleDobInput {
	year: Int!
	month: Int!
	day: Int!
}
input PostAccountsAccountPeopleDobUnionInput {
	postAccountsAccountPeopleDob: PostAccountsAccountPeopleDob
	postAccountsAccountPeopleDobInput: PostAccountsAccountPeopleDobInput
}
input PostAccountsAccountPeopleDocumentVerificationInput {
	front: String!
	back: String!
}
input PostAccountsAccountPeopleDocumentsInput {
	visa: PostAccountsAccountPeopleVisaDocumentsInput!
	passport: PostAccountsAccountPeoplePassportDocumentsInput!
	companyAuthorization: PostAccountsAccountPeopleCompanyAuthorizationDocumentsInput!
}
input PostAccountsAccountPeopleInput {
	verification: PostAccountsAccountPeopleVerificationInput!
	ssnLast4: String!
	relationship: PostAccountsAccountPeopleRelationshipInput!
	registeredAddress: PostAccountsAccountPeopleRegisteredAddressInput!
	politicalExposure: String!
	phone: String!
	personToken: String!
	nationality: String!
	metadata: UnionInput!
	maidenName: String!
	lastNameKanji: String!
	lastNameKana: String!
	lastName: String!
	idNumberSecondary: String!
	idNumber: String!
	gender: String!
	fullNameAliases: UnionInput!
	firstNameKanji: String!
	firstNameKana: String!
	firstName: String!
	expand: [String!]!
	email: String!
	documents: PostAccountsAccountPeopleDocumentsInput!
	dob: PostAccountsAccountPeopleDobUnionInput!
	addressKanji: PostAccountsAccountPeopleAddressKanjiInput!
	addressKana: PostAccountsAccountPeopleAddressKanaInput!
	address: PostAccountsAccountPeopleAddressInput!
}
input PostAccountsAccountPeoplePassportDocumentsInput {
	files: [String!]!
}
input PostAccountsAccountPeoplePersonAdditionalDocumentVerificationInput {
	front: String!
	back: String!
}
input PostAccountsAccountPeoplePersonAddressInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAccountPeoplePersonAddressKanaInput {
	town: String!
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAccountPeoplePersonAddressKanjiInput {
	town: String!
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAccountPeoplePersonCompanyAuthorizationDocumentsInput {
	files: [String!]!
}
enum PostAccountsAccountPeoplePersonDob {
	
}
input PostAccountsAccountPeoplePersonDobInput {
	year: Int!
	month: Int!
	day: Int!
}
input PostAccountsAccountPeoplePersonDobUnionInput {
	postAccountsAccountPeoplePersonDob: PostAccountsAccountPeoplePersonDob
	postAccountsAccountPeoplePersonDobInput: PostAccountsAccountPeoplePersonDobInput
}
input PostAccountsAccountPeoplePersonDocumentVerificationInput {
	front: String!
	back: String!
}
input PostAccountsAccountPeoplePersonDocumentsInput {
	visa: PostAccountsAccountPeoplePersonVisaDocumentsInput!
	passport: PostAccountsAccountPeoplePersonPassportDocumentsInput!
	companyAuthorization: PostAccountsAccountPeoplePersonCompanyAuthorizationDocumentsInput!
}
input PostAccountsAccountPeoplePersonInput {
	verification: PostAccountsAccountPeoplePersonVerificationInput!
	ssnLast4: String!
	relationship: PostAccountsAccountPeoplePersonRelationshipInput!
	registeredAddress: PostAccountsAccountPeoplePersonRegisteredAddressInput!
	politicalExposure: String!
	phone: String!
	personToken: String!
	nationality: String!
	metadata: UnionInput!
	maidenName: String!
	lastNameKanji: String!
	lastNameKana: String!
	lastName: String!
	idNumberSecondary: String!
	idNumber: String!
	gender: String!
	fullNameAliases: UnionInput!
	firstNameKanji: String!
	firstNameKana: String!
	firstName: String!
	expand: [String!]!
	email: String!
	documents: PostAccountsAccountPeoplePersonDocumentsInput!
	dob: PostAccountsAccountPeoplePersonDobUnionInput!
	addressKanji: PostAccountsAccountPeoplePersonAddressKanjiInput!
	addressKana: PostAccountsAccountPeoplePersonAddressKanaInput!
	address: PostAccountsAccountPeoplePersonAddressInput!
}
input PostAccountsAccountPeoplePersonPassportDocumentsInput {
	files: [String!]!
}
input PostAccountsAccountPeoplePersonRegisteredAddressInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAccountPeoplePersonRelationshipInput {
	title: String!
	representative: Boolean!
	percentOwnership: UnionInput!
	owner: Boolean!
	executive: Boolean!
	director: Boolean!
}
input PostAccountsAccountPeoplePersonVerificationInput {
	document: PostAccountsAccountPeoplePersonDocumentVerificationInput!
	additionalDocument: PostAccountsAccountPeoplePersonAdditionalDocumentVerificationInput!
}
input PostAccountsAccountPeoplePersonVisaDocumentsInput {
	files: [String!]!
}
input PostAccountsAccountPeopleRegisteredAddressInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAccountPeopleRelationshipInput {
	title: String!
	representative: Boolean!
	percentOwnership: UnionInput!
	owner: Boolean!
	executive: Boolean!
	director: Boolean!
}
input PostAccountsAccountPeopleVerificationInput {
	document: PostAccountsAccountPeopleDocumentVerificationInput!
	additionalDocument: PostAccountsAccountPeopleAdditionalDocumentVerificationInput!
}
input PostAccountsAccountPeopleVisaDocumentsInput {
	files: [String!]!
}
input PostAccountsAccountPersonsAdditionalDocumentVerificationInput {
	front: String!
	back: String!
}
input PostAccountsAccountPersonsAddressInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAccountPersonsAddressKanaInput {
	town: String!
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAccountPersonsAddressKanjiInput {
	town: String!
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAccountPersonsCompanyAuthorizationDocumentsInput {
	files: [String!]!
}
enum PostAccountsAccountPersonsDob {
	
}
input PostAccountsAccountPersonsDobInput {
	year: Int!
	month: Int!
	day: Int!
}
input PostAccountsAccountPersonsDobUnionInput {
	postAccountsAccountPersonsDob: PostAccountsAccountPersonsDob
	postAccountsAccountPersonsDobInput: PostAccountsAccountPersonsDobInput
}
input PostAccountsAccountPersonsDocumentVerificationInput {
	front: String!
	back: String!
}
input PostAccountsAccountPersonsDocumentsInput {
	visa: PostAccountsAccountPersonsVisaDocumentsInput!
	passport: PostAccountsAccountPersonsPassportDocumentsInput!
	companyAuthorization: PostAccountsAccountPersonsCompanyAuthorizationDocumentsInput!
}
input PostAccountsAccountPersonsInput {
	verification: PostAccountsAccountPersonsVerificationInput!
	ssnLast4: String!
	relationship: PostAccountsAccountPersonsRelationshipInput!
	registeredAddress: PostAccountsAccountPersonsRegisteredAddressInput!
	politicalExposure: String!
	phone: String!
	personToken: String!
	nationality: String!
	metadata: UnionInput!
	maidenName: String!
	lastNameKanji: String!
	lastNameKana: String!
	lastName: String!
	idNumberSecondary: String!
	idNumber: String!
	gender: String!
	fullNameAliases: UnionInput!
	firstNameKanji: String!
	firstNameKana: String!
	firstName: String!
	expand: [String!]!
	email: String!
	documents: PostAccountsAccountPersonsDocumentsInput!
	dob: PostAccountsAccountPersonsDobUnionInput!
	addressKanji: PostAccountsAccountPersonsAddressKanjiInput!
	addressKana: PostAccountsAccountPersonsAddressKanaInput!
	address: PostAccountsAccountPersonsAddressInput!
}
input PostAccountsAccountPersonsPassportDocumentsInput {
	files: [String!]!
}
input PostAccountsAccountPersonsPersonAdditionalDocumentVerificationInput {
	front: String!
	back: String!
}
input PostAccountsAccountPersonsPersonAddressInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAccountPersonsPersonAddressKanaInput {
	town: String!
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAccountPersonsPersonAddressKanjiInput {
	town: String!
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAccountPersonsPersonCompanyAuthorizationDocumentsInput {
	files: [String!]!
}
enum PostAccountsAccountPersonsPersonDob {
	
}
input PostAccountsAccountPersonsPersonDobInput {
	year: Int!
	month: Int!
	day: Int!
}
input PostAccountsAccountPersonsPersonDobUnionInput {
	postAccountsAccountPersonsPersonDob: PostAccountsAccountPersonsPersonDob
	postAccountsAccountPersonsPersonDobInput: PostAccountsAccountPersonsPersonDobInput
}
input PostAccountsAccountPersonsPersonDocumentVerificationInput {
	front: String!
	back: String!
}
input PostAccountsAccountPersonsPersonDocumentsInput {
	visa: PostAccountsAccountPersonsPersonVisaDocumentsInput!
	passport: PostAccountsAccountPersonsPersonPassportDocumentsInput!
	companyAuthorization: PostAccountsAccountPersonsPersonCompanyAuthorizationDocumentsInput!
}
input PostAccountsAccountPersonsPersonInput {
	verification: PostAccountsAccountPersonsPersonVerificationInput!
	ssnLast4: String!
	relationship: PostAccountsAccountPersonsPersonRelationshipInput!
	registeredAddress: PostAccountsAccountPersonsPersonRegisteredAddressInput!
	politicalExposure: String!
	phone: String!
	personToken: String!
	nationality: String!
	metadata: UnionInput!
	maidenName: String!
	lastNameKanji: String!
	lastNameKana: String!
	lastName: String!
	idNumberSecondary: String!
	idNumber: String!
	gender: String!
	fullNameAliases: UnionInput!
	firstNameKanji: String!
	firstNameKana: String!
	firstName: String!
	expand: [String!]!
	email: String!
	documents: PostAccountsAccountPersonsPersonDocumentsInput!
	dob: PostAccountsAccountPersonsPersonDobUnionInput!
	addressKanji: PostAccountsAccountPersonsPersonAddressKanjiInput!
	addressKana: PostAccountsAccountPersonsPersonAddressKanaInput!
	address: PostAccountsAccountPersonsPersonAddressInput!
}
input PostAccountsAccountPersonsPersonPassportDocumentsInput {
	files: [String!]!
}
input PostAccountsAccountPersonsPersonRegisteredAddressInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAccountPersonsPersonRelationshipInput {
	title: String!
	representative: Boolean!
	percentOwnership: UnionInput!
	owner: Boolean!
	executive: Boolean!
	director: Boolean!
}
input PostAccountsAccountPersonsPersonVerificationInput {
	document: PostAccountsAccountPersonsPersonDocumentVerificationInput!
	additionalDocument: PostAccountsAccountPersonsPersonAdditionalDocumentVerificationInput!
}
input PostAccountsAccountPersonsPersonVisaDocumentsInput {
	files: [String!]!
}
input PostAccountsAccountPersonsRegisteredAddressInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAccountPersonsRelationshipInput {
	title: String!
	representative: Boolean!
	percentOwnership: UnionInput!
	owner: Boolean!
	executive: Boolean!
	director: Boolean!
}
input PostAccountsAccountPersonsVerificationInput {
	document: PostAccountsAccountPersonsDocumentVerificationInput!
	additionalDocument: PostAccountsAccountPersonsAdditionalDocumentVerificationInput!
}
input PostAccountsAccountPersonsVisaDocumentsInput {
	files: [String!]!
}
enum PostAccountsAccountPoliticalExposureIndividual {
	EXISTING
	NONE
}
input PostAccountsAccountPromptpayPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountProofOfRegistrationDocumentsInput {
	files: [String!]!
}
input PostAccountsAccountRegisteredAddressIndividualInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAccountRejectInput {
	reason: String!
	expand: [String!]!
}
input PostAccountsAccountSchedulePayoutsSettingsInput {
	weeklyAnchor: PostAccountsAccountWeeklyAnchorSchedulePayoutsSettings!
	monthlyAnchor: Int!
	interval: PostAccountsAccountIntervalSchedulePayoutsSettings!
	delayDays: UnionInput!
}
input PostAccountsAccountSepaDebitPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountSettingsInput {
	treasury: PostAccountsAccountTreasurySettingsInput!
	payouts: PostAccountsAccountPayoutsSettingsInput!
	payments: PostAccountsAccountPaymentsSettingsInput!
	cardPayments: PostAccountsAccountCardPaymentsSettingsInput!
	cardIssuing: PostAccountsAccountCardIssuingSettingsInput!
	branding: PostAccountsAccountBrandingSettingsInput!
}
input PostAccountsAccountSofortPaymentsCapabilitiesInput {
	requested: Boolean!
}
enum PostAccountsAccountStructureCompany {
	
	FREE_ZONE_ESTABLISHMENT
	FREE_ZONE_LLC
	GOVERNMENT_INSTRUMENTALITY
	GOVERNMENTAL_UNIT
	INCORPORATED_NON_PROFIT
	LIMITED_LIABILITY_PARTNERSHIP
	LLC
	MULTI_MEMBER_LLC
	PRIVATE_COMPANY
	PRIVATE_CORPORATION
	PRIVATE_PARTNERSHIP
	PUBLIC_COMPANY
	PUBLIC_CORPORATION
	PUBLIC_PARTNERSHIP
	SINGLE_MEMBER_LLC
	SOLE_ESTABLISHMENT
	SOLE_PROPRIETORSHIP
	TAX_EXEMPT_GOVERNMENT_INSTRUMENTALITY
	UNINCORPORATED_ASSOCIATION
	UNINCORPORATED_NON_PROFIT
}
input PostAccountsAccountSupportAddressBusinessProfileInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAccountTaxReportingUs1099KCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountTaxReportingUs1099MiscCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountTosAcceptanceCardIssuingSettingsInput {
	userAgent: String!
	ip: String!
	date: Int!
}
input PostAccountsAccountTosAcceptanceInput {
	userAgent: String!
	serviceAgreement: String!
	ip: String!
	date: Int!
}
input PostAccountsAccountTosAcceptanceTreasurySettingsInput {
	userAgent: String!
	ip: String!
	date: Int!
}
input PostAccountsAccountTransfersCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountTreasuryCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountTreasurySettingsInput {
	tosAcceptance: PostAccountsAccountTosAcceptanceTreasurySettingsInput!
}
enum PostAccountsAccountTypeBankAccount {
	CHECKING
	FUTSU
	SAVINGS
	TOZA
}
input PostAccountsAccountUsBankAccountAchPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAccountVerificationCompanyInput {
	document: PostAccountsAccountDocumentVerificationCompanyInput!
}
input PostAccountsAccountVerificationIndividualInput {
	document: PostAccountsAccountDocumentVerificationIndividualInput!
	additionalDocument: PostAccountsAccountAdditionalDocumentVerificationIndividualInput!
}
enum PostAccountsAccountWeeklyAnchorSchedulePayoutsSettings {
	FRIDAY
	MONDAY
	SATURDAY
	SUNDAY
	THURSDAY
	TUESDAY
	WEDNESDAY
}
input PostAccountsAcssDebitPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAdditionalDocumentVerificationIndividualInput {
	front: String!
	back: String!
}
input PostAccountsAddressCompanyInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAddressIndividualInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAddressKanaCompanyInput {
	town: String!
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAddressKanaIndividualInput {
	town: String!
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAddressKanjiCompanyInput {
	town: String!
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAddressKanjiIndividualInput {
	town: String!
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsAffirmPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAfterpayClearpayPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsAuBecsDebitPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsBacsDebitPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsBancontactPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsBankAccountInput {
	routingNumber: String!
	object: PostAccountsObjectBankAccount!
	currency: String!
	country: String!
	accountType: PostAccountsAccountTypeBankAccount!
	accountNumber: String!
	accountHolderType: PostAccountsAccountHolderTypeBankAccount!
	accountHolderName: String!
}
input PostAccountsBankAccountOwnershipVerificationDocumentsInput {
	files: [String!]!
}
input PostAccountsBankAccountUnionInput {
	string: String
	postAccountsBankAccountInput: PostAccountsBankAccountInput
}
input PostAccountsBankTransferPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsBlikPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsBoletoPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsBrandingSettingsInput {
	secondaryColor: String!
	primaryColor: String!
	logo: String!
	icon: String!
}
input PostAccountsBusinessProfileInput {
	url: String!
	supportUrl: UnionInput!
	supportPhone: String!
	supportEmail: String!
	supportAddress: PostAccountsSupportAddressBusinessProfileInput!
	productDescription: String!
	name: String!
	mcc: String!
}
enum PostAccountsBusinessType {
	COMPANY
	GOVERNMENT_ENTITY
	INDIVIDUAL
	NON_PROFIT
}
input PostAccountsCapabilitiesInput {
	usBankAccountAchPayments: PostAccountsUsBankAccountAchPaymentsCapabilitiesInput!
	treasury: PostAccountsTreasuryCapabilitiesInput!
	transfers: PostAccountsTransfersCapabilitiesInput!
	taxReportingUs1099Misc: PostAccountsTaxReportingUs1099MiscCapabilitiesInput!
	taxReportingUs1099K: PostAccountsTaxReportingUs1099KCapabilitiesInput!
	sofortPayments: PostAccountsSofortPaymentsCapabilitiesInput!
	sepaDebitPayments: PostAccountsSepaDebitPaymentsCapabilitiesInput!
	promptpayPayments: PostAccountsPromptpayPaymentsCapabilitiesInput!
	paynowPayments: PostAccountsPaynowPaymentsCapabilitiesInput!
	p24Payments: PostAccountsP24PaymentsCapabilitiesInput!
	oxxoPayments: PostAccountsOxxoPaymentsCapabilitiesInput!
	linkPayments: PostAccountsLinkPaymentsCapabilitiesInput!
	legacyPayments: PostAccountsLegacyPaymentsCapabilitiesInput!
	konbiniPayments: PostAccountsKonbiniPaymentsCapabilitiesInput!
	klarnaPayments: PostAccountsKlarnaPaymentsCapabilitiesInput!
	jcbPayments: PostAccountsJcbPaymentsCapabilitiesInput!
	indiaInternationalPayments: PostAccountsIndiaInternationalPaymentsCapabilitiesInput!
	idealPayments: PostAccountsIdealPaymentsCapabilitiesInput!
	grabpayPayments: PostAccountsGrabpayPaymentsCapabilitiesInput!
	giropayPayments: PostAccountsGiropayPaymentsCapabilitiesInput!
	fpxPayments: PostAccountsFpxPaymentsCapabilitiesInput!
	epsPayments: PostAccountsEpsPaymentsCapabilitiesInput!
	cartesBancairesPayments: PostAccountsCartesBancairesPaymentsCapabilitiesInput!
	cardPayments: PostAccountsCardPaymentsCapabilitiesInput!
	cardIssuing: PostAccountsCardIssuingCapabilitiesInput!
	boletoPayments: PostAccountsBoletoPaymentsCapabilitiesInput!
	blikPayments: PostAccountsBlikPaymentsCapabilitiesInput!
	bankTransferPayments: PostAccountsBankTransferPaymentsCapabilitiesInput!
	bancontactPayments: PostAccountsBancontactPaymentsCapabilitiesInput!
	bacsDebitPayments: PostAccountsBacsDebitPaymentsCapabilitiesInput!
	auBecsDebitPayments: PostAccountsAuBecsDebitPaymentsCapabilitiesInput!
	afterpayClearpayPayments: PostAccountsAfterpayClearpayPaymentsCapabilitiesInput!
	affirmPayments: PostAccountsAffirmPaymentsCapabilitiesInput!
	acssDebitPayments: PostAccountsAcssDebitPaymentsCapabilitiesInput!
}
input PostAccountsCardIssuingCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsCardIssuingSettingsInput {
	tosAcceptance: PostAccountsTosAcceptanceCardIssuingSettingsInput!
}
input PostAccountsCardPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsCardPaymentsSettingsInput {
	statementDescriptorPrefixKanji: UnionInput!
	statementDescriptorPrefixKana: UnionInput!
	statementDescriptorPrefix: String!
	declineOn: PostAccountsDeclineOnCardPaymentsSettingsInput!
}
input PostAccountsCartesBancairesPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsCompanyInput {
	verification: PostAccountsVerificationCompanyInput!
	vatId: String!
	taxIdRegistrar: String!
	taxId: String!
	structure: PostAccountsStructureCompany!
	registrationNumber: String!
	phone: String!
	ownershipDeclaration: PostAccountsOwnershipDeclarationCompanyInput!
	ownersProvided: Boolean!
	nameKanji: String!
	nameKana: String!
	name: String!
	executivesProvided: Boolean!
	directorsProvided: Boolean!
	addressKanji: PostAccountsAddressKanjiCompanyInput!
	addressKana: PostAccountsAddressKanaCompanyInput!
	address: PostAccountsAddressCompanyInput!
}
input PostAccountsCompanyLicenseDocumentsInput {
	files: [String!]!
}
input PostAccountsCompanyMemorandumOfAssociationDocumentsInput {
	files: [String!]!
}
input PostAccountsCompanyMinisterialDecreeDocumentsInput {
	files: [String!]!
}
input PostAccountsCompanyRegistrationVerificationDocumentsInput {
	files: [String!]!
}
input PostAccountsCompanyTaxIdVerificationDocumentsInput {
	files: [String!]!
}
input PostAccountsDeclineOnCardPaymentsSettingsInput {
	cvcFailure: Boolean!
	avsFailure: Boolean!
}
enum PostAccountsDelayDaysSchedulePayoutsSettings {
	MINIMUM
}
enum PostAccountsDobIndividual {
	
}
input PostAccountsDobIndividualInput {
	year: Int!
	month: Int!
	day: Int!
}
input PostAccountsDobIndividualUnionInput {
	postAccountsDobIndividual: PostAccountsDobIndividual
	postAccountsDobIndividualInput: PostAccountsDobIndividualInput
}
input PostAccountsDocumentVerificationCompanyInput {
	front: String!
	back: String!
}
input PostAccountsDocumentVerificationIndividualInput {
	front: String!
	back: String!
}
input PostAccountsDocumentsInput {
	proofOfRegistration: PostAccountsProofOfRegistrationDocumentsInput!
	companyTaxIdVerification: PostAccountsCompanyTaxIdVerificationDocumentsInput!
	companyRegistrationVerification: PostAccountsCompanyRegistrationVerificationDocumentsInput!
	companyMinisterialDecree: PostAccountsCompanyMinisterialDecreeDocumentsInput!
	companyMemorandumOfAssociation: PostAccountsCompanyMemorandumOfAssociationDocumentsInput!
	companyLicense: PostAccountsCompanyLicenseDocumentsInput!
	bankAccountOwnershipVerification: PostAccountsBankAccountOwnershipVerificationDocumentsInput!
}
input PostAccountsEpsPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsFpxPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsGiropayPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsGrabpayPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsIdealPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsIndiaInternationalPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsIndividualInput {
	verification: PostAccountsVerificationIndividualInput!
	ssnLast4: String!
	registeredAddress: PostAccountsRegisteredAddressIndividualInput!
	politicalExposure: PostAccountsPoliticalExposureIndividual!
	phone: String!
	metadata: UnionInput!
	maidenName: String!
	lastNameKanji: String!
	lastNameKana: String!
	lastName: String!
	idNumberSecondary: String!
	idNumber: String!
	gender: String!
	fullNameAliases: UnionInput!
	firstNameKanji: String!
	firstNameKana: String!
	firstName: String!
	email: String!
	dob: PostAccountsDobIndividualUnionInput!
	addressKanji: PostAccountsAddressKanjiIndividualInput!
	addressKana: PostAccountsAddressKanaIndividualInput!
	address: PostAccountsAddressIndividualInput!
}
input PostAccountsInput {
	type: PostAccountsType!
	tosAcceptance: PostAccountsTosAcceptanceInput!
	settings: PostAccountsSettingsInput!
	metadata: UnionInput!
	individual: PostAccountsIndividualInput!
	externalAccount: String!
	expand: [String!]!
	email: String!
	documents: PostAccountsDocumentsInput!
	defaultCurrency: String!
	country: String!
	company: PostAccountsCompanyInput!
	capabilities: PostAccountsCapabilitiesInput!
	businessType: PostAccountsBusinessType!
	businessProfile: PostAccountsBusinessProfileInput!
	bankAccount: PostAccountsBankAccountUnionInput!
	accountToken: String!
}
enum PostAccountsIntervalSchedulePayoutsSettings {
	DAILY
	MANUAL
	MONTHLY
	WEEKLY
}
input PostAccountsJcbPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsKlarnaPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsKonbiniPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsLegacyPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsLinkPaymentsCapabilitiesInput {
	requested: Boolean!
}
enum PostAccountsObjectBankAccount {
	BANK_ACCOUNT
}
input PostAccountsOwnershipDeclarationCompanyInput {
	userAgent: String!
	ip: String!
	date: Int!
}
input PostAccountsOxxoPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsP24PaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsPaymentsSettingsInput {
	statementDescriptorKanji: String!
	statementDescriptorKana: String!
	statementDescriptor: String!
}
input PostAccountsPaynowPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsPayoutsSettingsInput {
	statementDescriptor: String!
	schedule: PostAccountsSchedulePayoutsSettingsInput!
	debitNegativeBalances: Boolean!
}
enum PostAccountsPoliticalExposureIndividual {
	EXISTING
	NONE
}
input PostAccountsPromptpayPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsProofOfRegistrationDocumentsInput {
	files: [String!]!
}
input PostAccountsRegisteredAddressIndividualInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsSchedulePayoutsSettingsInput {
	weeklyAnchor: PostAccountsWeeklyAnchorSchedulePayoutsSettings!
	monthlyAnchor: Int!
	interval: PostAccountsIntervalSchedulePayoutsSettings!
	delayDays: UnionInput!
}
input PostAccountsSepaDebitPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsSettingsInput {
	treasury: PostAccountsTreasurySettingsInput!
	payouts: PostAccountsPayoutsSettingsInput!
	payments: PostAccountsPaymentsSettingsInput!
	cardPayments: PostAccountsCardPaymentsSettingsInput!
	cardIssuing: PostAccountsCardIssuingSettingsInput!
	branding: PostAccountsBrandingSettingsInput!
}
input PostAccountsSofortPaymentsCapabilitiesInput {
	requested: Boolean!
}
enum PostAccountsStructureCompany {
	
	FREE_ZONE_ESTABLISHMENT
	FREE_ZONE_LLC
	GOVERNMENT_INSTRUMENTALITY
	GOVERNMENTAL_UNIT
	INCORPORATED_NON_PROFIT
	LIMITED_LIABILITY_PARTNERSHIP
	LLC
	MULTI_MEMBER_LLC
	PRIVATE_COMPANY
	PRIVATE_CORPORATION
	PRIVATE_PARTNERSHIP
	PUBLIC_COMPANY
	PUBLIC_CORPORATION
	PUBLIC_PARTNERSHIP
	SINGLE_MEMBER_LLC
	SOLE_ESTABLISHMENT
	SOLE_PROPRIETORSHIP
	TAX_EXEMPT_GOVERNMENT_INSTRUMENTALITY
	UNINCORPORATED_ASSOCIATION
	UNINCORPORATED_NON_PROFIT
}
input PostAccountsSupportAddressBusinessProfileInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostAccountsTaxReportingUs1099KCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsTaxReportingUs1099MiscCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsTosAcceptanceCardIssuingSettingsInput {
	userAgent: String!
	ip: String!
	date: Int!
}
input PostAccountsTosAcceptanceInput {
	userAgent: String!
	serviceAgreement: String!
	ip: String!
	date: Int!
}
input PostAccountsTosAcceptanceTreasurySettingsInput {
	userAgent: String!
	ip: String!
	date: Int!
}
input PostAccountsTransfersCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsTreasuryCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsTreasurySettingsInput {
	tosAcceptance: PostAccountsTosAcceptanceTreasurySettingsInput!
}
enum PostAccountsType {
	CUSTOM
	EXPRESS
	STANDARD
}
input PostAccountsUsBankAccountAchPaymentsCapabilitiesInput {
	requested: Boolean!
}
input PostAccountsVerificationCompanyInput {
	document: PostAccountsDocumentVerificationCompanyInput!
}
input PostAccountsVerificationIndividualInput {
	document: PostAccountsDocumentVerificationIndividualInput!
	additionalDocument: PostAccountsAdditionalDocumentVerificationIndividualInput!
}
enum PostAccountsWeeklyAnchorSchedulePayoutsSettings {
	FRIDAY
	MONDAY
	SATURDAY
	SUNDAY
	THURSDAY
	TUESDAY
	WEDNESDAY
}
input PostApplePayDomainsInput {
	expand: [String!]!
	domainName: String!
}
input PostApplicationFeesFeeRefundsIdInput {
	metadata: UnionInput!
	expand: [String!]!
}
input PostApplicationFeesIdRefundInput {
	expand: [String!]!
	directive: String!
	amount: Int!
}
input PostApplicationFeesIdRefundsInput {
	metadata: JSON!
	expand: [String!]!
	amount: Int!
}
input PostAppsSecretsDeleteInput {
	scope: PostAppsSecretsDeleteScopeInput!
	name: String!
	expand: [String!]!
}
input PostAppsSecretsDeleteScopeInput {
	user: String!
	type: PostAppsSecretsDeleteTypeScope!
}
enum PostAppsSecretsDeleteTypeScope {
	ACCOUNT
	USER
}
input PostAppsSecretsInput {
	scope: PostAppsSecretsScopeInput!
	payload: String!
	name: String!
	expiresAt: Int!
	expand: [String!]!
}
input PostAppsSecretsScopeInput {
	user: String!
	type: PostAppsSecretsTypeScope!
}
enum PostAppsSecretsTypeScope {
	ACCOUNT
	USER
}
input PostBillingPortalConfigurationsBusinessProfileInput {
	termsOfServiceUrl: String!
	privacyPolicyUrl: String!
	headline: String!
}
input PostBillingPortalConfigurationsCancellationReasonSubscriptionCancelFeaturesInput {
	options: UnionInput!
	enabled: Boolean!
}
input PostBillingPortalConfigurationsConfigurationBusinessProfileInput {
	termsOfServiceUrl: UnionInput!
	privacyPolicyUrl: UnionInput!
	headline: String!
}
input PostBillingPortalConfigurationsConfigurationCancellationReasonSubscriptionCancelFeaturesInput {
	options: UnionInput!
	enabled: Boolean!
}
input PostBillingPortalConfigurationsConfigurationCustomerUpdateFeaturesInput {
	enabled: Boolean!
	allowedUpdates: UnionInput!
}
input PostBillingPortalConfigurationsConfigurationFeaturesInput {
	subscriptionUpdate: PostBillingPortalConfigurationsConfigurationSubscriptionUpdateFeaturesInput!
	subscriptionPause: PostBillingPortalConfigurationsConfigurationSubscriptionPauseFeaturesInput!
	subscriptionCancel: PostBillingPortalConfigurationsConfigurationSubscriptionCancelFeaturesInput!
	paymentMethodUpdate: PostBillingPortalConfigurationsConfigurationPaymentMethodUpdateFeaturesInput!
	invoiceHistory: PostBillingPortalConfigurationsConfigurationInvoiceHistoryFeaturesInput!
	customerUpdate: PostBillingPortalConfigurationsConfigurationCustomerUpdateFeaturesInput!
}
input PostBillingPortalConfigurationsConfigurationInput {
	metadata: UnionInput!
	loginPage: PostBillingPortalConfigurationsConfigurationLoginPageInput!
	features: PostBillingPortalConfigurationsConfigurationFeaturesInput!
	expand: [String!]!
	defaultReturnUrl: UnionInput!
	businessProfile: PostBillingPortalConfigurationsConfigurationBusinessProfileInput!
	active: Boolean!
}
input PostBillingPortalConfigurationsConfigurationInvoiceHistoryFeaturesInput {
	enabled: Boolean!
}
input PostBillingPortalConfigurationsConfigurationLoginPageInput {
	enabled: Boolean!
}
enum PostBillingPortalConfigurationsConfigurationModeSubscriptionCancelFeatures {
	AT_PERIOD_END
	IMMEDIATELY
}
input PostBillingPortalConfigurationsConfigurationPaymentMethodUpdateFeaturesInput {
	enabled: Boolean!
}
enum PostBillingPortalConfigurationsConfigurationProductsSubscriptionUpdateFeatures {
	
}
input PostBillingPortalConfigurationsConfigurationProductsSubscriptionUpdateFeaturesInput {
	product: String!
	prices: [String!]!
}
input PostBillingPortalConfigurationsConfigurationProductsSubscriptionUpdateFeaturesUnionInput {
	postBillingPortalConfigurationsConfigurationProductsSubscriptionUpdateFeatures: PostBillingPortalConfigurationsConfigurationProductsSubscriptionUpdateFeatures
	postBillingPortalConfigurationsConfigurationProductsSubscriptionUpdateFeaturesInput: PostBillingPortalConfigurationsConfigurationProductsSubscriptionUpdateFeaturesInput
}
enum PostBillingPortalConfigurationsConfigurationProrationBehaviorSubscriptionCancelFeatures {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
enum PostBillingPortalConfigurationsConfigurationProrationBehaviorSubscriptionUpdateFeatures {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
input PostBillingPortalConfigurationsConfigurationSubscriptionCancelFeaturesInput {
	prorationBehavior: PostBillingPortalConfigurationsConfigurationProrationBehaviorSubscriptionCancelFeatures!
	mode: PostBillingPortalConfigurationsConfigurationModeSubscriptionCancelFeatures!
	enabled: Boolean!
	cancellationReason: PostBillingPortalConfigurationsConfigurationCancellationReasonSubscriptionCancelFeaturesInput!
}
input PostBillingPortalConfigurationsConfigurationSubscriptionPauseFeaturesInput {
	enabled: Boolean!
}
input PostBillingPortalConfigurationsConfigurationSubscriptionUpdateFeaturesInput {
	prorationBehavior: PostBillingPortalConfigurationsConfigurationProrationBehaviorSubscriptionUpdateFeatures!
	products: PostBillingPortalConfigurationsConfigurationProductsSubscriptionUpdateFeaturesUnionInput!
	enabled: Boolean!
	defaultAllowedUpdates: UnionInput!
}
input PostBillingPortalConfigurationsCustomerUpdateFeaturesInput {
	enabled: Boolean!
	allowedUpdates: UnionInput!
}
input PostBillingPortalConfigurationsFeaturesInput {
	subscriptionUpdate: PostBillingPortalConfigurationsSubscriptionUpdateFeaturesInput!
	subscriptionPause: PostBillingPortalConfigurationsSubscriptionPauseFeaturesInput!
	subscriptionCancel: PostBillingPortalConfigurationsSubscriptionCancelFeaturesInput!
	paymentMethodUpdate: PostBillingPortalConfigurationsPaymentMethodUpdateFeaturesInput!
	invoiceHistory: PostBillingPortalConfigurationsInvoiceHistoryFeaturesInput!
	customerUpdate: PostBillingPortalConfigurationsCustomerUpdateFeaturesInput!
}
input PostBillingPortalConfigurationsInput {
	metadata: JSON!
	loginPage: PostBillingPortalConfigurationsLoginPageInput!
	features: PostBillingPortalConfigurationsFeaturesInput!
	expand: [String!]!
	defaultReturnUrl: UnionInput!
	businessProfile: PostBillingPortalConfigurationsBusinessProfileInput!
}
input PostBillingPortalConfigurationsInvoiceHistoryFeaturesInput {
	enabled: Boolean!
}
input PostBillingPortalConfigurationsLoginPageInput {
	enabled: Boolean!
}
enum PostBillingPortalConfigurationsModeSubscriptionCancelFeatures {
	AT_PERIOD_END
	IMMEDIATELY
}
input PostBillingPortalConfigurationsPaymentMethodUpdateFeaturesInput {
	enabled: Boolean!
}
enum PostBillingPortalConfigurationsProductsSubscriptionUpdateFeatures {
	
}
input PostBillingPortalConfigurationsProductsSubscriptionUpdateFeaturesInput {
	product: String!
	prices: [String!]!
}
input PostBillingPortalConfigurationsProductsSubscriptionUpdateFeaturesUnionInput {
	postBillingPortalConfigurationsProductsSubscriptionUpdateFeatures: PostBillingPortalConfigurationsProductsSubscriptionUpdateFeatures
	postBillingPortalConfigurationsProductsSubscriptionUpdateFeaturesInput: PostBillingPortalConfigurationsProductsSubscriptionUpdateFeaturesInput
}
enum PostBillingPortalConfigurationsProrationBehaviorSubscriptionCancelFeatures {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
enum PostBillingPortalConfigurationsProrationBehaviorSubscriptionUpdateFeatures {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
input PostBillingPortalConfigurationsSubscriptionCancelFeaturesInput {
	prorationBehavior: PostBillingPortalConfigurationsProrationBehaviorSubscriptionCancelFeatures!
	mode: PostBillingPortalConfigurationsModeSubscriptionCancelFeatures!
	enabled: Boolean!
	cancellationReason: PostBillingPortalConfigurationsCancellationReasonSubscriptionCancelFeaturesInput!
}
input PostBillingPortalConfigurationsSubscriptionPauseFeaturesInput {
	enabled: Boolean!
}
input PostBillingPortalConfigurationsSubscriptionUpdateFeaturesInput {
	prorationBehavior: PostBillingPortalConfigurationsProrationBehaviorSubscriptionUpdateFeatures!
	products: PostBillingPortalConfigurationsProductsSubscriptionUpdateFeaturesUnionInput!
	enabled: Boolean!
	defaultAllowedUpdates: UnionInput!
}
input PostBillingPortalSessionsAfterCompletionFlowDataInput {
	type: PostBillingPortalSessionsTypeAfterCompletionFlowData!
	redirect: PostBillingPortalSessionsRedirectAfterCompletionFlowDataInput!
	hostedConfirmation: PostBillingPortalSessionsHostedConfirmationAfterCompletionFlowDataInput!
}
input PostBillingPortalSessionsFlowDataInput {
	type: PostBillingPortalSessionsTypeFlowData!
	subscriptionCancel: PostBillingPortalSessionsSubscriptionCancelFlowDataInput!
	afterCompletion: PostBillingPortalSessionsAfterCompletionFlowDataInput!
}
input PostBillingPortalSessionsHostedConfirmationAfterCompletionFlowDataInput {
	customMessage: String!
}
input PostBillingPortalSessionsInput {
	returnUrl: String!
	onBehalfOf: String!
	locale: PostBillingPortalSessionsLocale!
	flowData: PostBillingPortalSessionsFlowDataInput!
	expand: [String!]!
	customer: String!
	configuration: String!
}
enum PostBillingPortalSessionsLocale {
	AUTO
	BG
	CS
	DA
	DE
	EL
	EN
	EN_AU
	EN_CA
	EN_GB
	EN_IE
	EN_IN
	EN_NZ
	EN_SG
	ES
	ES_419
	ET
	FI
	FIL
	FR
	FR_CA
	HR
	HU
	ID
	IT
	JA
	KO
	LT
	LV
	MS
	MT
	NB
	NL
	PL
	PT
	PT_BR
	RO
	RU
	SK
	SL
	SV
	TH
	TR
	VI
	ZH
	ZH_HK
	ZH_TW
}
input PostBillingPortalSessionsRedirectAfterCompletionFlowDataInput {
	returnUrl: String!
}
input PostBillingPortalSessionsSubscriptionCancelFlowDataInput {
	subscription: String!
}
enum PostBillingPortalSessionsTypeAfterCompletionFlowData {
	HOSTED_CONFIRMATION
	PORTAL_HOMEPAGE
	REDIRECT
}
enum PostBillingPortalSessionsTypeFlowData {
	PAYMENT_METHOD_UPDATE
	SUBSCRIPTION_CANCEL
}
input PostChargesAddressShippingInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostChargesCardInput {
	object: PostChargesObjectCard!
	number: String!
	name: String!
	metadata: JSON!
	expYear: Int!
	expMonth: Int!
	cvc: String!
	addressZip: String!
	addressState: String!
	addressLine2: String!
	addressLine1: String!
	addressCountry: String!
	addressCity: String!
}
input PostChargesCardUnionInput {
	string: String
	postChargesCardInput: PostChargesCardInput
}
input PostChargesChargeAddressShippingInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostChargesChargeCaptureInput {
	transferGroup: String!
	transferData: PostChargesChargeCaptureTransferDataInput!
	statementDescriptorSuffix: String!
	statementDescriptor: String!
	receiptEmail: String!
	expand: [String!]!
	applicationFeeAmount: Int!
	applicationFee: Int!
	amount: Int!
}
input PostChargesChargeCaptureTransferDataInput {
	amount: Int!
}
input PostChargesChargeDisputeCloseInput {
	expand: [String!]!
}
input PostChargesChargeDisputeEvidenceInput {
	uncategorizedText: String!
	uncategorizedFile: String!
	shippingTrackingNumber: String!
	shippingDocumentation: String!
	shippingDate: String!
	shippingCarrier: String!
	shippingAddress: String!
	serviceDocumentation: String!
	serviceDate: String!
	refundRefusalExplanation: String!
	refundPolicyDisclosure: String!
	refundPolicy: String!
	receipt: String!
	productDescription: String!
	duplicateChargeId: String!
	duplicateChargeExplanation: String!
	duplicateChargeDocumentation: String!
	customerSignature: String!
	customerPurchaseIp: String!
	customerName: String!
	customerEmailAddress: String!
	customerCommunication: String!
	cancellationRebuttal: String!
	cancellationPolicyDisclosure: String!
	cancellationPolicy: String!
	billingAddress: String!
	accessActivityLog: String!
}
input PostChargesChargeDisputeInput {
	submit: Boolean!
	metadata: UnionInput!
	expand: [String!]!
	evidence: PostChargesChargeDisputeEvidenceInput!
}
input PostChargesChargeFraudDetailsInput {
	userReport: PostChargesChargeUserReportFraudDetails!
}
input PostChargesChargeInput {
	transferGroup: String!
	shipping: PostChargesChargeShippingInput!
	receiptEmail: String!
	metadata: UnionInput!
	fraudDetails: PostChargesChargeFraudDetailsInput!
	expand: [String!]!
	description: String!
	customer: String!
}
input PostChargesChargeRefundInput {
	reverseTransfer: Boolean!
	refundApplicationFee: Boolean!
	reason: PostChargesChargeRefundReason!
	paymentIntent: String!
	metadata: UnionInput!
	instructionsEmail: String!
	expand: [String!]!
	amount: Int!
}
enum PostChargesChargeRefundReason {
	DUPLICATE
	FRAUDULENT
	REQUESTED_BY_CUSTOMER
}
input PostChargesChargeRefundsInput {
	reverseTransfer: Boolean!
	refundApplicationFee: Boolean!
	reason: PostChargesChargeRefundsReason!
	paymentIntent: String!
	origin: PostChargesChargeRefundsOrigin!
	metadata: UnionInput!
	instructionsEmail: String!
	expand: [String!]!
	customer: String!
	currency: String!
	amount: Int!
}
enum PostChargesChargeRefundsOrigin {
	CUSTOMER_BALANCE
}
enum PostChargesChargeRefundsReason {
	DUPLICATE
	FRAUDULENT
	REQUESTED_BY_CUSTOMER
}
input PostChargesChargeRefundsRefundInput {
	metadata: UnionInput!
	expand: [String!]!
}
input PostChargesChargeShippingInput {
	trackingNumber: String!
	phone: String!
	name: String!
	carrier: String!
	address: PostChargesChargeAddressShippingInput!
}
enum PostChargesChargeUserReportFraudDetails {
	
	FRAUDULENT
	SAFE
}
input PostChargesDestinationInput {
	amount: Int!
	account: String!
}
input PostChargesDestinationUnionInput {
	string: String
	postChargesDestinationInput: PostChargesDestinationInput
}
input PostChargesInput {
	transferGroup: String!
	transferData: PostChargesTransferDataInput!
	statementDescriptorSuffix: String!
	statementDescriptor: String!
	source: String!
	shipping: PostChargesShippingInput!
	receiptEmail: String!
	radarOptions: PostChargesRadarOptionsInput!
	onBehalfOf: String!
	metadata: UnionInput!
	expand: [String!]!
	destination: PostChargesDestinationUnionInput!
	description: String!
	customer: String!
	currency: String!
	card: PostChargesCardUnionInput!
	capture: Boolean!
	applicationFeeAmount: Int!
	applicationFee: Int!
	amount: Int!
}
enum PostChargesObjectCard {
	CARD
}
input PostChargesRadarOptionsInput {
	session: String!
}
input PostChargesShippingInput {
	trackingNumber: String!
	phone: String!
	name: String!
	carrier: String!
	address: PostChargesAddressShippingInput!
}
input PostChargesTransferDataInput {
	destination: String!
	amount: Int!
}
input PostCheckoutSessionsAcssDebitPaymentMethodOptionsInput {
	verificationMethod: PostCheckoutSessionsVerificationMethodAcssDebitPaymentMethodOptions!
	setupFutureUsage: PostCheckoutSessionsSetupFutureUsageAcssDebitPaymentMethodOptions!
	mandateOptions: PostCheckoutSessionsMandateOptionsAcssDebitPaymentMethodOptionsInput!
	currency: PostCheckoutSessionsCurrencyAcssDebitPaymentMethodOptions!
}
enum PostCheckoutSessionsAddressCustomerUpdate {
	AUTO
	NEVER
}
input PostCheckoutSessionsAddressShippingPaymentIntentDataInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostCheckoutSessionsAdjustableQuantityLineItemsInput {
	minimum: Int!
	maximum: Int!
	enabled: Boolean!
}
input PostCheckoutSessionsAffirmPaymentMethodOptionsInput {
	setupFutureUsage: PostCheckoutSessionsSetupFutureUsageAffirmPaymentMethodOptions!
}
input PostCheckoutSessionsAfterExpirationInput {
	recovery: PostCheckoutSessionsRecoveryAfterExpirationInput!
}
input PostCheckoutSessionsAfterpayClearpayPaymentMethodOptionsInput {
	setupFutureUsage: PostCheckoutSessionsSetupFutureUsageAfterpayClearpayPaymentMethodOptions!
}
input PostCheckoutSessionsAlipayPaymentMethodOptionsInput {
	setupFutureUsage: PostCheckoutSessionsSetupFutureUsageAlipayPaymentMethodOptions!
}
enum PostCheckoutSessionsAllowedCountriesShippingAddressCollection {
	AC
	AD
	AE
	AF
	AG
	AI
	AL
	AM
	AO
	AQ
	AR
	AT
	AU
	AW
	AX
	AZ
	BA
	BB
	BD
	BE
	BF
	BG
	BH
	BI
	BJ
	BL
	BM
	BN
	BO
	BQ
	BR
	BS
	BT
	BV
	BW
	BY
	BZ
	CA
	CD
	CF
	CG
	CH
	CI
	CK
	CL
	CM
	CN
	CO
	CR
	CV
	CW
	CY
	CZ
	DE
	DJ
	DK
	DM
	DO
	DZ
	EC
	EE
	EG
	EH
	ER
	ES
	ET
	FI
	FJ
	FK
	FO
	FR
	GA
	GB
	GD
	GE
	GF
	GG
	GH
	GI
	GL
	GM
	GN
	GP
	GQ
	GR
	GS
	GT
	GU
	GW
	GY
	HK
	HN
	HR
	HT
	HU
	ID
	IE
	IL
	IM
	IN
	IO
	IQ
	IS
	IT
	JE
	JM
	JO
	JP
	KE
	KG
	KH
	KI
	KM
	KN
	KR
	KW
	KY
	KZ
	LA
	LB
	LC
	LI
	LK
	LR
	LS
	LT
	LU
	LV
	LY
	MA
	MC
	MD
	ME
	MF
	MG
	MK
	ML
	MM
	MN
	MO
	MQ
	MR
	MS
	MT
	MU
	MV
	MW
	MX
	MY
	MZ
	NA
	NC
	NE
	NG
	NI
	NL
	NO
	NP
	NR
	NU
	NZ
	OM
	PA
	PE
	PF
	PG
	PH
	PK
	PL
	PM
	PN
	PR
	PS
	PT
	PY
	QA
	RE
	RO
	RS
	RU
	RW
	SA
	SB
	SC
	SE
	SG
	SH
	SI
	SJ
	SK
	SL
	SM
	SN
	SO
	SR
	SS
	ST
	SV
	SX
	SZ
	TA
	TC
	TD
	TF
	TG
	TH
	TJ
	TK
	TL
	TM
	TN
	TO
	TR
	TT
	TV
	TW
	TZ
	UA
	UG
	US
	UY
	UZ
	VA
	VC
	VE
	VG
	VN
	VU
	WF
	WS
	XK
	YE
	YT
	ZA
	ZM
	ZW
	ZZ
}
enum PostCheckoutSessionsAmountTaxDisplayRenderingOptionsInvoiceDataInvoiceCreation {
	
	EXCLUDE_TAX
	INCLUDE_INCLUSIVE_TAX
}
input PostCheckoutSessionsAuBecsDebitPaymentMethodOptionsInput {
	setupFutureUsage: PostCheckoutSessionsSetupFutureUsageAuBecsDebitPaymentMethodOptions!
}
input PostCheckoutSessionsAutomaticTaxInput {
	enabled: Boolean!
}
input PostCheckoutSessionsBacsDebitPaymentMethodOptionsInput {
	setupFutureUsage: PostCheckoutSessionsSetupFutureUsageBacsDebitPaymentMethodOptions!
}
input PostCheckoutSessionsBancontactPaymentMethodOptionsInput {
	setupFutureUsage: PostCheckoutSessionsSetupFutureUsageBancontactPaymentMethodOptions!
}
input PostCheckoutSessionsBankTransferCustomerBalancePaymentMethodOptionsInput {
	type: PostCheckoutSessionsTypeBankTransferCustomerBalancePaymentMethodOptions!
	requestedAddressTypes: [PostCheckoutSessionsRequestedAddressTypesBankTransferCustomerBalancePaymentMethodOptions!]!
	euBankTransfer: PostCheckoutSessionsEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsInput!
}
enum PostCheckoutSessionsBillingAddressCollection {
	AUTO
	REQUIRED
}
input PostCheckoutSessionsBoletoPaymentMethodOptionsInput {
	setupFutureUsage: PostCheckoutSessionsSetupFutureUsageBoletoPaymentMethodOptions!
	expiresAfterDays: Int!
}
enum PostCheckoutSessionsCaptureMethodPaymentIntentData {
	AUTOMATIC
	MANUAL
}
input PostCheckoutSessionsCardPaymentMethodOptionsInput {
	statementDescriptorSuffixKanji: String!
	statementDescriptorSuffixKana: String!
	setupFutureUsage: PostCheckoutSessionsSetupFutureUsageCardPaymentMethodOptions!
	installments: PostCheckoutSessionsInstallmentsCardPaymentMethodOptionsInput!
}
enum PostCheckoutSessionsClientWechatPayPaymentMethodOptions {
	ANDROID
	IOS
	WEB
}
input PostCheckoutSessionsConsentCollectionInput {
	termsOfService: PostCheckoutSessionsTermsOfServiceConsentCollection!
	promotions: PostCheckoutSessionsPromotionsConsentCollection!
}
enum PostCheckoutSessionsCurrencyAcssDebitPaymentMethodOptions {
	CAD
	USD
}
enum PostCheckoutSessionsCustomFieldsInvoiceDataInvoiceCreation {
	
}
input PostCheckoutSessionsCustomFieldsInvoiceDataInvoiceCreationInput {
	value: String!
	name: String!
}
input PostCheckoutSessionsCustomFieldsInvoiceDataInvoiceCreationUnionInput {
	postCheckoutSessionsCustomFieldsInvoiceDataInvoiceCreation: PostCheckoutSessionsCustomFieldsInvoiceDataInvoiceCreation
	postCheckoutSessionsCustomFieldsInvoiceDataInvoiceCreationInput: PostCheckoutSessionsCustomFieldsInvoiceDataInvoiceCreationInput
}
input PostCheckoutSessionsCustomTextInput {
	submit: PostCheckoutSessionsSubmitCustomTextUnionInput!
	shippingAddress: PostCheckoutSessionsShippingAddressCustomTextUnionInput!
}
input PostCheckoutSessionsCustomerBalancePaymentMethodOptionsInput {
	setupFutureUsage: PostCheckoutSessionsSetupFutureUsageCustomerBalancePaymentMethodOptions!
	fundingType: PostCheckoutSessionsFundingTypeCustomerBalancePaymentMethodOptions!
	bankTransfer: PostCheckoutSessionsBankTransferCustomerBalancePaymentMethodOptionsInput!
}
enum PostCheckoutSessionsCustomerCreation {
	ALWAYS
	IF_REQUIRED
}
input PostCheckoutSessionsCustomerUpdateInput {
	shipping: PostCheckoutSessionsShippingCustomerUpdate!
	name: PostCheckoutSessionsNameCustomerUpdate!
	address: PostCheckoutSessionsAddressCustomerUpdate!
}
enum PostCheckoutSessionsDefaultForMandateOptionsAcssDebitPaymentMethodOptions {
	INVOICE
	SUBSCRIPTION
}
input PostCheckoutSessionsDeliveryEstimateShippingRateDataShippingOptionsInput {
	minimum: PostCheckoutSessionsMinimumDeliveryEstimateShippingRateDataShippingOptionsInput!
	maximum: PostCheckoutSessionsMaximumDeliveryEstimateShippingRateDataShippingOptionsInput!
}
input PostCheckoutSessionsDiscountsInput {
	promotionCode: String!
	coupon: String!
}
input PostCheckoutSessionsEndBehaviorTrialSettingsSubscriptionDataInput {
	missingPaymentMethod: PostCheckoutSessionsMissingPaymentMethodEndBehaviorTrialSettingsSubscriptionData!
}
input PostCheckoutSessionsEpsPaymentMethodOptionsInput {
	setupFutureUsage: PostCheckoutSessionsSetupFutureUsageEpsPaymentMethodOptions!
}
input PostCheckoutSessionsEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsInput {
	country: String!
}
input PostCheckoutSessionsFinancialConnectionsUsBankAccountPaymentMethodOptionsInput {
	permissions: [PostCheckoutSessionsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions!]!
}
input PostCheckoutSessionsFixedAmountShippingRateDataShippingOptionsInput {
	currencyOptions: JSON!
	currency: String!
	amount: Int!
}
input PostCheckoutSessionsFpxPaymentMethodOptionsInput {
	setupFutureUsage: PostCheckoutSessionsSetupFutureUsageFpxPaymentMethodOptions!
}
enum PostCheckoutSessionsFundingTypeCustomerBalancePaymentMethodOptions {
	BANK_TRANSFER
}
input PostCheckoutSessionsGiropayPaymentMethodOptionsInput {
	setupFutureUsage: PostCheckoutSessionsSetupFutureUsageGiropayPaymentMethodOptions!
}
input PostCheckoutSessionsGrabpayPaymentMethodOptionsInput {
	setupFutureUsage: PostCheckoutSessionsSetupFutureUsageGrabpayPaymentMethodOptions!
}
input PostCheckoutSessionsIdealPaymentMethodOptionsInput {
	setupFutureUsage: PostCheckoutSessionsSetupFutureUsageIdealPaymentMethodOptions!
}
input PostCheckoutSessionsInput {
	taxIdCollection: PostCheckoutSessionsTaxIdCollectionInput!
	successUrl: String!
	subscriptionData: PostCheckoutSessionsSubscriptionDataInput!
	submitType: PostCheckoutSessionsSubmitType!
	shippingOptions: [PostCheckoutSessionsShippingOptionsInput!]!
	shippingAddressCollection: PostCheckoutSessionsShippingAddressCollectionInput!
	setupIntentData: PostCheckoutSessionsSetupIntentDataInput!
	phoneNumberCollection: PostCheckoutSessionsPhoneNumberCollectionInput!
	paymentMethodTypes: [PostCheckoutSessionsPaymentMethodTypes!]!
	paymentMethodOptions: PostCheckoutSessionsPaymentMethodOptionsInput!
	paymentMethodCollection: PostCheckoutSessionsPaymentMethodCollection!
	paymentIntentData: PostCheckoutSessionsPaymentIntentDataInput!
	mode: PostCheckoutSessionsMode!
	metadata: JSON!
	locale: PostCheckoutSessionsLocale!
	lineItems: [PostCheckoutSessionsLineItemsInput!]!
	invoiceCreation: PostCheckoutSessionsInvoiceCreationInput!
	expiresAt: Int!
	expand: [String!]!
	discounts: [PostCheckoutSessionsDiscountsInput!]!
	customerUpdate: PostCheckoutSessionsCustomerUpdateInput!
	customerEmail: String!
	customerCreation: PostCheckoutSessionsCustomerCreation!
	customer: String!
	customText: PostCheckoutSessionsCustomTextInput!
	currency: String!
	consentCollection: PostCheckoutSessionsConsentCollectionInput!
	clientReferenceId: String!
	cancelUrl: String!
	billingAddressCollection: PostCheckoutSessionsBillingAddressCollection!
	automaticTax: PostCheckoutSessionsAutomaticTaxInput!
	allowPromotionCodes: Boolean!
	afterExpiration: PostCheckoutSessionsAfterExpirationInput!
}
input PostCheckoutSessionsInstallmentsCardPaymentMethodOptionsInput {
	enabled: Boolean!
}
enum PostCheckoutSessionsIntervalRecurringPriceDataLineItems {
	DAY
	MONTH
	WEEK
	YEAR
}
input PostCheckoutSessionsInvoiceCreationInput {
	invoiceData: PostCheckoutSessionsInvoiceDataInvoiceCreationInput!
	enabled: Boolean!
}
input PostCheckoutSessionsInvoiceDataInvoiceCreationInput {
	renderingOptions: PostCheckoutSessionsRenderingOptionsInvoiceDataInvoiceCreationUnionInput!
	metadata: JSON!
	footer: String!
	description: String!
	customFields: PostCheckoutSessionsCustomFieldsInvoiceDataInvoiceCreationUnionInput!
	accountTaxIds: UnionInput!
}
input PostCheckoutSessionsKlarnaPaymentMethodOptionsInput {
	setupFutureUsage: PostCheckoutSessionsSetupFutureUsageKlarnaPaymentMethodOptions!
}
input PostCheckoutSessionsKonbiniPaymentMethodOptionsInput {
	setupFutureUsage: PostCheckoutSessionsSetupFutureUsageKonbiniPaymentMethodOptions!
	expiresAfterDays: Int!
}
input PostCheckoutSessionsLineItemsInput {
	taxRates: [String!]!
	quantity: Int!
	priceData: PostCheckoutSessionsPriceDataLineItemsInput!
	price: String!
	dynamicTaxRates: [String!]!
	adjustableQuantity: PostCheckoutSessionsAdjustableQuantityLineItemsInput!
}
enum PostCheckoutSessionsLocale {
	AUTO
	BG
	CS
	DA
	DE
	EL
	EN
	EN_GB
	ES
	ES_419
	ET
	FI
	FIL
	FR
	FR_CA
	HR
	HU
	ID
	IT
	JA
	KO
	LT
	LV
	MS
	MT
	NB
	NL
	PL
	PT
	PT_BR
	RO
	RU
	SK
	SL
	SV
	TH
	TR
	VI
	ZH
	ZH_HK
	ZH_TW
}
input PostCheckoutSessionsMandateOptionsAcssDebitPaymentMethodOptionsInput {
	transactionType: PostCheckoutSessionsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions!
	paymentSchedule: PostCheckoutSessionsPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions!
	intervalDescription: String!
	defaultFor: [PostCheckoutSessionsDefaultForMandateOptionsAcssDebitPaymentMethodOptions!]!
	customMandateUrl: UnionInput!
}
input PostCheckoutSessionsMaximumDeliveryEstimateShippingRateDataShippingOptionsInput {
	value: Int!
	unit: PostCheckoutSessionsUnitMaximumDeliveryEstimateShippingRateDataShippingOptions!
}
input PostCheckoutSessionsMinimumDeliveryEstimateShippingRateDataShippingOptionsInput {
	value: Int!
	unit: PostCheckoutSessionsUnitMinimumDeliveryEstimateShippingRateDataShippingOptions!
}
enum PostCheckoutSessionsMissingPaymentMethodEndBehaviorTrialSettingsSubscriptionData {
	CANCEL
	CREATE_INVOICE
	PAUSE
}
enum PostCheckoutSessionsMode {
	PAYMENT
	SETUP
	SUBSCRIPTION
}
enum PostCheckoutSessionsNameCustomerUpdate {
	AUTO
	NEVER
}
input PostCheckoutSessionsOxxoPaymentMethodOptionsInput {
	setupFutureUsage: PostCheckoutSessionsSetupFutureUsageOxxoPaymentMethodOptions!
	expiresAfterDays: Int!
}
input PostCheckoutSessionsP24PaymentMethodOptionsInput {
	tosShownAndAccepted: Boolean!
	setupFutureUsage: PostCheckoutSessionsSetupFutureUsageP24PaymentMethodOptions!
}
input PostCheckoutSessionsPaymentIntentDataInput {
	transferGroup: String!
	transferData: PostCheckoutSessionsTransferDataPaymentIntentDataInput!
	statementDescriptorSuffix: String!
	statementDescriptor: String!
	shipping: PostCheckoutSessionsShippingPaymentIntentDataInput!
	setupFutureUsage: PostCheckoutSessionsSetupFutureUsagePaymentIntentData!
	receiptEmail: String!
	onBehalfOf: String!
	metadata: JSON!
	description: String!
	captureMethod: PostCheckoutSessionsCaptureMethodPaymentIntentData!
	applicationFeeAmount: Int!
}
enum PostCheckoutSessionsPaymentMethodCollection {
	ALWAYS
	IF_REQUIRED
}
input PostCheckoutSessionsPaymentMethodOptionsInput {
	wechatPay: PostCheckoutSessionsWechatPayPaymentMethodOptionsInput!
	usBankAccount: PostCheckoutSessionsUsBankAccountPaymentMethodOptionsInput!
	sofort: PostCheckoutSessionsSofortPaymentMethodOptionsInput!
	sepaDebit: PostCheckoutSessionsSepaDebitPaymentMethodOptionsInput!
	pix: PostCheckoutSessionsPixPaymentMethodOptionsInput!
	paynow: PostCheckoutSessionsPaynowPaymentMethodOptionsInput!
	p24: PostCheckoutSessionsP24PaymentMethodOptionsInput!
	oxxo: PostCheckoutSessionsOxxoPaymentMethodOptionsInput!
	konbini: PostCheckoutSessionsKonbiniPaymentMethodOptionsInput!
	klarna: PostCheckoutSessionsKlarnaPaymentMethodOptionsInput!
	ideal: PostCheckoutSessionsIdealPaymentMethodOptionsInput!
	grabpay: PostCheckoutSessionsGrabpayPaymentMethodOptionsInput!
	giropay: PostCheckoutSessionsGiropayPaymentMethodOptionsInput!
	fpx: PostCheckoutSessionsFpxPaymentMethodOptionsInput!
	eps: PostCheckoutSessionsEpsPaymentMethodOptionsInput!
	customerBalance: PostCheckoutSessionsCustomerBalancePaymentMethodOptionsInput!
	card: PostCheckoutSessionsCardPaymentMethodOptionsInput!
	boleto: PostCheckoutSessionsBoletoPaymentMethodOptionsInput!
	bancontact: PostCheckoutSessionsBancontactPaymentMethodOptionsInput!
	bacsDebit: PostCheckoutSessionsBacsDebitPaymentMethodOptionsInput!
	auBecsDebit: PostCheckoutSessionsAuBecsDebitPaymentMethodOptionsInput!
	alipay: PostCheckoutSessionsAlipayPaymentMethodOptionsInput!
	afterpayClearpay: PostCheckoutSessionsAfterpayClearpayPaymentMethodOptionsInput!
	affirm: PostCheckoutSessionsAffirmPaymentMethodOptionsInput!
	acssDebit: PostCheckoutSessionsAcssDebitPaymentMethodOptionsInput!
}
enum PostCheckoutSessionsPaymentMethodTypes {
	ACSS_DEBIT
	AFFIRM
	AFTERPAY_CLEARPAY
	ALIPAY
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BLIK
	BOLETO
	CARD
	CUSTOMER_BALANCE
	EPS
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KLARNA
	KONBINI
	OXXO
	P_24
	PAYNOW
	PIX
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
enum PostCheckoutSessionsPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions {
	COMBINED
	INTERVAL
	SPORADIC
}
input PostCheckoutSessionsPaynowPaymentMethodOptionsInput {
	setupFutureUsage: PostCheckoutSessionsSetupFutureUsagePaynowPaymentMethodOptions!
}
enum PostCheckoutSessionsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
input PostCheckoutSessionsPhoneNumberCollectionInput {
	enabled: Boolean!
}
input PostCheckoutSessionsPixPaymentMethodOptionsInput {
	expiresAfterSeconds: Int!
}
input PostCheckoutSessionsPriceDataLineItemsInput {
	unitAmountDecimal: String!
	unitAmount: Int!
	taxBehavior: PostCheckoutSessionsTaxBehaviorPriceDataLineItems!
	recurring: PostCheckoutSessionsRecurringPriceDataLineItemsInput!
	productData: PostCheckoutSessionsProductDataPriceDataLineItemsInput!
	product: String!
	currency: String!
}
input PostCheckoutSessionsProductDataPriceDataLineItemsInput {
	taxCode: String!
	name: String!
	metadata: JSON!
	images: [String!]!
	description: String!
}
enum PostCheckoutSessionsPromotionsConsentCollection {
	AUTO
	NONE
}
input PostCheckoutSessionsRecoveryAfterExpirationInput {
	enabled: Boolean!
	allowPromotionCodes: Boolean!
}
input PostCheckoutSessionsRecurringPriceDataLineItemsInput {
	intervalCount: Int!
	interval: PostCheckoutSessionsIntervalRecurringPriceDataLineItems!
}
enum PostCheckoutSessionsRenderingOptionsInvoiceDataInvoiceCreation {
	
}
input PostCheckoutSessionsRenderingOptionsInvoiceDataInvoiceCreationInput {
	amountTaxDisplay: PostCheckoutSessionsAmountTaxDisplayRenderingOptionsInvoiceDataInvoiceCreation!
}
input PostCheckoutSessionsRenderingOptionsInvoiceDataInvoiceCreationUnionInput {
	postCheckoutSessionsRenderingOptionsInvoiceDataInvoiceCreation: PostCheckoutSessionsRenderingOptionsInvoiceDataInvoiceCreation
	postCheckoutSessionsRenderingOptionsInvoiceDataInvoiceCreationInput: PostCheckoutSessionsRenderingOptionsInvoiceDataInvoiceCreationInput
}
enum PostCheckoutSessionsRequestedAddressTypesBankTransferCustomerBalancePaymentMethodOptions {
	IBAN
	SEPA
	SORT_CODE
	SPEI
	ZENGIN
}
input PostCheckoutSessionsSepaDebitPaymentMethodOptionsInput {
	setupFutureUsage: PostCheckoutSessionsSetupFutureUsageSepaDebitPaymentMethodOptions!
}
input PostCheckoutSessionsSessionExpireInput {
	expand: [String!]!
}
enum PostCheckoutSessionsSetupFutureUsageAcssDebitPaymentMethodOptions {
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PostCheckoutSessionsSetupFutureUsageAffirmPaymentMethodOptions {
	NONE
}
enum PostCheckoutSessionsSetupFutureUsageAfterpayClearpayPaymentMethodOptions {
	NONE
}
enum PostCheckoutSessionsSetupFutureUsageAlipayPaymentMethodOptions {
	NONE
}
enum PostCheckoutSessionsSetupFutureUsageAuBecsDebitPaymentMethodOptions {
	NONE
}
enum PostCheckoutSessionsSetupFutureUsageBacsDebitPaymentMethodOptions {
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PostCheckoutSessionsSetupFutureUsageBancontactPaymentMethodOptions {
	NONE
}
enum PostCheckoutSessionsSetupFutureUsageBoletoPaymentMethodOptions {
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PostCheckoutSessionsSetupFutureUsageCardPaymentMethodOptions {
	OFF_SESSION
	ON_SESSION
}
enum PostCheckoutSessionsSetupFutureUsageCustomerBalancePaymentMethodOptions {
	NONE
}
enum PostCheckoutSessionsSetupFutureUsageEpsPaymentMethodOptions {
	NONE
}
enum PostCheckoutSessionsSetupFutureUsageFpxPaymentMethodOptions {
	NONE
}
enum PostCheckoutSessionsSetupFutureUsageGiropayPaymentMethodOptions {
	NONE
}
enum PostCheckoutSessionsSetupFutureUsageGrabpayPaymentMethodOptions {
	NONE
}
enum PostCheckoutSessionsSetupFutureUsageIdealPaymentMethodOptions {
	NONE
}
enum PostCheckoutSessionsSetupFutureUsageKlarnaPaymentMethodOptions {
	NONE
}
enum PostCheckoutSessionsSetupFutureUsageKonbiniPaymentMethodOptions {
	NONE
}
enum PostCheckoutSessionsSetupFutureUsageOxxoPaymentMethodOptions {
	NONE
}
enum PostCheckoutSessionsSetupFutureUsageP24PaymentMethodOptions {
	NONE
}
enum PostCheckoutSessionsSetupFutureUsagePaymentIntentData {
	OFF_SESSION
	ON_SESSION
}
enum PostCheckoutSessionsSetupFutureUsagePaynowPaymentMethodOptions {
	NONE
}
enum PostCheckoutSessionsSetupFutureUsageSepaDebitPaymentMethodOptions {
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PostCheckoutSessionsSetupFutureUsageSofortPaymentMethodOptions {
	NONE
}
enum PostCheckoutSessionsSetupFutureUsageUsBankAccountPaymentMethodOptions {
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PostCheckoutSessionsSetupFutureUsageWechatPayPaymentMethodOptions {
	NONE
}
input PostCheckoutSessionsSetupIntentDataInput {
	onBehalfOf: String!
	metadata: JSON!
	description: String!
}
input PostCheckoutSessionsShippingAddressCollectionInput {
	allowedCountries: [PostCheckoutSessionsAllowedCountriesShippingAddressCollection!]!
}
enum PostCheckoutSessionsShippingAddressCustomText {
	
}
input PostCheckoutSessionsShippingAddressCustomTextInput {
	message: String!
}
input PostCheckoutSessionsShippingAddressCustomTextUnionInput {
	postCheckoutSessionsShippingAddressCustomText: PostCheckoutSessionsShippingAddressCustomText
	postCheckoutSessionsShippingAddressCustomTextInput: PostCheckoutSessionsShippingAddressCustomTextInput
}
enum PostCheckoutSessionsShippingCustomerUpdate {
	AUTO
	NEVER
}
input PostCheckoutSessionsShippingOptionsInput {
	shippingRateData: PostCheckoutSessionsShippingRateDataShippingOptionsInput!
	shippingRate: String!
}
input PostCheckoutSessionsShippingPaymentIntentDataInput {
	trackingNumber: String!
	phone: String!
	name: String!
	carrier: String!
	address: PostCheckoutSessionsAddressShippingPaymentIntentDataInput!
}
input PostCheckoutSessionsShippingRateDataShippingOptionsInput {
	type: PostCheckoutSessionsTypeShippingRateDataShippingOptions!
	taxCode: String!
	taxBehavior: PostCheckoutSessionsTaxBehaviorShippingRateDataShippingOptions!
	metadata: JSON!
	fixedAmount: PostCheckoutSessionsFixedAmountShippingRateDataShippingOptionsInput!
	displayName: String!
	deliveryEstimate: PostCheckoutSessionsDeliveryEstimateShippingRateDataShippingOptionsInput!
}
input PostCheckoutSessionsSofortPaymentMethodOptionsInput {
	setupFutureUsage: PostCheckoutSessionsSetupFutureUsageSofortPaymentMethodOptions!
}
enum PostCheckoutSessionsSubmitCustomText {
	
}
input PostCheckoutSessionsSubmitCustomTextInput {
	message: String!
}
input PostCheckoutSessionsSubmitCustomTextUnionInput {
	postCheckoutSessionsSubmitCustomText: PostCheckoutSessionsSubmitCustomText
	postCheckoutSessionsSubmitCustomTextInput: PostCheckoutSessionsSubmitCustomTextInput
}
enum PostCheckoutSessionsSubmitType {
	AUTO
	BOOK
	DONATE
	PAY
}
input PostCheckoutSessionsSubscriptionDataInput {
	trialSettings: PostCheckoutSessionsTrialSettingsSubscriptionDataInput!
	trialPeriodDays: Int!
	trialEnd: Int!
	transferData: PostCheckoutSessionsTransferDataSubscriptionDataInput!
	onBehalfOf: String!
	metadata: JSON!
	description: String!
	defaultTaxRates: [String!]!
	applicationFeePercent: Float!
}
enum PostCheckoutSessionsTaxBehaviorPriceDataLineItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum PostCheckoutSessionsTaxBehaviorShippingRateDataShippingOptions {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
input PostCheckoutSessionsTaxIdCollectionInput {
	enabled: Boolean!
}
enum PostCheckoutSessionsTermsOfServiceConsentCollection {
	NONE
	REQUIRED
}
enum PostCheckoutSessionsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions {
	BUSINESS
	PERSONAL
}
input PostCheckoutSessionsTransferDataPaymentIntentDataInput {
	destination: String!
	amount: Int!
}
input PostCheckoutSessionsTransferDataSubscriptionDataInput {
	destination: String!
	amountPercent: Float!
}
input PostCheckoutSessionsTrialSettingsSubscriptionDataInput {
	endBehavior: PostCheckoutSessionsEndBehaviorTrialSettingsSubscriptionDataInput!
}
enum PostCheckoutSessionsTypeBankTransferCustomerBalancePaymentMethodOptions {
	EU_BANK_TRANSFER
	GB_BANK_TRANSFER
	JP_BANK_TRANSFER
	MX_BANK_TRANSFER
}
enum PostCheckoutSessionsTypeShippingRateDataShippingOptions {
	FIXED_AMOUNT
}
enum PostCheckoutSessionsUnitMaximumDeliveryEstimateShippingRateDataShippingOptions {
	BUSINESS_DAY
	DAY
	HOUR
	MONTH
	WEEK
}
enum PostCheckoutSessionsUnitMinimumDeliveryEstimateShippingRateDataShippingOptions {
	BUSINESS_DAY
	DAY
	HOUR
	MONTH
	WEEK
}
input PostCheckoutSessionsUsBankAccountPaymentMethodOptionsInput {
	verificationMethod: PostCheckoutSessionsVerificationMethodUsBankAccountPaymentMethodOptions!
	setupFutureUsage: PostCheckoutSessionsSetupFutureUsageUsBankAccountPaymentMethodOptions!
	financialConnections: PostCheckoutSessionsFinancialConnectionsUsBankAccountPaymentMethodOptionsInput!
}
enum PostCheckoutSessionsVerificationMethodAcssDebitPaymentMethodOptions {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum PostCheckoutSessionsVerificationMethodUsBankAccountPaymentMethodOptions {
	AUTOMATIC
	INSTANT
}
input PostCheckoutSessionsWechatPayPaymentMethodOptionsInput {
	setupFutureUsage: PostCheckoutSessionsSetupFutureUsageWechatPayPaymentMethodOptions!
	client: PostCheckoutSessionsClientWechatPayPaymentMethodOptions!
	appId: String!
}
input PostCouponsAppliesToInput {
	products: [String!]!
}
input PostCouponsCouponInput {
	name: String!
	metadata: UnionInput!
	expand: [String!]!
	currencyOptions: JSON!
}
enum PostCouponsDuration {
	FOREVER
	ONCE
	REPEATING
}
input PostCouponsInput {
	redeemBy: Int!
	percentOff: Float!
	name: String!
	metadata: UnionInput!
	maxRedemptions: Int!
	id: String!
	expand: [String!]!
	durationInMonths: Int!
	duration: PostCouponsDuration!
	currencyOptions: JSON!
	currency: String!
	appliesTo: PostCouponsAppliesToInput!
	amountOff: Int!
}
input PostCreditNotesIdInput {
	metadata: JSON!
	memo: String!
	expand: [String!]!
}
input PostCreditNotesIdVoidInput {
	expand: [String!]!
}
input PostCreditNotesInput {
	shippingCost: PostCreditNotesShippingCostInput!
	refundAmount: Int!
	refund: String!
	reason: PostCreditNotesReason!
	outOfBandAmount: Int!
	metadata: JSON!
	memo: String!
	lines: [PostCreditNotesLinesInput!]!
	invoice: String!
	expand: [String!]!
	creditAmount: Int!
	amount: Int!
}
input PostCreditNotesLinesInput {
	unitAmountDecimal: String!
	unitAmount: Int!
	type: PostCreditNotesTypeLines!
	taxRates: UnionInput!
	quantity: Int!
	invoiceLineItem: String!
	description: String!
	amount: Int!
}
enum PostCreditNotesReason {
	DUPLICATE
	FRAUDULENT
	ORDER_CHANGE
	PRODUCT_UNSATISFACTORY
}
input PostCreditNotesShippingCostInput {
	shippingRate: String!
}
enum PostCreditNotesTypeLines {
	CUSTOM_LINE_ITEM
	INVOICE_LINE_ITEM
}
enum PostCustomersAddress {
	
}
input PostCustomersAddressInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostCustomersAddressShippingInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostCustomersAddressUnionInput {
	postCustomersAddress: PostCustomersAddress
	postCustomersAddressInput: PostCustomersAddressInput
}
enum PostCustomersAmountTaxDisplayRenderingOptionsInvoiceSettings {
	
	EXCLUDE_TAX
	INCLUDE_INCLUSIVE_TAX
}
input PostCustomersCashBalanceInput {
	settings: PostCustomersSettingsCashBalanceInput!
}
enum PostCustomersCustomFieldsInvoiceSettings {
	
}
input PostCustomersCustomFieldsInvoiceSettingsInput {
	value: String!
	name: String!
}
input PostCustomersCustomFieldsInvoiceSettingsUnionInput {
	postCustomersCustomFieldsInvoiceSettings: PostCustomersCustomFieldsInvoiceSettings
	postCustomersCustomFieldsInvoiceSettingsInput: PostCustomersCustomFieldsInvoiceSettingsInput
}
enum PostCustomersCustomerAccountHolderTypeBankAccount {
	COMPANY
	INDIVIDUAL
}
enum PostCustomersCustomerAddress {
	
}
input PostCustomersCustomerAddressInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostCustomersCustomerAddressShippingInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostCustomersCustomerAddressUnionInput {
	postCustomersCustomerAddress: PostCustomersCustomerAddress
	postCustomersCustomerAddressInput: PostCustomersCustomerAddressInput
}
enum PostCustomersCustomerAmountTaxDisplayRenderingOptionsInvoiceSettings {
	
	EXCLUDE_TAX
	INCLUDE_INCLUSIVE_TAX
}
input PostCustomersCustomerBalanceTransactionsInput {
	metadata: UnionInput!
	expand: [String!]!
	description: String!
	currency: String!
	amount: Int!
}
input PostCustomersCustomerBalanceTransactionsTransactionInput {
	metadata: UnionInput!
	expand: [String!]!
	description: String!
}
input PostCustomersCustomerBankAccountInput {
	routingNumber: String!
	object: PostCustomersCustomerObjectBankAccount!
	currency: String!
	country: String!
	accountNumber: String!
	accountHolderType: PostCustomersCustomerAccountHolderTypeBankAccount!
	accountHolderName: String!
}
input PostCustomersCustomerBankAccountUnionInput {
	string: String
	postCustomersCustomerBankAccountInput: PostCustomersCustomerBankAccountInput
}
enum PostCustomersCustomerBankAccountsAccountHolderTypeBankAccount {
	COMPANY
	INDIVIDUAL
}
input PostCustomersCustomerBankAccountsBankAccountInput {
	routingNumber: String!
	object: PostCustomersCustomerBankAccountsObjectBankAccount!
	currency: String!
	country: String!
	accountNumber: String!
	accountHolderType: PostCustomersCustomerBankAccountsAccountHolderTypeBankAccount!
	accountHolderName: String!
}
input PostCustomersCustomerBankAccountsBankAccountUnionInput {
	string: String
	postCustomersCustomerBankAccountsBankAccountInput: PostCustomersCustomerBankAccountsBankAccountInput
}
input PostCustomersCustomerBankAccountsCardInput {
	object: PostCustomersCustomerBankAccountsObjectCard!
	number: String!
	name: String!
	metadata: JSON!
	expYear: Int!
	expMonth: Int!
	cvc: String!
	addressZip: String!
	addressState: String!
	addressLine2: String!
	addressLine1: String!
	addressCountry: String!
	addressCity: String!
}
input PostCustomersCustomerBankAccountsCardUnionInput {
	string: String
	postCustomersCustomerBankAccountsCardInput: PostCustomersCustomerBankAccountsCardInput
}
enum PostCustomersCustomerBankAccountsIdAccountHolderType {
	COMPANY
	INDIVIDUAL
}
input PostCustomersCustomerBankAccountsIdAddressOwnerInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostCustomersCustomerBankAccountsIdInput {
	owner: PostCustomersCustomerBankAccountsIdOwnerInput!
	name: String!
	metadata: UnionInput!
	expand: [String!]!
	expYear: String!
	expMonth: String!
	addressZip: String!
	addressState: String!
	addressLine2: String!
	addressLine1: String!
	addressCountry: String!
	addressCity: String!
	accountHolderType: PostCustomersCustomerBankAccountsIdAccountHolderType!
	accountHolderName: String!
}
input PostCustomersCustomerBankAccountsIdOwnerInput {
	phone: String!
	name: String!
	email: String!
	address: PostCustomersCustomerBankAccountsIdAddressOwnerInput!
}
input PostCustomersCustomerBankAccountsIdVerifyInput {
	expand: [String!]!
	amounts: [Int!]!
}
input PostCustomersCustomerBankAccountsInput {
	source: String!
	metadata: JSON!
	expand: [String!]!
	card: PostCustomersCustomerBankAccountsCardUnionInput!
	bankAccount: PostCustomersCustomerBankAccountsBankAccountUnionInput!
	alipayAccount: String!
}
enum PostCustomersCustomerBankAccountsObjectBankAccount {
	BANK_ACCOUNT
}
enum PostCustomersCustomerBankAccountsObjectCard {
	CARD
}
input PostCustomersCustomerCardInput {
	object: PostCustomersCustomerObjectCard!
	number: String!
	name: String!
	metadata: JSON!
	expYear: Int!
	expMonth: Int!
	cvc: String!
	addressZip: String!
	addressState: String!
	addressLine2: String!
	addressLine1: String!
	addressCountry: String!
	addressCity: String!
}
input PostCustomersCustomerCardUnionInput {
	string: String
	postCustomersCustomerCardInput: PostCustomersCustomerCardInput
}
enum PostCustomersCustomerCardsAccountHolderTypeBankAccount {
	COMPANY
	INDIVIDUAL
}
input PostCustomersCustomerCardsBankAccountInput {
	routingNumber: String!
	object: PostCustomersCustomerCardsObjectBankAccount!
	currency: String!
	country: String!
	accountNumber: String!
	accountHolderType: PostCustomersCustomerCardsAccountHolderTypeBankAccount!
	accountHolderName: String!
}
input PostCustomersCustomerCardsBankAccountUnionInput {
	string: String
	postCustomersCustomerCardsBankAccountInput: PostCustomersCustomerCardsBankAccountInput
}
input PostCustomersCustomerCardsCardInput {
	object: PostCustomersCustomerCardsObjectCard!
	number: String!
	name: String!
	metadata: JSON!
	expYear: Int!
	expMonth: Int!
	cvc: String!
	addressZip: String!
	addressState: String!
	addressLine2: String!
	addressLine1: String!
	addressCountry: String!
	addressCity: String!
}
input PostCustomersCustomerCardsCardUnionInput {
	string: String
	postCustomersCustomerCardsCardInput: PostCustomersCustomerCardsCardInput
}
enum PostCustomersCustomerCardsIdAccountHolderType {
	COMPANY
	INDIVIDUAL
}
input PostCustomersCustomerCardsIdAddressOwnerInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostCustomersCustomerCardsIdInput {
	owner: PostCustomersCustomerCardsIdOwnerInput!
	name: String!
	metadata: UnionInput!
	expand: [String!]!
	expYear: String!
	expMonth: String!
	addressZip: String!
	addressState: String!
	addressLine2: String!
	addressLine1: String!
	addressCountry: String!
	addressCity: String!
	accountHolderType: PostCustomersCustomerCardsIdAccountHolderType!
	accountHolderName: String!
}
input PostCustomersCustomerCardsIdOwnerInput {
	phone: String!
	name: String!
	email: String!
	address: PostCustomersCustomerCardsIdAddressOwnerInput!
}
input PostCustomersCustomerCardsInput {
	source: String!
	metadata: JSON!
	expand: [String!]!
	card: PostCustomersCustomerCardsCardUnionInput!
	bankAccount: PostCustomersCustomerCardsBankAccountUnionInput!
	alipayAccount: String!
}
enum PostCustomersCustomerCardsObjectBankAccount {
	BANK_ACCOUNT
}
enum PostCustomersCustomerCardsObjectCard {
	CARD
}
input PostCustomersCustomerCashBalanceInput {
	settings: PostCustomersCustomerSettingsCashBalanceInput!
}
enum PostCustomersCustomerCustomFieldsInvoiceSettings {
	
}
input PostCustomersCustomerCustomFieldsInvoiceSettingsInput {
	value: String!
	name: String!
}
input PostCustomersCustomerCustomFieldsInvoiceSettingsUnionInput {
	postCustomersCustomerCustomFieldsInvoiceSettings: PostCustomersCustomerCustomFieldsInvoiceSettings
	postCustomersCustomerCustomFieldsInvoiceSettingsInput: PostCustomersCustomerCustomFieldsInvoiceSettingsInput
}
input PostCustomersCustomerFundingInstructionsBankTransferInput {
	type: PostCustomersCustomerFundingInstructionsTypeBankTransfer!
	requestedAddressTypes: [PostCustomersCustomerFundingInstructionsRequestedAddressTypesBankTransfer!]!
	euBankTransfer: PostCustomersCustomerFundingInstructionsEuBankTransferBankTransferInput!
}
input PostCustomersCustomerFundingInstructionsEuBankTransferBankTransferInput {
	country: String!
}
enum PostCustomersCustomerFundingInstructionsFundingType {
	BANK_TRANSFER
}
input PostCustomersCustomerFundingInstructionsInput {
	fundingType: PostCustomersCustomerFundingInstructionsFundingType!
	expand: [String!]!
	currency: String!
	bankTransfer: PostCustomersCustomerFundingInstructionsBankTransferInput!
}
enum PostCustomersCustomerFundingInstructionsRequestedAddressTypesBankTransfer {
	IBAN
	SORT_CODE
	SPEI
	ZENGIN
}
enum PostCustomersCustomerFundingInstructionsTypeBankTransfer {
	EU_BANK_TRANSFER
	GB_BANK_TRANSFER
	JP_BANK_TRANSFER
	MX_BANK_TRANSFER
}
input PostCustomersCustomerInput {
	taxExempt: PostCustomersCustomerTaxExempt!
	tax: PostCustomersCustomerTaxInput!
	source: String!
	shipping: PostCustomersCustomerShippingUnionInput!
	promotionCode: String!
	preferredLocales: [String!]!
	phone: String!
	nextInvoiceSequence: Int!
	name: String!
	metadata: UnionInput!
	invoiceSettings: PostCustomersCustomerInvoiceSettingsInput!
	invoicePrefix: String!
	expand: [String!]!
	email: String!
	description: String!
	defaultSource: String!
	defaultCard: String!
	defaultBankAccount: String!
	defaultAlipayAccount: String!
	coupon: String!
	cashBalance: PostCustomersCustomerCashBalanceInput!
	card: PostCustomersCustomerCardUnionInput!
	bankAccount: PostCustomersCustomerBankAccountUnionInput!
	balance: Int!
	address: PostCustomersCustomerAddressUnionInput!
}
input PostCustomersCustomerInvoiceSettingsInput {
	renderingOptions: PostCustomersCustomerRenderingOptionsInvoiceSettingsUnionInput!
	footer: String!
	defaultPaymentMethod: String!
	customFields: PostCustomersCustomerCustomFieldsInvoiceSettingsUnionInput!
}
enum PostCustomersCustomerObjectBankAccount {
	BANK_ACCOUNT
}
enum PostCustomersCustomerObjectCard {
	CARD
}
enum PostCustomersCustomerReconciliationModeSettingsCashBalance {
	AUTOMATIC
	MANUAL
	MERCHANT_DEFAULT
}
enum PostCustomersCustomerRenderingOptionsInvoiceSettings {
	
}
input PostCustomersCustomerRenderingOptionsInvoiceSettingsInput {
	amountTaxDisplay: PostCustomersCustomerAmountTaxDisplayRenderingOptionsInvoiceSettings!
}
input PostCustomersCustomerRenderingOptionsInvoiceSettingsUnionInput {
	postCustomersCustomerRenderingOptionsInvoiceSettings: PostCustomersCustomerRenderingOptionsInvoiceSettings
	postCustomersCustomerRenderingOptionsInvoiceSettingsInput: PostCustomersCustomerRenderingOptionsInvoiceSettingsInput
}
input PostCustomersCustomerSettingsCashBalanceInput {
	reconciliationMode: PostCustomersCustomerReconciliationModeSettingsCashBalance!
}
enum PostCustomersCustomerShipping {
	
}
input PostCustomersCustomerShippingInput {
	phone: String!
	name: String!
	address: PostCustomersCustomerAddressShippingInput!
}
input PostCustomersCustomerShippingUnionInput {
	postCustomersCustomerShipping: PostCustomersCustomerShipping
	postCustomersCustomerShippingInput: PostCustomersCustomerShippingInput
}
enum PostCustomersCustomerSourcesAccountHolderTypeBankAccount {
	COMPANY
	INDIVIDUAL
}
input PostCustomersCustomerSourcesBankAccountInput {
	routingNumber: String!
	object: PostCustomersCustomerSourcesObjectBankAccount!
	currency: String!
	country: String!
	accountNumber: String!
	accountHolderType: PostCustomersCustomerSourcesAccountHolderTypeBankAccount!
	accountHolderName: String!
}
input PostCustomersCustomerSourcesBankAccountUnionInput {
	string: String
	postCustomersCustomerSourcesBankAccountInput: PostCustomersCustomerSourcesBankAccountInput
}
input PostCustomersCustomerSourcesCardInput {
	object: PostCustomersCustomerSourcesObjectCard!
	number: String!
	name: String!
	metadata: JSON!
	expYear: Int!
	expMonth: Int!
	cvc: String!
	addressZip: String!
	addressState: String!
	addressLine2: String!
	addressLine1: String!
	addressCountry: String!
	addressCity: String!
}
input PostCustomersCustomerSourcesCardUnionInput {
	string: String
	postCustomersCustomerSourcesCardInput: PostCustomersCustomerSourcesCardInput
}
enum PostCustomersCustomerSourcesIdAccountHolderType {
	COMPANY
	INDIVIDUAL
}
input PostCustomersCustomerSourcesIdAddressOwnerInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostCustomersCustomerSourcesIdInput {
	owner: PostCustomersCustomerSourcesIdOwnerInput!
	name: String!
	metadata: UnionInput!
	expand: [String!]!
	expYear: String!
	expMonth: String!
	addressZip: String!
	addressState: String!
	addressLine2: String!
	addressLine1: String!
	addressCountry: String!
	addressCity: String!
	accountHolderType: PostCustomersCustomerSourcesIdAccountHolderType!
	accountHolderName: String!
}
input PostCustomersCustomerSourcesIdOwnerInput {
	phone: String!
	name: String!
	email: String!
	address: PostCustomersCustomerSourcesIdAddressOwnerInput!
}
input PostCustomersCustomerSourcesIdVerifyInput {
	expand: [String!]!
	amounts: [Int!]!
}
input PostCustomersCustomerSourcesInput {
	source: String!
	metadata: JSON!
	expand: [String!]!
	card: PostCustomersCustomerSourcesCardUnionInput!
	bankAccount: PostCustomersCustomerSourcesBankAccountUnionInput!
	alipayAccount: String!
}
enum PostCustomersCustomerSourcesObjectBankAccount {
	BANK_ACCOUNT
}
enum PostCustomersCustomerSourcesObjectCard {
	CARD
}
enum PostCustomersCustomerSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettings {
	
}
input PostCustomersCustomerSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput {
	verificationMethod: PostCustomersCustomerSubscriptionsVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings!
	mandateOptions: PostCustomersCustomerSubscriptionsMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput!
}
input PostCustomersCustomerSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput {
	postCustomersCustomerSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettings: PostCustomersCustomerSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettings
	postCustomersCustomerSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput: PostCustomersCustomerSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput
}
input PostCustomersCustomerSubscriptionsAddInvoiceItemsInput {
	taxRates: UnionInput!
	quantity: Int!
	priceData: PostCustomersCustomerSubscriptionsPriceDataAddInvoiceItemsInput!
	price: String!
}
enum PostCustomersCustomerSubscriptionsAmountTypeMandateOptionsCardPaymentMethodOptionsPaymentSettings {
	FIXED
	MAXIMUM
}
input PostCustomersCustomerSubscriptionsAutomaticTaxInput {
	enabled: Boolean!
}
enum PostCustomersCustomerSubscriptionsBancontactPaymentMethodOptionsPaymentSettings {
	
}
input PostCustomersCustomerSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsInput {
	preferredLanguage: PostCustomersCustomerSubscriptionsPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings!
}
input PostCustomersCustomerSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsUnionInput {
	postCustomersCustomerSubscriptionsBancontactPaymentMethodOptionsPaymentSettings: PostCustomersCustomerSubscriptionsBancontactPaymentMethodOptionsPaymentSettings
	postCustomersCustomerSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsInput: PostCustomersCustomerSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsInput
}
input PostCustomersCustomerSubscriptionsBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	type: String!
	euBankTransfer: PostCustomersCustomerSubscriptionsEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput!
}
enum PostCustomersCustomerSubscriptionsBillingThresholds {
	
}
input PostCustomersCustomerSubscriptionsBillingThresholdsInput {
	resetBillingCycleAnchor: Boolean!
	amountGte: Int!
}
enum PostCustomersCustomerSubscriptionsBillingThresholdsItems {
	
}
input PostCustomersCustomerSubscriptionsBillingThresholdsItemsInput {
	usageGte: Int!
}
input PostCustomersCustomerSubscriptionsBillingThresholdsItemsUnionInput {
	postCustomersCustomerSubscriptionsBillingThresholdsItems: PostCustomersCustomerSubscriptionsBillingThresholdsItems
	postCustomersCustomerSubscriptionsBillingThresholdsItemsInput: PostCustomersCustomerSubscriptionsBillingThresholdsItemsInput
}
input PostCustomersCustomerSubscriptionsBillingThresholdsUnionInput {
	postCustomersCustomerSubscriptionsBillingThresholds: PostCustomersCustomerSubscriptionsBillingThresholds
	postCustomersCustomerSubscriptionsBillingThresholdsInput: PostCustomersCustomerSubscriptionsBillingThresholdsInput
}
enum PostCustomersCustomerSubscriptionsCardPaymentMethodOptionsPaymentSettings {
	
}
input PostCustomersCustomerSubscriptionsCardPaymentMethodOptionsPaymentSettingsInput {
	requestThreeDSecure: PostCustomersCustomerSubscriptionsRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings!
	network: PostCustomersCustomerSubscriptionsNetworkCardPaymentMethodOptionsPaymentSettings!
	mandateOptions: PostCustomersCustomerSubscriptionsMandateOptionsCardPaymentMethodOptionsPaymentSettingsInput!
}
input PostCustomersCustomerSubscriptionsCardPaymentMethodOptionsPaymentSettingsUnionInput {
	postCustomersCustomerSubscriptionsCardPaymentMethodOptionsPaymentSettings: PostCustomersCustomerSubscriptionsCardPaymentMethodOptionsPaymentSettings
	postCustomersCustomerSubscriptionsCardPaymentMethodOptionsPaymentSettingsInput: PostCustomersCustomerSubscriptionsCardPaymentMethodOptionsPaymentSettingsInput
}
enum PostCustomersCustomerSubscriptionsCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
enum PostCustomersCustomerSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettings {
	
}
input PostCustomersCustomerSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	fundingType: String!
	bankTransfer: PostCustomersCustomerSubscriptionsBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput!
}
input PostCustomersCustomerSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput {
	postCustomersCustomerSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettings: PostCustomersCustomerSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettings
	postCustomersCustomerSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsInput: PostCustomersCustomerSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsInput
}
input PostCustomersCustomerSubscriptionsEndBehaviorTrialSettingsInput {
	missingPaymentMethod: PostCustomersCustomerSubscriptionsMissingPaymentMethodEndBehaviorTrialSettings!
}
input PostCustomersCustomerSubscriptionsEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	country: String!
}
input PostCustomersCustomerSubscriptionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput {
	permissions: [PostCustomersCustomerSubscriptionsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings!]!
}
input PostCustomersCustomerSubscriptionsInput {
	trialSettings: PostCustomersCustomerSubscriptionsTrialSettingsInput!
	trialPeriodDays: Int!
	trialFromPlan: Boolean!
	trialEnd: UnionInput!
	transferData: PostCustomersCustomerSubscriptionsTransferDataInput!
	prorationBehavior: PostCustomersCustomerSubscriptionsProrationBehavior!
	promotionCode: String!
	pendingInvoiceItemInterval: PostCustomersCustomerSubscriptionsPendingInvoiceItemIntervalUnionInput!
	paymentSettings: PostCustomersCustomerSubscriptionsPaymentSettingsInput!
	paymentBehavior: PostCustomersCustomerSubscriptionsPaymentBehavior!
	offSession: Boolean!
	metadata: UnionInput!
	items: [PostCustomersCustomerSubscriptionsItemsInput!]!
	expand: [String!]!
	defaultTaxRates: UnionInput!
	defaultSource: String!
	defaultPaymentMethod: String!
	daysUntilDue: Int!
	currency: String!
	coupon: String!
	collectionMethod: PostCustomersCustomerSubscriptionsCollectionMethod!
	cancelAtPeriodEnd: Boolean!
	cancelAt: Int!
	billingThresholds: PostCustomersCustomerSubscriptionsBillingThresholdsUnionInput!
	billingCycleAnchor: Int!
	backdateStartDate: Int!
	automaticTax: PostCustomersCustomerSubscriptionsAutomaticTaxInput!
	applicationFeePercent: Float!
	addInvoiceItems: [PostCustomersCustomerSubscriptionsAddInvoiceItemsInput!]!
}
enum PostCustomersCustomerSubscriptionsIntervalPendingInvoiceItemInterval {
	DAY
	MONTH
	WEEK
	YEAR
}
enum PostCustomersCustomerSubscriptionsIntervalRecurringPriceDataItems {
	DAY
	MONTH
	WEEK
	YEAR
}
input PostCustomersCustomerSubscriptionsItemsInput {
	taxRates: UnionInput!
	quantity: Int!
	priceData: PostCustomersCustomerSubscriptionsPriceDataItemsInput!
	price: String!
	metadata: JSON!
	billingThresholds: PostCustomersCustomerSubscriptionsBillingThresholdsItemsUnionInput!
}
input PostCustomersCustomerSubscriptionsMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput {
	transactionType: PostCustomersCustomerSubscriptionsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings!
}
input PostCustomersCustomerSubscriptionsMandateOptionsCardPaymentMethodOptionsPaymentSettingsInput {
	description: String!
	amountType: PostCustomersCustomerSubscriptionsAmountTypeMandateOptionsCardPaymentMethodOptionsPaymentSettings!
	amount: Int!
}
enum PostCustomersCustomerSubscriptionsMissingPaymentMethodEndBehaviorTrialSettings {
	CANCEL
	CREATE_INVOICE
	PAUSE
}
enum PostCustomersCustomerSubscriptionsNetworkCardPaymentMethodOptionsPaymentSettings {
	AMEX
	CARTES_BANCAIRES
	DINERS
	DISCOVER
	INTERAC
	JCB
	MASTERCARD
	UNIONPAY
	UNKNOWN
	VISA
}
enum PostCustomersCustomerSubscriptionsPaymentBehavior {
	ALLOW_INCOMPLETE
	DEFAULT_INCOMPLETE
	ERROR_IF_INCOMPLETE
	PENDING_IF_INCOMPLETE
}
input PostCustomersCustomerSubscriptionsPaymentMethodOptionsPaymentSettingsInput {
	usBankAccount: PostCustomersCustomerSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput!
	konbini: UnionInput!
	customerBalance: PostCustomersCustomerSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput!
	card: PostCustomersCustomerSubscriptionsCardPaymentMethodOptionsPaymentSettingsUnionInput!
	bancontact: PostCustomersCustomerSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsUnionInput!
	acssDebit: PostCustomersCustomerSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput!
}
input PostCustomersCustomerSubscriptionsPaymentSettingsInput {
	saveDefaultPaymentMethod: PostCustomersCustomerSubscriptionsSaveDefaultPaymentMethodPaymentSettings!
	paymentMethodTypes: UnionInput!
	paymentMethodOptions: PostCustomersCustomerSubscriptionsPaymentMethodOptionsPaymentSettingsInput!
}
enum PostCustomersCustomerSubscriptionsPendingInvoiceItemInterval {
	
}
input PostCustomersCustomerSubscriptionsPendingInvoiceItemIntervalInput {
	intervalCount: Int!
	interval: PostCustomersCustomerSubscriptionsIntervalPendingInvoiceItemInterval!
}
input PostCustomersCustomerSubscriptionsPendingInvoiceItemIntervalUnionInput {
	postCustomersCustomerSubscriptionsPendingInvoiceItemInterval: PostCustomersCustomerSubscriptionsPendingInvoiceItemInterval
	postCustomersCustomerSubscriptionsPendingInvoiceItemIntervalInput: PostCustomersCustomerSubscriptionsPendingInvoiceItemIntervalInput
}
enum PostCustomersCustomerSubscriptionsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
enum PostCustomersCustomerSubscriptionsPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings {
	DE
	EN
	FR
	NL
}
input PostCustomersCustomerSubscriptionsPriceDataAddInvoiceItemsInput {
	unitAmountDecimal: String!
	unitAmount: Int!
	taxBehavior: PostCustomersCustomerSubscriptionsTaxBehaviorPriceDataAddInvoiceItems!
	product: String!
	currency: String!
}
input PostCustomersCustomerSubscriptionsPriceDataItemsInput {
	unitAmountDecimal: String!
	unitAmount: Int!
	taxBehavior: PostCustomersCustomerSubscriptionsTaxBehaviorPriceDataItems!
	recurring: PostCustomersCustomerSubscriptionsRecurringPriceDataItemsInput!
	product: String!
	currency: String!
}
enum PostCustomersCustomerSubscriptionsProrationBehavior {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
input PostCustomersCustomerSubscriptionsRecurringPriceDataItemsInput {
	intervalCount: Int!
	interval: PostCustomersCustomerSubscriptionsIntervalRecurringPriceDataItems!
}
enum PostCustomersCustomerSubscriptionsRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings {
	ANY
	AUTOMATIC
}
enum PostCustomersCustomerSubscriptionsSaveDefaultPaymentMethodPaymentSettings {
	OFF
	ON_SUBSCRIPTION
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettings {
	
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsInput {
	verificationMethod: PostCustomersCustomerSubscriptionsSubscriptionExposedIdVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings!
	mandateOptions: PostCustomersCustomerSubscriptionsSubscriptionExposedIdMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput!
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput {
	postCustomersCustomerSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettings: PostCustomersCustomerSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettings
	postCustomersCustomerSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsInput: PostCustomersCustomerSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsInput
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdAddInvoiceItemsInput {
	taxRates: UnionInput!
	quantity: Int!
	priceData: PostCustomersCustomerSubscriptionsSubscriptionExposedIdPriceDataAddInvoiceItemsInput!
	price: String!
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdAmountTypeMandateOptionsCardPaymentMethodOptionsPaymentSettings {
	FIXED
	MAXIMUM
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdAutomaticTaxInput {
	enabled: Boolean!
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettings {
	
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsInput {
	preferredLanguage: PostCustomersCustomerSubscriptionsSubscriptionExposedIdPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings!
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsUnionInput {
	postCustomersCustomerSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettings: PostCustomersCustomerSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettings
	postCustomersCustomerSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsInput: PostCustomersCustomerSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsInput
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	type: String!
	euBankTransfer: PostCustomersCustomerSubscriptionsSubscriptionExposedIdEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput!
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdBehaviorPauseCollection {
	KEEP_AS_DRAFT
	MARK_UNCOLLECTIBLE
	VOID
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingCycleAnchor {
	NOW
	UNCHANGED
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholds {
	
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsInput {
	resetBillingCycleAnchor: Boolean!
	amountGte: Int!
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsItems {
	
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsItemsInput {
	usageGte: Int!
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsItemsUnionInput {
	postCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsItems: PostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsItems
	postCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsItemsInput: PostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsItemsInput
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsUnionInput {
	postCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholds: PostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholds
	postCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsInput: PostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsInput
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettings {
	
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsInput {
	requestThreeDSecure: PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings!
	network: PostCustomersCustomerSubscriptionsSubscriptionExposedIdNetworkCardPaymentMethodOptionsPaymentSettings!
	mandateOptions: PostCustomersCustomerSubscriptionsSubscriptionExposedIdMandateOptionsCardPaymentMethodOptionsPaymentSettingsInput!
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsUnionInput {
	postCustomersCustomerSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettings: PostCustomersCustomerSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettings
	postCustomersCustomerSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsInput: PostCustomersCustomerSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsInput
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettings {
	
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	fundingType: String!
	bankTransfer: PostCustomersCustomerSubscriptionsSubscriptionExposedIdBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput!
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput {
	postCustomersCustomerSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettings: PostCustomersCustomerSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettings
	postCustomersCustomerSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsInput: PostCustomersCustomerSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsInput
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdEndBehaviorTrialSettingsInput {
	missingPaymentMethod: PostCustomersCustomerSubscriptionsSubscriptionExposedIdMissingPaymentMethodEndBehaviorTrialSettings!
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	country: String!
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput {
	permissions: [PostCustomersCustomerSubscriptionsSubscriptionExposedIdPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings!]!
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdInput {
	trialSettings: PostCustomersCustomerSubscriptionsSubscriptionExposedIdTrialSettingsInput!
	trialFromPlan: Boolean!
	trialEnd: UnionInput!
	transferData: PostCustomersCustomerSubscriptionsSubscriptionExposedIdTransferDataUnionInput!
	prorationDate: Int!
	prorationBehavior: PostCustomersCustomerSubscriptionsSubscriptionExposedIdProrationBehavior!
	promotionCode: String!
	pendingInvoiceItemInterval: PostCustomersCustomerSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalUnionInput!
	paymentSettings: PostCustomersCustomerSubscriptionsSubscriptionExposedIdPaymentSettingsInput!
	paymentBehavior: PostCustomersCustomerSubscriptionsSubscriptionExposedIdPaymentBehavior!
	pauseCollection: PostCustomersCustomerSubscriptionsSubscriptionExposedIdPauseCollectionUnionInput!
	offSession: Boolean!
	metadata: UnionInput!
	items: [PostCustomersCustomerSubscriptionsSubscriptionExposedIdItemsInput!]!
	expand: [String!]!
	defaultTaxRates: UnionInput!
	defaultSource: String!
	defaultPaymentMethod: String!
	daysUntilDue: Int!
	coupon: String!
	collectionMethod: PostCustomersCustomerSubscriptionsSubscriptionExposedIdCollectionMethod!
	cancelAtPeriodEnd: Boolean!
	cancelAt: UnionInput!
	billingThresholds: PostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsUnionInput!
	billingCycleAnchor: PostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingCycleAnchor!
	automaticTax: PostCustomersCustomerSubscriptionsSubscriptionExposedIdAutomaticTaxInput!
	applicationFeePercent: Float!
	addInvoiceItems: [PostCustomersCustomerSubscriptionsSubscriptionExposedIdAddInvoiceItemsInput!]!
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdIntervalPendingInvoiceItemInterval {
	DAY
	MONTH
	WEEK
	YEAR
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdIntervalRecurringPriceDataItems {
	DAY
	MONTH
	WEEK
	YEAR
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdItemsInput {
	taxRates: UnionInput!
	quantity: Int!
	priceData: PostCustomersCustomerSubscriptionsSubscriptionExposedIdPriceDataItemsInput!
	price: String!
	metadata: UnionInput!
	id: String!
	deleted: Boolean!
	clearUsage: Boolean!
	billingThresholds: PostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsItemsUnionInput!
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput {
	transactionType: PostCustomersCustomerSubscriptionsSubscriptionExposedIdTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings!
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdMandateOptionsCardPaymentMethodOptionsPaymentSettingsInput {
	description: String!
	amountType: PostCustomersCustomerSubscriptionsSubscriptionExposedIdAmountTypeMandateOptionsCardPaymentMethodOptionsPaymentSettings!
	amount: Int!
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdMissingPaymentMethodEndBehaviorTrialSettings {
	CANCEL
	CREATE_INVOICE
	PAUSE
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdNetworkCardPaymentMethodOptionsPaymentSettings {
	AMEX
	CARTES_BANCAIRES
	DINERS
	DISCOVER
	INTERAC
	JCB
	MASTERCARD
	UNIONPAY
	UNKNOWN
	VISA
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdPauseCollection {
	
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdPauseCollectionInput {
	resumesAt: Int!
	behavior: PostCustomersCustomerSubscriptionsSubscriptionExposedIdBehaviorPauseCollection!
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdPauseCollectionUnionInput {
	postCustomersCustomerSubscriptionsSubscriptionExposedIdPauseCollection: PostCustomersCustomerSubscriptionsSubscriptionExposedIdPauseCollection
	postCustomersCustomerSubscriptionsSubscriptionExposedIdPauseCollectionInput: PostCustomersCustomerSubscriptionsSubscriptionExposedIdPauseCollectionInput
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdPaymentBehavior {
	ALLOW_INCOMPLETE
	DEFAULT_INCOMPLETE
	ERROR_IF_INCOMPLETE
	PENDING_IF_INCOMPLETE
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdPaymentMethodOptionsPaymentSettingsInput {
	usBankAccount: PostCustomersCustomerSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput!
	konbini: UnionInput!
	customerBalance: PostCustomersCustomerSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput!
	card: PostCustomersCustomerSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsUnionInput!
	bancontact: PostCustomersCustomerSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsUnionInput!
	acssDebit: PostCustomersCustomerSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput!
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdPaymentSettingsInput {
	saveDefaultPaymentMethod: PostCustomersCustomerSubscriptionsSubscriptionExposedIdSaveDefaultPaymentMethodPaymentSettings!
	paymentMethodTypes: UnionInput!
	paymentMethodOptions: PostCustomersCustomerSubscriptionsSubscriptionExposedIdPaymentMethodOptionsPaymentSettingsInput!
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdPendingInvoiceItemInterval {
	
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalInput {
	intervalCount: Int!
	interval: PostCustomersCustomerSubscriptionsSubscriptionExposedIdIntervalPendingInvoiceItemInterval!
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalUnionInput {
	postCustomersCustomerSubscriptionsSubscriptionExposedIdPendingInvoiceItemInterval: PostCustomersCustomerSubscriptionsSubscriptionExposedIdPendingInvoiceItemInterval
	postCustomersCustomerSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalInput: PostCustomersCustomerSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalInput
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings {
	DE
	EN
	FR
	NL
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdPriceDataAddInvoiceItemsInput {
	unitAmountDecimal: String!
	unitAmount: Int!
	taxBehavior: PostCustomersCustomerSubscriptionsSubscriptionExposedIdTaxBehaviorPriceDataAddInvoiceItems!
	product: String!
	currency: String!
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdPriceDataItemsInput {
	unitAmountDecimal: String!
	unitAmount: Int!
	taxBehavior: PostCustomersCustomerSubscriptionsSubscriptionExposedIdTaxBehaviorPriceDataItems!
	recurring: PostCustomersCustomerSubscriptionsSubscriptionExposedIdRecurringPriceDataItemsInput!
	product: String!
	currency: String!
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdProrationBehavior {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdRecurringPriceDataItemsInput {
	intervalCount: Int!
	interval: PostCustomersCustomerSubscriptionsSubscriptionExposedIdIntervalRecurringPriceDataItems!
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings {
	ANY
	AUTOMATIC
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdSaveDefaultPaymentMethodPaymentSettings {
	OFF
	ON_SUBSCRIPTION
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdTaxBehaviorPriceDataAddInvoiceItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdTaxBehaviorPriceDataItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings {
	BUSINESS
	PERSONAL
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdTransferData {
	
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdTransferDataInput {
	destination: String!
	amountPercent: Float!
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdTransferDataUnionInput {
	postCustomersCustomerSubscriptionsSubscriptionExposedIdTransferData: PostCustomersCustomerSubscriptionsSubscriptionExposedIdTransferData
	postCustomersCustomerSubscriptionsSubscriptionExposedIdTransferDataInput: PostCustomersCustomerSubscriptionsSubscriptionExposedIdTransferDataInput
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdTrialSettingsInput {
	endBehavior: PostCustomersCustomerSubscriptionsSubscriptionExposedIdEndBehaviorTrialSettingsInput!
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettings {
	
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsInput {
	verificationMethod: PostCustomersCustomerSubscriptionsSubscriptionExposedIdVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings!
	financialConnections: PostCustomersCustomerSubscriptionsSubscriptionExposedIdFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput!
}
input PostCustomersCustomerSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput {
	postCustomersCustomerSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettings: PostCustomersCustomerSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettings
	postCustomersCustomerSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsInput: PostCustomersCustomerSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsInput
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum PostCustomersCustomerSubscriptionsSubscriptionExposedIdVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum PostCustomersCustomerSubscriptionsTaxBehaviorPriceDataAddInvoiceItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum PostCustomersCustomerSubscriptionsTaxBehaviorPriceDataItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum PostCustomersCustomerSubscriptionsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings {
	BUSINESS
	PERSONAL
}
input PostCustomersCustomerSubscriptionsTransferDataInput {
	destination: String!
	amountPercent: Float!
}
input PostCustomersCustomerSubscriptionsTrialSettingsInput {
	endBehavior: PostCustomersCustomerSubscriptionsEndBehaviorTrialSettingsInput!
}
enum PostCustomersCustomerSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettings {
	
}
input PostCustomersCustomerSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput {
	verificationMethod: PostCustomersCustomerSubscriptionsVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings!
	financialConnections: PostCustomersCustomerSubscriptionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput!
}
input PostCustomersCustomerSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput {
	postCustomersCustomerSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettings: PostCustomersCustomerSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettings
	postCustomersCustomerSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput: PostCustomersCustomerSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput
}
enum PostCustomersCustomerSubscriptionsVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum PostCustomersCustomerSubscriptionsVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum PostCustomersCustomerTaxExempt {
	
	EXEMPT
	NONE
	REVERSE
}
input PostCustomersCustomerTaxIdsInput {
	value: String!
	type: PostCustomersCustomerTaxIdsType!
	expand: [String!]!
}
enum PostCustomersCustomerTaxIdsType {
	AE_TRN
	AU_ABN
	AU_ARN
	BG_UIC
	BR_CNPJ
	BR_CPF
	CA_BN
	CA_GST_HST
	CA_PST_BC
	CA_PST_MB
	CA_PST_SK
	CA_QST
	CH_VAT
	CL_TIN
	EG_TIN
	ES_CIF
	EU_OSS_VAT
	EU_VAT
	GB_VAT
	GE_VAT
	HK_BR
	HU_TIN
	ID_NPWP
	IL_VAT
	IN_GST
	IS_VAT
	JP_CN
	JP_RN
	JP_TRN
	KE_PIN
	KR_BRN
	LI_UID
	MX_RFC
	MY_FRP
	MY_ITN
	MY_SST
	NO_VAT
	NZ_GST
	PH_TIN
	RU_INN
	RU_KPP
	SA_VAT
	SG_GST
	SG_UEN
	SI_TIN
	TH_VAT
	TR_TIN
	TW_VAT
	UA_VAT
	US_EIN
	ZA_VAT
}
input PostCustomersCustomerTaxInput {
	ipAddress: UnionInput!
}
input PostCustomersInput {
	testClock: String!
	taxIdData: [PostCustomersTaxIdDataInput!]!
	taxExempt: PostCustomersTaxExempt!
	tax: PostCustomersTaxInput!
	source: String!
	shipping: PostCustomersShippingUnionInput!
	promotionCode: String!
	preferredLocales: [String!]!
	phone: String!
	paymentMethod: String!
	nextInvoiceSequence: Int!
	name: String!
	metadata: UnionInput!
	invoiceSettings: PostCustomersInvoiceSettingsInput!
	invoicePrefix: String!
	expand: [String!]!
	email: String!
	description: String!
	coupon: String!
	cashBalance: PostCustomersCashBalanceInput!
	balance: Int!
	address: PostCustomersAddressUnionInput!
}
input PostCustomersInvoiceSettingsInput {
	renderingOptions: PostCustomersRenderingOptionsInvoiceSettingsUnionInput!
	footer: String!
	defaultPaymentMethod: String!
	customFields: PostCustomersCustomFieldsInvoiceSettingsUnionInput!
}
enum PostCustomersReconciliationModeSettingsCashBalance {
	AUTOMATIC
	MANUAL
	MERCHANT_DEFAULT
}
enum PostCustomersRenderingOptionsInvoiceSettings {
	
}
input PostCustomersRenderingOptionsInvoiceSettingsInput {
	amountTaxDisplay: PostCustomersAmountTaxDisplayRenderingOptionsInvoiceSettings!
}
input PostCustomersRenderingOptionsInvoiceSettingsUnionInput {
	postCustomersRenderingOptionsInvoiceSettings: PostCustomersRenderingOptionsInvoiceSettings
	postCustomersRenderingOptionsInvoiceSettingsInput: PostCustomersRenderingOptionsInvoiceSettingsInput
}
input PostCustomersSettingsCashBalanceInput {
	reconciliationMode: PostCustomersReconciliationModeSettingsCashBalance!
}
enum PostCustomersShipping {
	
}
input PostCustomersShippingInput {
	phone: String!
	name: String!
	address: PostCustomersAddressShippingInput!
}
input PostCustomersShippingUnionInput {
	postCustomersShipping: PostCustomersShipping
	postCustomersShippingInput: PostCustomersShippingInput
}
enum PostCustomersTaxExempt {
	
	EXEMPT
	NONE
	REVERSE
}
input PostCustomersTaxIdDataInput {
	value: String!
	type: PostCustomersTypeTaxIdData!
}
input PostCustomersTaxInput {
	ipAddress: UnionInput!
}
enum PostCustomersTypeTaxIdData {
	AE_TRN
	AU_ABN
	AU_ARN
	BG_UIC
	BR_CNPJ
	BR_CPF
	CA_BN
	CA_GST_HST
	CA_PST_BC
	CA_PST_MB
	CA_PST_SK
	CA_QST
	CH_VAT
	CL_TIN
	EG_TIN
	ES_CIF
	EU_OSS_VAT
	EU_VAT
	GB_VAT
	GE_VAT
	HK_BR
	HU_TIN
	ID_NPWP
	IL_VAT
	IN_GST
	IS_VAT
	JP_CN
	JP_RN
	JP_TRN
	KE_PIN
	KR_BRN
	LI_UID
	MX_RFC
	MY_FRP
	MY_ITN
	MY_SST
	NO_VAT
	NZ_GST
	PH_TIN
	RU_INN
	RU_KPP
	SA_VAT
	SG_GST
	SG_UEN
	SI_TIN
	TH_VAT
	TR_TIN
	TW_VAT
	UA_VAT
	US_EIN
	ZA_VAT
}
input PostDisputesDisputeCloseInput {
	expand: [String!]!
}
input PostDisputesDisputeEvidenceInput {
	uncategorizedText: String!
	uncategorizedFile: String!
	shippingTrackingNumber: String!
	shippingDocumentation: String!
	shippingDate: String!
	shippingCarrier: String!
	shippingAddress: String!
	serviceDocumentation: String!
	serviceDate: String!
	refundRefusalExplanation: String!
	refundPolicyDisclosure: String!
	refundPolicy: String!
	receipt: String!
	productDescription: String!
	duplicateChargeId: String!
	duplicateChargeExplanation: String!
	duplicateChargeDocumentation: String!
	customerSignature: String!
	customerPurchaseIp: String!
	customerName: String!
	customerEmailAddress: String!
	customerCommunication: String!
	cancellationRebuttal: String!
	cancellationPolicyDisclosure: String!
	cancellationPolicy: String!
	billingAddress: String!
	accessActivityLog: String!
}
input PostDisputesDisputeInput {
	submit: Boolean!
	metadata: UnionInput!
	expand: [String!]!
	evidence: PostDisputesDisputeEvidenceInput!
}
input PostEphemeralKeysInput {
	verificationSession: String!
	issuingCard: String!
	expand: [String!]!
	customer: String!
}
input PostFileLinksInput {
	metadata: UnionInput!
	file: String!
	expiresAt: Int!
	expand: [String!]!
}
input PostFileLinksLinkInput {
	metadata: UnionInput!
	expiresAt: UnionInput!
	expand: [String!]!
}
input PostFinancialConnectionsAccountsAccountDisconnectInput {
	expand: [String!]!
}
enum PostFinancialConnectionsAccountsAccountRefreshFeatures {
	BALANCE
	OWNERSHIP
}
input PostFinancialConnectionsAccountsAccountRefreshInput {
	features: [PostFinancialConnectionsAccountsAccountRefreshFeatures!]!
	expand: [String!]!
}
input PostFinancialConnectionsSessionsAccountHolderInput {
	type: PostFinancialConnectionsSessionsTypeAccountHolder!
	customer: String!
	account: String!
}
input PostFinancialConnectionsSessionsFiltersInput {
	countries: [String!]!
}
input PostFinancialConnectionsSessionsInput {
	returnUrl: String!
	permissions: [PostFinancialConnectionsSessionsPermissions!]!
	filters: PostFinancialConnectionsSessionsFiltersInput!
	expand: [String!]!
	accountHolder: PostFinancialConnectionsSessionsAccountHolderInput!
}
enum PostFinancialConnectionsSessionsPermissions {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
enum PostFinancialConnectionsSessionsTypeAccountHolder {
	ACCOUNT
	CUSTOMER
}
enum PostIdentityVerificationSessionsAllowedTypesDocumentOptions {
	DRIVING_LICENSE
	ID_CARD
	PASSPORT
}
enum PostIdentityVerificationSessionsDocumentOptions {
	
}
input PostIdentityVerificationSessionsDocumentOptionsInput {
	requireMatchingSelfie: Boolean!
	requireLiveCapture: Boolean!
	requireIdNumber: Boolean!
	allowedTypes: [PostIdentityVerificationSessionsAllowedTypesDocumentOptions!]!
}
input PostIdentityVerificationSessionsDocumentOptionsUnionInput {
	postIdentityVerificationSessionsDocumentOptions: PostIdentityVerificationSessionsDocumentOptions
	postIdentityVerificationSessionsDocumentOptionsInput: PostIdentityVerificationSessionsDocumentOptionsInput
}
input PostIdentityVerificationSessionsInput {
	type: PostIdentityVerificationSessionsType!
	returnUrl: String!
	options: PostIdentityVerificationSessionsOptionsInput!
	metadata: JSON!
	expand: [String!]!
}
input PostIdentityVerificationSessionsOptionsInput {
	document: PostIdentityVerificationSessionsDocumentOptionsUnionInput!
}
enum PostIdentityVerificationSessionsSessionAllowedTypesDocumentOptions {
	DRIVING_LICENSE
	ID_CARD
	PASSPORT
}
input PostIdentityVerificationSessionsSessionCancelInput {
	expand: [String!]!
}
enum PostIdentityVerificationSessionsSessionDocumentOptions {
	
}
input PostIdentityVerificationSessionsSessionDocumentOptionsInput {
	requireMatchingSelfie: Boolean!
	requireLiveCapture: Boolean!
	requireIdNumber: Boolean!
	allowedTypes: [PostIdentityVerificationSessionsSessionAllowedTypesDocumentOptions!]!
}
input PostIdentityVerificationSessionsSessionDocumentOptionsUnionInput {
	postIdentityVerificationSessionsSessionDocumentOptions: PostIdentityVerificationSessionsSessionDocumentOptions
	postIdentityVerificationSessionsSessionDocumentOptionsInput: PostIdentityVerificationSessionsSessionDocumentOptionsInput
}
input PostIdentityVerificationSessionsSessionInput {
	type: PostIdentityVerificationSessionsSessionType!
	options: PostIdentityVerificationSessionsSessionOptionsInput!
	metadata: JSON!
	expand: [String!]!
}
input PostIdentityVerificationSessionsSessionOptionsInput {
	document: PostIdentityVerificationSessionsSessionDocumentOptionsUnionInput!
}
input PostIdentityVerificationSessionsSessionRedactInput {
	expand: [String!]!
}
enum PostIdentityVerificationSessionsSessionType {
	DOCUMENT
	ID_NUMBER
}
enum PostIdentityVerificationSessionsType {
	DOCUMENT
	ID_NUMBER
}
enum PostInvoiceitemsDiscounts {
	
}
input PostInvoiceitemsDiscountsInput {
	discount: String!
	coupon: String!
}
input PostInvoiceitemsDiscountsUnionInput {
	postInvoiceitemsDiscounts: PostInvoiceitemsDiscounts
	postInvoiceitemsDiscountsInput: PostInvoiceitemsDiscountsInput
}
input PostInvoiceitemsInput {
	unitAmountDecimal: String!
	unitAmount: Int!
	taxRates: [String!]!
	taxCode: UnionInput!
	taxBehavior: PostInvoiceitemsTaxBehavior!
	subscription: String!
	quantity: Int!
	priceData: PostInvoiceitemsPriceDataInput!
	price: String!
	period: PostInvoiceitemsPeriodInput!
	metadata: UnionInput!
	invoice: String!
	expand: [String!]!
	discounts: PostInvoiceitemsDiscountsUnionInput!
	discountable: Boolean!
	description: String!
	customer: String!
	currency: String!
	amount: Int!
}
enum PostInvoiceitemsInvoiceitemDiscounts {
	
}
input PostInvoiceitemsInvoiceitemDiscountsInput {
	discount: String!
	coupon: String!
}
input PostInvoiceitemsInvoiceitemDiscountsUnionInput {
	postInvoiceitemsInvoiceitemDiscounts: PostInvoiceitemsInvoiceitemDiscounts
	postInvoiceitemsInvoiceitemDiscountsInput: PostInvoiceitemsInvoiceitemDiscountsInput
}
input PostInvoiceitemsInvoiceitemInput {
	unitAmountDecimal: String!
	unitAmount: Int!
	taxRates: UnionInput!
	taxCode: UnionInput!
	taxBehavior: PostInvoiceitemsInvoiceitemTaxBehavior!
	quantity: Int!
	priceData: PostInvoiceitemsInvoiceitemPriceDataInput!
	price: String!
	period: PostInvoiceitemsInvoiceitemPeriodInput!
	metadata: UnionInput!
	expand: [String!]!
	discounts: PostInvoiceitemsInvoiceitemDiscountsUnionInput!
	discountable: Boolean!
	description: String!
	amount: Int!
}
input PostInvoiceitemsInvoiceitemPeriodInput {
	start: Int!
	end: Int!
}
input PostInvoiceitemsInvoiceitemPriceDataInput {
	unitAmountDecimal: String!
	unitAmount: Int!
	taxBehavior: PostInvoiceitemsInvoiceitemTaxBehaviorPriceData!
	product: String!
	currency: String!
}
enum PostInvoiceitemsInvoiceitemTaxBehavior {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum PostInvoiceitemsInvoiceitemTaxBehaviorPriceData {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
input PostInvoiceitemsPeriodInput {
	start: Int!
	end: Int!
}
input PostInvoiceitemsPriceDataInput {
	unitAmountDecimal: String!
	unitAmount: Int!
	taxBehavior: PostInvoiceitemsTaxBehaviorPriceData!
	product: String!
	currency: String!
}
enum PostInvoiceitemsTaxBehavior {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum PostInvoiceitemsTaxBehaviorPriceData {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum PostInvoicesAcssDebitPaymentMethodOptionsPaymentSettings {
	
}
input PostInvoicesAcssDebitPaymentMethodOptionsPaymentSettingsInput {
	verificationMethod: PostInvoicesVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings!
	mandateOptions: PostInvoicesMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput!
}
input PostInvoicesAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput {
	postInvoicesAcssDebitPaymentMethodOptionsPaymentSettings: PostInvoicesAcssDebitPaymentMethodOptionsPaymentSettings
	postInvoicesAcssDebitPaymentMethodOptionsPaymentSettingsInput: PostInvoicesAcssDebitPaymentMethodOptionsPaymentSettingsInput
}
enum PostInvoicesActionFromInvoice {
	REVISION
}
input PostInvoicesAddressShippingDetailsInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
enum PostInvoicesAmountTaxDisplayRenderingOptions {
	
	EXCLUDE_TAX
	INCLUDE_INCLUSIVE_TAX
}
input PostInvoicesAutomaticTaxInput {
	enabled: Boolean!
}
enum PostInvoicesBancontactPaymentMethodOptionsPaymentSettings {
	
}
input PostInvoicesBancontactPaymentMethodOptionsPaymentSettingsInput {
	preferredLanguage: PostInvoicesPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings!
}
input PostInvoicesBancontactPaymentMethodOptionsPaymentSettingsUnionInput {
	postInvoicesBancontactPaymentMethodOptionsPaymentSettings: PostInvoicesBancontactPaymentMethodOptionsPaymentSettings
	postInvoicesBancontactPaymentMethodOptionsPaymentSettingsInput: PostInvoicesBancontactPaymentMethodOptionsPaymentSettingsInput
}
input PostInvoicesBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	type: String!
	euBankTransfer: PostInvoicesEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput!
}
enum PostInvoicesCardPaymentMethodOptionsPaymentSettings {
	
}
input PostInvoicesCardPaymentMethodOptionsPaymentSettingsInput {
	requestThreeDSecure: PostInvoicesRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings!
	installments: PostInvoicesInstallmentsCardPaymentMethodOptionsPaymentSettingsInput!
}
input PostInvoicesCardPaymentMethodOptionsPaymentSettingsUnionInput {
	postInvoicesCardPaymentMethodOptionsPaymentSettings: PostInvoicesCardPaymentMethodOptionsPaymentSettings
	postInvoicesCardPaymentMethodOptionsPaymentSettingsInput: PostInvoicesCardPaymentMethodOptionsPaymentSettingsInput
}
enum PostInvoicesCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
enum PostInvoicesCustomFields {
	
}
input PostInvoicesCustomFieldsInput {
	value: String!
	name: String!
}
input PostInvoicesCustomFieldsUnionInput {
	postInvoicesCustomFields: PostInvoicesCustomFields
	postInvoicesCustomFieldsInput: PostInvoicesCustomFieldsInput
}
enum PostInvoicesCustomerBalancePaymentMethodOptionsPaymentSettings {
	
}
input PostInvoicesCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	fundingType: String!
	bankTransfer: PostInvoicesBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput!
}
input PostInvoicesCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput {
	postInvoicesCustomerBalancePaymentMethodOptionsPaymentSettings: PostInvoicesCustomerBalancePaymentMethodOptionsPaymentSettings
	postInvoicesCustomerBalancePaymentMethodOptionsPaymentSettingsInput: PostInvoicesCustomerBalancePaymentMethodOptionsPaymentSettingsInput
}
input PostInvoicesDeliveryEstimateShippingRateDataShippingCostInput {
	minimum: PostInvoicesMinimumDeliveryEstimateShippingRateDataShippingCostInput!
	maximum: PostInvoicesMaximumDeliveryEstimateShippingRateDataShippingCostInput!
}
enum PostInvoicesDiscounts {
	
}
input PostInvoicesDiscountsInput {
	discount: String!
	coupon: String!
}
input PostInvoicesDiscountsUnionInput {
	postInvoicesDiscounts: PostInvoicesDiscounts
	postInvoicesDiscountsInput: PostInvoicesDiscountsInput
}
input PostInvoicesEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	country: String!
}
input PostInvoicesFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput {
	permissions: [PostInvoicesPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings!]!
}
input PostInvoicesFixedAmountShippingRateDataShippingCostInput {
	currencyOptions: JSON!
	currency: String!
	amount: Int!
}
input PostInvoicesFromInvoiceInput {
	invoice: String!
	action: PostInvoicesActionFromInvoice!
}
input PostInvoicesInput {
	transferData: PostInvoicesTransferDataInput!
	subscription: String!
	statementDescriptor: String!
	shippingDetails: PostInvoicesShippingDetailsInput!
	shippingCost: PostInvoicesShippingCostInput!
	renderingOptions: PostInvoicesRenderingOptionsUnionInput!
	pendingInvoiceItemsBehavior: PostInvoicesPendingInvoiceItemsBehavior!
	paymentSettings: PostInvoicesPaymentSettingsInput!
	onBehalfOf: String!
	metadata: UnionInput!
	fromInvoice: PostInvoicesFromInvoiceInput!
	footer: String!
	expand: [String!]!
	dueDate: Int!
	discounts: PostInvoicesDiscountsUnionInput!
	description: String!
	defaultTaxRates: [String!]!
	defaultSource: String!
	defaultPaymentMethod: String!
	daysUntilDue: Int!
	customer: String!
	customFields: PostInvoicesCustomFieldsUnionInput!
	currency: String!
	collectionMethod: PostInvoicesCollectionMethod!
	automaticTax: PostInvoicesAutomaticTaxInput!
	autoAdvance: Boolean!
	applicationFeeAmount: Int!
	accountTaxIds: UnionInput!
}
input PostInvoicesInstallmentsCardPaymentMethodOptionsPaymentSettingsInput {
	plan: PostInvoicesPlanInstallmentsCardPaymentMethodOptionsPaymentSettingsUnionInput!
	enabled: Boolean!
}
enum PostInvoicesIntervalPlanInstallmentsCardPaymentMethodOptionsPaymentSettings {
	MONTH
}
enum PostInvoicesInvoiceAcssDebitPaymentMethodOptionsPaymentSettings {
	
}
input PostInvoicesInvoiceAcssDebitPaymentMethodOptionsPaymentSettingsInput {
	verificationMethod: PostInvoicesInvoiceVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings!
	mandateOptions: PostInvoicesInvoiceMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput!
}
input PostInvoicesInvoiceAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput {
	postInvoicesInvoiceAcssDebitPaymentMethodOptionsPaymentSettings: PostInvoicesInvoiceAcssDebitPaymentMethodOptionsPaymentSettings
	postInvoicesInvoiceAcssDebitPaymentMethodOptionsPaymentSettingsInput: PostInvoicesInvoiceAcssDebitPaymentMethodOptionsPaymentSettingsInput
}
input PostInvoicesInvoiceAddressShippingDetailsInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
enum PostInvoicesInvoiceAmountTaxDisplayRenderingOptions {
	
	EXCLUDE_TAX
	INCLUDE_INCLUSIVE_TAX
}
input PostInvoicesInvoiceAutomaticTaxInput {
	enabled: Boolean!
}
enum PostInvoicesInvoiceBancontactPaymentMethodOptionsPaymentSettings {
	
}
input PostInvoicesInvoiceBancontactPaymentMethodOptionsPaymentSettingsInput {
	preferredLanguage: PostInvoicesInvoicePreferredLanguageBancontactPaymentMethodOptionsPaymentSettings!
}
input PostInvoicesInvoiceBancontactPaymentMethodOptionsPaymentSettingsUnionInput {
	postInvoicesInvoiceBancontactPaymentMethodOptionsPaymentSettings: PostInvoicesInvoiceBancontactPaymentMethodOptionsPaymentSettings
	postInvoicesInvoiceBancontactPaymentMethodOptionsPaymentSettingsInput: PostInvoicesInvoiceBancontactPaymentMethodOptionsPaymentSettingsInput
}
input PostInvoicesInvoiceBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	type: String!
	euBankTransfer: PostInvoicesInvoiceEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput!
}
enum PostInvoicesInvoiceCardPaymentMethodOptionsPaymentSettings {
	
}
input PostInvoicesInvoiceCardPaymentMethodOptionsPaymentSettingsInput {
	requestThreeDSecure: PostInvoicesInvoiceRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings!
	installments: PostInvoicesInvoiceInstallmentsCardPaymentMethodOptionsPaymentSettingsInput!
}
input PostInvoicesInvoiceCardPaymentMethodOptionsPaymentSettingsUnionInput {
	postInvoicesInvoiceCardPaymentMethodOptionsPaymentSettings: PostInvoicesInvoiceCardPaymentMethodOptionsPaymentSettings
	postInvoicesInvoiceCardPaymentMethodOptionsPaymentSettingsInput: PostInvoicesInvoiceCardPaymentMethodOptionsPaymentSettingsInput
}
enum PostInvoicesInvoiceCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
enum PostInvoicesInvoiceCustomFields {
	
}
input PostInvoicesInvoiceCustomFieldsInput {
	value: String!
	name: String!
}
input PostInvoicesInvoiceCustomFieldsUnionInput {
	postInvoicesInvoiceCustomFields: PostInvoicesInvoiceCustomFields
	postInvoicesInvoiceCustomFieldsInput: PostInvoicesInvoiceCustomFieldsInput
}
enum PostInvoicesInvoiceCustomerBalancePaymentMethodOptionsPaymentSettings {
	
}
input PostInvoicesInvoiceCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	fundingType: String!
	bankTransfer: PostInvoicesInvoiceBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput!
}
input PostInvoicesInvoiceCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput {
	postInvoicesInvoiceCustomerBalancePaymentMethodOptionsPaymentSettings: PostInvoicesInvoiceCustomerBalancePaymentMethodOptionsPaymentSettings
	postInvoicesInvoiceCustomerBalancePaymentMethodOptionsPaymentSettingsInput: PostInvoicesInvoiceCustomerBalancePaymentMethodOptionsPaymentSettingsInput
}
input PostInvoicesInvoiceDeliveryEstimateShippingRateDataShippingCostInput {
	minimum: PostInvoicesInvoiceMinimumDeliveryEstimateShippingRateDataShippingCostInput!
	maximum: PostInvoicesInvoiceMaximumDeliveryEstimateShippingRateDataShippingCostInput!
}
enum PostInvoicesInvoiceDiscounts {
	
}
input PostInvoicesInvoiceDiscountsInput {
	discount: String!
	coupon: String!
}
input PostInvoicesInvoiceDiscountsUnionInput {
	postInvoicesInvoiceDiscounts: PostInvoicesInvoiceDiscounts
	postInvoicesInvoiceDiscountsInput: PostInvoicesInvoiceDiscountsInput
}
input PostInvoicesInvoiceEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	country: String!
}
input PostInvoicesInvoiceFinalizeInput {
	expand: [String!]!
	autoAdvance: Boolean!
}
input PostInvoicesInvoiceFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput {
	permissions: [PostInvoicesInvoicePermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings!]!
}
input PostInvoicesInvoiceFixedAmountShippingRateDataShippingCostInput {
	currencyOptions: JSON!
	currency: String!
	amount: Int!
}
input PostInvoicesInvoiceInput {
	transferData: PostInvoicesInvoiceTransferDataUnionInput!
	statementDescriptor: String!
	shippingDetails: PostInvoicesInvoiceShippingDetailsUnionInput!
	shippingCost: PostInvoicesInvoiceShippingCostUnionInput!
	renderingOptions: PostInvoicesInvoiceRenderingOptionsUnionInput!
	paymentSettings: PostInvoicesInvoicePaymentSettingsInput!
	onBehalfOf: UnionInput!
	metadata: UnionInput!
	footer: String!
	expand: [String!]!
	dueDate: Int!
	discounts: PostInvoicesInvoiceDiscountsUnionInput!
	description: String!
	defaultTaxRates: UnionInput!
	defaultSource: String!
	defaultPaymentMethod: String!
	daysUntilDue: Int!
	customFields: PostInvoicesInvoiceCustomFieldsUnionInput!
	collectionMethod: PostInvoicesInvoiceCollectionMethod!
	automaticTax: PostInvoicesInvoiceAutomaticTaxInput!
	autoAdvance: Boolean!
	applicationFeeAmount: Int!
	accountTaxIds: UnionInput!
}
input PostInvoicesInvoiceInstallmentsCardPaymentMethodOptionsPaymentSettingsInput {
	plan: PostInvoicesInvoicePlanInstallmentsCardPaymentMethodOptionsPaymentSettingsUnionInput!
	enabled: Boolean!
}
enum PostInvoicesInvoiceIntervalPlanInstallmentsCardPaymentMethodOptionsPaymentSettings {
	MONTH
}
input PostInvoicesInvoiceMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput {
	transactionType: PostInvoicesInvoiceTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings!
}
input PostInvoicesInvoiceMarkUncollectibleInput {
	expand: [String!]!
}
input PostInvoicesInvoiceMaximumDeliveryEstimateShippingRateDataShippingCostInput {
	value: Int!
	unit: PostInvoicesInvoiceUnitMaximumDeliveryEstimateShippingRateDataShippingCost!
}
input PostInvoicesInvoiceMinimumDeliveryEstimateShippingRateDataShippingCostInput {
	value: Int!
	unit: PostInvoicesInvoiceUnitMinimumDeliveryEstimateShippingRateDataShippingCost!
}
input PostInvoicesInvoicePayInput {
	source: String!
	paymentMethod: String!
	paidOutOfBand: Boolean!
	offSession: Boolean!
	mandate: String!
	forgive: Boolean!
	expand: [String!]!
}
input PostInvoicesInvoicePaymentMethodOptionsPaymentSettingsInput {
	usBankAccount: PostInvoicesInvoiceUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput!
	konbini: UnionInput!
	customerBalance: PostInvoicesInvoiceCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput!
	card: PostInvoicesInvoiceCardPaymentMethodOptionsPaymentSettingsUnionInput!
	bancontact: PostInvoicesInvoiceBancontactPaymentMethodOptionsPaymentSettingsUnionInput!
	acssDebit: PostInvoicesInvoiceAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput!
}
input PostInvoicesInvoicePaymentSettingsInput {
	paymentMethodTypes: UnionInput!
	paymentMethodOptions: PostInvoicesInvoicePaymentMethodOptionsPaymentSettingsInput!
	defaultMandate: String!
}
enum PostInvoicesInvoicePermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
enum PostInvoicesInvoicePlanInstallmentsCardPaymentMethodOptionsPaymentSettings {
	
}
input PostInvoicesInvoicePlanInstallmentsCardPaymentMethodOptionsPaymentSettingsInput {
	type: PostInvoicesInvoiceTypePlanInstallmentsCardPaymentMethodOptionsPaymentSettings!
	interval: PostInvoicesInvoiceIntervalPlanInstallmentsCardPaymentMethodOptionsPaymentSettings!
	count: Int!
}
input PostInvoicesInvoicePlanInstallmentsCardPaymentMethodOptionsPaymentSettingsUnionInput {
	postInvoicesInvoicePlanInstallmentsCardPaymentMethodOptionsPaymentSettings: PostInvoicesInvoicePlanInstallmentsCardPaymentMethodOptionsPaymentSettings
	postInvoicesInvoicePlanInstallmentsCardPaymentMethodOptionsPaymentSettingsInput: PostInvoicesInvoicePlanInstallmentsCardPaymentMethodOptionsPaymentSettingsInput
}
enum PostInvoicesInvoicePreferredLanguageBancontactPaymentMethodOptionsPaymentSettings {
	DE
	EN
	FR
	NL
}
enum PostInvoicesInvoiceRenderingOptions {
	
}
input PostInvoicesInvoiceRenderingOptionsInput {
	amountTaxDisplay: PostInvoicesInvoiceAmountTaxDisplayRenderingOptions!
}
input PostInvoicesInvoiceRenderingOptionsUnionInput {
	postInvoicesInvoiceRenderingOptions: PostInvoicesInvoiceRenderingOptions
	postInvoicesInvoiceRenderingOptionsInput: PostInvoicesInvoiceRenderingOptionsInput
}
enum PostInvoicesInvoiceRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings {
	ANY
	AUTOMATIC
}
input PostInvoicesInvoiceSendInput {
	expand: [String!]!
}
enum PostInvoicesInvoiceShippingCost {
	
}
input PostInvoicesInvoiceShippingCostInput {
	shippingRateData: PostInvoicesInvoiceShippingRateDataShippingCostInput!
	shippingRate: String!
}
input PostInvoicesInvoiceShippingCostUnionInput {
	postInvoicesInvoiceShippingCost: PostInvoicesInvoiceShippingCost
	postInvoicesInvoiceShippingCostInput: PostInvoicesInvoiceShippingCostInput
}
enum PostInvoicesInvoiceShippingDetails {
	
}
input PostInvoicesInvoiceShippingDetailsInput {
	phone: String!
	name: String!
	address: PostInvoicesInvoiceAddressShippingDetailsInput!
}
input PostInvoicesInvoiceShippingDetailsUnionInput {
	postInvoicesInvoiceShippingDetails: PostInvoicesInvoiceShippingDetails
	postInvoicesInvoiceShippingDetailsInput: PostInvoicesInvoiceShippingDetailsInput
}
input PostInvoicesInvoiceShippingRateDataShippingCostInput {
	type: PostInvoicesInvoiceTypeShippingRateDataShippingCost!
	taxCode: String!
	taxBehavior: PostInvoicesInvoiceTaxBehaviorShippingRateDataShippingCost!
	metadata: JSON!
	fixedAmount: PostInvoicesInvoiceFixedAmountShippingRateDataShippingCostInput!
	displayName: String!
	deliveryEstimate: PostInvoicesInvoiceDeliveryEstimateShippingRateDataShippingCostInput!
}
enum PostInvoicesInvoiceTaxBehaviorShippingRateDataShippingCost {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum PostInvoicesInvoiceTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings {
	BUSINESS
	PERSONAL
}
enum PostInvoicesInvoiceTransferData {
	
}
input PostInvoicesInvoiceTransferDataInput {
	destination: String!
	amount: Int!
}
input PostInvoicesInvoiceTransferDataUnionInput {
	postInvoicesInvoiceTransferData: PostInvoicesInvoiceTransferData
	postInvoicesInvoiceTransferDataInput: PostInvoicesInvoiceTransferDataInput
}
enum PostInvoicesInvoiceTypePlanInstallmentsCardPaymentMethodOptionsPaymentSettings {
	FIXED_COUNT
}
enum PostInvoicesInvoiceTypeShippingRateDataShippingCost {
	FIXED_AMOUNT
}
enum PostInvoicesInvoiceUnitMaximumDeliveryEstimateShippingRateDataShippingCost {
	BUSINESS_DAY
	DAY
	HOUR
	MONTH
	WEEK
}
enum PostInvoicesInvoiceUnitMinimumDeliveryEstimateShippingRateDataShippingCost {
	BUSINESS_DAY
	DAY
	HOUR
	MONTH
	WEEK
}
enum PostInvoicesInvoiceUsBankAccountPaymentMethodOptionsPaymentSettings {
	
}
input PostInvoicesInvoiceUsBankAccountPaymentMethodOptionsPaymentSettingsInput {
	verificationMethod: PostInvoicesInvoiceVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings!
	financialConnections: PostInvoicesInvoiceFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput!
}
input PostInvoicesInvoiceUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput {
	postInvoicesInvoiceUsBankAccountPaymentMethodOptionsPaymentSettings: PostInvoicesInvoiceUsBankAccountPaymentMethodOptionsPaymentSettings
	postInvoicesInvoiceUsBankAccountPaymentMethodOptionsPaymentSettingsInput: PostInvoicesInvoiceUsBankAccountPaymentMethodOptionsPaymentSettingsInput
}
enum PostInvoicesInvoiceVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum PostInvoicesInvoiceVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
input PostInvoicesInvoiceVoidInput {
	expand: [String!]!
}
input PostInvoicesMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput {
	transactionType: PostInvoicesTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings!
}
input PostInvoicesMaximumDeliveryEstimateShippingRateDataShippingCostInput {
	value: Int!
	unit: PostInvoicesUnitMaximumDeliveryEstimateShippingRateDataShippingCost!
}
input PostInvoicesMinimumDeliveryEstimateShippingRateDataShippingCostInput {
	value: Int!
	unit: PostInvoicesUnitMinimumDeliveryEstimateShippingRateDataShippingCost!
}
input PostInvoicesPaymentMethodOptionsPaymentSettingsInput {
	usBankAccount: PostInvoicesUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput!
	konbini: UnionInput!
	customerBalance: PostInvoicesCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput!
	card: PostInvoicesCardPaymentMethodOptionsPaymentSettingsUnionInput!
	bancontact: PostInvoicesBancontactPaymentMethodOptionsPaymentSettingsUnionInput!
	acssDebit: PostInvoicesAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput!
}
input PostInvoicesPaymentSettingsInput {
	paymentMethodTypes: UnionInput!
	paymentMethodOptions: PostInvoicesPaymentMethodOptionsPaymentSettingsInput!
	defaultMandate: String!
}
enum PostInvoicesPendingInvoiceItemsBehavior {
	EXCLUDE
	INCLUDE
	INCLUDE_AND_REQUIRE
}
enum PostInvoicesPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
enum PostInvoicesPlanInstallmentsCardPaymentMethodOptionsPaymentSettings {
	
}
input PostInvoicesPlanInstallmentsCardPaymentMethodOptionsPaymentSettingsInput {
	type: PostInvoicesTypePlanInstallmentsCardPaymentMethodOptionsPaymentSettings!
	interval: PostInvoicesIntervalPlanInstallmentsCardPaymentMethodOptionsPaymentSettings!
	count: Int!
}
input PostInvoicesPlanInstallmentsCardPaymentMethodOptionsPaymentSettingsUnionInput {
	postInvoicesPlanInstallmentsCardPaymentMethodOptionsPaymentSettings: PostInvoicesPlanInstallmentsCardPaymentMethodOptionsPaymentSettings
	postInvoicesPlanInstallmentsCardPaymentMethodOptionsPaymentSettingsInput: PostInvoicesPlanInstallmentsCardPaymentMethodOptionsPaymentSettingsInput
}
enum PostInvoicesPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings {
	DE
	EN
	FR
	NL
}
enum PostInvoicesRenderingOptions {
	
}
input PostInvoicesRenderingOptionsInput {
	amountTaxDisplay: PostInvoicesAmountTaxDisplayRenderingOptions!
}
input PostInvoicesRenderingOptionsUnionInput {
	postInvoicesRenderingOptions: PostInvoicesRenderingOptions
	postInvoicesRenderingOptionsInput: PostInvoicesRenderingOptionsInput
}
enum PostInvoicesRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings {
	ANY
	AUTOMATIC
}
input PostInvoicesShippingCostInput {
	shippingRateData: PostInvoicesShippingRateDataShippingCostInput!
	shippingRate: String!
}
input PostInvoicesShippingDetailsInput {
	phone: String!
	name: String!
	address: PostInvoicesAddressShippingDetailsInput!
}
input PostInvoicesShippingRateDataShippingCostInput {
	type: PostInvoicesTypeShippingRateDataShippingCost!
	taxCode: String!
	taxBehavior: PostInvoicesTaxBehaviorShippingRateDataShippingCost!
	metadata: JSON!
	fixedAmount: PostInvoicesFixedAmountShippingRateDataShippingCostInput!
	displayName: String!
	deliveryEstimate: PostInvoicesDeliveryEstimateShippingRateDataShippingCostInput!
}
enum PostInvoicesTaxBehaviorShippingRateDataShippingCost {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum PostInvoicesTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings {
	BUSINESS
	PERSONAL
}
input PostInvoicesTransferDataInput {
	destination: String!
	amount: Int!
}
enum PostInvoicesTypePlanInstallmentsCardPaymentMethodOptionsPaymentSettings {
	FIXED_COUNT
}
enum PostInvoicesTypeShippingRateDataShippingCost {
	FIXED_AMOUNT
}
enum PostInvoicesUnitMaximumDeliveryEstimateShippingRateDataShippingCost {
	BUSINESS_DAY
	DAY
	HOUR
	MONTH
	WEEK
}
enum PostInvoicesUnitMinimumDeliveryEstimateShippingRateDataShippingCost {
	BUSINESS_DAY
	DAY
	HOUR
	MONTH
	WEEK
}
enum PostInvoicesUsBankAccountPaymentMethodOptionsPaymentSettings {
	
}
input PostInvoicesUsBankAccountPaymentMethodOptionsPaymentSettingsInput {
	verificationMethod: PostInvoicesVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings!
	financialConnections: PostInvoicesFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput!
}
input PostInvoicesUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput {
	postInvoicesUsBankAccountPaymentMethodOptionsPaymentSettings: PostInvoicesUsBankAccountPaymentMethodOptionsPaymentSettings
	postInvoicesUsBankAccountPaymentMethodOptionsPaymentSettingsInput: PostInvoicesUsBankAccountPaymentMethodOptionsPaymentSettingsInput
}
enum PostInvoicesVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum PostInvoicesVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
input PostIssuingAuthorizationsAuthorizationApproveInput {
	metadata: UnionInput!
	expand: [String!]!
	amount: Int!
}
input PostIssuingAuthorizationsAuthorizationDeclineInput {
	metadata: UnionInput!
	expand: [String!]!
}
input PostIssuingAuthorizationsAuthorizationInput {
	metadata: UnionInput!
	expand: [String!]!
}
input PostIssuingCardholdersAddressBillingInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
enum PostIssuingCardholdersAllowedCategoriesSpendingControls {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
input PostIssuingCardholdersBillingInput {
	address: PostIssuingCardholdersAddressBillingInput!
}
enum PostIssuingCardholdersBlockedCategoriesSpendingControls {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
input PostIssuingCardholdersCardholderAddressBillingInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
enum PostIssuingCardholdersCardholderAllowedCategoriesSpendingControls {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
input PostIssuingCardholdersCardholderBillingInput {
	address: PostIssuingCardholdersCardholderAddressBillingInput!
}
enum PostIssuingCardholdersCardholderBlockedCategoriesSpendingControls {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
enum PostIssuingCardholdersCardholderCategoriesSpendingLimitsSpendingControls {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
input PostIssuingCardholdersCardholderCompanyInput {
	taxId: String!
}
input PostIssuingCardholdersCardholderDobIndividualInput {
	year: Int!
	month: Int!
	day: Int!
}
input PostIssuingCardholdersCardholderDocumentVerificationIndividualInput {
	front: String!
	back: String!
}
input PostIssuingCardholdersCardholderIndividualInput {
	verification: PostIssuingCardholdersCardholderVerificationIndividualInput!
	lastName: String!
	firstName: String!
	dob: PostIssuingCardholdersCardholderDobIndividualInput!
}
input PostIssuingCardholdersCardholderInput {
	status: PostIssuingCardholdersCardholderStatus!
	spendingControls: PostIssuingCardholdersCardholderSpendingControlsInput!
	phoneNumber: String!
	metadata: JSON!
	individual: PostIssuingCardholdersCardholderIndividualInput!
	expand: [String!]!
	email: String!
	company: PostIssuingCardholdersCardholderCompanyInput!
	billing: PostIssuingCardholdersCardholderBillingInput!
}
enum PostIssuingCardholdersCardholderIntervalSpendingLimitsSpendingControls {
	ALL_TIME
	DAILY
	MONTHLY
	PER_AUTHORIZATION
	WEEKLY
	YEARLY
}
input PostIssuingCardholdersCardholderSpendingControlsInput {
	spendingLimitsCurrency: String!
	spendingLimits: [PostIssuingCardholdersCardholderSpendingLimitsSpendingControlsInput!]!
	blockedCategories: [PostIssuingCardholdersCardholderBlockedCategoriesSpendingControls!]!
	allowedCategories: [PostIssuingCardholdersCardholderAllowedCategoriesSpendingControls!]!
}
input PostIssuingCardholdersCardholderSpendingLimitsSpendingControlsInput {
	interval: PostIssuingCardholdersCardholderIntervalSpendingLimitsSpendingControls!
	categories: [PostIssuingCardholdersCardholderCategoriesSpendingLimitsSpendingControls!]!
	amount: Int!
}
enum PostIssuingCardholdersCardholderStatus {
	ACTIVE
	INACTIVE
}
input PostIssuingCardholdersCardholderVerificationIndividualInput {
	document: PostIssuingCardholdersCardholderDocumentVerificationIndividualInput!
}
enum PostIssuingCardholdersCategoriesSpendingLimitsSpendingControls {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
input PostIssuingCardholdersCompanyInput {
	taxId: String!
}
input PostIssuingCardholdersDobIndividualInput {
	year: Int!
	month: Int!
	day: Int!
}
input PostIssuingCardholdersDocumentVerificationIndividualInput {
	front: String!
	back: String!
}
input PostIssuingCardholdersIndividualInput {
	verification: PostIssuingCardholdersVerificationIndividualInput!
	lastName: String!
	firstName: String!
	dob: PostIssuingCardholdersDobIndividualInput!
}
input PostIssuingCardholdersInput {
	type: PostIssuingCardholdersType!
	status: PostIssuingCardholdersStatus!
	spendingControls: PostIssuingCardholdersSpendingControlsInput!
	phoneNumber: String!
	name: String!
	metadata: JSON!
	individual: PostIssuingCardholdersIndividualInput!
	expand: [String!]!
	email: String!
	company: PostIssuingCardholdersCompanyInput!
	billing: PostIssuingCardholdersBillingInput!
}
enum PostIssuingCardholdersIntervalSpendingLimitsSpendingControls {
	ALL_TIME
	DAILY
	MONTHLY
	PER_AUTHORIZATION
	WEEKLY
	YEARLY
}
input PostIssuingCardholdersSpendingControlsInput {
	spendingLimitsCurrency: String!
	spendingLimits: [PostIssuingCardholdersSpendingLimitsSpendingControlsInput!]!
	blockedCategories: [PostIssuingCardholdersBlockedCategoriesSpendingControls!]!
	allowedCategories: [PostIssuingCardholdersAllowedCategoriesSpendingControls!]!
}
input PostIssuingCardholdersSpendingLimitsSpendingControlsInput {
	interval: PostIssuingCardholdersIntervalSpendingLimitsSpendingControls!
	categories: [PostIssuingCardholdersCategoriesSpendingLimitsSpendingControls!]!
	amount: Int!
}
enum PostIssuingCardholdersStatus {
	ACTIVE
	INACTIVE
}
enum PostIssuingCardholdersType {
	COMPANY
	INDIVIDUAL
}
input PostIssuingCardholdersVerificationIndividualInput {
	document: PostIssuingCardholdersDocumentVerificationIndividualInput!
}
input PostIssuingCardsAddressShippingInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
enum PostIssuingCardsAllowedCategoriesSpendingControls {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
enum PostIssuingCardsBlockedCategoriesSpendingControls {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
enum PostIssuingCardsCardAllowedCategoriesSpendingControls {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
enum PostIssuingCardsCardBlockedCategoriesSpendingControls {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
enum PostIssuingCardsCardCancellationReason {
	LOST
	STOLEN
}
enum PostIssuingCardsCardCategoriesSpendingLimitsSpendingControls {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
input PostIssuingCardsCardInput {
	status: PostIssuingCardsCardStatus!
	spendingControls: PostIssuingCardsCardSpendingControlsInput!
	pin: PostIssuingCardsCardPinInput!
	metadata: UnionInput!
	expand: [String!]!
	cancellationReason: PostIssuingCardsCardCancellationReason!
}
enum PostIssuingCardsCardIntervalSpendingLimitsSpendingControls {
	ALL_TIME
	DAILY
	MONTHLY
	PER_AUTHORIZATION
	WEEKLY
	YEARLY
}
input PostIssuingCardsCardPinInput {
	encryptedNumber: String!
}
input PostIssuingCardsCardSpendingControlsInput {
	spendingLimits: [PostIssuingCardsCardSpendingLimitsSpendingControlsInput!]!
	blockedCategories: [PostIssuingCardsCardBlockedCategoriesSpendingControls!]!
	allowedCategories: [PostIssuingCardsCardAllowedCategoriesSpendingControls!]!
}
input PostIssuingCardsCardSpendingLimitsSpendingControlsInput {
	interval: PostIssuingCardsCardIntervalSpendingLimitsSpendingControls!
	categories: [PostIssuingCardsCardCategoriesSpendingLimitsSpendingControls!]!
	amount: Int!
}
enum PostIssuingCardsCardStatus {
	ACTIVE
	CANCELED
	INACTIVE
}
enum PostIssuingCardsCategoriesSpendingLimitsSpendingControls {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
input PostIssuingCardsCustomsShippingInput {
	eoriNumber: String!
}
input PostIssuingCardsInput {
	type: PostIssuingCardsType!
	status: PostIssuingCardsStatus!
	spendingControls: PostIssuingCardsSpendingControlsInput!
	shipping: PostIssuingCardsShippingInput!
	replacementReason: PostIssuingCardsReplacementReason!
	replacementFor: String!
	metadata: JSON!
	financialAccount: String!
	expand: [String!]!
	currency: String!
	cardholder: String!
}
enum PostIssuingCardsIntervalSpendingLimitsSpendingControls {
	ALL_TIME
	DAILY
	MONTHLY
	PER_AUTHORIZATION
	WEEKLY
	YEARLY
}
enum PostIssuingCardsReplacementReason {
	DAMAGED
	EXPIRED
	LOST
	STOLEN
}
enum PostIssuingCardsServiceShipping {
	EXPRESS
	PRIORITY
	STANDARD
}
input PostIssuingCardsShippingInput {
	type: PostIssuingCardsTypeShipping!
	service: PostIssuingCardsServiceShipping!
	requireSignature: Boolean!
	phoneNumber: String!
	name: String!
	customs: PostIssuingCardsCustomsShippingInput!
	address: PostIssuingCardsAddressShippingInput!
}
input PostIssuingCardsSpendingControlsInput {
	spendingLimits: [PostIssuingCardsSpendingLimitsSpendingControlsInput!]!
	blockedCategories: [PostIssuingCardsBlockedCategoriesSpendingControls!]!
	allowedCategories: [PostIssuingCardsAllowedCategoriesSpendingControls!]!
}
input PostIssuingCardsSpendingLimitsSpendingControlsInput {
	interval: PostIssuingCardsIntervalSpendingLimitsSpendingControls!
	categories: [PostIssuingCardsCategoriesSpendingLimitsSpendingControls!]!
	amount: Int!
}
enum PostIssuingCardsStatus {
	ACTIVE
	INACTIVE
}
enum PostIssuingCardsType {
	PHYSICAL
	VIRTUAL
}
enum PostIssuingCardsTypeShipping {
	BULK
	INDIVIDUAL
}
enum PostIssuingDisputesCanceledEvidence {
	
}
input PostIssuingDisputesCanceledEvidenceInput {
	returnedAt: UnionInput!
	returnStatus: PostIssuingDisputesReturnStatusCanceledEvidence!
	productType: PostIssuingDisputesProductTypeCanceledEvidence!
	productDescription: String!
	explanation: String!
	expectedAt: UnionInput!
	cancellationReason: String!
	cancellationPolicyProvided: UnionInput!
	canceledAt: UnionInput!
	additionalDocumentation: UnionInput!
}
input PostIssuingDisputesCanceledEvidenceUnionInput {
	postIssuingDisputesCanceledEvidence: PostIssuingDisputesCanceledEvidence
	postIssuingDisputesCanceledEvidenceInput: PostIssuingDisputesCanceledEvidenceInput
}
enum PostIssuingDisputesDisputeCanceledEvidence {
	
}
input PostIssuingDisputesDisputeCanceledEvidenceInput {
	returnedAt: UnionInput!
	returnStatus: PostIssuingDisputesDisputeReturnStatusCanceledEvidence!
	productType: PostIssuingDisputesDisputeProductTypeCanceledEvidence!
	productDescription: String!
	explanation: String!
	expectedAt: UnionInput!
	cancellationReason: String!
	cancellationPolicyProvided: UnionInput!
	canceledAt: UnionInput!
	additionalDocumentation: UnionInput!
}
input PostIssuingDisputesDisputeCanceledEvidenceUnionInput {
	postIssuingDisputesDisputeCanceledEvidence: PostIssuingDisputesDisputeCanceledEvidence
	postIssuingDisputesDisputeCanceledEvidenceInput: PostIssuingDisputesDisputeCanceledEvidenceInput
}
enum PostIssuingDisputesDisputeDuplicateEvidence {
	
}
input PostIssuingDisputesDisputeDuplicateEvidenceInput {
	originalTransaction: String!
	explanation: String!
	checkImage: UnionInput!
	cashReceipt: UnionInput!
	cardStatement: UnionInput!
	additionalDocumentation: UnionInput!
}
input PostIssuingDisputesDisputeDuplicateEvidenceUnionInput {
	postIssuingDisputesDisputeDuplicateEvidence: PostIssuingDisputesDisputeDuplicateEvidence
	postIssuingDisputesDisputeDuplicateEvidenceInput: PostIssuingDisputesDisputeDuplicateEvidenceInput
}
input PostIssuingDisputesDisputeEvidenceInput {
	serviceNotAsDescribed: PostIssuingDisputesDisputeServiceNotAsDescribedEvidenceUnionInput!
	reason: PostIssuingDisputesDisputeReasonEvidence!
	other: PostIssuingDisputesDisputeOtherEvidenceUnionInput!
	notReceived: PostIssuingDisputesDisputeNotReceivedEvidenceUnionInput!
	merchandiseNotAsDescribed: PostIssuingDisputesDisputeMerchandiseNotAsDescribedEvidenceUnionInput!
	fraudulent: PostIssuingDisputesDisputeFraudulentEvidenceUnionInput!
	duplicate: PostIssuingDisputesDisputeDuplicateEvidenceUnionInput!
	canceled: PostIssuingDisputesDisputeCanceledEvidenceUnionInput!
}
enum PostIssuingDisputesDisputeFraudulentEvidence {
	
}
input PostIssuingDisputesDisputeFraudulentEvidenceInput {
	explanation: String!
	additionalDocumentation: UnionInput!
}
input PostIssuingDisputesDisputeFraudulentEvidenceUnionInput {
	postIssuingDisputesDisputeFraudulentEvidence: PostIssuingDisputesDisputeFraudulentEvidence
	postIssuingDisputesDisputeFraudulentEvidenceInput: PostIssuingDisputesDisputeFraudulentEvidenceInput
}
input PostIssuingDisputesDisputeInput {
	metadata: UnionInput!
	expand: [String!]!
	evidence: PostIssuingDisputesDisputeEvidenceInput!
	amount: Int!
}
enum PostIssuingDisputesDisputeMerchandiseNotAsDescribedEvidence {
	
}
input PostIssuingDisputesDisputeMerchandiseNotAsDescribedEvidenceInput {
	returnedAt: UnionInput!
	returnStatus: PostIssuingDisputesDisputeReturnStatusMerchandiseNotAsDescribedEvidence!
	returnDescription: String!
	receivedAt: UnionInput!
	explanation: String!
	additionalDocumentation: UnionInput!
}
input PostIssuingDisputesDisputeMerchandiseNotAsDescribedEvidenceUnionInput {
	postIssuingDisputesDisputeMerchandiseNotAsDescribedEvidence: PostIssuingDisputesDisputeMerchandiseNotAsDescribedEvidence
	postIssuingDisputesDisputeMerchandiseNotAsDescribedEvidenceInput: PostIssuingDisputesDisputeMerchandiseNotAsDescribedEvidenceInput
}
enum PostIssuingDisputesDisputeNotReceivedEvidence {
	
}
input PostIssuingDisputesDisputeNotReceivedEvidenceInput {
	productType: PostIssuingDisputesDisputeProductTypeNotReceivedEvidence!
	productDescription: String!
	explanation: String!
	expectedAt: UnionInput!
	additionalDocumentation: UnionInput!
}
input PostIssuingDisputesDisputeNotReceivedEvidenceUnionInput {
	postIssuingDisputesDisputeNotReceivedEvidence: PostIssuingDisputesDisputeNotReceivedEvidence
	postIssuingDisputesDisputeNotReceivedEvidenceInput: PostIssuingDisputesDisputeNotReceivedEvidenceInput
}
enum PostIssuingDisputesDisputeOtherEvidence {
	
}
input PostIssuingDisputesDisputeOtherEvidenceInput {
	productType: PostIssuingDisputesDisputeProductTypeOtherEvidence!
	productDescription: String!
	explanation: String!
	additionalDocumentation: UnionInput!
}
input PostIssuingDisputesDisputeOtherEvidenceUnionInput {
	postIssuingDisputesDisputeOtherEvidence: PostIssuingDisputesDisputeOtherEvidence
	postIssuingDisputesDisputeOtherEvidenceInput: PostIssuingDisputesDisputeOtherEvidenceInput
}
enum PostIssuingDisputesDisputeProductTypeCanceledEvidence {
	
	MERCHANDISE
	SERVICE
}
enum PostIssuingDisputesDisputeProductTypeNotReceivedEvidence {
	
	MERCHANDISE
	SERVICE
}
enum PostIssuingDisputesDisputeProductTypeOtherEvidence {
	
	MERCHANDISE
	SERVICE
}
enum PostIssuingDisputesDisputeReasonEvidence {
	CANCELED
	DUPLICATE
	FRAUDULENT
	MERCHANDISE_NOT_AS_DESCRIBED
	NOT_RECEIVED
	OTHER
	SERVICE_NOT_AS_DESCRIBED
}
enum PostIssuingDisputesDisputeReturnStatusCanceledEvidence {
	
	MERCHANT_REJECTED
	SUCCESSFUL
}
enum PostIssuingDisputesDisputeReturnStatusMerchandiseNotAsDescribedEvidence {
	
	MERCHANT_REJECTED
	SUCCESSFUL
}
enum PostIssuingDisputesDisputeServiceNotAsDescribedEvidence {
	
}
input PostIssuingDisputesDisputeServiceNotAsDescribedEvidenceInput {
	receivedAt: UnionInput!
	explanation: String!
	cancellationReason: String!
	canceledAt: UnionInput!
	additionalDocumentation: UnionInput!
}
input PostIssuingDisputesDisputeServiceNotAsDescribedEvidenceUnionInput {
	postIssuingDisputesDisputeServiceNotAsDescribedEvidence: PostIssuingDisputesDisputeServiceNotAsDescribedEvidence
	postIssuingDisputesDisputeServiceNotAsDescribedEvidenceInput: PostIssuingDisputesDisputeServiceNotAsDescribedEvidenceInput
}
input PostIssuingDisputesDisputeSubmitInput {
	metadata: UnionInput!
	expand: [String!]!
}
enum PostIssuingDisputesDuplicateEvidence {
	
}
input PostIssuingDisputesDuplicateEvidenceInput {
	originalTransaction: String!
	explanation: String!
	checkImage: UnionInput!
	cashReceipt: UnionInput!
	cardStatement: UnionInput!
	additionalDocumentation: UnionInput!
}
input PostIssuingDisputesDuplicateEvidenceUnionInput {
	postIssuingDisputesDuplicateEvidence: PostIssuingDisputesDuplicateEvidence
	postIssuingDisputesDuplicateEvidenceInput: PostIssuingDisputesDuplicateEvidenceInput
}
input PostIssuingDisputesEvidenceInput {
	serviceNotAsDescribed: PostIssuingDisputesServiceNotAsDescribedEvidenceUnionInput!
	reason: PostIssuingDisputesReasonEvidence!
	other: PostIssuingDisputesOtherEvidenceUnionInput!
	notReceived: PostIssuingDisputesNotReceivedEvidenceUnionInput!
	merchandiseNotAsDescribed: PostIssuingDisputesMerchandiseNotAsDescribedEvidenceUnionInput!
	fraudulent: PostIssuingDisputesFraudulentEvidenceUnionInput!
	duplicate: PostIssuingDisputesDuplicateEvidenceUnionInput!
	canceled: PostIssuingDisputesCanceledEvidenceUnionInput!
}
enum PostIssuingDisputesFraudulentEvidence {
	
}
input PostIssuingDisputesFraudulentEvidenceInput {
	explanation: String!
	additionalDocumentation: UnionInput!
}
input PostIssuingDisputesFraudulentEvidenceUnionInput {
	postIssuingDisputesFraudulentEvidence: PostIssuingDisputesFraudulentEvidence
	postIssuingDisputesFraudulentEvidenceInput: PostIssuingDisputesFraudulentEvidenceInput
}
input PostIssuingDisputesInput {
	treasury: PostIssuingDisputesTreasuryInput!
	transaction: String!
	metadata: JSON!
	expand: [String!]!
	evidence: PostIssuingDisputesEvidenceInput!
	amount: Int!
}
enum PostIssuingDisputesMerchandiseNotAsDescribedEvidence {
	
}
input PostIssuingDisputesMerchandiseNotAsDescribedEvidenceInput {
	returnedAt: UnionInput!
	returnStatus: PostIssuingDisputesReturnStatusMerchandiseNotAsDescribedEvidence!
	returnDescription: String!
	receivedAt: UnionInput!
	explanation: String!
	additionalDocumentation: UnionInput!
}
input PostIssuingDisputesMerchandiseNotAsDescribedEvidenceUnionInput {
	postIssuingDisputesMerchandiseNotAsDescribedEvidence: PostIssuingDisputesMerchandiseNotAsDescribedEvidence
	postIssuingDisputesMerchandiseNotAsDescribedEvidenceInput: PostIssuingDisputesMerchandiseNotAsDescribedEvidenceInput
}
enum PostIssuingDisputesNotReceivedEvidence {
	
}
input PostIssuingDisputesNotReceivedEvidenceInput {
	productType: PostIssuingDisputesProductTypeNotReceivedEvidence!
	productDescription: String!
	explanation: String!
	expectedAt: UnionInput!
	additionalDocumentation: UnionInput!
}
input PostIssuingDisputesNotReceivedEvidenceUnionInput {
	postIssuingDisputesNotReceivedEvidence: PostIssuingDisputesNotReceivedEvidence
	postIssuingDisputesNotReceivedEvidenceInput: PostIssuingDisputesNotReceivedEvidenceInput
}
enum PostIssuingDisputesOtherEvidence {
	
}
input PostIssuingDisputesOtherEvidenceInput {
	productType: PostIssuingDisputesProductTypeOtherEvidence!
	productDescription: String!
	explanation: String!
	additionalDocumentation: UnionInput!
}
input PostIssuingDisputesOtherEvidenceUnionInput {
	postIssuingDisputesOtherEvidence: PostIssuingDisputesOtherEvidence
	postIssuingDisputesOtherEvidenceInput: PostIssuingDisputesOtherEvidenceInput
}
enum PostIssuingDisputesProductTypeCanceledEvidence {
	
	MERCHANDISE
	SERVICE
}
enum PostIssuingDisputesProductTypeNotReceivedEvidence {
	
	MERCHANDISE
	SERVICE
}
enum PostIssuingDisputesProductTypeOtherEvidence {
	
	MERCHANDISE
	SERVICE
}
enum PostIssuingDisputesReasonEvidence {
	CANCELED
	DUPLICATE
	FRAUDULENT
	MERCHANDISE_NOT_AS_DESCRIBED
	NOT_RECEIVED
	OTHER
	SERVICE_NOT_AS_DESCRIBED
}
enum PostIssuingDisputesReturnStatusCanceledEvidence {
	
	MERCHANT_REJECTED
	SUCCESSFUL
}
enum PostIssuingDisputesReturnStatusMerchandiseNotAsDescribedEvidence {
	
	MERCHANT_REJECTED
	SUCCESSFUL
}
enum PostIssuingDisputesServiceNotAsDescribedEvidence {
	
}
input PostIssuingDisputesServiceNotAsDescribedEvidenceInput {
	receivedAt: UnionInput!
	explanation: String!
	cancellationReason: String!
	canceledAt: UnionInput!
	additionalDocumentation: UnionInput!
}
input PostIssuingDisputesServiceNotAsDescribedEvidenceUnionInput {
	postIssuingDisputesServiceNotAsDescribedEvidence: PostIssuingDisputesServiceNotAsDescribedEvidence
	postIssuingDisputesServiceNotAsDescribedEvidenceInput: PostIssuingDisputesServiceNotAsDescribedEvidenceInput
}
input PostIssuingDisputesTreasuryInput {
	receivedDebit: String!
}
input PostIssuingSettlementsSettlementInput {
	metadata: JSON!
	expand: [String!]!
}
input PostIssuingTransactionsTransactionInput {
	metadata: UnionInput!
	expand: [String!]!
}
input PostLinkAccountSessionsAccountHolderInput {
	type: PostLinkAccountSessionsTypeAccountHolder!
	customer: String!
	account: String!
}
input PostLinkAccountSessionsFiltersInput {
	countries: [String!]!
}
input PostLinkAccountSessionsInput {
	returnUrl: String!
	permissions: [PostLinkAccountSessionsPermissions!]!
	filters: PostLinkAccountSessionsFiltersInput!
	expand: [String!]!
	accountHolder: PostLinkAccountSessionsAccountHolderInput!
}
enum PostLinkAccountSessionsPermissions {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
enum PostLinkAccountSessionsTypeAccountHolder {
	ACCOUNT
	CUSTOMER
}
input PostLinkedAccountsAccountDisconnectInput {
	expand: [String!]!
}
enum PostLinkedAccountsAccountRefreshFeatures {
	BALANCE
	OWNERSHIP
}
input PostLinkedAccountsAccountRefreshInput {
	features: [PostLinkedAccountsAccountRefreshFeatures!]!
	expand: [String!]!
}
enum PostPaymentIntentsAccountHolderTypeUsBankAccountPaymentMethodData {
	COMPANY
	INDIVIDUAL
}
enum PostPaymentIntentsAccountTypeUsBankAccountPaymentMethodData {
	CHECKING
	SAVINGS
}
input PostPaymentIntentsAcssDebitPaymentMethodDataInput {
	transitNumber: String!
	institutionNumber: String!
	accountNumber: String!
}
enum PostPaymentIntentsAcssDebitPaymentMethodOptions {
	
}
input PostPaymentIntentsAcssDebitPaymentMethodOptionsInput {
	verificationMethod: PostPaymentIntentsVerificationMethodAcssDebitPaymentMethodOptions!
	setupFutureUsage: PostPaymentIntentsSetupFutureUsageAcssDebitPaymentMethodOptions!
	mandateOptions: PostPaymentIntentsMandateOptionsAcssDebitPaymentMethodOptionsInput!
}
input PostPaymentIntentsAcssDebitPaymentMethodOptionsUnionInput {
	postPaymentIntentsAcssDebitPaymentMethodOptions: PostPaymentIntentsAcssDebitPaymentMethodOptions
	postPaymentIntentsAcssDebitPaymentMethodOptionsInput: PostPaymentIntentsAcssDebitPaymentMethodOptionsInput
}
enum PostPaymentIntentsAddressBillingDetailsPaymentMethodData {
	
}
input PostPaymentIntentsAddressBillingDetailsPaymentMethodDataInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostPaymentIntentsAddressBillingDetailsPaymentMethodDataUnionInput {
	postPaymentIntentsAddressBillingDetailsPaymentMethodData: PostPaymentIntentsAddressBillingDetailsPaymentMethodData
	postPaymentIntentsAddressBillingDetailsPaymentMethodDataInput: PostPaymentIntentsAddressBillingDetailsPaymentMethodDataInput
}
input PostPaymentIntentsAddressShippingInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
enum PostPaymentIntentsAffirmPaymentMethodOptions {
	
}
input PostPaymentIntentsAffirmPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsSetupFutureUsageAffirmPaymentMethodOptions!
	captureMethod: PostPaymentIntentsCaptureMethodAffirmPaymentMethodOptions!
}
input PostPaymentIntentsAffirmPaymentMethodOptionsUnionInput {
	postPaymentIntentsAffirmPaymentMethodOptions: PostPaymentIntentsAffirmPaymentMethodOptions
	postPaymentIntentsAffirmPaymentMethodOptionsInput: PostPaymentIntentsAffirmPaymentMethodOptionsInput
}
enum PostPaymentIntentsAfterpayClearpayPaymentMethodOptions {
	
}
input PostPaymentIntentsAfterpayClearpayPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsSetupFutureUsageAfterpayClearpayPaymentMethodOptions!
	reference: String!
	captureMethod: PostPaymentIntentsCaptureMethodAfterpayClearpayPaymentMethodOptions!
}
input PostPaymentIntentsAfterpayClearpayPaymentMethodOptionsUnionInput {
	postPaymentIntentsAfterpayClearpayPaymentMethodOptions: PostPaymentIntentsAfterpayClearpayPaymentMethodOptions
	postPaymentIntentsAfterpayClearpayPaymentMethodOptionsInput: PostPaymentIntentsAfterpayClearpayPaymentMethodOptionsInput
}
enum PostPaymentIntentsAlipayPaymentMethodOptions {
	
}
input PostPaymentIntentsAlipayPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsSetupFutureUsageAlipayPaymentMethodOptions!
}
input PostPaymentIntentsAlipayPaymentMethodOptionsUnionInput {
	postPaymentIntentsAlipayPaymentMethodOptions: PostPaymentIntentsAlipayPaymentMethodOptions
	postPaymentIntentsAlipayPaymentMethodOptionsInput: PostPaymentIntentsAlipayPaymentMethodOptionsInput
}
enum PostPaymentIntentsAmountTypeMandateOptionsCardPaymentMethodOptions {
	FIXED
	MAXIMUM
}
input PostPaymentIntentsAuBecsDebitPaymentMethodDataInput {
	bsbNumber: String!
	accountNumber: String!
}
enum PostPaymentIntentsAuBecsDebitPaymentMethodOptions {
	
}
input PostPaymentIntentsAuBecsDebitPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsSetupFutureUsageAuBecsDebitPaymentMethodOptions!
}
input PostPaymentIntentsAuBecsDebitPaymentMethodOptionsUnionInput {
	postPaymentIntentsAuBecsDebitPaymentMethodOptions: PostPaymentIntentsAuBecsDebitPaymentMethodOptions
	postPaymentIntentsAuBecsDebitPaymentMethodOptionsInput: PostPaymentIntentsAuBecsDebitPaymentMethodOptionsInput
}
input PostPaymentIntentsAutomaticPaymentMethodsInput {
	enabled: Boolean!
}
input PostPaymentIntentsBacsDebitPaymentMethodDataInput {
	sortCode: String!
	accountNumber: String!
}
enum PostPaymentIntentsBacsDebitPaymentMethodOptions {
	
}
input PostPaymentIntentsBacsDebitPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsSetupFutureUsageBacsDebitPaymentMethodOptions!
}
input PostPaymentIntentsBacsDebitPaymentMethodOptionsUnionInput {
	postPaymentIntentsBacsDebitPaymentMethodOptions: PostPaymentIntentsBacsDebitPaymentMethodOptions
	postPaymentIntentsBacsDebitPaymentMethodOptionsInput: PostPaymentIntentsBacsDebitPaymentMethodOptionsInput
}
enum PostPaymentIntentsBancontactPaymentMethodOptions {
	
}
input PostPaymentIntentsBancontactPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsSetupFutureUsageBancontactPaymentMethodOptions!
	preferredLanguage: PostPaymentIntentsPreferredLanguageBancontactPaymentMethodOptions!
}
input PostPaymentIntentsBancontactPaymentMethodOptionsUnionInput {
	postPaymentIntentsBancontactPaymentMethodOptions: PostPaymentIntentsBancontactPaymentMethodOptions
	postPaymentIntentsBancontactPaymentMethodOptionsInput: PostPaymentIntentsBancontactPaymentMethodOptionsInput
}
enum PostPaymentIntentsBankEpsPaymentMethodData {
	ARZTE_UND_APOTHEKER_BANK
	AUSTRIAN_ANADI_BANK_AG
	BANK_AUSTRIA
	BANKHAUS_CARL_SPANGLER
	BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG
	BAWAG_PSK_AG
	BKS_BANK_AG
	BRULL_KALLMUS_BANK_AG
	BTV_VIER_LANDER_BANK
	CAPITAL_BANK_GRAWE_GRUPPE_AG
	DEUTSCHE_BANK_AG
	DOLOMITENBANK
	EASYBANK_AG
	ERSTE_BANK_UND_SPARKASSEN
	HYPO_ALPEADRIABANK_INTERNATIONAL_AG
	HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT
	HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN
	HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK
	HYPO_TIROL_BANK_AG
	HYPO_VORARLBERG_BANK_AG
	MARCHFELDER_BANK
	OBERBANK_AG
	RAIFFEISEN_BANKENGRUPPE_OSTERREICH
	SCHOELLERBANK_AG
	SPARDA_BANK_WIEN
	VOLKSBANK_GRUPPE
	VOLKSKREDITBANK_AG
	VR_BANK_BRAUNAU
}
enum PostPaymentIntentsBankFpxPaymentMethodData {
	AFFIN_BANK
	AGROBANK
	ALLIANCE_BANK
	AMBANK
	BANK_ISLAM
	BANK_MUAMALAT
	BANK_OF_CHINA
	BANK_RAKYAT
	BSN
	CIMB
	DEUTSCHE_BANK
	HONG_LEONG_BANK
	HSBC
	KFH
	MAYBANK_2E
	MAYBANK_2U
	OCBC
	PB_ENTERPRISE
	PUBLIC_BANK
	RHB
	STANDARD_CHARTERED
	UOB
}
enum PostPaymentIntentsBankIdealPaymentMethodData {
	ABN_AMRO
	ASN_BANK
	BUNQ
	HANDELSBANKEN
	ING
	KNAB
	MONEYOU
	RABOBANK
	REGIOBANK
	REVOLUT
	SNS_BANK
	TRIODOS_BANK
	VAN_LANSCHOT
}
enum PostPaymentIntentsBankP24PaymentMethodData {
	ALIOR_BANK
	BANK_MILLENNIUM
	BANK_NOWY_BFG_SA
	BANK_PEKAO_SA
	BANKI_SPBDZIELCZE
	BLIK
	BNP_PARIBAS
	BOZ
	CITI_HANDLOWY
	CREDIT_AGRICOLE
	ENVELOBANK
	ETRANSFER_POCZTOWY_24
	GETIN_BANK
	IDEABANK
	ING
	INTELIGO
	MBANK_MTRANSFER
	NEST_PRZELEW
	NOBLE_PAY
	PBAC_Z_IPKO
	PLUS_BANK
	SANTANDER_PRZELEW_24
	TMOBILE_USBUGI_BANKOWE
	TOYOTA_BANK
	VOLKSWAGEN_BANK
}
input PostPaymentIntentsBankTransferCustomerBalancePaymentMethodOptionsInput {
	type: PostPaymentIntentsTypeBankTransferCustomerBalancePaymentMethodOptions!
	requestedAddressTypes: [PostPaymentIntentsRequestedAddressTypesBankTransferCustomerBalancePaymentMethodOptions!]!
	euBankTransfer: PostPaymentIntentsEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsInput!
}
input PostPaymentIntentsBillingDetailsPaymentMethodDataInput {
	phone: String!
	name: String!
	email: UnionInput!
	address: PostPaymentIntentsAddressBillingDetailsPaymentMethodDataUnionInput!
}
enum PostPaymentIntentsBlikPaymentMethodOptions {
	
}
input PostPaymentIntentsBlikPaymentMethodOptionsInput {
	code: String!
}
input PostPaymentIntentsBlikPaymentMethodOptionsUnionInput {
	postPaymentIntentsBlikPaymentMethodOptions: PostPaymentIntentsBlikPaymentMethodOptions
	postPaymentIntentsBlikPaymentMethodOptionsInput: PostPaymentIntentsBlikPaymentMethodOptionsInput
}
input PostPaymentIntentsBoletoPaymentMethodDataInput {
	taxId: String!
}
enum PostPaymentIntentsBoletoPaymentMethodOptions {
	
}
input PostPaymentIntentsBoletoPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsSetupFutureUsageBoletoPaymentMethodOptions!
	expiresAfterDays: Int!
}
input PostPaymentIntentsBoletoPaymentMethodOptionsUnionInput {
	postPaymentIntentsBoletoPaymentMethodOptions: PostPaymentIntentsBoletoPaymentMethodOptions
	postPaymentIntentsBoletoPaymentMethodOptionsInput: PostPaymentIntentsBoletoPaymentMethodOptionsInput
}
enum PostPaymentIntentsCaptureMethod {
	AUTOMATIC
	MANUAL
}
enum PostPaymentIntentsCaptureMethodAffirmPaymentMethodOptions {
	
	MANUAL
}
enum PostPaymentIntentsCaptureMethodAfterpayClearpayPaymentMethodOptions {
	
	MANUAL
}
enum PostPaymentIntentsCaptureMethodCardPaymentMethodOptions {
	
	MANUAL
}
enum PostPaymentIntentsCaptureMethodKlarnaPaymentMethodOptions {
	
	MANUAL
}
enum PostPaymentIntentsCaptureMethodLinkPaymentMethodOptions {
	
	MANUAL
}
enum PostPaymentIntentsCardPaymentMethodOptions {
	
}
input PostPaymentIntentsCardPaymentMethodOptionsInput {
	statementDescriptorSuffixKanji: UnionInput!
	statementDescriptorSuffixKana: UnionInput!
	setupFutureUsage: PostPaymentIntentsSetupFutureUsageCardPaymentMethodOptions!
	requestThreeDSecure: PostPaymentIntentsRequestThreeDSecureCardPaymentMethodOptions!
	network: PostPaymentIntentsNetworkCardPaymentMethodOptions!
	mandateOptions: PostPaymentIntentsMandateOptionsCardPaymentMethodOptionsInput!
	installments: PostPaymentIntentsInstallmentsCardPaymentMethodOptionsInput!
	cvcToken: String!
	captureMethod: PostPaymentIntentsCaptureMethodCardPaymentMethodOptions!
}
input PostPaymentIntentsCardPaymentMethodOptionsUnionInput {
	postPaymentIntentsCardPaymentMethodOptions: PostPaymentIntentsCardPaymentMethodOptions
	postPaymentIntentsCardPaymentMethodOptionsInput: PostPaymentIntentsCardPaymentMethodOptionsInput
}
enum PostPaymentIntentsCardPresentPaymentMethodOptions {
	
}
input PostPaymentIntentsCardPresentPaymentMethodOptionsInput {
	requestIncrementalAuthorizationSupport: Boolean!
	requestExtendedAuthorization: Boolean!
}
input PostPaymentIntentsCardPresentPaymentMethodOptionsUnionInput {
	postPaymentIntentsCardPresentPaymentMethodOptions: PostPaymentIntentsCardPresentPaymentMethodOptions
	postPaymentIntentsCardPresentPaymentMethodOptionsInput: PostPaymentIntentsCardPresentPaymentMethodOptionsInput
}
enum PostPaymentIntentsClientWechatPayPaymentMethodOptions {
	ANDROID
	IOS
	WEB
}
enum PostPaymentIntentsConfirmationMethod {
	AUTOMATIC
	MANUAL
}
enum PostPaymentIntentsCountrySofortPaymentMethodData {
	AT
	BE
	DE
	ES
	IT
	NL
}
input PostPaymentIntentsCustomerAcceptanceMandateDataInput {
	type: PostPaymentIntentsTypeCustomerAcceptanceMandateData!
	online: PostPaymentIntentsOnlineCustomerAcceptanceMandateDataInput!
	offline: JSON!
	acceptedAt: Int!
}
enum PostPaymentIntentsCustomerBalancePaymentMethodOptions {
	
}
input PostPaymentIntentsCustomerBalancePaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsSetupFutureUsageCustomerBalancePaymentMethodOptions!
	fundingType: PostPaymentIntentsFundingTypeCustomerBalancePaymentMethodOptions!
	bankTransfer: PostPaymentIntentsBankTransferCustomerBalancePaymentMethodOptionsInput!
}
input PostPaymentIntentsCustomerBalancePaymentMethodOptionsUnionInput {
	postPaymentIntentsCustomerBalancePaymentMethodOptions: PostPaymentIntentsCustomerBalancePaymentMethodOptions
	postPaymentIntentsCustomerBalancePaymentMethodOptionsInput: PostPaymentIntentsCustomerBalancePaymentMethodOptionsInput
}
input PostPaymentIntentsDobKlarnaPaymentMethodDataInput {
	year: Int!
	month: Int!
	day: Int!
}
input PostPaymentIntentsEpsPaymentMethodDataInput {
	bank: PostPaymentIntentsBankEpsPaymentMethodData!
}
enum PostPaymentIntentsEpsPaymentMethodOptions {
	
}
input PostPaymentIntentsEpsPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsSetupFutureUsageEpsPaymentMethodOptions!
}
input PostPaymentIntentsEpsPaymentMethodOptionsUnionInput {
	postPaymentIntentsEpsPaymentMethodOptions: PostPaymentIntentsEpsPaymentMethodOptions
	postPaymentIntentsEpsPaymentMethodOptionsInput: PostPaymentIntentsEpsPaymentMethodOptionsInput
}
input PostPaymentIntentsEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsInput {
	country: String!
}
input PostPaymentIntentsFinancialConnectionsUsBankAccountPaymentMethodOptionsInput {
	returnUrl: String!
	permissions: [PostPaymentIntentsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions!]!
}
input PostPaymentIntentsFpxPaymentMethodDataInput {
	bank: PostPaymentIntentsBankFpxPaymentMethodData!
}
enum PostPaymentIntentsFpxPaymentMethodOptions {
	
}
input PostPaymentIntentsFpxPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsSetupFutureUsageFpxPaymentMethodOptions!
}
input PostPaymentIntentsFpxPaymentMethodOptionsUnionInput {
	postPaymentIntentsFpxPaymentMethodOptions: PostPaymentIntentsFpxPaymentMethodOptions
	postPaymentIntentsFpxPaymentMethodOptionsInput: PostPaymentIntentsFpxPaymentMethodOptionsInput
}
enum PostPaymentIntentsFundingTypeCustomerBalancePaymentMethodOptions {
	BANK_TRANSFER
}
enum PostPaymentIntentsGiropayPaymentMethodOptions {
	
}
input PostPaymentIntentsGiropayPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsSetupFutureUsageGiropayPaymentMethodOptions!
}
input PostPaymentIntentsGiropayPaymentMethodOptionsUnionInput {
	postPaymentIntentsGiropayPaymentMethodOptions: PostPaymentIntentsGiropayPaymentMethodOptions
	postPaymentIntentsGiropayPaymentMethodOptionsInput: PostPaymentIntentsGiropayPaymentMethodOptionsInput
}
enum PostPaymentIntentsGrabpayPaymentMethodOptions {
	
}
input PostPaymentIntentsGrabpayPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsSetupFutureUsageGrabpayPaymentMethodOptions!
}
input PostPaymentIntentsGrabpayPaymentMethodOptionsUnionInput {
	postPaymentIntentsGrabpayPaymentMethodOptions: PostPaymentIntentsGrabpayPaymentMethodOptions
	postPaymentIntentsGrabpayPaymentMethodOptionsInput: PostPaymentIntentsGrabpayPaymentMethodOptionsInput
}
input PostPaymentIntentsIdealPaymentMethodDataInput {
	bank: PostPaymentIntentsBankIdealPaymentMethodData!
}
enum PostPaymentIntentsIdealPaymentMethodOptions {
	
}
input PostPaymentIntentsIdealPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsSetupFutureUsageIdealPaymentMethodOptions!
}
input PostPaymentIntentsIdealPaymentMethodOptionsUnionInput {
	postPaymentIntentsIdealPaymentMethodOptions: PostPaymentIntentsIdealPaymentMethodOptions
	postPaymentIntentsIdealPaymentMethodOptionsInput: PostPaymentIntentsIdealPaymentMethodOptionsInput
}
input PostPaymentIntentsInput {
	useStripeSdk: Boolean!
	transferGroup: String!
	transferData: PostPaymentIntentsTransferDataInput!
	statementDescriptorSuffix: String!
	statementDescriptor: String!
	shipping: PostPaymentIntentsShippingInput!
	setupFutureUsage: PostPaymentIntentsSetupFutureUsage!
	returnUrl: String!
	receiptEmail: String!
	radarOptions: PostPaymentIntentsRadarOptionsInput!
	paymentMethodTypes: [String!]!
	paymentMethodOptions: PostPaymentIntentsPaymentMethodOptionsInput!
	paymentMethodData: PostPaymentIntentsPaymentMethodDataInput!
	paymentMethod: String!
	onBehalfOf: String!
	offSession: UnionInput!
	metadata: JSON!
	mandateData: PostPaymentIntentsMandateDataInput!
	mandate: String!
	expand: [String!]!
	errorOnRequiresAction: Boolean!
	description: String!
	customer: String!
	currency: String!
	confirmationMethod: PostPaymentIntentsConfirmationMethod!
	confirm: Boolean!
	captureMethod: PostPaymentIntentsCaptureMethod!
	automaticPaymentMethods: PostPaymentIntentsAutomaticPaymentMethodsInput!
	applicationFeeAmount: Int!
	amount: Int!
}
input PostPaymentIntentsInstallmentsCardPaymentMethodOptionsInput {
	plan: PostPaymentIntentsPlanInstallmentsCardPaymentMethodOptionsUnionInput!
	enabled: Boolean!
}
enum PostPaymentIntentsIntentAccountHolderTypeUsBankAccountPaymentMethodData {
	COMPANY
	INDIVIDUAL
}
enum PostPaymentIntentsIntentAccountTypeUsBankAccountPaymentMethodData {
	CHECKING
	SAVINGS
}
input PostPaymentIntentsIntentAcssDebitPaymentMethodDataInput {
	transitNumber: String!
	institutionNumber: String!
	accountNumber: String!
}
enum PostPaymentIntentsIntentAcssDebitPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentAcssDebitPaymentMethodOptionsInput {
	verificationMethod: PostPaymentIntentsIntentVerificationMethodAcssDebitPaymentMethodOptions!
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsageAcssDebitPaymentMethodOptions!
	mandateOptions: PostPaymentIntentsIntentMandateOptionsAcssDebitPaymentMethodOptionsInput!
}
input PostPaymentIntentsIntentAcssDebitPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentAcssDebitPaymentMethodOptions: PostPaymentIntentsIntentAcssDebitPaymentMethodOptions
	postPaymentIntentsIntentAcssDebitPaymentMethodOptionsInput: PostPaymentIntentsIntentAcssDebitPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentAddressBillingDetailsPaymentMethodData {
	
}
input PostPaymentIntentsIntentAddressBillingDetailsPaymentMethodDataInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostPaymentIntentsIntentAddressBillingDetailsPaymentMethodDataUnionInput {
	postPaymentIntentsIntentAddressBillingDetailsPaymentMethodData: PostPaymentIntentsIntentAddressBillingDetailsPaymentMethodData
	postPaymentIntentsIntentAddressBillingDetailsPaymentMethodDataInput: PostPaymentIntentsIntentAddressBillingDetailsPaymentMethodDataInput
}
input PostPaymentIntentsIntentAddressShippingInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
enum PostPaymentIntentsIntentAffirmPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentAffirmPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsageAffirmPaymentMethodOptions!
	captureMethod: PostPaymentIntentsIntentCaptureMethodAffirmPaymentMethodOptions!
}
input PostPaymentIntentsIntentAffirmPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentAffirmPaymentMethodOptions: PostPaymentIntentsIntentAffirmPaymentMethodOptions
	postPaymentIntentsIntentAffirmPaymentMethodOptionsInput: PostPaymentIntentsIntentAffirmPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentAfterpayClearpayPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentAfterpayClearpayPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsageAfterpayClearpayPaymentMethodOptions!
	reference: String!
	captureMethod: PostPaymentIntentsIntentCaptureMethodAfterpayClearpayPaymentMethodOptions!
}
input PostPaymentIntentsIntentAfterpayClearpayPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentAfterpayClearpayPaymentMethodOptions: PostPaymentIntentsIntentAfterpayClearpayPaymentMethodOptions
	postPaymentIntentsIntentAfterpayClearpayPaymentMethodOptionsInput: PostPaymentIntentsIntentAfterpayClearpayPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentAlipayPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentAlipayPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsageAlipayPaymentMethodOptions!
}
input PostPaymentIntentsIntentAlipayPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentAlipayPaymentMethodOptions: PostPaymentIntentsIntentAlipayPaymentMethodOptions
	postPaymentIntentsIntentAlipayPaymentMethodOptionsInput: PostPaymentIntentsIntentAlipayPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentAmountTypeMandateOptionsCardPaymentMethodOptions {
	FIXED
	MAXIMUM
}
input PostPaymentIntentsIntentApplyCustomerBalanceInput {
	expand: [String!]!
	currency: String!
	amount: Int!
}
input PostPaymentIntentsIntentAuBecsDebitPaymentMethodDataInput {
	bsbNumber: String!
	accountNumber: String!
}
enum PostPaymentIntentsIntentAuBecsDebitPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentAuBecsDebitPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsageAuBecsDebitPaymentMethodOptions!
}
input PostPaymentIntentsIntentAuBecsDebitPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentAuBecsDebitPaymentMethodOptions: PostPaymentIntentsIntentAuBecsDebitPaymentMethodOptions
	postPaymentIntentsIntentAuBecsDebitPaymentMethodOptionsInput: PostPaymentIntentsIntentAuBecsDebitPaymentMethodOptionsInput
}
input PostPaymentIntentsIntentBacsDebitPaymentMethodDataInput {
	sortCode: String!
	accountNumber: String!
}
enum PostPaymentIntentsIntentBacsDebitPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentBacsDebitPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsageBacsDebitPaymentMethodOptions!
}
input PostPaymentIntentsIntentBacsDebitPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentBacsDebitPaymentMethodOptions: PostPaymentIntentsIntentBacsDebitPaymentMethodOptions
	postPaymentIntentsIntentBacsDebitPaymentMethodOptionsInput: PostPaymentIntentsIntentBacsDebitPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentBancontactPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentBancontactPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsageBancontactPaymentMethodOptions!
	preferredLanguage: PostPaymentIntentsIntentPreferredLanguageBancontactPaymentMethodOptions!
}
input PostPaymentIntentsIntentBancontactPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentBancontactPaymentMethodOptions: PostPaymentIntentsIntentBancontactPaymentMethodOptions
	postPaymentIntentsIntentBancontactPaymentMethodOptionsInput: PostPaymentIntentsIntentBancontactPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentBankEpsPaymentMethodData {
	ARZTE_UND_APOTHEKER_BANK
	AUSTRIAN_ANADI_BANK_AG
	BANK_AUSTRIA
	BANKHAUS_CARL_SPANGLER
	BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG
	BAWAG_PSK_AG
	BKS_BANK_AG
	BRULL_KALLMUS_BANK_AG
	BTV_VIER_LANDER_BANK
	CAPITAL_BANK_GRAWE_GRUPPE_AG
	DEUTSCHE_BANK_AG
	DOLOMITENBANK
	EASYBANK_AG
	ERSTE_BANK_UND_SPARKASSEN
	HYPO_ALPEADRIABANK_INTERNATIONAL_AG
	HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT
	HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN
	HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK
	HYPO_TIROL_BANK_AG
	HYPO_VORARLBERG_BANK_AG
	MARCHFELDER_BANK
	OBERBANK_AG
	RAIFFEISEN_BANKENGRUPPE_OSTERREICH
	SCHOELLERBANK_AG
	SPARDA_BANK_WIEN
	VOLKSBANK_GRUPPE
	VOLKSKREDITBANK_AG
	VR_BANK_BRAUNAU
}
enum PostPaymentIntentsIntentBankFpxPaymentMethodData {
	AFFIN_BANK
	AGROBANK
	ALLIANCE_BANK
	AMBANK
	BANK_ISLAM
	BANK_MUAMALAT
	BANK_OF_CHINA
	BANK_RAKYAT
	BSN
	CIMB
	DEUTSCHE_BANK
	HONG_LEONG_BANK
	HSBC
	KFH
	MAYBANK_2E
	MAYBANK_2U
	OCBC
	PB_ENTERPRISE
	PUBLIC_BANK
	RHB
	STANDARD_CHARTERED
	UOB
}
enum PostPaymentIntentsIntentBankIdealPaymentMethodData {
	ABN_AMRO
	ASN_BANK
	BUNQ
	HANDELSBANKEN
	ING
	KNAB
	MONEYOU
	RABOBANK
	REGIOBANK
	REVOLUT
	SNS_BANK
	TRIODOS_BANK
	VAN_LANSCHOT
}
enum PostPaymentIntentsIntentBankP24PaymentMethodData {
	ALIOR_BANK
	BANK_MILLENNIUM
	BANK_NOWY_BFG_SA
	BANK_PEKAO_SA
	BANKI_SPBDZIELCZE
	BLIK
	BNP_PARIBAS
	BOZ
	CITI_HANDLOWY
	CREDIT_AGRICOLE
	ENVELOBANK
	ETRANSFER_POCZTOWY_24
	GETIN_BANK
	IDEABANK
	ING
	INTELIGO
	MBANK_MTRANSFER
	NEST_PRZELEW
	NOBLE_PAY
	PBAC_Z_IPKO
	PLUS_BANK
	SANTANDER_PRZELEW_24
	TMOBILE_USBUGI_BANKOWE
	TOYOTA_BANK
	VOLKSWAGEN_BANK
}
input PostPaymentIntentsIntentBankTransferCustomerBalancePaymentMethodOptionsInput {
	type: PostPaymentIntentsIntentTypeBankTransferCustomerBalancePaymentMethodOptions!
	requestedAddressTypes: [PostPaymentIntentsIntentRequestedAddressTypesBankTransferCustomerBalancePaymentMethodOptions!]!
	euBankTransfer: PostPaymentIntentsIntentEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsInput!
}
input PostPaymentIntentsIntentBillingDetailsPaymentMethodDataInput {
	phone: String!
	name: String!
	email: UnionInput!
	address: PostPaymentIntentsIntentAddressBillingDetailsPaymentMethodDataUnionInput!
}
enum PostPaymentIntentsIntentBlikPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentBlikPaymentMethodOptionsInput {
	code: String!
}
input PostPaymentIntentsIntentBlikPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentBlikPaymentMethodOptions: PostPaymentIntentsIntentBlikPaymentMethodOptions
	postPaymentIntentsIntentBlikPaymentMethodOptionsInput: PostPaymentIntentsIntentBlikPaymentMethodOptionsInput
}
input PostPaymentIntentsIntentBoletoPaymentMethodDataInput {
	taxId: String!
}
enum PostPaymentIntentsIntentBoletoPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentBoletoPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsageBoletoPaymentMethodOptions!
	expiresAfterDays: Int!
}
input PostPaymentIntentsIntentBoletoPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentBoletoPaymentMethodOptions: PostPaymentIntentsIntentBoletoPaymentMethodOptions
	postPaymentIntentsIntentBoletoPaymentMethodOptionsInput: PostPaymentIntentsIntentBoletoPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentCancelCancellationReason {
	ABANDONED
	DUPLICATE
	FRAUDULENT
	REQUESTED_BY_CUSTOMER
}
input PostPaymentIntentsIntentCancelInput {
	expand: [String!]!
	cancellationReason: PostPaymentIntentsIntentCancelCancellationReason!
}
input PostPaymentIntentsIntentCaptureInput {
	transferData: PostPaymentIntentsIntentCaptureTransferDataInput!
	statementDescriptorSuffix: String!
	statementDescriptor: String!
	expand: [String!]!
	applicationFeeAmount: Int!
	amountToCapture: Int!
}
enum PostPaymentIntentsIntentCaptureMethod {
	AUTOMATIC
	MANUAL
}
enum PostPaymentIntentsIntentCaptureMethodAffirmPaymentMethodOptions {
	
	MANUAL
}
enum PostPaymentIntentsIntentCaptureMethodAfterpayClearpayPaymentMethodOptions {
	
	MANUAL
}
enum PostPaymentIntentsIntentCaptureMethodCardPaymentMethodOptions {
	
	MANUAL
}
enum PostPaymentIntentsIntentCaptureMethodKlarnaPaymentMethodOptions {
	
	MANUAL
}
enum PostPaymentIntentsIntentCaptureMethodLinkPaymentMethodOptions {
	
	MANUAL
}
input PostPaymentIntentsIntentCaptureTransferDataInput {
	amount: Int!
}
enum PostPaymentIntentsIntentCardPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentCardPaymentMethodOptionsInput {
	statementDescriptorSuffixKanji: UnionInput!
	statementDescriptorSuffixKana: UnionInput!
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsageCardPaymentMethodOptions!
	requestThreeDSecure: PostPaymentIntentsIntentRequestThreeDSecureCardPaymentMethodOptions!
	network: PostPaymentIntentsIntentNetworkCardPaymentMethodOptions!
	mandateOptions: PostPaymentIntentsIntentMandateOptionsCardPaymentMethodOptionsInput!
	installments: PostPaymentIntentsIntentInstallmentsCardPaymentMethodOptionsInput!
	cvcToken: String!
	captureMethod: PostPaymentIntentsIntentCaptureMethodCardPaymentMethodOptions!
}
input PostPaymentIntentsIntentCardPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentCardPaymentMethodOptions: PostPaymentIntentsIntentCardPaymentMethodOptions
	postPaymentIntentsIntentCardPaymentMethodOptionsInput: PostPaymentIntentsIntentCardPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentCardPresentPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentCardPresentPaymentMethodOptionsInput {
	requestIncrementalAuthorizationSupport: Boolean!
	requestExtendedAuthorization: Boolean!
}
input PostPaymentIntentsIntentCardPresentPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentCardPresentPaymentMethodOptions: PostPaymentIntentsIntentCardPresentPaymentMethodOptions
	postPaymentIntentsIntentCardPresentPaymentMethodOptionsInput: PostPaymentIntentsIntentCardPresentPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentClientWechatPayPaymentMethodOptions {
	ANDROID
	IOS
	WEB
}
enum PostPaymentIntentsIntentConfirmAccountHolderTypeUsBankAccountPaymentMethodData {
	COMPANY
	INDIVIDUAL
}
enum PostPaymentIntentsIntentConfirmAccountTypeUsBankAccountPaymentMethodData {
	CHECKING
	SAVINGS
}
input PostPaymentIntentsIntentConfirmAcssDebitPaymentMethodDataInput {
	transitNumber: String!
	institutionNumber: String!
	accountNumber: String!
}
enum PostPaymentIntentsIntentConfirmAcssDebitPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmAcssDebitPaymentMethodOptionsInput {
	verificationMethod: PostPaymentIntentsIntentConfirmVerificationMethodAcssDebitPaymentMethodOptions!
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsageAcssDebitPaymentMethodOptions!
	mandateOptions: PostPaymentIntentsIntentConfirmMandateOptionsAcssDebitPaymentMethodOptionsInput!
}
input PostPaymentIntentsIntentConfirmAcssDebitPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmAcssDebitPaymentMethodOptions: PostPaymentIntentsIntentConfirmAcssDebitPaymentMethodOptions
	postPaymentIntentsIntentConfirmAcssDebitPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmAcssDebitPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentConfirmAddressBillingDetailsPaymentMethodData {
	
}
input PostPaymentIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostPaymentIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataUnionInput {
	postPaymentIntentsIntentConfirmAddressBillingDetailsPaymentMethodData: PostPaymentIntentsIntentConfirmAddressBillingDetailsPaymentMethodData
	postPaymentIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataInput: PostPaymentIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataInput
}
input PostPaymentIntentsIntentConfirmAddressShippingInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
enum PostPaymentIntentsIntentConfirmAffirmPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmAffirmPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsageAffirmPaymentMethodOptions!
	captureMethod: PostPaymentIntentsIntentConfirmCaptureMethodAffirmPaymentMethodOptions!
}
input PostPaymentIntentsIntentConfirmAffirmPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmAffirmPaymentMethodOptions: PostPaymentIntentsIntentConfirmAffirmPaymentMethodOptions
	postPaymentIntentsIntentConfirmAffirmPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmAffirmPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentConfirmAfterpayClearpayPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmAfterpayClearpayPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsageAfterpayClearpayPaymentMethodOptions!
	reference: String!
	captureMethod: PostPaymentIntentsIntentConfirmCaptureMethodAfterpayClearpayPaymentMethodOptions!
}
input PostPaymentIntentsIntentConfirmAfterpayClearpayPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmAfterpayClearpayPaymentMethodOptions: PostPaymentIntentsIntentConfirmAfterpayClearpayPaymentMethodOptions
	postPaymentIntentsIntentConfirmAfterpayClearpayPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmAfterpayClearpayPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentConfirmAlipayPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmAlipayPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsageAlipayPaymentMethodOptions!
}
input PostPaymentIntentsIntentConfirmAlipayPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmAlipayPaymentMethodOptions: PostPaymentIntentsIntentConfirmAlipayPaymentMethodOptions
	postPaymentIntentsIntentConfirmAlipayPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmAlipayPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentConfirmAmountTypeMandateOptionsCardPaymentMethodOptions {
	FIXED
	MAXIMUM
}
input PostPaymentIntentsIntentConfirmAuBecsDebitPaymentMethodDataInput {
	bsbNumber: String!
	accountNumber: String!
}
enum PostPaymentIntentsIntentConfirmAuBecsDebitPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmAuBecsDebitPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsageAuBecsDebitPaymentMethodOptions!
}
input PostPaymentIntentsIntentConfirmAuBecsDebitPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmAuBecsDebitPaymentMethodOptions: PostPaymentIntentsIntentConfirmAuBecsDebitPaymentMethodOptions
	postPaymentIntentsIntentConfirmAuBecsDebitPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmAuBecsDebitPaymentMethodOptionsInput
}
input PostPaymentIntentsIntentConfirmBacsDebitPaymentMethodDataInput {
	sortCode: String!
	accountNumber: String!
}
enum PostPaymentIntentsIntentConfirmBacsDebitPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmBacsDebitPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsageBacsDebitPaymentMethodOptions!
}
input PostPaymentIntentsIntentConfirmBacsDebitPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmBacsDebitPaymentMethodOptions: PostPaymentIntentsIntentConfirmBacsDebitPaymentMethodOptions
	postPaymentIntentsIntentConfirmBacsDebitPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmBacsDebitPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentConfirmBancontactPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmBancontactPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsageBancontactPaymentMethodOptions!
	preferredLanguage: PostPaymentIntentsIntentConfirmPreferredLanguageBancontactPaymentMethodOptions!
}
input PostPaymentIntentsIntentConfirmBancontactPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmBancontactPaymentMethodOptions: PostPaymentIntentsIntentConfirmBancontactPaymentMethodOptions
	postPaymentIntentsIntentConfirmBancontactPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmBancontactPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentConfirmBankEpsPaymentMethodData {
	ARZTE_UND_APOTHEKER_BANK
	AUSTRIAN_ANADI_BANK_AG
	BANK_AUSTRIA
	BANKHAUS_CARL_SPANGLER
	BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG
	BAWAG_PSK_AG
	BKS_BANK_AG
	BRULL_KALLMUS_BANK_AG
	BTV_VIER_LANDER_BANK
	CAPITAL_BANK_GRAWE_GRUPPE_AG
	DEUTSCHE_BANK_AG
	DOLOMITENBANK
	EASYBANK_AG
	ERSTE_BANK_UND_SPARKASSEN
	HYPO_ALPEADRIABANK_INTERNATIONAL_AG
	HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT
	HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN
	HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK
	HYPO_TIROL_BANK_AG
	HYPO_VORARLBERG_BANK_AG
	MARCHFELDER_BANK
	OBERBANK_AG
	RAIFFEISEN_BANKENGRUPPE_OSTERREICH
	SCHOELLERBANK_AG
	SPARDA_BANK_WIEN
	VOLKSBANK_GRUPPE
	VOLKSKREDITBANK_AG
	VR_BANK_BRAUNAU
}
enum PostPaymentIntentsIntentConfirmBankFpxPaymentMethodData {
	AFFIN_BANK
	AGROBANK
	ALLIANCE_BANK
	AMBANK
	BANK_ISLAM
	BANK_MUAMALAT
	BANK_OF_CHINA
	BANK_RAKYAT
	BSN
	CIMB
	DEUTSCHE_BANK
	HONG_LEONG_BANK
	HSBC
	KFH
	MAYBANK_2E
	MAYBANK_2U
	OCBC
	PB_ENTERPRISE
	PUBLIC_BANK
	RHB
	STANDARD_CHARTERED
	UOB
}
enum PostPaymentIntentsIntentConfirmBankIdealPaymentMethodData {
	ABN_AMRO
	ASN_BANK
	BUNQ
	HANDELSBANKEN
	ING
	KNAB
	MONEYOU
	RABOBANK
	REGIOBANK
	REVOLUT
	SNS_BANK
	TRIODOS_BANK
	VAN_LANSCHOT
}
enum PostPaymentIntentsIntentConfirmBankP24PaymentMethodData {
	ALIOR_BANK
	BANK_MILLENNIUM
	BANK_NOWY_BFG_SA
	BANK_PEKAO_SA
	BANKI_SPBDZIELCZE
	BLIK
	BNP_PARIBAS
	BOZ
	CITI_HANDLOWY
	CREDIT_AGRICOLE
	ENVELOBANK
	ETRANSFER_POCZTOWY_24
	GETIN_BANK
	IDEABANK
	ING
	INTELIGO
	MBANK_MTRANSFER
	NEST_PRZELEW
	NOBLE_PAY
	PBAC_Z_IPKO
	PLUS_BANK
	SANTANDER_PRZELEW_24
	TMOBILE_USBUGI_BANKOWE
	TOYOTA_BANK
	VOLKSWAGEN_BANK
}
input PostPaymentIntentsIntentConfirmBankTransferCustomerBalancePaymentMethodOptionsInput {
	type: PostPaymentIntentsIntentConfirmTypeBankTransferCustomerBalancePaymentMethodOptions!
	requestedAddressTypes: [PostPaymentIntentsIntentConfirmRequestedAddressTypesBankTransferCustomerBalancePaymentMethodOptions!]!
	euBankTransfer: PostPaymentIntentsIntentConfirmEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsInput!
}
input PostPaymentIntentsIntentConfirmBillingDetailsPaymentMethodDataInput {
	phone: String!
	name: String!
	email: UnionInput!
	address: PostPaymentIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataUnionInput!
}
enum PostPaymentIntentsIntentConfirmBlikPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmBlikPaymentMethodOptionsInput {
	code: String!
}
input PostPaymentIntentsIntentConfirmBlikPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmBlikPaymentMethodOptions: PostPaymentIntentsIntentConfirmBlikPaymentMethodOptions
	postPaymentIntentsIntentConfirmBlikPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmBlikPaymentMethodOptionsInput
}
input PostPaymentIntentsIntentConfirmBoletoPaymentMethodDataInput {
	taxId: String!
}
enum PostPaymentIntentsIntentConfirmBoletoPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmBoletoPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsageBoletoPaymentMethodOptions!
	expiresAfterDays: Int!
}
input PostPaymentIntentsIntentConfirmBoletoPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmBoletoPaymentMethodOptions: PostPaymentIntentsIntentConfirmBoletoPaymentMethodOptions
	postPaymentIntentsIntentConfirmBoletoPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmBoletoPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentConfirmCaptureMethod {
	AUTOMATIC
	MANUAL
}
enum PostPaymentIntentsIntentConfirmCaptureMethodAffirmPaymentMethodOptions {
	
	MANUAL
}
enum PostPaymentIntentsIntentConfirmCaptureMethodAfterpayClearpayPaymentMethodOptions {
	
	MANUAL
}
enum PostPaymentIntentsIntentConfirmCaptureMethodCardPaymentMethodOptions {
	
	MANUAL
}
enum PostPaymentIntentsIntentConfirmCaptureMethodKlarnaPaymentMethodOptions {
	
	MANUAL
}
enum PostPaymentIntentsIntentConfirmCaptureMethodLinkPaymentMethodOptions {
	
	MANUAL
}
enum PostPaymentIntentsIntentConfirmCardPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmCardPaymentMethodOptionsInput {
	statementDescriptorSuffixKanji: UnionInput!
	statementDescriptorSuffixKana: UnionInput!
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsageCardPaymentMethodOptions!
	requestThreeDSecure: PostPaymentIntentsIntentConfirmRequestThreeDSecureCardPaymentMethodOptions!
	network: PostPaymentIntentsIntentConfirmNetworkCardPaymentMethodOptions!
	mandateOptions: PostPaymentIntentsIntentConfirmMandateOptionsCardPaymentMethodOptionsInput!
	installments: PostPaymentIntentsIntentConfirmInstallmentsCardPaymentMethodOptionsInput!
	cvcToken: String!
	captureMethod: PostPaymentIntentsIntentConfirmCaptureMethodCardPaymentMethodOptions!
}
input PostPaymentIntentsIntentConfirmCardPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmCardPaymentMethodOptions: PostPaymentIntentsIntentConfirmCardPaymentMethodOptions
	postPaymentIntentsIntentConfirmCardPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmCardPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentConfirmCardPresentPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmCardPresentPaymentMethodOptionsInput {
	requestIncrementalAuthorizationSupport: Boolean!
	requestExtendedAuthorization: Boolean!
}
input PostPaymentIntentsIntentConfirmCardPresentPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmCardPresentPaymentMethodOptions: PostPaymentIntentsIntentConfirmCardPresentPaymentMethodOptions
	postPaymentIntentsIntentConfirmCardPresentPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmCardPresentPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentConfirmClientWechatPayPaymentMethodOptions {
	ANDROID
	IOS
	WEB
}
enum PostPaymentIntentsIntentConfirmCountrySofortPaymentMethodData {
	AT
	BE
	DE
	ES
	IT
	NL
}
input PostPaymentIntentsIntentConfirmCustomerAcceptanceMandateDataInput {
	type: PostPaymentIntentsIntentConfirmTypeCustomerAcceptanceMandateData!
	online: PostPaymentIntentsIntentConfirmOnlineCustomerAcceptanceMandateDataInput!
}
enum PostPaymentIntentsIntentConfirmCustomerBalancePaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmCustomerBalancePaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsageCustomerBalancePaymentMethodOptions!
	fundingType: PostPaymentIntentsIntentConfirmFundingTypeCustomerBalancePaymentMethodOptions!
	bankTransfer: PostPaymentIntentsIntentConfirmBankTransferCustomerBalancePaymentMethodOptionsInput!
}
input PostPaymentIntentsIntentConfirmCustomerBalancePaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmCustomerBalancePaymentMethodOptions: PostPaymentIntentsIntentConfirmCustomerBalancePaymentMethodOptions
	postPaymentIntentsIntentConfirmCustomerBalancePaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmCustomerBalancePaymentMethodOptionsInput
}
input PostPaymentIntentsIntentConfirmDobKlarnaPaymentMethodDataInput {
	year: Int!
	month: Int!
	day: Int!
}
input PostPaymentIntentsIntentConfirmEpsPaymentMethodDataInput {
	bank: PostPaymentIntentsIntentConfirmBankEpsPaymentMethodData!
}
enum PostPaymentIntentsIntentConfirmEpsPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmEpsPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsageEpsPaymentMethodOptions!
}
input PostPaymentIntentsIntentConfirmEpsPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmEpsPaymentMethodOptions: PostPaymentIntentsIntentConfirmEpsPaymentMethodOptions
	postPaymentIntentsIntentConfirmEpsPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmEpsPaymentMethodOptionsInput
}
input PostPaymentIntentsIntentConfirmEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsInput {
	country: String!
}
input PostPaymentIntentsIntentConfirmFinancialConnectionsUsBankAccountPaymentMethodOptionsInput {
	returnUrl: String!
	permissions: [PostPaymentIntentsIntentConfirmPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions!]!
}
input PostPaymentIntentsIntentConfirmFpxPaymentMethodDataInput {
	bank: PostPaymentIntentsIntentConfirmBankFpxPaymentMethodData!
}
enum PostPaymentIntentsIntentConfirmFpxPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmFpxPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsageFpxPaymentMethodOptions!
}
input PostPaymentIntentsIntentConfirmFpxPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmFpxPaymentMethodOptions: PostPaymentIntentsIntentConfirmFpxPaymentMethodOptions
	postPaymentIntentsIntentConfirmFpxPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmFpxPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentConfirmFundingTypeCustomerBalancePaymentMethodOptions {
	BANK_TRANSFER
}
enum PostPaymentIntentsIntentConfirmGiropayPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmGiropayPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsageGiropayPaymentMethodOptions!
}
input PostPaymentIntentsIntentConfirmGiropayPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmGiropayPaymentMethodOptions: PostPaymentIntentsIntentConfirmGiropayPaymentMethodOptions
	postPaymentIntentsIntentConfirmGiropayPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmGiropayPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentConfirmGrabpayPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmGrabpayPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsageGrabpayPaymentMethodOptions!
}
input PostPaymentIntentsIntentConfirmGrabpayPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmGrabpayPaymentMethodOptions: PostPaymentIntentsIntentConfirmGrabpayPaymentMethodOptions
	postPaymentIntentsIntentConfirmGrabpayPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmGrabpayPaymentMethodOptionsInput
}
input PostPaymentIntentsIntentConfirmIdealPaymentMethodDataInput {
	bank: PostPaymentIntentsIntentConfirmBankIdealPaymentMethodData!
}
enum PostPaymentIntentsIntentConfirmIdealPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmIdealPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsageIdealPaymentMethodOptions!
}
input PostPaymentIntentsIntentConfirmIdealPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmIdealPaymentMethodOptions: PostPaymentIntentsIntentConfirmIdealPaymentMethodOptions
	postPaymentIntentsIntentConfirmIdealPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmIdealPaymentMethodOptionsInput
}
input PostPaymentIntentsIntentConfirmInput {
	useStripeSdk: Boolean!
	shipping: PostPaymentIntentsIntentConfirmShippingUnionInput!
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsage!
	returnUrl: String!
	receiptEmail: UnionInput!
	radarOptions: PostPaymentIntentsIntentConfirmRadarOptionsInput!
	paymentMethodTypes: [String!]!
	paymentMethodOptions: PostPaymentIntentsIntentConfirmPaymentMethodOptionsInput!
	paymentMethodData: PostPaymentIntentsIntentConfirmPaymentMethodDataInput!
	paymentMethod: String!
	offSession: UnionInput!
	mandateData: PostPaymentIntentsIntentConfirmMandateDataOrPostPaymentIntentsIntentConfirmMandateDataUnionInput!
	mandate: String!
	expand: [String!]!
	errorOnRequiresAction: Boolean!
	clientSecret: String!
	captureMethod: PostPaymentIntentsIntentConfirmCaptureMethod!
}
input PostPaymentIntentsIntentConfirmInstallmentsCardPaymentMethodOptionsInput {
	plan: PostPaymentIntentsIntentConfirmPlanInstallmentsCardPaymentMethodOptionsUnionInput!
	enabled: Boolean!
}
enum PostPaymentIntentsIntentConfirmIntervalMandateOptionsCardPaymentMethodOptions {
	DAY
	MONTH
	SPORADIC
	WEEK
	YEAR
}
enum PostPaymentIntentsIntentConfirmIntervalPlanInstallmentsCardPaymentMethodOptions {
	MONTH
}
input PostPaymentIntentsIntentConfirmKlarnaPaymentMethodDataInput {
	dob: PostPaymentIntentsIntentConfirmDobKlarnaPaymentMethodDataInput!
}
enum PostPaymentIntentsIntentConfirmKlarnaPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmKlarnaPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsageKlarnaPaymentMethodOptions!
	preferredLocale: PostPaymentIntentsIntentConfirmPreferredLocaleKlarnaPaymentMethodOptions!
	captureMethod: PostPaymentIntentsIntentConfirmCaptureMethodKlarnaPaymentMethodOptions!
}
input PostPaymentIntentsIntentConfirmKlarnaPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmKlarnaPaymentMethodOptions: PostPaymentIntentsIntentConfirmKlarnaPaymentMethodOptions
	postPaymentIntentsIntentConfirmKlarnaPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmKlarnaPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentConfirmKonbiniPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmKonbiniPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsageKonbiniPaymentMethodOptions!
	productDescription: String!
	expiresAt: UnionInput!
	expiresAfterDays: UnionInput!
	confirmationNumber: String!
}
input PostPaymentIntentsIntentConfirmKonbiniPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmKonbiniPaymentMethodOptions: PostPaymentIntentsIntentConfirmKonbiniPaymentMethodOptions
	postPaymentIntentsIntentConfirmKonbiniPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmKonbiniPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentConfirmLinkPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmLinkPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsageLinkPaymentMethodOptions!
	persistentToken: String!
	captureMethod: PostPaymentIntentsIntentConfirmCaptureMethodLinkPaymentMethodOptions!
}
input PostPaymentIntentsIntentConfirmLinkPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmLinkPaymentMethodOptions: PostPaymentIntentsIntentConfirmLinkPaymentMethodOptions
	postPaymentIntentsIntentConfirmLinkPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmLinkPaymentMethodOptionsInput
}
input PostPaymentIntentsIntentConfirmMandateDataInput {
	customerAcceptance: PostPaymentIntentsIntentConfirmCustomerAcceptanceMandateDataInput!
}
input PostPaymentIntentsIntentConfirmMandateDataOrPostPaymentIntentsIntentConfirmMandateDataUnionInput {
	postPaymentIntentsIntentConfirmMandateDataInput: PostPaymentIntentsIntentConfirmMandateDataInput
}
input PostPaymentIntentsIntentConfirmMandateOptionsAcssDebitPaymentMethodOptionsInput {
	transactionType: PostPaymentIntentsIntentConfirmTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions!
	paymentSchedule: PostPaymentIntentsIntentConfirmPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions!
	intervalDescription: String!
	customMandateUrl: UnionInput!
}
input PostPaymentIntentsIntentConfirmMandateOptionsCardPaymentMethodOptionsInput {
	supportedTypes: [PostPaymentIntentsIntentConfirmSupportedTypesMandateOptionsCardPaymentMethodOptions!]!
	startDate: Int!
	reference: String!
	intervalCount: Int!
	interval: PostPaymentIntentsIntentConfirmIntervalMandateOptionsCardPaymentMethodOptions!
	endDate: Int!
	description: String!
	amountType: PostPaymentIntentsIntentConfirmAmountTypeMandateOptionsCardPaymentMethodOptions!
	amount: Int!
}
enum PostPaymentIntentsIntentConfirmNetworkCardPaymentMethodOptions {
	AMEX
	CARTES_BANCAIRES
	DINERS
	DISCOVER
	INTERAC
	JCB
	MASTERCARD
	UNIONPAY
	UNKNOWN
	VISA
}
input PostPaymentIntentsIntentConfirmNetworksUsBankAccountPaymentMethodOptionsInput {
	requested: [PostPaymentIntentsIntentConfirmRequestedNetworksUsBankAccountPaymentMethodOptions!]!
}
input PostPaymentIntentsIntentConfirmOnlineCustomerAcceptanceMandateDataInput {
	userAgent: String!
	ipAddress: String!
}
enum PostPaymentIntentsIntentConfirmOxxoPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmOxxoPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsageOxxoPaymentMethodOptions!
	expiresAfterDays: Int!
}
input PostPaymentIntentsIntentConfirmOxxoPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmOxxoPaymentMethodOptions: PostPaymentIntentsIntentConfirmOxxoPaymentMethodOptions
	postPaymentIntentsIntentConfirmOxxoPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmOxxoPaymentMethodOptionsInput
}
input PostPaymentIntentsIntentConfirmP24PaymentMethodDataInput {
	bank: PostPaymentIntentsIntentConfirmBankP24PaymentMethodData!
}
enum PostPaymentIntentsIntentConfirmP24PaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmP24PaymentMethodOptionsInput {
	tosShownAndAccepted: Boolean!
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsageP24PaymentMethodOptions!
}
input PostPaymentIntentsIntentConfirmP24PaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmP24PaymentMethodOptions: PostPaymentIntentsIntentConfirmP24PaymentMethodOptions
	postPaymentIntentsIntentConfirmP24PaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmP24PaymentMethodOptionsInput
}
input PostPaymentIntentsIntentConfirmPaymentMethodDataInput {
	wechatPay: JSON!
	usBankAccount: PostPaymentIntentsIntentConfirmUsBankAccountPaymentMethodDataInput!
	type: PostPaymentIntentsIntentConfirmTypePaymentMethodData!
	sofort: PostPaymentIntentsIntentConfirmSofortPaymentMethodDataInput!
	sepaDebit: PostPaymentIntentsIntentConfirmSepaDebitPaymentMethodDataInput!
	radarOptions: PostPaymentIntentsIntentConfirmRadarOptionsPaymentMethodDataInput!
	promptpay: JSON!
	pix: JSON!
	paynow: JSON!
	p24: PostPaymentIntentsIntentConfirmP24PaymentMethodDataInput!
	oxxo: JSON!
	metadata: JSON!
	link: JSON!
	konbini: JSON!
	klarna: PostPaymentIntentsIntentConfirmKlarnaPaymentMethodDataInput!
	interacPresent: JSON!
	ideal: PostPaymentIntentsIntentConfirmIdealPaymentMethodDataInput!
	grabpay: JSON!
	giropay: JSON!
	fpx: PostPaymentIntentsIntentConfirmFpxPaymentMethodDataInput!
	eps: PostPaymentIntentsIntentConfirmEpsPaymentMethodDataInput!
	customerBalance: JSON!
	boleto: PostPaymentIntentsIntentConfirmBoletoPaymentMethodDataInput!
	blik: JSON!
	billingDetails: PostPaymentIntentsIntentConfirmBillingDetailsPaymentMethodDataInput!
	bancontact: JSON!
	bacsDebit: PostPaymentIntentsIntentConfirmBacsDebitPaymentMethodDataInput!
	auBecsDebit: PostPaymentIntentsIntentConfirmAuBecsDebitPaymentMethodDataInput!
	alipay: JSON!
	afterpayClearpay: JSON!
	affirm: JSON!
	acssDebit: PostPaymentIntentsIntentConfirmAcssDebitPaymentMethodDataInput!
}
input PostPaymentIntentsIntentConfirmPaymentMethodOptionsInput {
	wechatPay: PostPaymentIntentsIntentConfirmWechatPayPaymentMethodOptionsUnionInput!
	usBankAccount: PostPaymentIntentsIntentConfirmUsBankAccountPaymentMethodOptionsUnionInput!
	sofort: PostPaymentIntentsIntentConfirmSofortPaymentMethodOptionsUnionInput!
	sepaDebit: PostPaymentIntentsIntentConfirmSepaDebitPaymentMethodOptionsUnionInput!
	promptpay: PostPaymentIntentsIntentConfirmPromptpayPaymentMethodOptionsUnionInput!
	pix: PostPaymentIntentsIntentConfirmPixPaymentMethodOptionsUnionInput!
	paynow: PostPaymentIntentsIntentConfirmPaynowPaymentMethodOptionsUnionInput!
	p24: PostPaymentIntentsIntentConfirmP24PaymentMethodOptionsUnionInput!
	oxxo: PostPaymentIntentsIntentConfirmOxxoPaymentMethodOptionsUnionInput!
	link: PostPaymentIntentsIntentConfirmLinkPaymentMethodOptionsUnionInput!
	konbini: PostPaymentIntentsIntentConfirmKonbiniPaymentMethodOptionsUnionInput!
	klarna: PostPaymentIntentsIntentConfirmKlarnaPaymentMethodOptionsUnionInput!
	interacPresent: UnionInput!
	ideal: PostPaymentIntentsIntentConfirmIdealPaymentMethodOptionsUnionInput!
	grabpay: PostPaymentIntentsIntentConfirmGrabpayPaymentMethodOptionsUnionInput!
	giropay: PostPaymentIntentsIntentConfirmGiropayPaymentMethodOptionsUnionInput!
	fpx: PostPaymentIntentsIntentConfirmFpxPaymentMethodOptionsUnionInput!
	eps: PostPaymentIntentsIntentConfirmEpsPaymentMethodOptionsUnionInput!
	customerBalance: PostPaymentIntentsIntentConfirmCustomerBalancePaymentMethodOptionsUnionInput!
	cardPresent: PostPaymentIntentsIntentConfirmCardPresentPaymentMethodOptionsUnionInput!
	card: PostPaymentIntentsIntentConfirmCardPaymentMethodOptionsUnionInput!
	boleto: PostPaymentIntentsIntentConfirmBoletoPaymentMethodOptionsUnionInput!
	blik: PostPaymentIntentsIntentConfirmBlikPaymentMethodOptionsUnionInput!
	bancontact: PostPaymentIntentsIntentConfirmBancontactPaymentMethodOptionsUnionInput!
	bacsDebit: PostPaymentIntentsIntentConfirmBacsDebitPaymentMethodOptionsUnionInput!
	auBecsDebit: PostPaymentIntentsIntentConfirmAuBecsDebitPaymentMethodOptionsUnionInput!
	alipay: PostPaymentIntentsIntentConfirmAlipayPaymentMethodOptionsUnionInput!
	afterpayClearpay: PostPaymentIntentsIntentConfirmAfterpayClearpayPaymentMethodOptionsUnionInput!
	affirm: PostPaymentIntentsIntentConfirmAffirmPaymentMethodOptionsUnionInput!
	acssDebit: PostPaymentIntentsIntentConfirmAcssDebitPaymentMethodOptionsUnionInput!
}
enum PostPaymentIntentsIntentConfirmPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions {
	COMBINED
	INTERVAL
	SPORADIC
}
enum PostPaymentIntentsIntentConfirmPaynowPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmPaynowPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsagePaynowPaymentMethodOptions!
}
input PostPaymentIntentsIntentConfirmPaynowPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmPaynowPaymentMethodOptions: PostPaymentIntentsIntentConfirmPaynowPaymentMethodOptions
	postPaymentIntentsIntentConfirmPaynowPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmPaynowPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentConfirmPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
enum PostPaymentIntentsIntentConfirmPixPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmPixPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsagePixPaymentMethodOptions!
	expiresAt: Int!
	expiresAfterSeconds: Int!
}
input PostPaymentIntentsIntentConfirmPixPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmPixPaymentMethodOptions: PostPaymentIntentsIntentConfirmPixPaymentMethodOptions
	postPaymentIntentsIntentConfirmPixPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmPixPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentConfirmPlanInstallmentsCardPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmPlanInstallmentsCardPaymentMethodOptionsInput {
	type: PostPaymentIntentsIntentConfirmTypePlanInstallmentsCardPaymentMethodOptions!
	interval: PostPaymentIntentsIntentConfirmIntervalPlanInstallmentsCardPaymentMethodOptions!
	count: Int!
}
input PostPaymentIntentsIntentConfirmPlanInstallmentsCardPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmPlanInstallmentsCardPaymentMethodOptions: PostPaymentIntentsIntentConfirmPlanInstallmentsCardPaymentMethodOptions
	postPaymentIntentsIntentConfirmPlanInstallmentsCardPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmPlanInstallmentsCardPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentConfirmPreferredLanguageBancontactPaymentMethodOptions {
	DE
	EN
	FR
	NL
}
enum PostPaymentIntentsIntentConfirmPreferredLanguageSofortPaymentMethodOptions {
	
	DE
	EN
	ES
	FR
	IT
	NL
	PL
}
enum PostPaymentIntentsIntentConfirmPreferredLocaleKlarnaPaymentMethodOptions {
	CS_CZ
	DA_DK
	DE_AT
	DE_CH
	DE_DE
	EL_GR
	EN_AT
	EN_AU
	EN_BE
	EN_CA
	EN_CH
	EN_CZ
	EN_DE
	EN_DK
	EN_ES
	EN_FI
	EN_FR
	EN_GB
	EN_GR
	EN_IE
	EN_IT
	EN_NL
	EN_NO
	EN_NZ
	EN_PL
	EN_PT
	EN_SE
	EN_US
	ES_ES
	ES_US
	FI_FI
	FR_BE
	FR_CA
	FR_CH
	FR_FR
	IT_CH
	IT_IT
	NB_NO
	NL_BE
	NL_NL
	PL_PL
	PT_PT
	SV_FI
	SV_SE
}
enum PostPaymentIntentsIntentConfirmPromptpayPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmPromptpayPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsagePromptpayPaymentMethodOptions!
}
input PostPaymentIntentsIntentConfirmPromptpayPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmPromptpayPaymentMethodOptions: PostPaymentIntentsIntentConfirmPromptpayPaymentMethodOptions
	postPaymentIntentsIntentConfirmPromptpayPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmPromptpayPaymentMethodOptionsInput
}
input PostPaymentIntentsIntentConfirmRadarOptionsInput {
	session: String!
}
input PostPaymentIntentsIntentConfirmRadarOptionsPaymentMethodDataInput {
	session: String!
}
enum PostPaymentIntentsIntentConfirmRequestThreeDSecureCardPaymentMethodOptions {
	ANY
	AUTOMATIC
}
enum PostPaymentIntentsIntentConfirmRequestedAddressTypesBankTransferCustomerBalancePaymentMethodOptions {
	IBAN
	SEPA
	SORT_CODE
	SPEI
	ZENGIN
}
enum PostPaymentIntentsIntentConfirmRequestedNetworksUsBankAccountPaymentMethodOptions {
	ACH
	US_DOMESTIC_WIRE
}
input PostPaymentIntentsIntentConfirmSepaDebitPaymentMethodDataInput {
	iban: String!
}
enum PostPaymentIntentsIntentConfirmSepaDebitPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmSepaDebitPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsageSepaDebitPaymentMethodOptions!
	mandateOptions: JSON!
}
input PostPaymentIntentsIntentConfirmSepaDebitPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmSepaDebitPaymentMethodOptions: PostPaymentIntentsIntentConfirmSepaDebitPaymentMethodOptions
	postPaymentIntentsIntentConfirmSepaDebitPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmSepaDebitPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsage {
	
	OFF_SESSION
	ON_SESSION
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsageAcssDebitPaymentMethodOptions {
	
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsageAffirmPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsageAfterpayClearpayPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsageAlipayPaymentMethodOptions {
	
	NONE
	OFF_SESSION
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsageAuBecsDebitPaymentMethodOptions {
	
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsageBacsDebitPaymentMethodOptions {
	
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsageBancontactPaymentMethodOptions {
	
	NONE
	OFF_SESSION
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsageBoletoPaymentMethodOptions {
	
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsageCardPaymentMethodOptions {
	
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsageCustomerBalancePaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsageEpsPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsageFpxPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsageGiropayPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsageGrabpayPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsageIdealPaymentMethodOptions {
	
	NONE
	OFF_SESSION
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsageKlarnaPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsageKonbiniPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsageLinkPaymentMethodOptions {
	
	NONE
	OFF_SESSION
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsageOxxoPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsageP24PaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsagePaynowPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsagePixPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsagePromptpayPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsageSepaDebitPaymentMethodOptions {
	
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsageSofortPaymentMethodOptions {
	
	NONE
	OFF_SESSION
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsageUsBankAccountPaymentMethodOptions {
	
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PostPaymentIntentsIntentConfirmSetupFutureUsageWechatPayPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentConfirmShipping {
	
}
input PostPaymentIntentsIntentConfirmShippingInput {
	trackingNumber: String!
	phone: String!
	name: String!
	carrier: String!
	address: PostPaymentIntentsIntentConfirmAddressShippingInput!
}
input PostPaymentIntentsIntentConfirmShippingUnionInput {
	postPaymentIntentsIntentConfirmShipping: PostPaymentIntentsIntentConfirmShipping
	postPaymentIntentsIntentConfirmShippingInput: PostPaymentIntentsIntentConfirmShippingInput
}
input PostPaymentIntentsIntentConfirmSofortPaymentMethodDataInput {
	country: PostPaymentIntentsIntentConfirmCountrySofortPaymentMethodData!
}
enum PostPaymentIntentsIntentConfirmSofortPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmSofortPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsageSofortPaymentMethodOptions!
	preferredLanguage: PostPaymentIntentsIntentConfirmPreferredLanguageSofortPaymentMethodOptions!
}
input PostPaymentIntentsIntentConfirmSofortPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmSofortPaymentMethodOptions: PostPaymentIntentsIntentConfirmSofortPaymentMethodOptions
	postPaymentIntentsIntentConfirmSofortPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmSofortPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentConfirmSupportedTypesMandateOptionsCardPaymentMethodOptions {
	INDIA
}
enum PostPaymentIntentsIntentConfirmTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions {
	BUSINESS
	PERSONAL
}
enum PostPaymentIntentsIntentConfirmTypeBankTransferCustomerBalancePaymentMethodOptions {
	EU_BANK_TRANSFER
	GB_BANK_TRANSFER
	JP_BANK_TRANSFER
	MX_BANK_TRANSFER
}
enum PostPaymentIntentsIntentConfirmTypeCustomerAcceptanceMandateData {
	ONLINE
}
enum PostPaymentIntentsIntentConfirmTypePaymentMethodData {
	ACSS_DEBIT
	AFFIRM
	AFTERPAY_CLEARPAY
	ALIPAY
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BLIK
	BOLETO
	CUSTOMER_BALANCE
	EPS
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KLARNA
	KONBINI
	LINK
	OXXO
	P_24
	PAYNOW
	PIX
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
enum PostPaymentIntentsIntentConfirmTypePlanInstallmentsCardPaymentMethodOptions {
	FIXED_COUNT
}
input PostPaymentIntentsIntentConfirmUsBankAccountPaymentMethodDataInput {
	routingNumber: String!
	financialConnectionsAccount: String!
	accountType: PostPaymentIntentsIntentConfirmAccountTypeUsBankAccountPaymentMethodData!
	accountNumber: String!
	accountHolderType: PostPaymentIntentsIntentConfirmAccountHolderTypeUsBankAccountPaymentMethodData!
}
enum PostPaymentIntentsIntentConfirmUsBankAccountPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmUsBankAccountPaymentMethodOptionsInput {
	verificationMethod: PostPaymentIntentsIntentConfirmVerificationMethodUsBankAccountPaymentMethodOptions!
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsageUsBankAccountPaymentMethodOptions!
	networks: PostPaymentIntentsIntentConfirmNetworksUsBankAccountPaymentMethodOptionsInput!
	financialConnections: PostPaymentIntentsIntentConfirmFinancialConnectionsUsBankAccountPaymentMethodOptionsInput!
}
input PostPaymentIntentsIntentConfirmUsBankAccountPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmUsBankAccountPaymentMethodOptions: PostPaymentIntentsIntentConfirmUsBankAccountPaymentMethodOptions
	postPaymentIntentsIntentConfirmUsBankAccountPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmUsBankAccountPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentConfirmVerificationMethodAcssDebitPaymentMethodOptions {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum PostPaymentIntentsIntentConfirmVerificationMethodUsBankAccountPaymentMethodOptions {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum PostPaymentIntentsIntentConfirmWechatPayPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentConfirmWechatPayPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentConfirmSetupFutureUsageWechatPayPaymentMethodOptions!
	client: PostPaymentIntentsIntentConfirmClientWechatPayPaymentMethodOptions!
	appId: String!
}
input PostPaymentIntentsIntentConfirmWechatPayPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentConfirmWechatPayPaymentMethodOptions: PostPaymentIntentsIntentConfirmWechatPayPaymentMethodOptions
	postPaymentIntentsIntentConfirmWechatPayPaymentMethodOptionsInput: PostPaymentIntentsIntentConfirmWechatPayPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentCountrySofortPaymentMethodData {
	AT
	BE
	DE
	ES
	IT
	NL
}
enum PostPaymentIntentsIntentCustomerBalancePaymentMethodOptions {
	
}
input PostPaymentIntentsIntentCustomerBalancePaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsageCustomerBalancePaymentMethodOptions!
	fundingType: PostPaymentIntentsIntentFundingTypeCustomerBalancePaymentMethodOptions!
	bankTransfer: PostPaymentIntentsIntentBankTransferCustomerBalancePaymentMethodOptionsInput!
}
input PostPaymentIntentsIntentCustomerBalancePaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentCustomerBalancePaymentMethodOptions: PostPaymentIntentsIntentCustomerBalancePaymentMethodOptions
	postPaymentIntentsIntentCustomerBalancePaymentMethodOptionsInput: PostPaymentIntentsIntentCustomerBalancePaymentMethodOptionsInput
}
input PostPaymentIntentsIntentDobKlarnaPaymentMethodDataInput {
	year: Int!
	month: Int!
	day: Int!
}
input PostPaymentIntentsIntentEpsPaymentMethodDataInput {
	bank: PostPaymentIntentsIntentBankEpsPaymentMethodData!
}
enum PostPaymentIntentsIntentEpsPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentEpsPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsageEpsPaymentMethodOptions!
}
input PostPaymentIntentsIntentEpsPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentEpsPaymentMethodOptions: PostPaymentIntentsIntentEpsPaymentMethodOptions
	postPaymentIntentsIntentEpsPaymentMethodOptionsInput: PostPaymentIntentsIntentEpsPaymentMethodOptionsInput
}
input PostPaymentIntentsIntentEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsInput {
	country: String!
}
input PostPaymentIntentsIntentFinancialConnectionsUsBankAccountPaymentMethodOptionsInput {
	returnUrl: String!
	permissions: [PostPaymentIntentsIntentPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions!]!
}
input PostPaymentIntentsIntentFpxPaymentMethodDataInput {
	bank: PostPaymentIntentsIntentBankFpxPaymentMethodData!
}
enum PostPaymentIntentsIntentFpxPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentFpxPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsageFpxPaymentMethodOptions!
}
input PostPaymentIntentsIntentFpxPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentFpxPaymentMethodOptions: PostPaymentIntentsIntentFpxPaymentMethodOptions
	postPaymentIntentsIntentFpxPaymentMethodOptionsInput: PostPaymentIntentsIntentFpxPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentFundingTypeCustomerBalancePaymentMethodOptions {
	BANK_TRANSFER
}
enum PostPaymentIntentsIntentGiropayPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentGiropayPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsageGiropayPaymentMethodOptions!
}
input PostPaymentIntentsIntentGiropayPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentGiropayPaymentMethodOptions: PostPaymentIntentsIntentGiropayPaymentMethodOptions
	postPaymentIntentsIntentGiropayPaymentMethodOptionsInput: PostPaymentIntentsIntentGiropayPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentGrabpayPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentGrabpayPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsageGrabpayPaymentMethodOptions!
}
input PostPaymentIntentsIntentGrabpayPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentGrabpayPaymentMethodOptions: PostPaymentIntentsIntentGrabpayPaymentMethodOptions
	postPaymentIntentsIntentGrabpayPaymentMethodOptionsInput: PostPaymentIntentsIntentGrabpayPaymentMethodOptionsInput
}
input PostPaymentIntentsIntentIdealPaymentMethodDataInput {
	bank: PostPaymentIntentsIntentBankIdealPaymentMethodData!
}
enum PostPaymentIntentsIntentIdealPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentIdealPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsageIdealPaymentMethodOptions!
}
input PostPaymentIntentsIntentIdealPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentIdealPaymentMethodOptions: PostPaymentIntentsIntentIdealPaymentMethodOptions
	postPaymentIntentsIntentIdealPaymentMethodOptionsInput: PostPaymentIntentsIntentIdealPaymentMethodOptionsInput
}
input PostPaymentIntentsIntentIncrementAuthorizationInput {
	transferData: PostPaymentIntentsIntentIncrementAuthorizationTransferDataInput!
	statementDescriptor: String!
	metadata: JSON!
	expand: [String!]!
	description: String!
	applicationFeeAmount: Int!
	amount: Int!
}
input PostPaymentIntentsIntentIncrementAuthorizationTransferDataInput {
	amount: Int!
}
input PostPaymentIntentsIntentInput {
	transferGroup: String!
	transferData: PostPaymentIntentsIntentTransferDataInput!
	statementDescriptorSuffix: String!
	statementDescriptor: String!
	shipping: PostPaymentIntentsIntentShippingUnionInput!
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsage!
	receiptEmail: UnionInput!
	paymentMethodTypes: [String!]!
	paymentMethodOptions: PostPaymentIntentsIntentPaymentMethodOptionsInput!
	paymentMethodData: PostPaymentIntentsIntentPaymentMethodDataInput!
	paymentMethod: String!
	metadata: UnionInput!
	expand: [String!]!
	description: String!
	customer: String!
	currency: String!
	captureMethod: PostPaymentIntentsIntentCaptureMethod!
	applicationFeeAmount: UnionInput!
	amount: Int!
}
input PostPaymentIntentsIntentInstallmentsCardPaymentMethodOptionsInput {
	plan: PostPaymentIntentsIntentPlanInstallmentsCardPaymentMethodOptionsUnionInput!
	enabled: Boolean!
}
enum PostPaymentIntentsIntentIntervalMandateOptionsCardPaymentMethodOptions {
	DAY
	MONTH
	SPORADIC
	WEEK
	YEAR
}
enum PostPaymentIntentsIntentIntervalPlanInstallmentsCardPaymentMethodOptions {
	MONTH
}
input PostPaymentIntentsIntentKlarnaPaymentMethodDataInput {
	dob: PostPaymentIntentsIntentDobKlarnaPaymentMethodDataInput!
}
enum PostPaymentIntentsIntentKlarnaPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentKlarnaPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsageKlarnaPaymentMethodOptions!
	preferredLocale: PostPaymentIntentsIntentPreferredLocaleKlarnaPaymentMethodOptions!
	captureMethod: PostPaymentIntentsIntentCaptureMethodKlarnaPaymentMethodOptions!
}
input PostPaymentIntentsIntentKlarnaPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentKlarnaPaymentMethodOptions: PostPaymentIntentsIntentKlarnaPaymentMethodOptions
	postPaymentIntentsIntentKlarnaPaymentMethodOptionsInput: PostPaymentIntentsIntentKlarnaPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentKonbiniPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentKonbiniPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsageKonbiniPaymentMethodOptions!
	productDescription: String!
	expiresAt: UnionInput!
	expiresAfterDays: UnionInput!
	confirmationNumber: String!
}
input PostPaymentIntentsIntentKonbiniPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentKonbiniPaymentMethodOptions: PostPaymentIntentsIntentKonbiniPaymentMethodOptions
	postPaymentIntentsIntentKonbiniPaymentMethodOptionsInput: PostPaymentIntentsIntentKonbiniPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentLinkPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentLinkPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsageLinkPaymentMethodOptions!
	persistentToken: String!
	captureMethod: PostPaymentIntentsIntentCaptureMethodLinkPaymentMethodOptions!
}
input PostPaymentIntentsIntentLinkPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentLinkPaymentMethodOptions: PostPaymentIntentsIntentLinkPaymentMethodOptions
	postPaymentIntentsIntentLinkPaymentMethodOptionsInput: PostPaymentIntentsIntentLinkPaymentMethodOptionsInput
}
input PostPaymentIntentsIntentMandateOptionsAcssDebitPaymentMethodOptionsInput {
	transactionType: PostPaymentIntentsIntentTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions!
	paymentSchedule: PostPaymentIntentsIntentPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions!
	intervalDescription: String!
	customMandateUrl: UnionInput!
}
input PostPaymentIntentsIntentMandateOptionsCardPaymentMethodOptionsInput {
	supportedTypes: [PostPaymentIntentsIntentSupportedTypesMandateOptionsCardPaymentMethodOptions!]!
	startDate: Int!
	reference: String!
	intervalCount: Int!
	interval: PostPaymentIntentsIntentIntervalMandateOptionsCardPaymentMethodOptions!
	endDate: Int!
	description: String!
	amountType: PostPaymentIntentsIntentAmountTypeMandateOptionsCardPaymentMethodOptions!
	amount: Int!
}
enum PostPaymentIntentsIntentNetworkCardPaymentMethodOptions {
	AMEX
	CARTES_BANCAIRES
	DINERS
	DISCOVER
	INTERAC
	JCB
	MASTERCARD
	UNIONPAY
	UNKNOWN
	VISA
}
input PostPaymentIntentsIntentNetworksUsBankAccountPaymentMethodOptionsInput {
	requested: [PostPaymentIntentsIntentRequestedNetworksUsBankAccountPaymentMethodOptions!]!
}
enum PostPaymentIntentsIntentOxxoPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentOxxoPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsageOxxoPaymentMethodOptions!
	expiresAfterDays: Int!
}
input PostPaymentIntentsIntentOxxoPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentOxxoPaymentMethodOptions: PostPaymentIntentsIntentOxxoPaymentMethodOptions
	postPaymentIntentsIntentOxxoPaymentMethodOptionsInput: PostPaymentIntentsIntentOxxoPaymentMethodOptionsInput
}
input PostPaymentIntentsIntentP24PaymentMethodDataInput {
	bank: PostPaymentIntentsIntentBankP24PaymentMethodData!
}
enum PostPaymentIntentsIntentP24PaymentMethodOptions {
	
}
input PostPaymentIntentsIntentP24PaymentMethodOptionsInput {
	tosShownAndAccepted: Boolean!
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsageP24PaymentMethodOptions!
}
input PostPaymentIntentsIntentP24PaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentP24PaymentMethodOptions: PostPaymentIntentsIntentP24PaymentMethodOptions
	postPaymentIntentsIntentP24PaymentMethodOptionsInput: PostPaymentIntentsIntentP24PaymentMethodOptionsInput
}
input PostPaymentIntentsIntentPaymentMethodDataInput {
	wechatPay: JSON!
	usBankAccount: PostPaymentIntentsIntentUsBankAccountPaymentMethodDataInput!
	type: PostPaymentIntentsIntentTypePaymentMethodData!
	sofort: PostPaymentIntentsIntentSofortPaymentMethodDataInput!
	sepaDebit: PostPaymentIntentsIntentSepaDebitPaymentMethodDataInput!
	radarOptions: PostPaymentIntentsIntentRadarOptionsPaymentMethodDataInput!
	promptpay: JSON!
	pix: JSON!
	paynow: JSON!
	p24: PostPaymentIntentsIntentP24PaymentMethodDataInput!
	oxxo: JSON!
	metadata: JSON!
	link: JSON!
	konbini: JSON!
	klarna: PostPaymentIntentsIntentKlarnaPaymentMethodDataInput!
	interacPresent: JSON!
	ideal: PostPaymentIntentsIntentIdealPaymentMethodDataInput!
	grabpay: JSON!
	giropay: JSON!
	fpx: PostPaymentIntentsIntentFpxPaymentMethodDataInput!
	eps: PostPaymentIntentsIntentEpsPaymentMethodDataInput!
	customerBalance: JSON!
	boleto: PostPaymentIntentsIntentBoletoPaymentMethodDataInput!
	blik: JSON!
	billingDetails: PostPaymentIntentsIntentBillingDetailsPaymentMethodDataInput!
	bancontact: JSON!
	bacsDebit: PostPaymentIntentsIntentBacsDebitPaymentMethodDataInput!
	auBecsDebit: PostPaymentIntentsIntentAuBecsDebitPaymentMethodDataInput!
	alipay: JSON!
	afterpayClearpay: JSON!
	affirm: JSON!
	acssDebit: PostPaymentIntentsIntentAcssDebitPaymentMethodDataInput!
}
input PostPaymentIntentsIntentPaymentMethodOptionsInput {
	wechatPay: PostPaymentIntentsIntentWechatPayPaymentMethodOptionsUnionInput!
	usBankAccount: PostPaymentIntentsIntentUsBankAccountPaymentMethodOptionsUnionInput!
	sofort: PostPaymentIntentsIntentSofortPaymentMethodOptionsUnionInput!
	sepaDebit: PostPaymentIntentsIntentSepaDebitPaymentMethodOptionsUnionInput!
	promptpay: PostPaymentIntentsIntentPromptpayPaymentMethodOptionsUnionInput!
	pix: PostPaymentIntentsIntentPixPaymentMethodOptionsUnionInput!
	paynow: PostPaymentIntentsIntentPaynowPaymentMethodOptionsUnionInput!
	p24: PostPaymentIntentsIntentP24PaymentMethodOptionsUnionInput!
	oxxo: PostPaymentIntentsIntentOxxoPaymentMethodOptionsUnionInput!
	link: PostPaymentIntentsIntentLinkPaymentMethodOptionsUnionInput!
	konbini: PostPaymentIntentsIntentKonbiniPaymentMethodOptionsUnionInput!
	klarna: PostPaymentIntentsIntentKlarnaPaymentMethodOptionsUnionInput!
	interacPresent: UnionInput!
	ideal: PostPaymentIntentsIntentIdealPaymentMethodOptionsUnionInput!
	grabpay: PostPaymentIntentsIntentGrabpayPaymentMethodOptionsUnionInput!
	giropay: PostPaymentIntentsIntentGiropayPaymentMethodOptionsUnionInput!
	fpx: PostPaymentIntentsIntentFpxPaymentMethodOptionsUnionInput!
	eps: PostPaymentIntentsIntentEpsPaymentMethodOptionsUnionInput!
	customerBalance: PostPaymentIntentsIntentCustomerBalancePaymentMethodOptionsUnionInput!
	cardPresent: PostPaymentIntentsIntentCardPresentPaymentMethodOptionsUnionInput!
	card: PostPaymentIntentsIntentCardPaymentMethodOptionsUnionInput!
	boleto: PostPaymentIntentsIntentBoletoPaymentMethodOptionsUnionInput!
	blik: PostPaymentIntentsIntentBlikPaymentMethodOptionsUnionInput!
	bancontact: PostPaymentIntentsIntentBancontactPaymentMethodOptionsUnionInput!
	bacsDebit: PostPaymentIntentsIntentBacsDebitPaymentMethodOptionsUnionInput!
	auBecsDebit: PostPaymentIntentsIntentAuBecsDebitPaymentMethodOptionsUnionInput!
	alipay: PostPaymentIntentsIntentAlipayPaymentMethodOptionsUnionInput!
	afterpayClearpay: PostPaymentIntentsIntentAfterpayClearpayPaymentMethodOptionsUnionInput!
	affirm: PostPaymentIntentsIntentAffirmPaymentMethodOptionsUnionInput!
	acssDebit: PostPaymentIntentsIntentAcssDebitPaymentMethodOptionsUnionInput!
}
enum PostPaymentIntentsIntentPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions {
	COMBINED
	INTERVAL
	SPORADIC
}
enum PostPaymentIntentsIntentPaynowPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentPaynowPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsagePaynowPaymentMethodOptions!
}
input PostPaymentIntentsIntentPaynowPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentPaynowPaymentMethodOptions: PostPaymentIntentsIntentPaynowPaymentMethodOptions
	postPaymentIntentsIntentPaynowPaymentMethodOptionsInput: PostPaymentIntentsIntentPaynowPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
enum PostPaymentIntentsIntentPixPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentPixPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsagePixPaymentMethodOptions!
	expiresAt: Int!
	expiresAfterSeconds: Int!
}
input PostPaymentIntentsIntentPixPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentPixPaymentMethodOptions: PostPaymentIntentsIntentPixPaymentMethodOptions
	postPaymentIntentsIntentPixPaymentMethodOptionsInput: PostPaymentIntentsIntentPixPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentPlanInstallmentsCardPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentPlanInstallmentsCardPaymentMethodOptionsInput {
	type: PostPaymentIntentsIntentTypePlanInstallmentsCardPaymentMethodOptions!
	interval: PostPaymentIntentsIntentIntervalPlanInstallmentsCardPaymentMethodOptions!
	count: Int!
}
input PostPaymentIntentsIntentPlanInstallmentsCardPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentPlanInstallmentsCardPaymentMethodOptions: PostPaymentIntentsIntentPlanInstallmentsCardPaymentMethodOptions
	postPaymentIntentsIntentPlanInstallmentsCardPaymentMethodOptionsInput: PostPaymentIntentsIntentPlanInstallmentsCardPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentPreferredLanguageBancontactPaymentMethodOptions {
	DE
	EN
	FR
	NL
}
enum PostPaymentIntentsIntentPreferredLanguageSofortPaymentMethodOptions {
	
	DE
	EN
	ES
	FR
	IT
	NL
	PL
}
enum PostPaymentIntentsIntentPreferredLocaleKlarnaPaymentMethodOptions {
	CS_CZ
	DA_DK
	DE_AT
	DE_CH
	DE_DE
	EL_GR
	EN_AT
	EN_AU
	EN_BE
	EN_CA
	EN_CH
	EN_CZ
	EN_DE
	EN_DK
	EN_ES
	EN_FI
	EN_FR
	EN_GB
	EN_GR
	EN_IE
	EN_IT
	EN_NL
	EN_NO
	EN_NZ
	EN_PL
	EN_PT
	EN_SE
	EN_US
	ES_ES
	ES_US
	FI_FI
	FR_BE
	FR_CA
	FR_CH
	FR_FR
	IT_CH
	IT_IT
	NB_NO
	NL_BE
	NL_NL
	PL_PL
	PT_PT
	SV_FI
	SV_SE
}
enum PostPaymentIntentsIntentPromptpayPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentPromptpayPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsagePromptpayPaymentMethodOptions!
}
input PostPaymentIntentsIntentPromptpayPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentPromptpayPaymentMethodOptions: PostPaymentIntentsIntentPromptpayPaymentMethodOptions
	postPaymentIntentsIntentPromptpayPaymentMethodOptionsInput: PostPaymentIntentsIntentPromptpayPaymentMethodOptionsInput
}
input PostPaymentIntentsIntentRadarOptionsPaymentMethodDataInput {
	session: String!
}
enum PostPaymentIntentsIntentRequestThreeDSecureCardPaymentMethodOptions {
	ANY
	AUTOMATIC
}
enum PostPaymentIntentsIntentRequestedAddressTypesBankTransferCustomerBalancePaymentMethodOptions {
	IBAN
	SEPA
	SORT_CODE
	SPEI
	ZENGIN
}
enum PostPaymentIntentsIntentRequestedNetworksUsBankAccountPaymentMethodOptions {
	ACH
	US_DOMESTIC_WIRE
}
input PostPaymentIntentsIntentSepaDebitPaymentMethodDataInput {
	iban: String!
}
enum PostPaymentIntentsIntentSepaDebitPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentSepaDebitPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsageSepaDebitPaymentMethodOptions!
	mandateOptions: JSON!
}
input PostPaymentIntentsIntentSepaDebitPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentSepaDebitPaymentMethodOptions: PostPaymentIntentsIntentSepaDebitPaymentMethodOptions
	postPaymentIntentsIntentSepaDebitPaymentMethodOptionsInput: PostPaymentIntentsIntentSepaDebitPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentSetupFutureUsage {
	
	OFF_SESSION
	ON_SESSION
}
enum PostPaymentIntentsIntentSetupFutureUsageAcssDebitPaymentMethodOptions {
	
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PostPaymentIntentsIntentSetupFutureUsageAffirmPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentSetupFutureUsageAfterpayClearpayPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentSetupFutureUsageAlipayPaymentMethodOptions {
	
	NONE
	OFF_SESSION
}
enum PostPaymentIntentsIntentSetupFutureUsageAuBecsDebitPaymentMethodOptions {
	
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PostPaymentIntentsIntentSetupFutureUsageBacsDebitPaymentMethodOptions {
	
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PostPaymentIntentsIntentSetupFutureUsageBancontactPaymentMethodOptions {
	
	NONE
	OFF_SESSION
}
enum PostPaymentIntentsIntentSetupFutureUsageBoletoPaymentMethodOptions {
	
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PostPaymentIntentsIntentSetupFutureUsageCardPaymentMethodOptions {
	
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PostPaymentIntentsIntentSetupFutureUsageCustomerBalancePaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentSetupFutureUsageEpsPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentSetupFutureUsageFpxPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentSetupFutureUsageGiropayPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentSetupFutureUsageGrabpayPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentSetupFutureUsageIdealPaymentMethodOptions {
	
	NONE
	OFF_SESSION
}
enum PostPaymentIntentsIntentSetupFutureUsageKlarnaPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentSetupFutureUsageKonbiniPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentSetupFutureUsageLinkPaymentMethodOptions {
	
	NONE
	OFF_SESSION
}
enum PostPaymentIntentsIntentSetupFutureUsageOxxoPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentSetupFutureUsageP24PaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentSetupFutureUsagePaynowPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentSetupFutureUsagePixPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentSetupFutureUsagePromptpayPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentSetupFutureUsageSepaDebitPaymentMethodOptions {
	
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PostPaymentIntentsIntentSetupFutureUsageSofortPaymentMethodOptions {
	
	NONE
	OFF_SESSION
}
enum PostPaymentIntentsIntentSetupFutureUsageUsBankAccountPaymentMethodOptions {
	
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PostPaymentIntentsIntentSetupFutureUsageWechatPayPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsIntentShipping {
	
}
input PostPaymentIntentsIntentShippingInput {
	trackingNumber: String!
	phone: String!
	name: String!
	carrier: String!
	address: PostPaymentIntentsIntentAddressShippingInput!
}
input PostPaymentIntentsIntentShippingUnionInput {
	postPaymentIntentsIntentShipping: PostPaymentIntentsIntentShipping
	postPaymentIntentsIntentShippingInput: PostPaymentIntentsIntentShippingInput
}
input PostPaymentIntentsIntentSofortPaymentMethodDataInput {
	country: PostPaymentIntentsIntentCountrySofortPaymentMethodData!
}
enum PostPaymentIntentsIntentSofortPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentSofortPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsageSofortPaymentMethodOptions!
	preferredLanguage: PostPaymentIntentsIntentPreferredLanguageSofortPaymentMethodOptions!
}
input PostPaymentIntentsIntentSofortPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentSofortPaymentMethodOptions: PostPaymentIntentsIntentSofortPaymentMethodOptions
	postPaymentIntentsIntentSofortPaymentMethodOptionsInput: PostPaymentIntentsIntentSofortPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentSupportedTypesMandateOptionsCardPaymentMethodOptions {
	INDIA
}
enum PostPaymentIntentsIntentTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions {
	BUSINESS
	PERSONAL
}
input PostPaymentIntentsIntentTransferDataInput {
	amount: Int!
}
enum PostPaymentIntentsIntentTypeBankTransferCustomerBalancePaymentMethodOptions {
	EU_BANK_TRANSFER
	GB_BANK_TRANSFER
	JP_BANK_TRANSFER
	MX_BANK_TRANSFER
}
enum PostPaymentIntentsIntentTypePaymentMethodData {
	ACSS_DEBIT
	AFFIRM
	AFTERPAY_CLEARPAY
	ALIPAY
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BLIK
	BOLETO
	CUSTOMER_BALANCE
	EPS
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KLARNA
	KONBINI
	LINK
	OXXO
	P_24
	PAYNOW
	PIX
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
enum PostPaymentIntentsIntentTypePlanInstallmentsCardPaymentMethodOptions {
	FIXED_COUNT
}
input PostPaymentIntentsIntentUsBankAccountPaymentMethodDataInput {
	routingNumber: String!
	financialConnectionsAccount: String!
	accountType: PostPaymentIntentsIntentAccountTypeUsBankAccountPaymentMethodData!
	accountNumber: String!
	accountHolderType: PostPaymentIntentsIntentAccountHolderTypeUsBankAccountPaymentMethodData!
}
enum PostPaymentIntentsIntentUsBankAccountPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentUsBankAccountPaymentMethodOptionsInput {
	verificationMethod: PostPaymentIntentsIntentVerificationMethodUsBankAccountPaymentMethodOptions!
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsageUsBankAccountPaymentMethodOptions!
	networks: PostPaymentIntentsIntentNetworksUsBankAccountPaymentMethodOptionsInput!
	financialConnections: PostPaymentIntentsIntentFinancialConnectionsUsBankAccountPaymentMethodOptionsInput!
}
input PostPaymentIntentsIntentUsBankAccountPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentUsBankAccountPaymentMethodOptions: PostPaymentIntentsIntentUsBankAccountPaymentMethodOptions
	postPaymentIntentsIntentUsBankAccountPaymentMethodOptionsInput: PostPaymentIntentsIntentUsBankAccountPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntentVerificationMethodAcssDebitPaymentMethodOptions {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum PostPaymentIntentsIntentVerificationMethodUsBankAccountPaymentMethodOptions {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
input PostPaymentIntentsIntentVerifyMicrodepositsInput {
	expand: [String!]!
	descriptorCode: String!
	clientSecret: String!
	amounts: [Int!]!
}
enum PostPaymentIntentsIntentWechatPayPaymentMethodOptions {
	
}
input PostPaymentIntentsIntentWechatPayPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsIntentSetupFutureUsageWechatPayPaymentMethodOptions!
	client: PostPaymentIntentsIntentClientWechatPayPaymentMethodOptions!
	appId: String!
}
input PostPaymentIntentsIntentWechatPayPaymentMethodOptionsUnionInput {
	postPaymentIntentsIntentWechatPayPaymentMethodOptions: PostPaymentIntentsIntentWechatPayPaymentMethodOptions
	postPaymentIntentsIntentWechatPayPaymentMethodOptionsInput: PostPaymentIntentsIntentWechatPayPaymentMethodOptionsInput
}
enum PostPaymentIntentsIntervalMandateOptionsCardPaymentMethodOptions {
	DAY
	MONTH
	SPORADIC
	WEEK
	YEAR
}
enum PostPaymentIntentsIntervalPlanInstallmentsCardPaymentMethodOptions {
	MONTH
}
input PostPaymentIntentsKlarnaPaymentMethodDataInput {
	dob: PostPaymentIntentsDobKlarnaPaymentMethodDataInput!
}
enum PostPaymentIntentsKlarnaPaymentMethodOptions {
	
}
input PostPaymentIntentsKlarnaPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsSetupFutureUsageKlarnaPaymentMethodOptions!
	preferredLocale: PostPaymentIntentsPreferredLocaleKlarnaPaymentMethodOptions!
	captureMethod: PostPaymentIntentsCaptureMethodKlarnaPaymentMethodOptions!
}
input PostPaymentIntentsKlarnaPaymentMethodOptionsUnionInput {
	postPaymentIntentsKlarnaPaymentMethodOptions: PostPaymentIntentsKlarnaPaymentMethodOptions
	postPaymentIntentsKlarnaPaymentMethodOptionsInput: PostPaymentIntentsKlarnaPaymentMethodOptionsInput
}
enum PostPaymentIntentsKonbiniPaymentMethodOptions {
	
}
input PostPaymentIntentsKonbiniPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsSetupFutureUsageKonbiniPaymentMethodOptions!
	productDescription: String!
	expiresAt: UnionInput!
	expiresAfterDays: UnionInput!
	confirmationNumber: String!
}
input PostPaymentIntentsKonbiniPaymentMethodOptionsUnionInput {
	postPaymentIntentsKonbiniPaymentMethodOptions: PostPaymentIntentsKonbiniPaymentMethodOptions
	postPaymentIntentsKonbiniPaymentMethodOptionsInput: PostPaymentIntentsKonbiniPaymentMethodOptionsInput
}
enum PostPaymentIntentsLinkPaymentMethodOptions {
	
}
input PostPaymentIntentsLinkPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsSetupFutureUsageLinkPaymentMethodOptions!
	persistentToken: String!
	captureMethod: PostPaymentIntentsCaptureMethodLinkPaymentMethodOptions!
}
input PostPaymentIntentsLinkPaymentMethodOptionsUnionInput {
	postPaymentIntentsLinkPaymentMethodOptions: PostPaymentIntentsLinkPaymentMethodOptions
	postPaymentIntentsLinkPaymentMethodOptionsInput: PostPaymentIntentsLinkPaymentMethodOptionsInput
}
input PostPaymentIntentsMandateDataInput {
	customerAcceptance: PostPaymentIntentsCustomerAcceptanceMandateDataInput!
}
input PostPaymentIntentsMandateOptionsAcssDebitPaymentMethodOptionsInput {
	transactionType: PostPaymentIntentsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions!
	paymentSchedule: PostPaymentIntentsPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions!
	intervalDescription: String!
	customMandateUrl: UnionInput!
}
input PostPaymentIntentsMandateOptionsCardPaymentMethodOptionsInput {
	supportedTypes: [PostPaymentIntentsSupportedTypesMandateOptionsCardPaymentMethodOptions!]!
	startDate: Int!
	reference: String!
	intervalCount: Int!
	interval: PostPaymentIntentsIntervalMandateOptionsCardPaymentMethodOptions!
	endDate: Int!
	description: String!
	amountType: PostPaymentIntentsAmountTypeMandateOptionsCardPaymentMethodOptions!
	amount: Int!
}
enum PostPaymentIntentsNetworkCardPaymentMethodOptions {
	AMEX
	CARTES_BANCAIRES
	DINERS
	DISCOVER
	INTERAC
	JCB
	MASTERCARD
	UNIONPAY
	UNKNOWN
	VISA
}
input PostPaymentIntentsNetworksUsBankAccountPaymentMethodOptionsInput {
	requested: [PostPaymentIntentsRequestedNetworksUsBankAccountPaymentMethodOptions!]!
}
input PostPaymentIntentsOnlineCustomerAcceptanceMandateDataInput {
	userAgent: String!
	ipAddress: String!
}
enum PostPaymentIntentsOxxoPaymentMethodOptions {
	
}
input PostPaymentIntentsOxxoPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsSetupFutureUsageOxxoPaymentMethodOptions!
	expiresAfterDays: Int!
}
input PostPaymentIntentsOxxoPaymentMethodOptionsUnionInput {
	postPaymentIntentsOxxoPaymentMethodOptions: PostPaymentIntentsOxxoPaymentMethodOptions
	postPaymentIntentsOxxoPaymentMethodOptionsInput: PostPaymentIntentsOxxoPaymentMethodOptionsInput
}
input PostPaymentIntentsP24PaymentMethodDataInput {
	bank: PostPaymentIntentsBankP24PaymentMethodData!
}
enum PostPaymentIntentsP24PaymentMethodOptions {
	
}
input PostPaymentIntentsP24PaymentMethodOptionsInput {
	tosShownAndAccepted: Boolean!
	setupFutureUsage: PostPaymentIntentsSetupFutureUsageP24PaymentMethodOptions!
}
input PostPaymentIntentsP24PaymentMethodOptionsUnionInput {
	postPaymentIntentsP24PaymentMethodOptions: PostPaymentIntentsP24PaymentMethodOptions
	postPaymentIntentsP24PaymentMethodOptionsInput: PostPaymentIntentsP24PaymentMethodOptionsInput
}
input PostPaymentIntentsPaymentMethodDataInput {
	wechatPay: JSON!
	usBankAccount: PostPaymentIntentsUsBankAccountPaymentMethodDataInput!
	type: PostPaymentIntentsTypePaymentMethodData!
	sofort: PostPaymentIntentsSofortPaymentMethodDataInput!
	sepaDebit: PostPaymentIntentsSepaDebitPaymentMethodDataInput!
	radarOptions: PostPaymentIntentsRadarOptionsPaymentMethodDataInput!
	promptpay: JSON!
	pix: JSON!
	paynow: JSON!
	p24: PostPaymentIntentsP24PaymentMethodDataInput!
	oxxo: JSON!
	metadata: JSON!
	link: JSON!
	konbini: JSON!
	klarna: PostPaymentIntentsKlarnaPaymentMethodDataInput!
	interacPresent: JSON!
	ideal: PostPaymentIntentsIdealPaymentMethodDataInput!
	grabpay: JSON!
	giropay: JSON!
	fpx: PostPaymentIntentsFpxPaymentMethodDataInput!
	eps: PostPaymentIntentsEpsPaymentMethodDataInput!
	customerBalance: JSON!
	boleto: PostPaymentIntentsBoletoPaymentMethodDataInput!
	blik: JSON!
	billingDetails: PostPaymentIntentsBillingDetailsPaymentMethodDataInput!
	bancontact: JSON!
	bacsDebit: PostPaymentIntentsBacsDebitPaymentMethodDataInput!
	auBecsDebit: PostPaymentIntentsAuBecsDebitPaymentMethodDataInput!
	alipay: JSON!
	afterpayClearpay: JSON!
	affirm: JSON!
	acssDebit: PostPaymentIntentsAcssDebitPaymentMethodDataInput!
}
input PostPaymentIntentsPaymentMethodOptionsInput {
	wechatPay: PostPaymentIntentsWechatPayPaymentMethodOptionsUnionInput!
	usBankAccount: PostPaymentIntentsUsBankAccountPaymentMethodOptionsUnionInput!
	sofort: PostPaymentIntentsSofortPaymentMethodOptionsUnionInput!
	sepaDebit: PostPaymentIntentsSepaDebitPaymentMethodOptionsUnionInput!
	promptpay: PostPaymentIntentsPromptpayPaymentMethodOptionsUnionInput!
	pix: PostPaymentIntentsPixPaymentMethodOptionsUnionInput!
	paynow: PostPaymentIntentsPaynowPaymentMethodOptionsUnionInput!
	p24: PostPaymentIntentsP24PaymentMethodOptionsUnionInput!
	oxxo: PostPaymentIntentsOxxoPaymentMethodOptionsUnionInput!
	link: PostPaymentIntentsLinkPaymentMethodOptionsUnionInput!
	konbini: PostPaymentIntentsKonbiniPaymentMethodOptionsUnionInput!
	klarna: PostPaymentIntentsKlarnaPaymentMethodOptionsUnionInput!
	interacPresent: UnionInput!
	ideal: PostPaymentIntentsIdealPaymentMethodOptionsUnionInput!
	grabpay: PostPaymentIntentsGrabpayPaymentMethodOptionsUnionInput!
	giropay: PostPaymentIntentsGiropayPaymentMethodOptionsUnionInput!
	fpx: PostPaymentIntentsFpxPaymentMethodOptionsUnionInput!
	eps: PostPaymentIntentsEpsPaymentMethodOptionsUnionInput!
	customerBalance: PostPaymentIntentsCustomerBalancePaymentMethodOptionsUnionInput!
	cardPresent: PostPaymentIntentsCardPresentPaymentMethodOptionsUnionInput!
	card: PostPaymentIntentsCardPaymentMethodOptionsUnionInput!
	boleto: PostPaymentIntentsBoletoPaymentMethodOptionsUnionInput!
	blik: PostPaymentIntentsBlikPaymentMethodOptionsUnionInput!
	bancontact: PostPaymentIntentsBancontactPaymentMethodOptionsUnionInput!
	bacsDebit: PostPaymentIntentsBacsDebitPaymentMethodOptionsUnionInput!
	auBecsDebit: PostPaymentIntentsAuBecsDebitPaymentMethodOptionsUnionInput!
	alipay: PostPaymentIntentsAlipayPaymentMethodOptionsUnionInput!
	afterpayClearpay: PostPaymentIntentsAfterpayClearpayPaymentMethodOptionsUnionInput!
	affirm: PostPaymentIntentsAffirmPaymentMethodOptionsUnionInput!
	acssDebit: PostPaymentIntentsAcssDebitPaymentMethodOptionsUnionInput!
}
enum PostPaymentIntentsPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions {
	COMBINED
	INTERVAL
	SPORADIC
}
enum PostPaymentIntentsPaynowPaymentMethodOptions {
	
}
input PostPaymentIntentsPaynowPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsSetupFutureUsagePaynowPaymentMethodOptions!
}
input PostPaymentIntentsPaynowPaymentMethodOptionsUnionInput {
	postPaymentIntentsPaynowPaymentMethodOptions: PostPaymentIntentsPaynowPaymentMethodOptions
	postPaymentIntentsPaynowPaymentMethodOptionsInput: PostPaymentIntentsPaynowPaymentMethodOptionsInput
}
enum PostPaymentIntentsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
enum PostPaymentIntentsPixPaymentMethodOptions {
	
}
input PostPaymentIntentsPixPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsSetupFutureUsagePixPaymentMethodOptions!
	expiresAt: Int!
	expiresAfterSeconds: Int!
}
input PostPaymentIntentsPixPaymentMethodOptionsUnionInput {
	postPaymentIntentsPixPaymentMethodOptions: PostPaymentIntentsPixPaymentMethodOptions
	postPaymentIntentsPixPaymentMethodOptionsInput: PostPaymentIntentsPixPaymentMethodOptionsInput
}
enum PostPaymentIntentsPlanInstallmentsCardPaymentMethodOptions {
	
}
input PostPaymentIntentsPlanInstallmentsCardPaymentMethodOptionsInput {
	type: PostPaymentIntentsTypePlanInstallmentsCardPaymentMethodOptions!
	interval: PostPaymentIntentsIntervalPlanInstallmentsCardPaymentMethodOptions!
	count: Int!
}
input PostPaymentIntentsPlanInstallmentsCardPaymentMethodOptionsUnionInput {
	postPaymentIntentsPlanInstallmentsCardPaymentMethodOptions: PostPaymentIntentsPlanInstallmentsCardPaymentMethodOptions
	postPaymentIntentsPlanInstallmentsCardPaymentMethodOptionsInput: PostPaymentIntentsPlanInstallmentsCardPaymentMethodOptionsInput
}
enum PostPaymentIntentsPreferredLanguageBancontactPaymentMethodOptions {
	DE
	EN
	FR
	NL
}
enum PostPaymentIntentsPreferredLanguageSofortPaymentMethodOptions {
	
	DE
	EN
	ES
	FR
	IT
	NL
	PL
}
enum PostPaymentIntentsPreferredLocaleKlarnaPaymentMethodOptions {
	CS_CZ
	DA_DK
	DE_AT
	DE_CH
	DE_DE
	EL_GR
	EN_AT
	EN_AU
	EN_BE
	EN_CA
	EN_CH
	EN_CZ
	EN_DE
	EN_DK
	EN_ES
	EN_FI
	EN_FR
	EN_GB
	EN_GR
	EN_IE
	EN_IT
	EN_NL
	EN_NO
	EN_NZ
	EN_PL
	EN_PT
	EN_SE
	EN_US
	ES_ES
	ES_US
	FI_FI
	FR_BE
	FR_CA
	FR_CH
	FR_FR
	IT_CH
	IT_IT
	NB_NO
	NL_BE
	NL_NL
	PL_PL
	PT_PT
	SV_FI
	SV_SE
}
enum PostPaymentIntentsPromptpayPaymentMethodOptions {
	
}
input PostPaymentIntentsPromptpayPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsSetupFutureUsagePromptpayPaymentMethodOptions!
}
input PostPaymentIntentsPromptpayPaymentMethodOptionsUnionInput {
	postPaymentIntentsPromptpayPaymentMethodOptions: PostPaymentIntentsPromptpayPaymentMethodOptions
	postPaymentIntentsPromptpayPaymentMethodOptionsInput: PostPaymentIntentsPromptpayPaymentMethodOptionsInput
}
input PostPaymentIntentsRadarOptionsInput {
	session: String!
}
input PostPaymentIntentsRadarOptionsPaymentMethodDataInput {
	session: String!
}
enum PostPaymentIntentsRequestThreeDSecureCardPaymentMethodOptions {
	ANY
	AUTOMATIC
}
enum PostPaymentIntentsRequestedAddressTypesBankTransferCustomerBalancePaymentMethodOptions {
	IBAN
	SEPA
	SORT_CODE
	SPEI
	ZENGIN
}
enum PostPaymentIntentsRequestedNetworksUsBankAccountPaymentMethodOptions {
	ACH
	US_DOMESTIC_WIRE
}
input PostPaymentIntentsSepaDebitPaymentMethodDataInput {
	iban: String!
}
enum PostPaymentIntentsSepaDebitPaymentMethodOptions {
	
}
input PostPaymentIntentsSepaDebitPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsSetupFutureUsageSepaDebitPaymentMethodOptions!
	mandateOptions: JSON!
}
input PostPaymentIntentsSepaDebitPaymentMethodOptionsUnionInput {
	postPaymentIntentsSepaDebitPaymentMethodOptions: PostPaymentIntentsSepaDebitPaymentMethodOptions
	postPaymentIntentsSepaDebitPaymentMethodOptionsInput: PostPaymentIntentsSepaDebitPaymentMethodOptionsInput
}
enum PostPaymentIntentsSetupFutureUsage {
	OFF_SESSION
	ON_SESSION
}
enum PostPaymentIntentsSetupFutureUsageAcssDebitPaymentMethodOptions {
	
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PostPaymentIntentsSetupFutureUsageAffirmPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsSetupFutureUsageAfterpayClearpayPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsSetupFutureUsageAlipayPaymentMethodOptions {
	
	NONE
	OFF_SESSION
}
enum PostPaymentIntentsSetupFutureUsageAuBecsDebitPaymentMethodOptions {
	
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PostPaymentIntentsSetupFutureUsageBacsDebitPaymentMethodOptions {
	
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PostPaymentIntentsSetupFutureUsageBancontactPaymentMethodOptions {
	
	NONE
	OFF_SESSION
}
enum PostPaymentIntentsSetupFutureUsageBoletoPaymentMethodOptions {
	
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PostPaymentIntentsSetupFutureUsageCardPaymentMethodOptions {
	
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PostPaymentIntentsSetupFutureUsageCustomerBalancePaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsSetupFutureUsageEpsPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsSetupFutureUsageFpxPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsSetupFutureUsageGiropayPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsSetupFutureUsageGrabpayPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsSetupFutureUsageIdealPaymentMethodOptions {
	
	NONE
	OFF_SESSION
}
enum PostPaymentIntentsSetupFutureUsageKlarnaPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsSetupFutureUsageKonbiniPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsSetupFutureUsageLinkPaymentMethodOptions {
	
	NONE
	OFF_SESSION
}
enum PostPaymentIntentsSetupFutureUsageOxxoPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsSetupFutureUsageP24PaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsSetupFutureUsagePaynowPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsSetupFutureUsagePixPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsSetupFutureUsagePromptpayPaymentMethodOptions {
	NONE
}
enum PostPaymentIntentsSetupFutureUsageSepaDebitPaymentMethodOptions {
	
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PostPaymentIntentsSetupFutureUsageSofortPaymentMethodOptions {
	
	NONE
	OFF_SESSION
}
enum PostPaymentIntentsSetupFutureUsageUsBankAccountPaymentMethodOptions {
	
	NONE
	OFF_SESSION
	ON_SESSION
}
enum PostPaymentIntentsSetupFutureUsageWechatPayPaymentMethodOptions {
	NONE
}
input PostPaymentIntentsShippingInput {
	trackingNumber: String!
	phone: String!
	name: String!
	carrier: String!
	address: PostPaymentIntentsAddressShippingInput!
}
input PostPaymentIntentsSofortPaymentMethodDataInput {
	country: PostPaymentIntentsCountrySofortPaymentMethodData!
}
enum PostPaymentIntentsSofortPaymentMethodOptions {
	
}
input PostPaymentIntentsSofortPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsSetupFutureUsageSofortPaymentMethodOptions!
	preferredLanguage: PostPaymentIntentsPreferredLanguageSofortPaymentMethodOptions!
}
input PostPaymentIntentsSofortPaymentMethodOptionsUnionInput {
	postPaymentIntentsSofortPaymentMethodOptions: PostPaymentIntentsSofortPaymentMethodOptions
	postPaymentIntentsSofortPaymentMethodOptionsInput: PostPaymentIntentsSofortPaymentMethodOptionsInput
}
enum PostPaymentIntentsSupportedTypesMandateOptionsCardPaymentMethodOptions {
	INDIA
}
enum PostPaymentIntentsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions {
	BUSINESS
	PERSONAL
}
input PostPaymentIntentsTransferDataInput {
	destination: String!
	amount: Int!
}
enum PostPaymentIntentsTypeBankTransferCustomerBalancePaymentMethodOptions {
	EU_BANK_TRANSFER
	GB_BANK_TRANSFER
	JP_BANK_TRANSFER
	MX_BANK_TRANSFER
}
enum PostPaymentIntentsTypeCustomerAcceptanceMandateData {
	OFFLINE
	ONLINE
}
enum PostPaymentIntentsTypePaymentMethodData {
	ACSS_DEBIT
	AFFIRM
	AFTERPAY_CLEARPAY
	ALIPAY
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BLIK
	BOLETO
	CUSTOMER_BALANCE
	EPS
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KLARNA
	KONBINI
	LINK
	OXXO
	P_24
	PAYNOW
	PIX
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
enum PostPaymentIntentsTypePlanInstallmentsCardPaymentMethodOptions {
	FIXED_COUNT
}
input PostPaymentIntentsUsBankAccountPaymentMethodDataInput {
	routingNumber: String!
	financialConnectionsAccount: String!
	accountType: PostPaymentIntentsAccountTypeUsBankAccountPaymentMethodData!
	accountNumber: String!
	accountHolderType: PostPaymentIntentsAccountHolderTypeUsBankAccountPaymentMethodData!
}
enum PostPaymentIntentsUsBankAccountPaymentMethodOptions {
	
}
input PostPaymentIntentsUsBankAccountPaymentMethodOptionsInput {
	verificationMethod: PostPaymentIntentsVerificationMethodUsBankAccountPaymentMethodOptions!
	setupFutureUsage: PostPaymentIntentsSetupFutureUsageUsBankAccountPaymentMethodOptions!
	networks: PostPaymentIntentsNetworksUsBankAccountPaymentMethodOptionsInput!
	financialConnections: PostPaymentIntentsFinancialConnectionsUsBankAccountPaymentMethodOptionsInput!
}
input PostPaymentIntentsUsBankAccountPaymentMethodOptionsUnionInput {
	postPaymentIntentsUsBankAccountPaymentMethodOptions: PostPaymentIntentsUsBankAccountPaymentMethodOptions
	postPaymentIntentsUsBankAccountPaymentMethodOptionsInput: PostPaymentIntentsUsBankAccountPaymentMethodOptionsInput
}
enum PostPaymentIntentsVerificationMethodAcssDebitPaymentMethodOptions {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum PostPaymentIntentsVerificationMethodUsBankAccountPaymentMethodOptions {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum PostPaymentIntentsWechatPayPaymentMethodOptions {
	
}
input PostPaymentIntentsWechatPayPaymentMethodOptionsInput {
	setupFutureUsage: PostPaymentIntentsSetupFutureUsageWechatPayPaymentMethodOptions!
	client: PostPaymentIntentsClientWechatPayPaymentMethodOptions!
	appId: String!
}
input PostPaymentIntentsWechatPayPaymentMethodOptionsUnionInput {
	postPaymentIntentsWechatPayPaymentMethodOptions: PostPaymentIntentsWechatPayPaymentMethodOptions
	postPaymentIntentsWechatPayPaymentMethodOptionsInput: PostPaymentIntentsWechatPayPaymentMethodOptionsInput
}
input PostPaymentLinksAdjustableQuantityLineItemsInput {
	minimum: Int!
	maximum: Int!
	enabled: Boolean!
}
input PostPaymentLinksAfterCompletionInput {
	type: PostPaymentLinksTypeAfterCompletion!
	redirect: PostPaymentLinksRedirectAfterCompletionInput!
	hostedConfirmation: PostPaymentLinksHostedConfirmationAfterCompletionInput!
}
enum PostPaymentLinksAllowedCountriesShippingAddressCollection {
	AC
	AD
	AE
	AF
	AG
	AI
	AL
	AM
	AO
	AQ
	AR
	AT
	AU
	AW
	AX
	AZ
	BA
	BB
	BD
	BE
	BF
	BG
	BH
	BI
	BJ
	BL
	BM
	BN
	BO
	BQ
	BR
	BS
	BT
	BV
	BW
	BY
	BZ
	CA
	CD
	CF
	CG
	CH
	CI
	CK
	CL
	CM
	CN
	CO
	CR
	CV
	CW
	CY
	CZ
	DE
	DJ
	DK
	DM
	DO
	DZ
	EC
	EE
	EG
	EH
	ER
	ES
	ET
	FI
	FJ
	FK
	FO
	FR
	GA
	GB
	GD
	GE
	GF
	GG
	GH
	GI
	GL
	GM
	GN
	GP
	GQ
	GR
	GS
	GT
	GU
	GW
	GY
	HK
	HN
	HR
	HT
	HU
	ID
	IE
	IL
	IM
	IN
	IO
	IQ
	IS
	IT
	JE
	JM
	JO
	JP
	KE
	KG
	KH
	KI
	KM
	KN
	KR
	KW
	KY
	KZ
	LA
	LB
	LC
	LI
	LK
	LR
	LS
	LT
	LU
	LV
	LY
	MA
	MC
	MD
	ME
	MF
	MG
	MK
	ML
	MM
	MN
	MO
	MQ
	MR
	MS
	MT
	MU
	MV
	MW
	MX
	MY
	MZ
	NA
	NC
	NE
	NG
	NI
	NL
	NO
	NP
	NR
	NU
	NZ
	OM
	PA
	PE
	PF
	PG
	PH
	PK
	PL
	PM
	PN
	PR
	PS
	PT
	PY
	QA
	RE
	RO
	RS
	RU
	RW
	SA
	SB
	SC
	SE
	SG
	SH
	SI
	SJ
	SK
	SL
	SM
	SN
	SO
	SR
	SS
	ST
	SV
	SX
	SZ
	TA
	TC
	TD
	TF
	TG
	TH
	TJ
	TK
	TL
	TM
	TN
	TO
	TR
	TT
	TV
	TW
	TZ
	UA
	UG
	US
	UY
	UZ
	VA
	VC
	VE
	VG
	VN
	VU
	WF
	WS
	XK
	YE
	YT
	ZA
	ZM
	ZW
	ZZ
}
enum PostPaymentLinksAmountTaxDisplayRenderingOptionsInvoiceDataInvoiceCreation {
	
	EXCLUDE_TAX
	INCLUDE_INCLUSIVE_TAX
}
input PostPaymentLinksAutomaticTaxInput {
	enabled: Boolean!
}
enum PostPaymentLinksBillingAddressCollection {
	AUTO
	REQUIRED
}
enum PostPaymentLinksCaptureMethodPaymentIntentData {
	AUTOMATIC
	MANUAL
}
input PostPaymentLinksConsentCollectionInput {
	termsOfService: PostPaymentLinksTermsOfServiceConsentCollection!
	promotions: PostPaymentLinksPromotionsConsentCollection!
}
enum PostPaymentLinksCustomFieldsInvoiceDataInvoiceCreation {
	
}
input PostPaymentLinksCustomFieldsInvoiceDataInvoiceCreationInput {
	value: String!
	name: String!
}
input PostPaymentLinksCustomFieldsInvoiceDataInvoiceCreationUnionInput {
	postPaymentLinksCustomFieldsInvoiceDataInvoiceCreation: PostPaymentLinksCustomFieldsInvoiceDataInvoiceCreation
	postPaymentLinksCustomFieldsInvoiceDataInvoiceCreationInput: PostPaymentLinksCustomFieldsInvoiceDataInvoiceCreationInput
}
input PostPaymentLinksCustomTextInput {
	submit: PostPaymentLinksSubmitCustomTextUnionInput!
	shippingAddress: PostPaymentLinksShippingAddressCustomTextUnionInput!
}
enum PostPaymentLinksCustomerCreation {
	ALWAYS
	IF_REQUIRED
}
input PostPaymentLinksHostedConfirmationAfterCompletionInput {
	customMessage: String!
}
input PostPaymentLinksInput {
	transferData: PostPaymentLinksTransferDataInput!
	taxIdCollection: PostPaymentLinksTaxIdCollectionInput!
	subscriptionData: PostPaymentLinksSubscriptionDataInput!
	submitType: PostPaymentLinksSubmitType!
	shippingOptions: [PostPaymentLinksShippingOptionsInput!]!
	shippingAddressCollection: PostPaymentLinksShippingAddressCollectionInput!
	phoneNumberCollection: PostPaymentLinksPhoneNumberCollectionInput!
	paymentMethodTypes: [PostPaymentLinksPaymentMethodTypes!]!
	paymentMethodCollection: PostPaymentLinksPaymentMethodCollection!
	paymentIntentData: PostPaymentLinksPaymentIntentDataInput!
	onBehalfOf: String!
	metadata: JSON!
	lineItems: [PostPaymentLinksLineItemsInput!]!
	invoiceCreation: PostPaymentLinksInvoiceCreationInput!
	expand: [String!]!
	customerCreation: PostPaymentLinksCustomerCreation!
	customText: PostPaymentLinksCustomTextInput!
	currency: String!
	consentCollection: PostPaymentLinksConsentCollectionInput!
	billingAddressCollection: PostPaymentLinksBillingAddressCollection!
	automaticTax: PostPaymentLinksAutomaticTaxInput!
	applicationFeePercent: Float!
	applicationFeeAmount: Int!
	allowPromotionCodes: Boolean!
	afterCompletion: PostPaymentLinksAfterCompletionInput!
}
input PostPaymentLinksInvoiceCreationInput {
	invoiceData: PostPaymentLinksInvoiceDataInvoiceCreationInput!
	enabled: Boolean!
}
input PostPaymentLinksInvoiceDataInvoiceCreationInput {
	renderingOptions: PostPaymentLinksRenderingOptionsInvoiceDataInvoiceCreationUnionInput!
	metadata: UnionInput!
	footer: String!
	description: String!
	customFields: PostPaymentLinksCustomFieldsInvoiceDataInvoiceCreationUnionInput!
	accountTaxIds: UnionInput!
}
input PostPaymentLinksLineItemsInput {
	quantity: Int!
	price: String!
	adjustableQuantity: PostPaymentLinksAdjustableQuantityLineItemsInput!
}
input PostPaymentLinksPaymentIntentDataInput {
	setupFutureUsage: PostPaymentLinksSetupFutureUsagePaymentIntentData!
	captureMethod: PostPaymentLinksCaptureMethodPaymentIntentData!
}
input PostPaymentLinksPaymentLinkAdjustableQuantityLineItemsInput {
	minimum: Int!
	maximum: Int!
	enabled: Boolean!
}
input PostPaymentLinksPaymentLinkAfterCompletionInput {
	type: PostPaymentLinksPaymentLinkTypeAfterCompletion!
	redirect: PostPaymentLinksPaymentLinkRedirectAfterCompletionInput!
	hostedConfirmation: PostPaymentLinksPaymentLinkHostedConfirmationAfterCompletionInput!
}
enum PostPaymentLinksPaymentLinkAllowedCountriesShippingAddressCollection {
	AC
	AD
	AE
	AF
	AG
	AI
	AL
	AM
	AO
	AQ
	AR
	AT
	AU
	AW
	AX
	AZ
	BA
	BB
	BD
	BE
	BF
	BG
	BH
	BI
	BJ
	BL
	BM
	BN
	BO
	BQ
	BR
	BS
	BT
	BV
	BW
	BY
	BZ
	CA
	CD
	CF
	CG
	CH
	CI
	CK
	CL
	CM
	CN
	CO
	CR
	CV
	CW
	CY
	CZ
	DE
	DJ
	DK
	DM
	DO
	DZ
	EC
	EE
	EG
	EH
	ER
	ES
	ET
	FI
	FJ
	FK
	FO
	FR
	GA
	GB
	GD
	GE
	GF
	GG
	GH
	GI
	GL
	GM
	GN
	GP
	GQ
	GR
	GS
	GT
	GU
	GW
	GY
	HK
	HN
	HR
	HT
	HU
	ID
	IE
	IL
	IM
	IN
	IO
	IQ
	IS
	IT
	JE
	JM
	JO
	JP
	KE
	KG
	KH
	KI
	KM
	KN
	KR
	KW
	KY
	KZ
	LA
	LB
	LC
	LI
	LK
	LR
	LS
	LT
	LU
	LV
	LY
	MA
	MC
	MD
	ME
	MF
	MG
	MK
	ML
	MM
	MN
	MO
	MQ
	MR
	MS
	MT
	MU
	MV
	MW
	MX
	MY
	MZ
	NA
	NC
	NE
	NG
	NI
	NL
	NO
	NP
	NR
	NU
	NZ
	OM
	PA
	PE
	PF
	PG
	PH
	PK
	PL
	PM
	PN
	PR
	PS
	PT
	PY
	QA
	RE
	RO
	RS
	RU
	RW
	SA
	SB
	SC
	SE
	SG
	SH
	SI
	SJ
	SK
	SL
	SM
	SN
	SO
	SR
	SS
	ST
	SV
	SX
	SZ
	TA
	TC
	TD
	TF
	TG
	TH
	TJ
	TK
	TL
	TM
	TN
	TO
	TR
	TT
	TV
	TW
	TZ
	UA
	UG
	US
	UY
	UZ
	VA
	VC
	VE
	VG
	VN
	VU
	WF
	WS
	XK
	YE
	YT
	ZA
	ZM
	ZW
	ZZ
}
enum PostPaymentLinksPaymentLinkAmountTaxDisplayRenderingOptionsInvoiceDataInvoiceCreation {
	
	EXCLUDE_TAX
	INCLUDE_INCLUSIVE_TAX
}
input PostPaymentLinksPaymentLinkAutomaticTaxInput {
	enabled: Boolean!
}
enum PostPaymentLinksPaymentLinkBillingAddressCollection {
	AUTO
	REQUIRED
}
enum PostPaymentLinksPaymentLinkCustomFieldsInvoiceDataInvoiceCreation {
	
}
input PostPaymentLinksPaymentLinkCustomFieldsInvoiceDataInvoiceCreationInput {
	value: String!
	name: String!
}
input PostPaymentLinksPaymentLinkCustomFieldsInvoiceDataInvoiceCreationUnionInput {
	postPaymentLinksPaymentLinkCustomFieldsInvoiceDataInvoiceCreation: PostPaymentLinksPaymentLinkCustomFieldsInvoiceDataInvoiceCreation
	postPaymentLinksPaymentLinkCustomFieldsInvoiceDataInvoiceCreationInput: PostPaymentLinksPaymentLinkCustomFieldsInvoiceDataInvoiceCreationInput
}
input PostPaymentLinksPaymentLinkCustomTextInput {
	submit: PostPaymentLinksPaymentLinkSubmitCustomTextUnionInput!
	shippingAddress: PostPaymentLinksPaymentLinkShippingAddressCustomTextUnionInput!
}
enum PostPaymentLinksPaymentLinkCustomerCreation {
	ALWAYS
	IF_REQUIRED
}
input PostPaymentLinksPaymentLinkHostedConfirmationAfterCompletionInput {
	customMessage: String!
}
input PostPaymentLinksPaymentLinkInput {
	shippingAddressCollection: PostPaymentLinksPaymentLinkShippingAddressCollectionUnionInput!
	paymentMethodTypes: UnionInput!
	paymentMethodCollection: PostPaymentLinksPaymentLinkPaymentMethodCollection!
	metadata: JSON!
	lineItems: [PostPaymentLinksPaymentLinkLineItemsInput!]!
	invoiceCreation: PostPaymentLinksPaymentLinkInvoiceCreationInput!
	expand: [String!]!
	customerCreation: PostPaymentLinksPaymentLinkCustomerCreation!
	customText: PostPaymentLinksPaymentLinkCustomTextInput!
	billingAddressCollection: PostPaymentLinksPaymentLinkBillingAddressCollection!
	automaticTax: PostPaymentLinksPaymentLinkAutomaticTaxInput!
	allowPromotionCodes: Boolean!
	afterCompletion: PostPaymentLinksPaymentLinkAfterCompletionInput!
	active: Boolean!
}
input PostPaymentLinksPaymentLinkInvoiceCreationInput {
	invoiceData: PostPaymentLinksPaymentLinkInvoiceDataInvoiceCreationInput!
	enabled: Boolean!
}
input PostPaymentLinksPaymentLinkInvoiceDataInvoiceCreationInput {
	renderingOptions: PostPaymentLinksPaymentLinkRenderingOptionsInvoiceDataInvoiceCreationUnionInput!
	metadata: UnionInput!
	footer: String!
	description: String!
	customFields: PostPaymentLinksPaymentLinkCustomFieldsInvoiceDataInvoiceCreationUnionInput!
	accountTaxIds: UnionInput!
}
input PostPaymentLinksPaymentLinkLineItemsInput {
	quantity: Int!
	id: String!
	adjustableQuantity: PostPaymentLinksPaymentLinkAdjustableQuantityLineItemsInput!
}
enum PostPaymentLinksPaymentLinkPaymentMethodCollection {
	ALWAYS
	IF_REQUIRED
}
input PostPaymentLinksPaymentLinkRedirectAfterCompletionInput {
	url: String!
}
enum PostPaymentLinksPaymentLinkRenderingOptionsInvoiceDataInvoiceCreation {
	
}
input PostPaymentLinksPaymentLinkRenderingOptionsInvoiceDataInvoiceCreationInput {
	amountTaxDisplay: PostPaymentLinksPaymentLinkAmountTaxDisplayRenderingOptionsInvoiceDataInvoiceCreation!
}
input PostPaymentLinksPaymentLinkRenderingOptionsInvoiceDataInvoiceCreationUnionInput {
	postPaymentLinksPaymentLinkRenderingOptionsInvoiceDataInvoiceCreation: PostPaymentLinksPaymentLinkRenderingOptionsInvoiceDataInvoiceCreation
	postPaymentLinksPaymentLinkRenderingOptionsInvoiceDataInvoiceCreationInput: PostPaymentLinksPaymentLinkRenderingOptionsInvoiceDataInvoiceCreationInput
}
enum PostPaymentLinksPaymentLinkShippingAddressCollection {
	
}
input PostPaymentLinksPaymentLinkShippingAddressCollectionInput {
	allowedCountries: [PostPaymentLinksPaymentLinkAllowedCountriesShippingAddressCollection!]!
}
input PostPaymentLinksPaymentLinkShippingAddressCollectionUnionInput {
	postPaymentLinksPaymentLinkShippingAddressCollection: PostPaymentLinksPaymentLinkShippingAddressCollection
	postPaymentLinksPaymentLinkShippingAddressCollectionInput: PostPaymentLinksPaymentLinkShippingAddressCollectionInput
}
enum PostPaymentLinksPaymentLinkShippingAddressCustomText {
	
}
input PostPaymentLinksPaymentLinkShippingAddressCustomTextInput {
	message: String!
}
input PostPaymentLinksPaymentLinkShippingAddressCustomTextUnionInput {
	postPaymentLinksPaymentLinkShippingAddressCustomText: PostPaymentLinksPaymentLinkShippingAddressCustomText
	postPaymentLinksPaymentLinkShippingAddressCustomTextInput: PostPaymentLinksPaymentLinkShippingAddressCustomTextInput
}
enum PostPaymentLinksPaymentLinkSubmitCustomText {
	
}
input PostPaymentLinksPaymentLinkSubmitCustomTextInput {
	message: String!
}
input PostPaymentLinksPaymentLinkSubmitCustomTextUnionInput {
	postPaymentLinksPaymentLinkSubmitCustomText: PostPaymentLinksPaymentLinkSubmitCustomText
	postPaymentLinksPaymentLinkSubmitCustomTextInput: PostPaymentLinksPaymentLinkSubmitCustomTextInput
}
enum PostPaymentLinksPaymentLinkTypeAfterCompletion {
	HOSTED_CONFIRMATION
	REDIRECT
}
enum PostPaymentLinksPaymentMethodCollection {
	ALWAYS
	IF_REQUIRED
}
enum PostPaymentLinksPaymentMethodTypes {
	AFFIRM
	AFTERPAY_CLEARPAY
	ALIPAY
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BLIK
	BOLETO
	CARD
	EPS
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KLARNA
	KONBINI
	OXXO
	P_24
	PAYNOW
	PIX
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
input PostPaymentLinksPhoneNumberCollectionInput {
	enabled: Boolean!
}
enum PostPaymentLinksPromotionsConsentCollection {
	AUTO
	NONE
}
input PostPaymentLinksRedirectAfterCompletionInput {
	url: String!
}
enum PostPaymentLinksRenderingOptionsInvoiceDataInvoiceCreation {
	
}
input PostPaymentLinksRenderingOptionsInvoiceDataInvoiceCreationInput {
	amountTaxDisplay: PostPaymentLinksAmountTaxDisplayRenderingOptionsInvoiceDataInvoiceCreation!
}
input PostPaymentLinksRenderingOptionsInvoiceDataInvoiceCreationUnionInput {
	postPaymentLinksRenderingOptionsInvoiceDataInvoiceCreation: PostPaymentLinksRenderingOptionsInvoiceDataInvoiceCreation
	postPaymentLinksRenderingOptionsInvoiceDataInvoiceCreationInput: PostPaymentLinksRenderingOptionsInvoiceDataInvoiceCreationInput
}
enum PostPaymentLinksSetupFutureUsagePaymentIntentData {
	OFF_SESSION
	ON_SESSION
}
input PostPaymentLinksShippingAddressCollectionInput {
	allowedCountries: [PostPaymentLinksAllowedCountriesShippingAddressCollection!]!
}
enum PostPaymentLinksShippingAddressCustomText {
	
}
input PostPaymentLinksShippingAddressCustomTextInput {
	message: String!
}
input PostPaymentLinksShippingAddressCustomTextUnionInput {
	postPaymentLinksShippingAddressCustomText: PostPaymentLinksShippingAddressCustomText
	postPaymentLinksShippingAddressCustomTextInput: PostPaymentLinksShippingAddressCustomTextInput
}
input PostPaymentLinksShippingOptionsInput {
	shippingRate: String!
}
enum PostPaymentLinksSubmitCustomText {
	
}
input PostPaymentLinksSubmitCustomTextInput {
	message: String!
}
input PostPaymentLinksSubmitCustomTextUnionInput {
	postPaymentLinksSubmitCustomText: PostPaymentLinksSubmitCustomText
	postPaymentLinksSubmitCustomTextInput: PostPaymentLinksSubmitCustomTextInput
}
enum PostPaymentLinksSubmitType {
	AUTO
	BOOK
	DONATE
	PAY
}
input PostPaymentLinksSubscriptionDataInput {
	trialPeriodDays: Int!
	description: String!
}
input PostPaymentLinksTaxIdCollectionInput {
	enabled: Boolean!
}
enum PostPaymentLinksTermsOfServiceConsentCollection {
	NONE
	REQUIRED
}
input PostPaymentLinksTransferDataInput {
	destination: String!
	amount: Int!
}
enum PostPaymentLinksTypeAfterCompletion {
	HOSTED_CONFIRMATION
	REDIRECT
}
enum PostPaymentMethodsAccountHolderTypeUsBankAccount {
	COMPANY
	INDIVIDUAL
}
enum PostPaymentMethodsAccountTypeUsBankAccount {
	CHECKING
	SAVINGS
}
input PostPaymentMethodsAcssDebitInput {
	transitNumber: String!
	institutionNumber: String!
	accountNumber: String!
}
enum PostPaymentMethodsAddressBillingDetails {
	
}
input PostPaymentMethodsAddressBillingDetailsInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostPaymentMethodsAddressBillingDetailsUnionInput {
	postPaymentMethodsAddressBillingDetails: PostPaymentMethodsAddressBillingDetails
	postPaymentMethodsAddressBillingDetailsInput: PostPaymentMethodsAddressBillingDetailsInput
}
input PostPaymentMethodsAuBecsDebitInput {
	bsbNumber: String!
	accountNumber: String!
}
input PostPaymentMethodsBacsDebitInput {
	sortCode: String!
	accountNumber: String!
}
enum PostPaymentMethodsBankEps {
	ARZTE_UND_APOTHEKER_BANK
	AUSTRIAN_ANADI_BANK_AG
	BANK_AUSTRIA
	BANKHAUS_CARL_SPANGLER
	BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG
	BAWAG_PSK_AG
	BKS_BANK_AG
	BRULL_KALLMUS_BANK_AG
	BTV_VIER_LANDER_BANK
	CAPITAL_BANK_GRAWE_GRUPPE_AG
	DEUTSCHE_BANK_AG
	DOLOMITENBANK
	EASYBANK_AG
	ERSTE_BANK_UND_SPARKASSEN
	HYPO_ALPEADRIABANK_INTERNATIONAL_AG
	HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT
	HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN
	HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK
	HYPO_TIROL_BANK_AG
	HYPO_VORARLBERG_BANK_AG
	MARCHFELDER_BANK
	OBERBANK_AG
	RAIFFEISEN_BANKENGRUPPE_OSTERREICH
	SCHOELLERBANK_AG
	SPARDA_BANK_WIEN
	VOLKSBANK_GRUPPE
	VOLKSKREDITBANK_AG
	VR_BANK_BRAUNAU
}
enum PostPaymentMethodsBankFpx {
	AFFIN_BANK
	AGROBANK
	ALLIANCE_BANK
	AMBANK
	BANK_ISLAM
	BANK_MUAMALAT
	BANK_OF_CHINA
	BANK_RAKYAT
	BSN
	CIMB
	DEUTSCHE_BANK
	HONG_LEONG_BANK
	HSBC
	KFH
	MAYBANK_2E
	MAYBANK_2U
	OCBC
	PB_ENTERPRISE
	PUBLIC_BANK
	RHB
	STANDARD_CHARTERED
	UOB
}
enum PostPaymentMethodsBankIdeal {
	ABN_AMRO
	ASN_BANK
	BUNQ
	HANDELSBANKEN
	ING
	KNAB
	MONEYOU
	RABOBANK
	REGIOBANK
	REVOLUT
	SNS_BANK
	TRIODOS_BANK
	VAN_LANSCHOT
}
enum PostPaymentMethodsBankP24 {
	ALIOR_BANK
	BANK_MILLENNIUM
	BANK_NOWY_BFG_SA
	BANK_PEKAO_SA
	BANKI_SPBDZIELCZE
	BLIK
	BNP_PARIBAS
	BOZ
	CITI_HANDLOWY
	CREDIT_AGRICOLE
	ENVELOBANK
	ETRANSFER_POCZTOWY_24
	GETIN_BANK
	IDEABANK
	ING
	INTELIGO
	MBANK_MTRANSFER
	NEST_PRZELEW
	NOBLE_PAY
	PBAC_Z_IPKO
	PLUS_BANK
	SANTANDER_PRZELEW_24
	TMOBILE_USBUGI_BANKOWE
	TOYOTA_BANK
	VOLKSWAGEN_BANK
}
input PostPaymentMethodsBillingDetailsInput {
	phone: String!
	name: String!
	email: UnionInput!
	address: PostPaymentMethodsAddressBillingDetailsUnionInput!
}
input PostPaymentMethodsBoletoInput {
	taxId: String!
}
input PostPaymentMethodsCardInput {
	token: String!
}
input PostPaymentMethodsCardOrPostPaymentMethodsCardUnionInput {
	postPaymentMethodsCardInput: PostPaymentMethodsCardInput
}
enum PostPaymentMethodsCountrySofort {
	AT
	BE
	DE
	ES
	IT
	NL
}
input PostPaymentMethodsDobKlarnaInput {
	year: Int!
	month: Int!
	day: Int!
}
input PostPaymentMethodsEpsInput {
	bank: PostPaymentMethodsBankEps!
}
input PostPaymentMethodsFpxInput {
	bank: PostPaymentMethodsBankFpx!
}
input PostPaymentMethodsIdealInput {
	bank: PostPaymentMethodsBankIdeal!
}
input PostPaymentMethodsInput {
	wechatPay: JSON!
	usBankAccount: PostPaymentMethodsUsBankAccountInput!
	type: PostPaymentMethodsType!
	sofort: PostPaymentMethodsSofortInput!
	sepaDebit: PostPaymentMethodsSepaDebitInput!
	radarOptions: PostPaymentMethodsRadarOptionsInput!
	promptpay: JSON!
	pix: JSON!
	paynow: JSON!
	paymentMethod: String!
	p24: PostPaymentMethodsP24Input!
	oxxo: JSON!
	metadata: JSON!
	link: JSON!
	konbini: JSON!
	klarna: PostPaymentMethodsKlarnaInput!
	interacPresent: JSON!
	ideal: PostPaymentMethodsIdealInput!
	grabpay: JSON!
	giropay: JSON!
	fpx: PostPaymentMethodsFpxInput!
	expand: [String!]!
	eps: PostPaymentMethodsEpsInput!
	customerBalance: JSON!
	customer: String!
	card: PostPaymentMethodsCardOrPostPaymentMethodsCardUnionInput!
	boleto: PostPaymentMethodsBoletoInput!
	blik: JSON!
	billingDetails: PostPaymentMethodsBillingDetailsInput!
	bancontact: JSON!
	bacsDebit: PostPaymentMethodsBacsDebitInput!
	auBecsDebit: PostPaymentMethodsAuBecsDebitInput!
	alipay: JSON!
	afterpayClearpay: JSON!
	affirm: JSON!
	acssDebit: PostPaymentMethodsAcssDebitInput!
}
input PostPaymentMethodsKlarnaInput {
	dob: PostPaymentMethodsDobKlarnaInput!
}
input PostPaymentMethodsP24Input {
	bank: PostPaymentMethodsBankP24!
}
enum PostPaymentMethodsPaymentMethodAccountHolderTypeUsBankAccount {
	COMPANY
	INDIVIDUAL
}
enum PostPaymentMethodsPaymentMethodAddressBillingDetails {
	
}
input PostPaymentMethodsPaymentMethodAddressBillingDetailsInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostPaymentMethodsPaymentMethodAddressBillingDetailsUnionInput {
	postPaymentMethodsPaymentMethodAddressBillingDetails: PostPaymentMethodsPaymentMethodAddressBillingDetails
	postPaymentMethodsPaymentMethodAddressBillingDetailsInput: PostPaymentMethodsPaymentMethodAddressBillingDetailsInput
}
input PostPaymentMethodsPaymentMethodAttachInput {
	expand: [String!]!
	customer: String!
}
input PostPaymentMethodsPaymentMethodBillingDetailsInput {
	phone: String!
	name: String!
	email: UnionInput!
	address: PostPaymentMethodsPaymentMethodAddressBillingDetailsUnionInput!
}
input PostPaymentMethodsPaymentMethodCardInput {
	expYear: Int!
	expMonth: Int!
}
input PostPaymentMethodsPaymentMethodDetachInput {
	expand: [String!]!
}
input PostPaymentMethodsPaymentMethodInput {
	usBankAccount: PostPaymentMethodsPaymentMethodUsBankAccountInput!
	metadata: UnionInput!
	link: JSON!
	expand: [String!]!
	card: PostPaymentMethodsPaymentMethodCardInput!
	billingDetails: PostPaymentMethodsPaymentMethodBillingDetailsInput!
}
input PostPaymentMethodsPaymentMethodUsBankAccountInput {
	accountHolderType: PostPaymentMethodsPaymentMethodAccountHolderTypeUsBankAccount!
}
input PostPaymentMethodsRadarOptionsInput {
	session: String!
}
input PostPaymentMethodsSepaDebitInput {
	iban: String!
}
input PostPaymentMethodsSofortInput {
	country: PostPaymentMethodsCountrySofort!
}
enum PostPaymentMethodsType {
	ACSS_DEBIT
	AFFIRM
	AFTERPAY_CLEARPAY
	ALIPAY
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BLIK
	BOLETO
	CARD
	CUSTOMER_BALANCE
	EPS
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KLARNA
	KONBINI
	LINK
	OXXO
	P_24
	PAYNOW
	PIX
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
input PostPaymentMethodsUsBankAccountInput {
	routingNumber: String!
	financialConnectionsAccount: String!
	accountType: PostPaymentMethodsAccountTypeUsBankAccount!
	accountNumber: String!
	accountHolderType: PostPaymentMethodsAccountHolderTypeUsBankAccount!
}
input PostPayoutsInput {
	statementDescriptor: String!
	sourceType: PostPayoutsSourceType!
	method: PostPayoutsMethod!
	metadata: JSON!
	expand: [String!]!
	destination: String!
	description: String!
	currency: String!
	amount: Int!
}
enum PostPayoutsMethod {
	INSTANT
	STANDARD
}
input PostPayoutsPayoutCancelInput {
	expand: [String!]!
}
input PostPayoutsPayoutInput {
	metadata: UnionInput!
	expand: [String!]!
}
input PostPayoutsPayoutReverseInput {
	metadata: JSON!
	expand: [String!]!
}
enum PostPayoutsSourceType {
	BANK_ACCOUNT
	CARD
	FPX
}
enum PostPlansAggregateUsage {
	LAST_DURING_PERIOD
	LAST_EVER
	MAX
	SUM
}
enum PostPlansBillingScheme {
	PER_UNIT
	TIERED
}
input PostPlansInput {
	usageType: PostPlansUsageType!
	trialPeriodDays: Int!
	transformUsage: PostPlansTransformUsageInput!
	tiersMode: PostPlansTiersMode!
	tiers: [PostPlansTiersInput!]!
	product: PostPlansProductUnionInput!
	nickname: String!
	metadata: UnionInput!
	intervalCount: Int!
	interval: PostPlansInterval!
	id: String!
	expand: [String!]!
	currency: String!
	billingScheme: PostPlansBillingScheme!
	amountDecimal: String!
	amount: Int!
	aggregateUsage: PostPlansAggregateUsage!
	active: Boolean!
}
enum PostPlansInterval {
	DAY
	MONTH
	WEEK
	YEAR
}
input PostPlansPlanInput {
	trialPeriodDays: Int!
	product: String!
	nickname: String!
	metadata: UnionInput!
	expand: [String!]!
	active: Boolean!
}
input PostPlansProductInput {
	unitLabel: String!
	taxCode: String!
	statementDescriptor: String!
	name: String!
	metadata: JSON!
	id: String!
	active: Boolean!
}
input PostPlansProductUnionInput {
	string: String
	postPlansProductInput: PostPlansProductInput
}
enum PostPlansRoundTransformUsage {
	DOWN
	UP
}
input PostPlansTiersInput {
	upTo: UnionInput!
	unitAmountDecimal: String!
	unitAmount: Int!
	flatAmountDecimal: String!
	flatAmount: Int!
}
enum PostPlansTiersMode {
	GRADUATED
	VOLUME
}
input PostPlansTransformUsageInput {
	round: PostPlansRoundTransformUsage!
	divideBy: Int!
}
enum PostPlansUsageType {
	LICENSED
	METERED
}
enum PostPricesAggregateUsageRecurring {
	LAST_DURING_PERIOD
	LAST_EVER
	MAX
	SUM
}
enum PostPricesBillingScheme {
	PER_UNIT
	TIERED
}
input PostPricesCustomUnitAmountInput {
	preset: Int!
	minimum: Int!
	maximum: Int!
	enabled: Boolean!
}
input PostPricesInput {
	unitAmountDecimal: String!
	unitAmount: Int!
	transformQuantity: PostPricesTransformQuantityInput!
	transferLookupKey: Boolean!
	tiersMode: PostPricesTiersMode!
	tiers: [PostPricesTiersInput!]!
	taxBehavior: PostPricesTaxBehavior!
	recurring: PostPricesRecurringInput!
	productData: PostPricesProductDataInput!
	product: String!
	nickname: String!
	metadata: JSON!
	lookupKey: String!
	expand: [String!]!
	customUnitAmount: PostPricesCustomUnitAmountInput!
	currencyOptions: JSON!
	currency: String!
	billingScheme: PostPricesBillingScheme!
	active: Boolean!
}
enum PostPricesIntervalRecurring {
	DAY
	MONTH
	WEEK
	YEAR
}
input PostPricesPriceInput {
	transferLookupKey: Boolean!
	taxBehavior: PostPricesPriceTaxBehavior!
	nickname: String!
	metadata: UnionInput!
	lookupKey: String!
	expand: [String!]!
	currencyOptions: UnionInput!
	active: Boolean!
}
enum PostPricesPriceTaxBehavior {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
input PostPricesProductDataInput {
	unitLabel: String!
	taxCode: String!
	statementDescriptor: String!
	name: String!
	metadata: JSON!
	id: String!
	active: Boolean!
}
input PostPricesRecurringInput {
	usageType: PostPricesUsageTypeRecurring!
	intervalCount: Int!
	interval: PostPricesIntervalRecurring!
	aggregateUsage: PostPricesAggregateUsageRecurring!
}
enum PostPricesRoundTransformQuantity {
	DOWN
	UP
}
enum PostPricesTaxBehavior {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
input PostPricesTiersInput {
	upTo: UnionInput!
	unitAmountDecimal: String!
	unitAmount: Int!
	flatAmountDecimal: String!
	flatAmount: Int!
}
enum PostPricesTiersMode {
	GRADUATED
	VOLUME
}
input PostPricesTransformQuantityInput {
	round: PostPricesRoundTransformQuantity!
	divideBy: Int!
}
enum PostPricesUsageTypeRecurring {
	LICENSED
	METERED
}
input PostProductsDefaultPriceDataInput {
	unitAmountDecimal: String!
	unitAmount: Int!
	taxBehavior: PostProductsTaxBehaviorDefaultPriceData!
	recurring: PostProductsRecurringDefaultPriceDataInput!
	currencyOptions: JSON!
	currency: String!
}
input PostProductsIdInput {
	url: UnionInput!
	unitLabel: String!
	taxCode: UnionInput!
	statementDescriptor: String!
	shippable: Boolean!
	packageDimensions: PostProductsIdPackageDimensionsUnionInput!
	name: String!
	metadata: UnionInput!
	images: UnionInput!
	expand: [String!]!
	description: String!
	defaultPrice: String!
	active: Boolean!
}
enum PostProductsIdPackageDimensions {
	
}
input PostProductsIdPackageDimensionsInput {
	width: Float!
	weight: Float!
	length: Float!
	height: Float!
}
input PostProductsIdPackageDimensionsUnionInput {
	postProductsIdPackageDimensions: PostProductsIdPackageDimensions
	postProductsIdPackageDimensionsInput: PostProductsIdPackageDimensionsInput
}
input PostProductsInput {
	url: String!
	unitLabel: String!
	taxCode: String!
	statementDescriptor: String!
	shippable: Boolean!
	packageDimensions: PostProductsPackageDimensionsInput!
	name: String!
	metadata: JSON!
	images: [String!]!
	id: String!
	expand: [String!]!
	description: String!
	defaultPriceData: PostProductsDefaultPriceDataInput!
	active: Boolean!
}
enum PostProductsIntervalRecurringDefaultPriceData {
	DAY
	MONTH
	WEEK
	YEAR
}
input PostProductsPackageDimensionsInput {
	width: Float!
	weight: Float!
	length: Float!
	height: Float!
}
input PostProductsRecurringDefaultPriceDataInput {
	intervalCount: Int!
	interval: PostProductsIntervalRecurringDefaultPriceData!
}
enum PostProductsTaxBehaviorDefaultPriceData {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
input PostPromotionCodesInput {
	restrictions: PostPromotionCodesRestrictionsInput!
	metadata: JSON!
	maxRedemptions: Int!
	expiresAt: Int!
	expand: [String!]!
	customer: String!
	coupon: String!
	code: String!
	active: Boolean!
}
input PostPromotionCodesPromotionCodeInput {
	restrictions: PostPromotionCodesPromotionCodeRestrictionsInput!
	metadata: UnionInput!
	expand: [String!]!
	active: Boolean!
}
input PostPromotionCodesPromotionCodeRestrictionsInput {
	currencyOptions: JSON!
}
input PostPromotionCodesRestrictionsInput {
	minimumAmountCurrency: String!
	minimumAmount: Int!
	firstTimeTransaction: Boolean!
	currencyOptions: JSON!
}
input PostQuotesAutomaticTaxInput {
	enabled: Boolean!
}
enum PostQuotesCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
enum PostQuotesDiscounts {
	
}
input PostQuotesDiscountsInput {
	discount: String!
	coupon: String!
}
input PostQuotesDiscountsUnionInput {
	postQuotesDiscounts: PostQuotesDiscounts
	postQuotesDiscountsInput: PostQuotesDiscountsInput
}
input PostQuotesFromQuoteInput {
	quote: String!
	isRevision: Boolean!
}
input PostQuotesInput {
	transferData: PostQuotesTransferDataUnionInput!
	testClock: String!
	subscriptionData: PostQuotesSubscriptionDataInput!
	onBehalfOf: UnionInput!
	metadata: JSON!
	lineItems: [PostQuotesLineItemsInput!]!
	invoiceSettings: PostQuotesInvoiceSettingsInput!
	header: String!
	fromQuote: PostQuotesFromQuoteInput!
	footer: String!
	expiresAt: Int!
	expand: [String!]!
	discounts: PostQuotesDiscountsUnionInput!
	description: String!
	defaultTaxRates: UnionInput!
	customer: String!
	collectionMethod: PostQuotesCollectionMethod!
	automaticTax: PostQuotesAutomaticTaxInput!
	applicationFeePercent: UnionInput!
	applicationFeeAmount: UnionInput!
}
enum PostQuotesIntervalRecurringPriceDataLineItems {
	DAY
	MONTH
	WEEK
	YEAR
}
input PostQuotesInvoiceSettingsInput {
	daysUntilDue: Int!
}
input PostQuotesLineItemsInput {
	taxRates: UnionInput!
	quantity: Int!
	priceData: PostQuotesPriceDataLineItemsInput!
	price: String!
}
input PostQuotesPriceDataLineItemsInput {
	unitAmountDecimal: String!
	unitAmount: Int!
	taxBehavior: PostQuotesTaxBehaviorPriceDataLineItems!
	recurring: PostQuotesRecurringPriceDataLineItemsInput!
	product: String!
	currency: String!
}
input PostQuotesQuoteAcceptInput {
	expand: [String!]!
}
input PostQuotesQuoteAutomaticTaxInput {
	enabled: Boolean!
}
input PostQuotesQuoteCancelInput {
	expand: [String!]!
}
enum PostQuotesQuoteCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
enum PostQuotesQuoteDiscounts {
	
}
input PostQuotesQuoteDiscountsInput {
	discount: String!
	coupon: String!
}
input PostQuotesQuoteDiscountsUnionInput {
	postQuotesQuoteDiscounts: PostQuotesQuoteDiscounts
	postQuotesQuoteDiscountsInput: PostQuotesQuoteDiscountsInput
}
input PostQuotesQuoteFinalizeInput {
	expiresAt: Int!
	expand: [String!]!
}
input PostQuotesQuoteInput {
	transferData: PostQuotesQuoteTransferDataUnionInput!
	subscriptionData: PostQuotesQuoteSubscriptionDataInput!
	onBehalfOf: UnionInput!
	metadata: JSON!
	lineItems: [PostQuotesQuoteLineItemsInput!]!
	invoiceSettings: PostQuotesQuoteInvoiceSettingsInput!
	header: String!
	footer: String!
	expiresAt: Int!
	expand: [String!]!
	discounts: PostQuotesQuoteDiscountsUnionInput!
	description: String!
	defaultTaxRates: UnionInput!
	customer: String!
	collectionMethod: PostQuotesQuoteCollectionMethod!
	automaticTax: PostQuotesQuoteAutomaticTaxInput!
	applicationFeePercent: UnionInput!
	applicationFeeAmount: UnionInput!
}
enum PostQuotesQuoteIntervalRecurringPriceDataLineItems {
	DAY
	MONTH
	WEEK
	YEAR
}
input PostQuotesQuoteInvoiceSettingsInput {
	daysUntilDue: Int!
}
input PostQuotesQuoteLineItemsInput {
	taxRates: UnionInput!
	quantity: Int!
	priceData: PostQuotesQuotePriceDataLineItemsInput!
	price: String!
	id: String!
}
input PostQuotesQuotePriceDataLineItemsInput {
	unitAmountDecimal: String!
	unitAmount: Int!
	taxBehavior: PostQuotesQuoteTaxBehaviorPriceDataLineItems!
	recurring: PostQuotesQuoteRecurringPriceDataLineItemsInput!
	product: String!
	currency: String!
}
input PostQuotesQuoteRecurringPriceDataLineItemsInput {
	intervalCount: Int!
	interval: PostQuotesQuoteIntervalRecurringPriceDataLineItems!
}
input PostQuotesQuoteSubscriptionDataInput {
	trialPeriodDays: UnionInput!
	effectiveDate: UnionInput!
	description: String!
}
enum PostQuotesQuoteTaxBehaviorPriceDataLineItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum PostQuotesQuoteTransferData {
	
}
input PostQuotesQuoteTransferDataInput {
	destination: String!
	amountPercent: Float!
	amount: Int!
}
input PostQuotesQuoteTransferDataUnionInput {
	postQuotesQuoteTransferData: PostQuotesQuoteTransferData
	postQuotesQuoteTransferDataInput: PostQuotesQuoteTransferDataInput
}
input PostQuotesRecurringPriceDataLineItemsInput {
	intervalCount: Int!
	interval: PostQuotesIntervalRecurringPriceDataLineItems!
}
input PostQuotesSubscriptionDataInput {
	trialPeriodDays: UnionInput!
	effectiveDate: UnionInput!
	description: String!
}
enum PostQuotesTaxBehaviorPriceDataLineItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum PostQuotesTransferData {
	
}
input PostQuotesTransferDataInput {
	destination: String!
	amountPercent: Float!
	amount: Int!
}
input PostQuotesTransferDataUnionInput {
	postQuotesTransferData: PostQuotesTransferData
	postQuotesTransferDataInput: PostQuotesTransferDataInput
}
input PostRadarValueListItemsInput {
	valueList: String!
	value: String!
	expand: [String!]!
}
input PostRadarValueListsInput {
	name: String!
	metadata: JSON!
	itemType: PostRadarValueListsItemType!
	expand: [String!]!
	alias: String!
}
enum PostRadarValueListsItemType {
	CARD_BIN
	CARD_FINGERPRINT
	CASE_SENSITIVE_STRING
	COUNTRY
	CUSTOMER_ID
	EMAIL
	IP_ADDRESS
	STRING
}
input PostRadarValueListsValueListInput {
	name: String!
	metadata: JSON!
	expand: [String!]!
	alias: String!
}
input PostRefundsInput {
	reverseTransfer: Boolean!
	refundApplicationFee: Boolean!
	reason: PostRefundsReason!
	paymentIntent: String!
	origin: PostRefundsOrigin!
	metadata: UnionInput!
	instructionsEmail: String!
	expand: [String!]!
	customer: String!
	currency: String!
	charge: String!
	amount: Int!
}
enum PostRefundsOrigin {
	CUSTOMER_BALANCE
}
enum PostRefundsReason {
	DUPLICATE
	FRAUDULENT
	REQUESTED_BY_CUSTOMER
}
input PostRefundsRefundCancelInput {
	expand: [String!]!
}
input PostRefundsRefundInput {
	metadata: UnionInput!
	expand: [String!]!
}
input PostReportingReportRunsInput {
	reportType: String!
	parameters: PostReportingReportRunsParametersInput!
	expand: [String!]!
}
input PostReportingReportRunsParametersInput {
	timezone: PostReportingReportRunsTimezoneParameters!
	reportingCategory: PostReportingReportRunsReportingCategoryParameters!
	payout: String!
	intervalStart: Int!
	intervalEnd: Int!
	currency: String!
	connectedAccount: String!
	columns: [String!]!
}
enum PostReportingReportRunsReportingCategoryParameters {
	ADVANCE
	ADVANCE_FUNDING
	ANTICIPATION_REPAYMENT
	CHARGE
	CHARGE_FAILURE
	CONNECT_COLLECTION_TRANSFER
	CONNECT_RESERVED_FUNDS
	CONTRIBUTION
	DISPUTE
	DISPUTE_REVERSAL
	FEE
	FINANCING_PAYDOWN
	FINANCING_PAYDOWN_REVERSAL
	FINANCING_PAYOUT
	FINANCING_PAYOUT_REVERSAL
	ISSUING_AUTHORIZATION_HOLD
	ISSUING_AUTHORIZATION_RELEASE
	ISSUING_DISPUTE
	ISSUING_TRANSACTION
	NETWORK_COST
	OTHER_ADJUSTMENT
	PARTIAL_CAPTURE_REVERSAL
	PAYOUT
	PAYOUT_REVERSAL
	PLATFORM_EARNING
	PLATFORM_EARNING_REFUND
	REFUND
	REFUND_FAILURE
	RISK_RESERVED_FUNDS
	TAX
	TOPUP
	TOPUP_REVERSAL
	TRANSFER
	TRANSFER_REVERSAL
}
enum PostReportingReportRunsTimezoneParameters {
	AFRICA_ABIDJAN
	AFRICA_ACCRA
	AFRICA_ADDIS_ABABA
	AFRICA_ALGIERS
	AFRICA_ASMARA
	AFRICA_ASMERA
	AFRICA_BAMAKO
	AFRICA_BANGUI
	AFRICA_BANJUL
	AFRICA_BISSAU
	AFRICA_BLANTYRE
	AFRICA_BRAZZAVILLE
	AFRICA_BUJUMBURA
	AFRICA_CAIRO
	AFRICA_CASABLANCA
	AFRICA_CEUTA
	AFRICA_CONAKRY
	AFRICA_DAKAR
	AFRICA_DAR_ES_SALAAM
	AFRICA_DJIBOUTI
	AFRICA_DOUALA
	AFRICA_EL_AAIUN
	AFRICA_FREETOWN
	AFRICA_GABORONE
	AFRICA_HARARE
	AFRICA_JOHANNESBURG
	AFRICA_JUBA
	AFRICA_KAMPALA
	AFRICA_KHARTOUM
	AFRICA_KIGALI
	AFRICA_KINSHASA
	AFRICA_LAGOS
	AFRICA_LIBREVILLE
	AFRICA_LOME
	AFRICA_LUANDA
	AFRICA_LUBUMBASHI
	AFRICA_LUSAKA
	AFRICA_MALABO
	AFRICA_MAPUTO
	AFRICA_MASERU
	AFRICA_MBABANE
	AFRICA_MOGADISHU
	AFRICA_MONROVIA
	AFRICA_NAIROBI
	AFRICA_NDJAMENA
	AFRICA_NIAMEY
	AFRICA_NOUAKCHOTT
	AFRICA_OUAGADOUGOU
	AFRICA_PORTO_NOVO
	AFRICA_SAO_TOME
	AFRICA_TIMBUKTU
	AFRICA_TRIPOLI
	AFRICA_TUNIS
	AFRICA_WINDHOEK
	AMERICA_ADAK
	AMERICA_ANCHORAGE
	AMERICA_ANGUILLA
	AMERICA_ANTIGUA
	AMERICA_ARAGUAINA
	AMERICA_ARGENTINA_BUENOS_AIRES
	AMERICA_ARGENTINA_CATAMARCA
	AMERICA_ARGENTINA_COMOD_RIVADAVIA
	AMERICA_ARGENTINA_CORDOBA
	AMERICA_ARGENTINA_JUJUY
	AMERICA_ARGENTINA_LA_RIOJA
	AMERICA_ARGENTINA_MENDOZA
	AMERICA_ARGENTINA_RIO_GALLEGOS
	AMERICA_ARGENTINA_SALTA
	AMERICA_ARGENTINA_SAN_JUAN
	AMERICA_ARGENTINA_SAN_LUIS
	AMERICA_ARGENTINA_TUCUMAN
	AMERICA_ARGENTINA_USHUAIA
	AMERICA_ARUBA
	AMERICA_ASUNCION
	AMERICA_ATIKOKAN
	AMERICA_ATKA
	AMERICA_BAHIA
	AMERICA_BAHIA_BANDERAS
	AMERICA_BARBADOS
	AMERICA_BELEM
	AMERICA_BELIZE
	AMERICA_BLANC_SABLON
	AMERICA_BOA_VISTA
	AMERICA_BOGOTA
	AMERICA_BOISE
	AMERICA_BUENOS_AIRES
	AMERICA_CAMBRIDGE_BAY
	AMERICA_CAMPO_GRANDE
	AMERICA_CANCUN
	AMERICA_CARACAS
	AMERICA_CATAMARCA
	AMERICA_CAYENNE
	AMERICA_CAYMAN
	AMERICA_CHICAGO
	AMERICA_CHIHUAHUA
	AMERICA_CIUDAD_JUAREZ
	AMERICA_CORAL_HARBOUR
	AMERICA_CORDOBA
	AMERICA_COSTA_RICA
	AMERICA_CRESTON
	AMERICA_CUIABA
	AMERICA_CURACAO
	AMERICA_DANMARKSHAVN
	AMERICA_DAWSON
	AMERICA_DAWSON_CREEK
	AMERICA_DENVER
	AMERICA_DETROIT
	AMERICA_DOMINICA
	AMERICA_EDMONTON
	AMERICA_EIRUNEPE
	AMERICA_EL_SALVADOR
	AMERICA_ENSENADA
	AMERICA_FORT_NELSON
	AMERICA_FORT_WAYNE
	AMERICA_FORTALEZA
	AMERICA_GLACE_BAY
	AMERICA_GODTHAB
	AMERICA_GOOSE_BAY
	AMERICA_GRAND_TURK
	AMERICA_GRENADA
	AMERICA_GUADELOUPE
	AMERICA_GUATEMALA
	AMERICA_GUAYAQUIL
	AMERICA_GUYANA
	AMERICA_HALIFAX
	AMERICA_HAVANA
	AMERICA_HERMOSILLO
	AMERICA_INDIANA_INDIANAPOLIS
	AMERICA_INDIANA_KNOX
	AMERICA_INDIANA_MARENGO
	AMERICA_INDIANA_PETERSBURG
	AMERICA_INDIANA_TELL_CITY
	AMERICA_INDIANA_VEVAY
	AMERICA_INDIANA_VINCENNES
	AMERICA_INDIANA_WINAMAC
	AMERICA_INDIANAPOLIS
	AMERICA_INUVIK
	AMERICA_IQALUIT
	AMERICA_JAMAICA
	AMERICA_JUJUY
	AMERICA_JUNEAU
	AMERICA_KENTUCKY_LOUISVILLE
	AMERICA_KENTUCKY_MONTICELLO
	AMERICA_KNOX_IN
	AMERICA_KRALENDIJK
	AMERICA_LA_PAZ
	AMERICA_LIMA
	AMERICA_LOS_ANGELES
	AMERICA_LOUISVILLE
	AMERICA_LOWER_PRINCES
	AMERICA_MACEIO
	AMERICA_MANAGUA
	AMERICA_MANAUS
	AMERICA_MARIGOT
	AMERICA_MARTINIQUE
	AMERICA_MATAMOROS
	AMERICA_MAZATLAN
	AMERICA_MENDOZA
	AMERICA_MENOMINEE
	AMERICA_MERIDA
	AMERICA_METLAKATLA
	AMERICA_MEXICO_CITY
	AMERICA_MIQUELON
	AMERICA_MONCTON
	AMERICA_MONTERREY
	AMERICA_MONTEVIDEO
	AMERICA_MONTREAL
	AMERICA_MONTSERRAT
	AMERICA_NASSAU
	AMERICA_NEW_YORK
	AMERICA_NIPIGON
	AMERICA_NOME
	AMERICA_NORONHA
	AMERICA_NORTH_DAKOTA_BEULAH
	AMERICA_NORTH_DAKOTA_CENTER
	AMERICA_NORTH_DAKOTA_NEW_SALEM
	AMERICA_NUUK
	AMERICA_OJINAGA
	AMERICA_PANAMA
	AMERICA_PANGNIRTUNG
	AMERICA_PARAMARIBO
	AMERICA_PHOENIX
	AMERICA_PORT_AU_PRINCE
	AMERICA_PORT_OF_SPAIN
	AMERICA_PORTO_ACRE
	AMERICA_PORTO_VELHO
	AMERICA_PUERTO_RICO
	AMERICA_PUNTA_ARENAS
	AMERICA_RAINY_RIVER
	AMERICA_RANKIN_INLET
	AMERICA_RECIFE
	AMERICA_REGINA
	AMERICA_RESOLUTE
	AMERICA_RIO_BRANCO
	AMERICA_ROSARIO
	AMERICA_SANTA_ISABEL
	AMERICA_SANTAREM
	AMERICA_SANTIAGO
	AMERICA_SANTO_DOMINGO
	AMERICA_SAO_PAULO
	AMERICA_SCORESBYSUND
	AMERICA_SHIPROCK
	AMERICA_SITKA
	AMERICA_ST_BARTHELEMY
	AMERICA_ST_JOHNS
	AMERICA_ST_KITTS
	AMERICA_ST_LUCIA
	AMERICA_ST_THOMAS
	AMERICA_ST_VINCENT
	AMERICA_SWIFT_CURRENT
	AMERICA_TEGUCIGALPA
	AMERICA_THULE
	AMERICA_THUNDER_BAY
	AMERICA_TIJUANA
	AMERICA_TORONTO
	AMERICA_TORTOLA
	AMERICA_VANCOUVER
	AMERICA_VIRGIN
	AMERICA_WHITEHORSE
	AMERICA_WINNIPEG
	AMERICA_YAKUTAT
	AMERICA_YELLOWKNIFE
	ANTARCTICA_CASEY
	ANTARCTICA_DAVIS
	ANTARCTICA_DUMONT_D_URVILLE
	ANTARCTICA_MACQUARIE
	ANTARCTICA_MAWSON
	ANTARCTICA_MC_MURDO
	ANTARCTICA_PALMER
	ANTARCTICA_ROTHERA
	ANTARCTICA_SOUTH_POLE
	ANTARCTICA_SYOWA
	ANTARCTICA_TROLL
	ANTARCTICA_VOSTOK
	ARCTIC_LONGYEARBYEN
	ASIA_ADEN
	ASIA_ALMATY
	ASIA_AMMAN
	ASIA_ANADYR
	ASIA_AQTAU
	ASIA_AQTOBE
	ASIA_ASHGABAT
	ASIA_ASHKHABAD
	ASIA_ATYRAU
	ASIA_BAGHDAD
	ASIA_BAHRAIN
	ASIA_BAKU
	ASIA_BANGKOK
	ASIA_BARNAUL
	ASIA_BEIRUT
	ASIA_BISHKEK
	ASIA_BRUNEI
	ASIA_CALCUTTA
	ASIA_CHITA
	ASIA_CHOIBALSAN
	ASIA_CHONGQING
	ASIA_CHUNGKING
	ASIA_COLOMBO
	ASIA_DACCA
	ASIA_DAMASCUS
	ASIA_DHAKA
	ASIA_DILI
	ASIA_DUBAI
	ASIA_DUSHANBE
	ASIA_FAMAGUSTA
	ASIA_GAZA
	ASIA_HARBIN
	ASIA_HEBRON
	ASIA_HO_CHI_MINH
	ASIA_HONG_KONG
	ASIA_HOVD
	ASIA_IRKUTSK
	ASIA_ISTANBUL
	ASIA_JAKARTA
	ASIA_JAYAPURA
	ASIA_JERUSALEM
	ASIA_KABUL
	ASIA_KAMCHATKA
	ASIA_KARACHI
	ASIA_KASHGAR
	ASIA_KATHMANDU
	ASIA_KATMANDU
	ASIA_KHANDYGA
	ASIA_KOLKATA
	ASIA_KRASNOYARSK
	ASIA_KUALA_LUMPUR
	ASIA_KUCHING
	ASIA_KUWAIT
	ASIA_MACAO
	ASIA_MACAU
	ASIA_MAGADAN
	ASIA_MAKASSAR
	ASIA_MANILA
	ASIA_MUSCAT
	ASIA_NICOSIA
	ASIA_NOVOKUZNETSK
	ASIA_NOVOSIBIRSK
	ASIA_OMSK
	ASIA_ORAL
	ASIA_PHNOM_PENH
	ASIA_PONTIANAK
	ASIA_PYONGYANG
	ASIA_QATAR
	ASIA_QOSTANAY
	ASIA_QYZYLORDA
	ASIA_RANGOON
	ASIA_RIYADH
	ASIA_SAIGON
	ASIA_SAKHALIN
	ASIA_SAMARKAND
	ASIA_SEOUL
	ASIA_SHANGHAI
	ASIA_SINGAPORE
	ASIA_SREDNEKOLYMSK
	ASIA_TAIPEI
	ASIA_TASHKENT
	ASIA_TBILISI
	ASIA_TEHRAN
	ASIA_TEL_AVIV
	ASIA_THIMBU
	ASIA_THIMPHU
	ASIA_TOKYO
	ASIA_TOMSK
	ASIA_UJUNG_PANDANG
	ASIA_ULAANBAATAR
	ASIA_ULAN_BATOR
	ASIA_URUMQI
	ASIA_UST_NERA
	ASIA_VIENTIANE
	ASIA_VLADIVOSTOK
	ASIA_YAKUTSK
	ASIA_YANGON
	ASIA_YEKATERINBURG
	ASIA_YEREVAN
	ATLANTIC_AZORES
	ATLANTIC_BERMUDA
	ATLANTIC_CANARY
	ATLANTIC_CAPE_VERDE
	ATLANTIC_FAEROE
	ATLANTIC_FAROE
	ATLANTIC_JAN_MAYEN
	ATLANTIC_MADEIRA
	ATLANTIC_REYKJAVIK
	ATLANTIC_SOUTH_GEORGIA
	ATLANTIC_ST_HELENA
	ATLANTIC_STANLEY
	AUSTRALIA_ACT
	AUSTRALIA_ADELAIDE
	AUSTRALIA_BRISBANE
	AUSTRALIA_BROKEN_HILL
	AUSTRALIA_CANBERRA
	AUSTRALIA_CURRIE
	AUSTRALIA_DARWIN
	AUSTRALIA_EUCLA
	AUSTRALIA_HOBART
	AUSTRALIA_LHI
	AUSTRALIA_LINDEMAN
	AUSTRALIA_LORD_HOWE
	AUSTRALIA_MELBOURNE
	AUSTRALIA_NSW
	AUSTRALIA_NORTH
	AUSTRALIA_PERTH
	AUSTRALIA_QUEENSLAND
	AUSTRALIA_SOUTH
	AUSTRALIA_SYDNEY
	AUSTRALIA_TASMANIA
	AUSTRALIA_VICTORIA
	AUSTRALIA_WEST
	AUSTRALIA_YANCOWINNA
	BRAZIL_ACRE
	BRAZIL_DE_NORONHA
	BRAZIL_EAST
	BRAZIL_WEST
	CET
	CST6CDT
	CANADA_ATLANTIC
	CANADA_CENTRAL
	CANADA_EASTERN
	CANADA_MOUNTAIN
	CANADA_NEWFOUNDLAND
	CANADA_PACIFIC
	CANADA_SASKATCHEWAN
	CANADA_YUKON
	CHILE_CONTINENTAL
	CHILE_EASTER_ISLAND
	CUBA
	EET
	EST
	EST5EDT
	EGYPT
	EIRE
	ETC_GMT
	ETC_GMT_0
	ETC_GMT_1
	ETC_GMT_10
	ETC_GMT_11
	ETC_GMT_12
	ETC_GMT_2
	ETC_GMT_3
	ETC_GMT_4
	ETC_GMT_5
	ETC_GMT_6
	ETC_GMT_7
	ETC_GMT_8
	ETC_GMT_9
	ETC_GMT_13
	ETC_GMT_14
	ETC_GMT0
	ETC_GREENWICH
	ETC_UCT
	ETC_UTC
	ETC_UNIVERSAL
	ETC_ZULU
	EUROPE_AMSTERDAM
	EUROPE_ANDORRA
	EUROPE_ASTRAKHAN
	EUROPE_ATHENS
	EUROPE_BELFAST
	EUROPE_BELGRADE
	EUROPE_BERLIN
	EUROPE_BRATISLAVA
	EUROPE_BRUSSELS
	EUROPE_BUCHAREST
	EUROPE_BUDAPEST
	EUROPE_BUSINGEN
	EUROPE_CHISINAU
	EUROPE_COPENHAGEN
	EUROPE_DUBLIN
	EUROPE_GIBRALTAR
	EUROPE_GUERNSEY
	EUROPE_HELSINKI
	EUROPE_ISLE_OF_MAN
	EUROPE_ISTANBUL
	EUROPE_JERSEY
	EUROPE_KALININGRAD
	EUROPE_KIEV
	EUROPE_KIROV
	EUROPE_KYIV
	EUROPE_LISBON
	EUROPE_LJUBLJANA
	EUROPE_LONDON
	EUROPE_LUXEMBOURG
	EUROPE_MADRID
	EUROPE_MALTA
	EUROPE_MARIEHAMN
	EUROPE_MINSK
	EUROPE_MONACO
	EUROPE_MOSCOW
	EUROPE_NICOSIA
	EUROPE_OSLO
	EUROPE_PARIS
	EUROPE_PODGORICA
	EUROPE_PRAGUE
	EUROPE_RIGA
	EUROPE_ROME
	EUROPE_SAMARA
	EUROPE_SAN_MARINO
	EUROPE_SARAJEVO
	EUROPE_SARATOV
	EUROPE_SIMFEROPOL
	EUROPE_SKOPJE
	EUROPE_SOFIA
	EUROPE_STOCKHOLM
	EUROPE_TALLINN
	EUROPE_TIRANE
	EUROPE_TIRASPOL
	EUROPE_ULYANOVSK
	EUROPE_UZHGOROD
	EUROPE_VADUZ
	EUROPE_VATICAN
	EUROPE_VIENNA
	EUROPE_VILNIUS
	EUROPE_VOLGOGRAD
	EUROPE_WARSAW
	EUROPE_ZAGREB
	EUROPE_ZAPOROZHYE
	EUROPE_ZURICH
	FACTORY
	GB
	GB_EIRE
	GMT
	GMT_0
	GMT0
	GREENWICH
	HST
	HONGKONG
	ICELAND
	INDIAN_ANTANANARIVO
	INDIAN_CHAGOS
	INDIAN_CHRISTMAS
	INDIAN_COCOS
	INDIAN_COMORO
	INDIAN_KERGUELEN
	INDIAN_MAHE
	INDIAN_MALDIVES
	INDIAN_MAURITIUS
	INDIAN_MAYOTTE
	INDIAN_REUNION
	IRAN
	ISRAEL
	JAMAICA
	JAPAN
	KWAJALEIN
	LIBYA
	MET
	MST
	MST7MDT
	MEXICO_BAJA_NORTE
	MEXICO_BAJA_SUR
	MEXICO_GENERAL
	NZ
	NZ_CHAT
	NAVAJO
	PRC
	PST8PDT
	PACIFIC_APIA
	PACIFIC_AUCKLAND
	PACIFIC_BOUGAINVILLE
	PACIFIC_CHATHAM
	PACIFIC_CHUUK
	PACIFIC_EASTER
	PACIFIC_EFATE
	PACIFIC_ENDERBURY
	PACIFIC_FAKAOFO
	PACIFIC_FIJI
	PACIFIC_FUNAFUTI
	PACIFIC_GALAPAGOS
	PACIFIC_GAMBIER
	PACIFIC_GUADALCANAL
	PACIFIC_GUAM
	PACIFIC_HONOLULU
	PACIFIC_JOHNSTON
	PACIFIC_KANTON
	PACIFIC_KIRITIMATI
	PACIFIC_KOSRAE
	PACIFIC_KWAJALEIN
	PACIFIC_MAJURO
	PACIFIC_MARQUESAS
	PACIFIC_MIDWAY
	PACIFIC_NAURU
	PACIFIC_NIUE
	PACIFIC_NORFOLK
	PACIFIC_NOUMEA
	PACIFIC_PAGO_PAGO
	PACIFIC_PALAU
	PACIFIC_PITCAIRN
	PACIFIC_POHNPEI
	PACIFIC_PONAPE
	PACIFIC_PORT_MORESBY
	PACIFIC_RAROTONGA
	PACIFIC_SAIPAN
	PACIFIC_SAMOA
	PACIFIC_TAHITI
	PACIFIC_TARAWA
	PACIFIC_TONGATAPU
	PACIFIC_TRUK
	PACIFIC_WAKE
	PACIFIC_WALLIS
	PACIFIC_YAP
	POLAND
	PORTUGAL
	ROC
	ROK
	SINGAPORE
	TURKEY
	UCT
	US_ALASKA
	US_ALEUTIAN
	US_ARIZONA
	US_CENTRAL
	US_EAST_INDIANA
	US_EASTERN
	US_HAWAII
	US_INDIANA_STARKE
	US_MICHIGAN
	US_MOUNTAIN
	US_PACIFIC
	US_PACIFIC_NEW
	US_SAMOA
	UTC
	UNIVERSAL
	W_SU
	WET
	ZULU
}
input PostReviewsReviewApproveInput {
	expand: [String!]!
}
enum PostSetupIntentsAccountHolderTypeUsBankAccountPaymentMethodData {
	COMPANY
	INDIVIDUAL
}
enum PostSetupIntentsAccountTypeUsBankAccountPaymentMethodData {
	CHECKING
	SAVINGS
}
input PostSetupIntentsAcssDebitPaymentMethodDataInput {
	transitNumber: String!
	institutionNumber: String!
	accountNumber: String!
}
input PostSetupIntentsAcssDebitPaymentMethodOptionsInput {
	verificationMethod: PostSetupIntentsVerificationMethodAcssDebitPaymentMethodOptions!
	mandateOptions: PostSetupIntentsMandateOptionsAcssDebitPaymentMethodOptionsInput!
	currency: PostSetupIntentsCurrencyAcssDebitPaymentMethodOptions!
}
enum PostSetupIntentsAddressBillingDetailsPaymentMethodData {
	
}
input PostSetupIntentsAddressBillingDetailsPaymentMethodDataInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostSetupIntentsAddressBillingDetailsPaymentMethodDataUnionInput {
	postSetupIntentsAddressBillingDetailsPaymentMethodData: PostSetupIntentsAddressBillingDetailsPaymentMethodData
	postSetupIntentsAddressBillingDetailsPaymentMethodDataInput: PostSetupIntentsAddressBillingDetailsPaymentMethodDataInput
}
enum PostSetupIntentsAmountTypeMandateOptionsCardPaymentMethodOptions {
	FIXED
	MAXIMUM
}
input PostSetupIntentsAuBecsDebitPaymentMethodDataInput {
	bsbNumber: String!
	accountNumber: String!
}
input PostSetupIntentsBacsDebitPaymentMethodDataInput {
	sortCode: String!
	accountNumber: String!
}
enum PostSetupIntentsBankEpsPaymentMethodData {
	ARZTE_UND_APOTHEKER_BANK
	AUSTRIAN_ANADI_BANK_AG
	BANK_AUSTRIA
	BANKHAUS_CARL_SPANGLER
	BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG
	BAWAG_PSK_AG
	BKS_BANK_AG
	BRULL_KALLMUS_BANK_AG
	BTV_VIER_LANDER_BANK
	CAPITAL_BANK_GRAWE_GRUPPE_AG
	DEUTSCHE_BANK_AG
	DOLOMITENBANK
	EASYBANK_AG
	ERSTE_BANK_UND_SPARKASSEN
	HYPO_ALPEADRIABANK_INTERNATIONAL_AG
	HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT
	HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN
	HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK
	HYPO_TIROL_BANK_AG
	HYPO_VORARLBERG_BANK_AG
	MARCHFELDER_BANK
	OBERBANK_AG
	RAIFFEISEN_BANKENGRUPPE_OSTERREICH
	SCHOELLERBANK_AG
	SPARDA_BANK_WIEN
	VOLKSBANK_GRUPPE
	VOLKSKREDITBANK_AG
	VR_BANK_BRAUNAU
}
enum PostSetupIntentsBankFpxPaymentMethodData {
	AFFIN_BANK
	AGROBANK
	ALLIANCE_BANK
	AMBANK
	BANK_ISLAM
	BANK_MUAMALAT
	BANK_OF_CHINA
	BANK_RAKYAT
	BSN
	CIMB
	DEUTSCHE_BANK
	HONG_LEONG_BANK
	HSBC
	KFH
	MAYBANK_2E
	MAYBANK_2U
	OCBC
	PB_ENTERPRISE
	PUBLIC_BANK
	RHB
	STANDARD_CHARTERED
	UOB
}
enum PostSetupIntentsBankIdealPaymentMethodData {
	ABN_AMRO
	ASN_BANK
	BUNQ
	HANDELSBANKEN
	ING
	KNAB
	MONEYOU
	RABOBANK
	REGIOBANK
	REVOLUT
	SNS_BANK
	TRIODOS_BANK
	VAN_LANSCHOT
}
enum PostSetupIntentsBankP24PaymentMethodData {
	ALIOR_BANK
	BANK_MILLENNIUM
	BANK_NOWY_BFG_SA
	BANK_PEKAO_SA
	BANKI_SPBDZIELCZE
	BLIK
	BNP_PARIBAS
	BOZ
	CITI_HANDLOWY
	CREDIT_AGRICOLE
	ENVELOBANK
	ETRANSFER_POCZTOWY_24
	GETIN_BANK
	IDEABANK
	ING
	INTELIGO
	MBANK_MTRANSFER
	NEST_PRZELEW
	NOBLE_PAY
	PBAC_Z_IPKO
	PLUS_BANK
	SANTANDER_PRZELEW_24
	TMOBILE_USBUGI_BANKOWE
	TOYOTA_BANK
	VOLKSWAGEN_BANK
}
input PostSetupIntentsBillingDetailsPaymentMethodDataInput {
	phone: String!
	name: String!
	email: UnionInput!
	address: PostSetupIntentsAddressBillingDetailsPaymentMethodDataUnionInput!
}
input PostSetupIntentsBlikPaymentMethodOptionsInput {
	code: String!
}
input PostSetupIntentsBoletoPaymentMethodDataInput {
	taxId: String!
}
input PostSetupIntentsCardPaymentMethodOptionsInput {
	requestThreeDSecure: PostSetupIntentsRequestThreeDSecureCardPaymentMethodOptions!
	network: PostSetupIntentsNetworkCardPaymentMethodOptions!
	mandateOptions: PostSetupIntentsMandateOptionsCardPaymentMethodOptionsInput!
}
enum PostSetupIntentsCountrySofortPaymentMethodData {
	AT
	BE
	DE
	ES
	IT
	NL
}
enum PostSetupIntentsCurrencyAcssDebitPaymentMethodOptions {
	CAD
	USD
}
input PostSetupIntentsCustomerAcceptanceMandateDataInput {
	type: PostSetupIntentsTypeCustomerAcceptanceMandateData!
	online: PostSetupIntentsOnlineCustomerAcceptanceMandateDataInput!
	offline: JSON!
	acceptedAt: Int!
}
enum PostSetupIntentsDefaultForMandateOptionsAcssDebitPaymentMethodOptions {
	INVOICE
	SUBSCRIPTION
}
input PostSetupIntentsDobKlarnaPaymentMethodDataInput {
	year: Int!
	month: Int!
	day: Int!
}
input PostSetupIntentsEpsPaymentMethodDataInput {
	bank: PostSetupIntentsBankEpsPaymentMethodData!
}
input PostSetupIntentsFinancialConnectionsUsBankAccountPaymentMethodOptionsInput {
	returnUrl: String!
	permissions: [PostSetupIntentsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions!]!
}
enum PostSetupIntentsFlowDirections {
	INBOUND
	OUTBOUND
}
input PostSetupIntentsFpxPaymentMethodDataInput {
	bank: PostSetupIntentsBankFpxPaymentMethodData!
}
input PostSetupIntentsIdealPaymentMethodDataInput {
	bank: PostSetupIntentsBankIdealPaymentMethodData!
}
input PostSetupIntentsInput {
	usage: PostSetupIntentsUsage!
	singleUse: PostSetupIntentsSingleUseInput!
	returnUrl: String!
	paymentMethodTypes: [String!]!
	paymentMethodOptions: PostSetupIntentsPaymentMethodOptionsInput!
	paymentMethodData: PostSetupIntentsPaymentMethodDataInput!
	paymentMethod: String!
	onBehalfOf: String!
	metadata: JSON!
	mandateData: PostSetupIntentsMandateDataInput!
	flowDirections: [PostSetupIntentsFlowDirections!]!
	expand: [String!]!
	description: String!
	customer: String!
	confirm: Boolean!
	attachToSelf: Boolean!
}
enum PostSetupIntentsIntentAccountHolderTypeUsBankAccountPaymentMethodData {
	COMPANY
	INDIVIDUAL
}
enum PostSetupIntentsIntentAccountTypeUsBankAccountPaymentMethodData {
	CHECKING
	SAVINGS
}
input PostSetupIntentsIntentAcssDebitPaymentMethodDataInput {
	transitNumber: String!
	institutionNumber: String!
	accountNumber: String!
}
input PostSetupIntentsIntentAcssDebitPaymentMethodOptionsInput {
	verificationMethod: PostSetupIntentsIntentVerificationMethodAcssDebitPaymentMethodOptions!
	mandateOptions: PostSetupIntentsIntentMandateOptionsAcssDebitPaymentMethodOptionsInput!
	currency: PostSetupIntentsIntentCurrencyAcssDebitPaymentMethodOptions!
}
enum PostSetupIntentsIntentAddressBillingDetailsPaymentMethodData {
	
}
input PostSetupIntentsIntentAddressBillingDetailsPaymentMethodDataInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostSetupIntentsIntentAddressBillingDetailsPaymentMethodDataUnionInput {
	postSetupIntentsIntentAddressBillingDetailsPaymentMethodData: PostSetupIntentsIntentAddressBillingDetailsPaymentMethodData
	postSetupIntentsIntentAddressBillingDetailsPaymentMethodDataInput: PostSetupIntentsIntentAddressBillingDetailsPaymentMethodDataInput
}
enum PostSetupIntentsIntentAmountTypeMandateOptionsCardPaymentMethodOptions {
	FIXED
	MAXIMUM
}
input PostSetupIntentsIntentAuBecsDebitPaymentMethodDataInput {
	bsbNumber: String!
	accountNumber: String!
}
input PostSetupIntentsIntentBacsDebitPaymentMethodDataInput {
	sortCode: String!
	accountNumber: String!
}
enum PostSetupIntentsIntentBankEpsPaymentMethodData {
	ARZTE_UND_APOTHEKER_BANK
	AUSTRIAN_ANADI_BANK_AG
	BANK_AUSTRIA
	BANKHAUS_CARL_SPANGLER
	BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG
	BAWAG_PSK_AG
	BKS_BANK_AG
	BRULL_KALLMUS_BANK_AG
	BTV_VIER_LANDER_BANK
	CAPITAL_BANK_GRAWE_GRUPPE_AG
	DEUTSCHE_BANK_AG
	DOLOMITENBANK
	EASYBANK_AG
	ERSTE_BANK_UND_SPARKASSEN
	HYPO_ALPEADRIABANK_INTERNATIONAL_AG
	HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT
	HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN
	HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK
	HYPO_TIROL_BANK_AG
	HYPO_VORARLBERG_BANK_AG
	MARCHFELDER_BANK
	OBERBANK_AG
	RAIFFEISEN_BANKENGRUPPE_OSTERREICH
	SCHOELLERBANK_AG
	SPARDA_BANK_WIEN
	VOLKSBANK_GRUPPE
	VOLKSKREDITBANK_AG
	VR_BANK_BRAUNAU
}
enum PostSetupIntentsIntentBankFpxPaymentMethodData {
	AFFIN_BANK
	AGROBANK
	ALLIANCE_BANK
	AMBANK
	BANK_ISLAM
	BANK_MUAMALAT
	BANK_OF_CHINA
	BANK_RAKYAT
	BSN
	CIMB
	DEUTSCHE_BANK
	HONG_LEONG_BANK
	HSBC
	KFH
	MAYBANK_2E
	MAYBANK_2U
	OCBC
	PB_ENTERPRISE
	PUBLIC_BANK
	RHB
	STANDARD_CHARTERED
	UOB
}
enum PostSetupIntentsIntentBankIdealPaymentMethodData {
	ABN_AMRO
	ASN_BANK
	BUNQ
	HANDELSBANKEN
	ING
	KNAB
	MONEYOU
	RABOBANK
	REGIOBANK
	REVOLUT
	SNS_BANK
	TRIODOS_BANK
	VAN_LANSCHOT
}
enum PostSetupIntentsIntentBankP24PaymentMethodData {
	ALIOR_BANK
	BANK_MILLENNIUM
	BANK_NOWY_BFG_SA
	BANK_PEKAO_SA
	BANKI_SPBDZIELCZE
	BLIK
	BNP_PARIBAS
	BOZ
	CITI_HANDLOWY
	CREDIT_AGRICOLE
	ENVELOBANK
	ETRANSFER_POCZTOWY_24
	GETIN_BANK
	IDEABANK
	ING
	INTELIGO
	MBANK_MTRANSFER
	NEST_PRZELEW
	NOBLE_PAY
	PBAC_Z_IPKO
	PLUS_BANK
	SANTANDER_PRZELEW_24
	TMOBILE_USBUGI_BANKOWE
	TOYOTA_BANK
	VOLKSWAGEN_BANK
}
input PostSetupIntentsIntentBillingDetailsPaymentMethodDataInput {
	phone: String!
	name: String!
	email: UnionInput!
	address: PostSetupIntentsIntentAddressBillingDetailsPaymentMethodDataUnionInput!
}
input PostSetupIntentsIntentBlikPaymentMethodOptionsInput {
	code: String!
}
input PostSetupIntentsIntentBoletoPaymentMethodDataInput {
	taxId: String!
}
enum PostSetupIntentsIntentCancelCancellationReason {
	ABANDONED
	DUPLICATE
	REQUESTED_BY_CUSTOMER
}
input PostSetupIntentsIntentCancelInput {
	expand: [String!]!
	cancellationReason: PostSetupIntentsIntentCancelCancellationReason!
}
input PostSetupIntentsIntentCardPaymentMethodOptionsInput {
	requestThreeDSecure: PostSetupIntentsIntentRequestThreeDSecureCardPaymentMethodOptions!
	network: PostSetupIntentsIntentNetworkCardPaymentMethodOptions!
	mandateOptions: PostSetupIntentsIntentMandateOptionsCardPaymentMethodOptionsInput!
}
enum PostSetupIntentsIntentConfirmAccountHolderTypeUsBankAccountPaymentMethodData {
	COMPANY
	INDIVIDUAL
}
enum PostSetupIntentsIntentConfirmAccountTypeUsBankAccountPaymentMethodData {
	CHECKING
	SAVINGS
}
input PostSetupIntentsIntentConfirmAcssDebitPaymentMethodDataInput {
	transitNumber: String!
	institutionNumber: String!
	accountNumber: String!
}
input PostSetupIntentsIntentConfirmAcssDebitPaymentMethodOptionsInput {
	verificationMethod: PostSetupIntentsIntentConfirmVerificationMethodAcssDebitPaymentMethodOptions!
	mandateOptions: PostSetupIntentsIntentConfirmMandateOptionsAcssDebitPaymentMethodOptionsInput!
	currency: PostSetupIntentsIntentConfirmCurrencyAcssDebitPaymentMethodOptions!
}
enum PostSetupIntentsIntentConfirmAddressBillingDetailsPaymentMethodData {
	
}
input PostSetupIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostSetupIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataUnionInput {
	postSetupIntentsIntentConfirmAddressBillingDetailsPaymentMethodData: PostSetupIntentsIntentConfirmAddressBillingDetailsPaymentMethodData
	postSetupIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataInput: PostSetupIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataInput
}
enum PostSetupIntentsIntentConfirmAmountTypeMandateOptionsCardPaymentMethodOptions {
	FIXED
	MAXIMUM
}
input PostSetupIntentsIntentConfirmAuBecsDebitPaymentMethodDataInput {
	bsbNumber: String!
	accountNumber: String!
}
input PostSetupIntentsIntentConfirmBacsDebitPaymentMethodDataInput {
	sortCode: String!
	accountNumber: String!
}
enum PostSetupIntentsIntentConfirmBankEpsPaymentMethodData {
	ARZTE_UND_APOTHEKER_BANK
	AUSTRIAN_ANADI_BANK_AG
	BANK_AUSTRIA
	BANKHAUS_CARL_SPANGLER
	BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG
	BAWAG_PSK_AG
	BKS_BANK_AG
	BRULL_KALLMUS_BANK_AG
	BTV_VIER_LANDER_BANK
	CAPITAL_BANK_GRAWE_GRUPPE_AG
	DEUTSCHE_BANK_AG
	DOLOMITENBANK
	EASYBANK_AG
	ERSTE_BANK_UND_SPARKASSEN
	HYPO_ALPEADRIABANK_INTERNATIONAL_AG
	HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT
	HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN
	HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK
	HYPO_TIROL_BANK_AG
	HYPO_VORARLBERG_BANK_AG
	MARCHFELDER_BANK
	OBERBANK_AG
	RAIFFEISEN_BANKENGRUPPE_OSTERREICH
	SCHOELLERBANK_AG
	SPARDA_BANK_WIEN
	VOLKSBANK_GRUPPE
	VOLKSKREDITBANK_AG
	VR_BANK_BRAUNAU
}
enum PostSetupIntentsIntentConfirmBankFpxPaymentMethodData {
	AFFIN_BANK
	AGROBANK
	ALLIANCE_BANK
	AMBANK
	BANK_ISLAM
	BANK_MUAMALAT
	BANK_OF_CHINA
	BANK_RAKYAT
	BSN
	CIMB
	DEUTSCHE_BANK
	HONG_LEONG_BANK
	HSBC
	KFH
	MAYBANK_2E
	MAYBANK_2U
	OCBC
	PB_ENTERPRISE
	PUBLIC_BANK
	RHB
	STANDARD_CHARTERED
	UOB
}
enum PostSetupIntentsIntentConfirmBankIdealPaymentMethodData {
	ABN_AMRO
	ASN_BANK
	BUNQ
	HANDELSBANKEN
	ING
	KNAB
	MONEYOU
	RABOBANK
	REGIOBANK
	REVOLUT
	SNS_BANK
	TRIODOS_BANK
	VAN_LANSCHOT
}
enum PostSetupIntentsIntentConfirmBankP24PaymentMethodData {
	ALIOR_BANK
	BANK_MILLENNIUM
	BANK_NOWY_BFG_SA
	BANK_PEKAO_SA
	BANKI_SPBDZIELCZE
	BLIK
	BNP_PARIBAS
	BOZ
	CITI_HANDLOWY
	CREDIT_AGRICOLE
	ENVELOBANK
	ETRANSFER_POCZTOWY_24
	GETIN_BANK
	IDEABANK
	ING
	INTELIGO
	MBANK_MTRANSFER
	NEST_PRZELEW
	NOBLE_PAY
	PBAC_Z_IPKO
	PLUS_BANK
	SANTANDER_PRZELEW_24
	TMOBILE_USBUGI_BANKOWE
	TOYOTA_BANK
	VOLKSWAGEN_BANK
}
input PostSetupIntentsIntentConfirmBillingDetailsPaymentMethodDataInput {
	phone: String!
	name: String!
	email: UnionInput!
	address: PostSetupIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataUnionInput!
}
input PostSetupIntentsIntentConfirmBlikPaymentMethodOptionsInput {
	code: String!
}
input PostSetupIntentsIntentConfirmBoletoPaymentMethodDataInput {
	taxId: String!
}
input PostSetupIntentsIntentConfirmCardPaymentMethodOptionsInput {
	requestThreeDSecure: PostSetupIntentsIntentConfirmRequestThreeDSecureCardPaymentMethodOptions!
	network: PostSetupIntentsIntentConfirmNetworkCardPaymentMethodOptions!
	mandateOptions: PostSetupIntentsIntentConfirmMandateOptionsCardPaymentMethodOptionsInput!
}
enum PostSetupIntentsIntentConfirmCountrySofortPaymentMethodData {
	AT
	BE
	DE
	ES
	IT
	NL
}
enum PostSetupIntentsIntentConfirmCurrencyAcssDebitPaymentMethodOptions {
	CAD
	USD
}
input PostSetupIntentsIntentConfirmCustomerAcceptanceMandateDataInput {
	type: PostSetupIntentsIntentConfirmTypeCustomerAcceptanceMandateData!
	online: PostSetupIntentsIntentConfirmOnlineCustomerAcceptanceMandateDataInput!
}
enum PostSetupIntentsIntentConfirmDefaultForMandateOptionsAcssDebitPaymentMethodOptions {
	INVOICE
	SUBSCRIPTION
}
input PostSetupIntentsIntentConfirmDobKlarnaPaymentMethodDataInput {
	year: Int!
	month: Int!
	day: Int!
}
input PostSetupIntentsIntentConfirmEpsPaymentMethodDataInput {
	bank: PostSetupIntentsIntentConfirmBankEpsPaymentMethodData!
}
input PostSetupIntentsIntentConfirmFinancialConnectionsUsBankAccountPaymentMethodOptionsInput {
	returnUrl: String!
	permissions: [PostSetupIntentsIntentConfirmPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions!]!
}
input PostSetupIntentsIntentConfirmFpxPaymentMethodDataInput {
	bank: PostSetupIntentsIntentConfirmBankFpxPaymentMethodData!
}
input PostSetupIntentsIntentConfirmIdealPaymentMethodDataInput {
	bank: PostSetupIntentsIntentConfirmBankIdealPaymentMethodData!
}
input PostSetupIntentsIntentConfirmInput {
	returnUrl: String!
	paymentMethodOptions: PostSetupIntentsIntentConfirmPaymentMethodOptionsInput!
	paymentMethodData: PostSetupIntentsIntentConfirmPaymentMethodDataInput!
	paymentMethod: String!
	mandateData: PostSetupIntentsIntentConfirmMandateDataOrPostSetupIntentsIntentConfirmMandateDataUnionInput!
	expand: [String!]!
	clientSecret: String!
}
enum PostSetupIntentsIntentConfirmIntervalMandateOptionsCardPaymentMethodOptions {
	DAY
	MONTH
	SPORADIC
	WEEK
	YEAR
}
input PostSetupIntentsIntentConfirmKlarnaPaymentMethodDataInput {
	dob: PostSetupIntentsIntentConfirmDobKlarnaPaymentMethodDataInput!
}
input PostSetupIntentsIntentConfirmLinkPaymentMethodOptionsInput {
	persistentToken: String!
}
input PostSetupIntentsIntentConfirmMandateDataInput {
	customerAcceptance: PostSetupIntentsIntentConfirmCustomerAcceptanceMandateDataInput!
}
input PostSetupIntentsIntentConfirmMandateDataOrPostSetupIntentsIntentConfirmMandateDataUnionInput {
	postSetupIntentsIntentConfirmMandateDataInput: PostSetupIntentsIntentConfirmMandateDataInput
}
input PostSetupIntentsIntentConfirmMandateOptionsAcssDebitPaymentMethodOptionsInput {
	transactionType: PostSetupIntentsIntentConfirmTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions!
	paymentSchedule: PostSetupIntentsIntentConfirmPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions!
	intervalDescription: String!
	defaultFor: [PostSetupIntentsIntentConfirmDefaultForMandateOptionsAcssDebitPaymentMethodOptions!]!
	customMandateUrl: UnionInput!
}
input PostSetupIntentsIntentConfirmMandateOptionsCardPaymentMethodOptionsInput {
	supportedTypes: [PostSetupIntentsIntentConfirmSupportedTypesMandateOptionsCardPaymentMethodOptions!]!
	startDate: Int!
	reference: String!
	intervalCount: Int!
	interval: PostSetupIntentsIntentConfirmIntervalMandateOptionsCardPaymentMethodOptions!
	endDate: Int!
	description: String!
	currency: String!
	amountType: PostSetupIntentsIntentConfirmAmountTypeMandateOptionsCardPaymentMethodOptions!
	amount: Int!
}
enum PostSetupIntentsIntentConfirmNetworkCardPaymentMethodOptions {
	AMEX
	CARTES_BANCAIRES
	DINERS
	DISCOVER
	INTERAC
	JCB
	MASTERCARD
	UNIONPAY
	UNKNOWN
	VISA
}
input PostSetupIntentsIntentConfirmNetworksUsBankAccountPaymentMethodOptionsInput {
	requested: [PostSetupIntentsIntentConfirmRequestedNetworksUsBankAccountPaymentMethodOptions!]!
}
input PostSetupIntentsIntentConfirmOnlineCustomerAcceptanceMandateDataInput {
	userAgent: String!
	ipAddress: String!
}
input PostSetupIntentsIntentConfirmP24PaymentMethodDataInput {
	bank: PostSetupIntentsIntentConfirmBankP24PaymentMethodData!
}
input PostSetupIntentsIntentConfirmPaymentMethodDataInput {
	wechatPay: JSON!
	usBankAccount: PostSetupIntentsIntentConfirmUsBankAccountPaymentMethodDataInput!
	type: PostSetupIntentsIntentConfirmTypePaymentMethodData!
	sofort: PostSetupIntentsIntentConfirmSofortPaymentMethodDataInput!
	sepaDebit: PostSetupIntentsIntentConfirmSepaDebitPaymentMethodDataInput!
	radarOptions: PostSetupIntentsIntentConfirmRadarOptionsPaymentMethodDataInput!
	promptpay: JSON!
	pix: JSON!
	paynow: JSON!
	p24: PostSetupIntentsIntentConfirmP24PaymentMethodDataInput!
	oxxo: JSON!
	metadata: JSON!
	link: JSON!
	konbini: JSON!
	klarna: PostSetupIntentsIntentConfirmKlarnaPaymentMethodDataInput!
	interacPresent: JSON!
	ideal: PostSetupIntentsIntentConfirmIdealPaymentMethodDataInput!
	grabpay: JSON!
	giropay: JSON!
	fpx: PostSetupIntentsIntentConfirmFpxPaymentMethodDataInput!
	eps: PostSetupIntentsIntentConfirmEpsPaymentMethodDataInput!
	customerBalance: JSON!
	boleto: PostSetupIntentsIntentConfirmBoletoPaymentMethodDataInput!
	blik: JSON!
	billingDetails: PostSetupIntentsIntentConfirmBillingDetailsPaymentMethodDataInput!
	bancontact: JSON!
	bacsDebit: PostSetupIntentsIntentConfirmBacsDebitPaymentMethodDataInput!
	auBecsDebit: PostSetupIntentsIntentConfirmAuBecsDebitPaymentMethodDataInput!
	alipay: JSON!
	afterpayClearpay: JSON!
	affirm: JSON!
	acssDebit: PostSetupIntentsIntentConfirmAcssDebitPaymentMethodDataInput!
}
input PostSetupIntentsIntentConfirmPaymentMethodOptionsInput {
	usBankAccount: PostSetupIntentsIntentConfirmUsBankAccountPaymentMethodOptionsInput!
	sepaDebit: PostSetupIntentsIntentConfirmSepaDebitPaymentMethodOptionsInput!
	link: PostSetupIntentsIntentConfirmLinkPaymentMethodOptionsInput!
	card: PostSetupIntentsIntentConfirmCardPaymentMethodOptionsInput!
	blik: PostSetupIntentsIntentConfirmBlikPaymentMethodOptionsInput!
	acssDebit: PostSetupIntentsIntentConfirmAcssDebitPaymentMethodOptionsInput!
}
enum PostSetupIntentsIntentConfirmPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions {
	COMBINED
	INTERVAL
	SPORADIC
}
enum PostSetupIntentsIntentConfirmPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
input PostSetupIntentsIntentConfirmRadarOptionsPaymentMethodDataInput {
	session: String!
}
enum PostSetupIntentsIntentConfirmRequestThreeDSecureCardPaymentMethodOptions {
	ANY
	AUTOMATIC
}
enum PostSetupIntentsIntentConfirmRequestedNetworksUsBankAccountPaymentMethodOptions {
	ACH
	US_DOMESTIC_WIRE
}
input PostSetupIntentsIntentConfirmSepaDebitPaymentMethodDataInput {
	iban: String!
}
input PostSetupIntentsIntentConfirmSepaDebitPaymentMethodOptionsInput {
	mandateOptions: JSON!
}
input PostSetupIntentsIntentConfirmSofortPaymentMethodDataInput {
	country: PostSetupIntentsIntentConfirmCountrySofortPaymentMethodData!
}
enum PostSetupIntentsIntentConfirmSupportedTypesMandateOptionsCardPaymentMethodOptions {
	INDIA
}
enum PostSetupIntentsIntentConfirmTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions {
	BUSINESS
	PERSONAL
}
enum PostSetupIntentsIntentConfirmTypeCustomerAcceptanceMandateData {
	ONLINE
}
enum PostSetupIntentsIntentConfirmTypePaymentMethodData {
	ACSS_DEBIT
	AFFIRM
	AFTERPAY_CLEARPAY
	ALIPAY
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BLIK
	BOLETO
	CUSTOMER_BALANCE
	EPS
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KLARNA
	KONBINI
	LINK
	OXXO
	P_24
	PAYNOW
	PIX
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
input PostSetupIntentsIntentConfirmUsBankAccountPaymentMethodDataInput {
	routingNumber: String!
	financialConnectionsAccount: String!
	accountType: PostSetupIntentsIntentConfirmAccountTypeUsBankAccountPaymentMethodData!
	accountNumber: String!
	accountHolderType: PostSetupIntentsIntentConfirmAccountHolderTypeUsBankAccountPaymentMethodData!
}
input PostSetupIntentsIntentConfirmUsBankAccountPaymentMethodOptionsInput {
	verificationMethod: PostSetupIntentsIntentConfirmVerificationMethodUsBankAccountPaymentMethodOptions!
	networks: PostSetupIntentsIntentConfirmNetworksUsBankAccountPaymentMethodOptionsInput!
	financialConnections: PostSetupIntentsIntentConfirmFinancialConnectionsUsBankAccountPaymentMethodOptionsInput!
}
enum PostSetupIntentsIntentConfirmVerificationMethodAcssDebitPaymentMethodOptions {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum PostSetupIntentsIntentConfirmVerificationMethodUsBankAccountPaymentMethodOptions {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum PostSetupIntentsIntentCountrySofortPaymentMethodData {
	AT
	BE
	DE
	ES
	IT
	NL
}
enum PostSetupIntentsIntentCurrencyAcssDebitPaymentMethodOptions {
	CAD
	USD
}
enum PostSetupIntentsIntentDefaultForMandateOptionsAcssDebitPaymentMethodOptions {
	INVOICE
	SUBSCRIPTION
}
input PostSetupIntentsIntentDobKlarnaPaymentMethodDataInput {
	year: Int!
	month: Int!
	day: Int!
}
input PostSetupIntentsIntentEpsPaymentMethodDataInput {
	bank: PostSetupIntentsIntentBankEpsPaymentMethodData!
}
input PostSetupIntentsIntentFinancialConnectionsUsBankAccountPaymentMethodOptionsInput {
	returnUrl: String!
	permissions: [PostSetupIntentsIntentPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions!]!
}
enum PostSetupIntentsIntentFlowDirections {
	INBOUND
	OUTBOUND
}
input PostSetupIntentsIntentFpxPaymentMethodDataInput {
	bank: PostSetupIntentsIntentBankFpxPaymentMethodData!
}
input PostSetupIntentsIntentIdealPaymentMethodDataInput {
	bank: PostSetupIntentsIntentBankIdealPaymentMethodData!
}
input PostSetupIntentsIntentInput {
	paymentMethodTypes: [String!]!
	paymentMethodOptions: PostSetupIntentsIntentPaymentMethodOptionsInput!
	paymentMethodData: PostSetupIntentsIntentPaymentMethodDataInput!
	paymentMethod: String!
	metadata: UnionInput!
	flowDirections: [PostSetupIntentsIntentFlowDirections!]!
	expand: [String!]!
	description: String!
	customer: String!
	attachToSelf: Boolean!
}
enum PostSetupIntentsIntentIntervalMandateOptionsCardPaymentMethodOptions {
	DAY
	MONTH
	SPORADIC
	WEEK
	YEAR
}
input PostSetupIntentsIntentKlarnaPaymentMethodDataInput {
	dob: PostSetupIntentsIntentDobKlarnaPaymentMethodDataInput!
}
input PostSetupIntentsIntentLinkPaymentMethodOptionsInput {
	persistentToken: String!
}
input PostSetupIntentsIntentMandateOptionsAcssDebitPaymentMethodOptionsInput {
	transactionType: PostSetupIntentsIntentTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions!
	paymentSchedule: PostSetupIntentsIntentPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions!
	intervalDescription: String!
	defaultFor: [PostSetupIntentsIntentDefaultForMandateOptionsAcssDebitPaymentMethodOptions!]!
	customMandateUrl: UnionInput!
}
input PostSetupIntentsIntentMandateOptionsCardPaymentMethodOptionsInput {
	supportedTypes: [PostSetupIntentsIntentSupportedTypesMandateOptionsCardPaymentMethodOptions!]!
	startDate: Int!
	reference: String!
	intervalCount: Int!
	interval: PostSetupIntentsIntentIntervalMandateOptionsCardPaymentMethodOptions!
	endDate: Int!
	description: String!
	currency: String!
	amountType: PostSetupIntentsIntentAmountTypeMandateOptionsCardPaymentMethodOptions!
	amount: Int!
}
enum PostSetupIntentsIntentNetworkCardPaymentMethodOptions {
	AMEX
	CARTES_BANCAIRES
	DINERS
	DISCOVER
	INTERAC
	JCB
	MASTERCARD
	UNIONPAY
	UNKNOWN
	VISA
}
input PostSetupIntentsIntentNetworksUsBankAccountPaymentMethodOptionsInput {
	requested: [PostSetupIntentsIntentRequestedNetworksUsBankAccountPaymentMethodOptions!]!
}
input PostSetupIntentsIntentP24PaymentMethodDataInput {
	bank: PostSetupIntentsIntentBankP24PaymentMethodData!
}
input PostSetupIntentsIntentPaymentMethodDataInput {
	wechatPay: JSON!
	usBankAccount: PostSetupIntentsIntentUsBankAccountPaymentMethodDataInput!
	type: PostSetupIntentsIntentTypePaymentMethodData!
	sofort: PostSetupIntentsIntentSofortPaymentMethodDataInput!
	sepaDebit: PostSetupIntentsIntentSepaDebitPaymentMethodDataInput!
	radarOptions: PostSetupIntentsIntentRadarOptionsPaymentMethodDataInput!
	promptpay: JSON!
	pix: JSON!
	paynow: JSON!
	p24: PostSetupIntentsIntentP24PaymentMethodDataInput!
	oxxo: JSON!
	metadata: JSON!
	link: JSON!
	konbini: JSON!
	klarna: PostSetupIntentsIntentKlarnaPaymentMethodDataInput!
	interacPresent: JSON!
	ideal: PostSetupIntentsIntentIdealPaymentMethodDataInput!
	grabpay: JSON!
	giropay: JSON!
	fpx: PostSetupIntentsIntentFpxPaymentMethodDataInput!
	eps: PostSetupIntentsIntentEpsPaymentMethodDataInput!
	customerBalance: JSON!
	boleto: PostSetupIntentsIntentBoletoPaymentMethodDataInput!
	blik: JSON!
	billingDetails: PostSetupIntentsIntentBillingDetailsPaymentMethodDataInput!
	bancontact: JSON!
	bacsDebit: PostSetupIntentsIntentBacsDebitPaymentMethodDataInput!
	auBecsDebit: PostSetupIntentsIntentAuBecsDebitPaymentMethodDataInput!
	alipay: JSON!
	afterpayClearpay: JSON!
	affirm: JSON!
	acssDebit: PostSetupIntentsIntentAcssDebitPaymentMethodDataInput!
}
input PostSetupIntentsIntentPaymentMethodOptionsInput {
	usBankAccount: PostSetupIntentsIntentUsBankAccountPaymentMethodOptionsInput!
	sepaDebit: PostSetupIntentsIntentSepaDebitPaymentMethodOptionsInput!
	link: PostSetupIntentsIntentLinkPaymentMethodOptionsInput!
	card: PostSetupIntentsIntentCardPaymentMethodOptionsInput!
	blik: PostSetupIntentsIntentBlikPaymentMethodOptionsInput!
	acssDebit: PostSetupIntentsIntentAcssDebitPaymentMethodOptionsInput!
}
enum PostSetupIntentsIntentPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions {
	COMBINED
	INTERVAL
	SPORADIC
}
enum PostSetupIntentsIntentPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
input PostSetupIntentsIntentRadarOptionsPaymentMethodDataInput {
	session: String!
}
enum PostSetupIntentsIntentRequestThreeDSecureCardPaymentMethodOptions {
	ANY
	AUTOMATIC
}
enum PostSetupIntentsIntentRequestedNetworksUsBankAccountPaymentMethodOptions {
	ACH
	US_DOMESTIC_WIRE
}
input PostSetupIntentsIntentSepaDebitPaymentMethodDataInput {
	iban: String!
}
input PostSetupIntentsIntentSepaDebitPaymentMethodOptionsInput {
	mandateOptions: JSON!
}
input PostSetupIntentsIntentSofortPaymentMethodDataInput {
	country: PostSetupIntentsIntentCountrySofortPaymentMethodData!
}
enum PostSetupIntentsIntentSupportedTypesMandateOptionsCardPaymentMethodOptions {
	INDIA
}
enum PostSetupIntentsIntentTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions {
	BUSINESS
	PERSONAL
}
enum PostSetupIntentsIntentTypePaymentMethodData {
	ACSS_DEBIT
	AFFIRM
	AFTERPAY_CLEARPAY
	ALIPAY
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BLIK
	BOLETO
	CUSTOMER_BALANCE
	EPS
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KLARNA
	KONBINI
	LINK
	OXXO
	P_24
	PAYNOW
	PIX
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
input PostSetupIntentsIntentUsBankAccountPaymentMethodDataInput {
	routingNumber: String!
	financialConnectionsAccount: String!
	accountType: PostSetupIntentsIntentAccountTypeUsBankAccountPaymentMethodData!
	accountNumber: String!
	accountHolderType: PostSetupIntentsIntentAccountHolderTypeUsBankAccountPaymentMethodData!
}
input PostSetupIntentsIntentUsBankAccountPaymentMethodOptionsInput {
	verificationMethod: PostSetupIntentsIntentVerificationMethodUsBankAccountPaymentMethodOptions!
	networks: PostSetupIntentsIntentNetworksUsBankAccountPaymentMethodOptionsInput!
	financialConnections: PostSetupIntentsIntentFinancialConnectionsUsBankAccountPaymentMethodOptionsInput!
}
enum PostSetupIntentsIntentVerificationMethodAcssDebitPaymentMethodOptions {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum PostSetupIntentsIntentVerificationMethodUsBankAccountPaymentMethodOptions {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
input PostSetupIntentsIntentVerifyMicrodepositsInput {
	expand: [String!]!
	descriptorCode: String!
	clientSecret: String!
	amounts: [Int!]!
}
enum PostSetupIntentsIntervalMandateOptionsCardPaymentMethodOptions {
	DAY
	MONTH
	SPORADIC
	WEEK
	YEAR
}
input PostSetupIntentsKlarnaPaymentMethodDataInput {
	dob: PostSetupIntentsDobKlarnaPaymentMethodDataInput!
}
input PostSetupIntentsLinkPaymentMethodOptionsInput {
	persistentToken: String!
}
input PostSetupIntentsMandateDataInput {
	customerAcceptance: PostSetupIntentsCustomerAcceptanceMandateDataInput!
}
input PostSetupIntentsMandateOptionsAcssDebitPaymentMethodOptionsInput {
	transactionType: PostSetupIntentsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions!
	paymentSchedule: PostSetupIntentsPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions!
	intervalDescription: String!
	defaultFor: [PostSetupIntentsDefaultForMandateOptionsAcssDebitPaymentMethodOptions!]!
	customMandateUrl: UnionInput!
}
input PostSetupIntentsMandateOptionsCardPaymentMethodOptionsInput {
	supportedTypes: [PostSetupIntentsSupportedTypesMandateOptionsCardPaymentMethodOptions!]!
	startDate: Int!
	reference: String!
	intervalCount: Int!
	interval: PostSetupIntentsIntervalMandateOptionsCardPaymentMethodOptions!
	endDate: Int!
	description: String!
	currency: String!
	amountType: PostSetupIntentsAmountTypeMandateOptionsCardPaymentMethodOptions!
	amount: Int!
}
enum PostSetupIntentsNetworkCardPaymentMethodOptions {
	AMEX
	CARTES_BANCAIRES
	DINERS
	DISCOVER
	INTERAC
	JCB
	MASTERCARD
	UNIONPAY
	UNKNOWN
	VISA
}
input PostSetupIntentsNetworksUsBankAccountPaymentMethodOptionsInput {
	requested: [PostSetupIntentsRequestedNetworksUsBankAccountPaymentMethodOptions!]!
}
input PostSetupIntentsOnlineCustomerAcceptanceMandateDataInput {
	userAgent: String!
	ipAddress: String!
}
input PostSetupIntentsP24PaymentMethodDataInput {
	bank: PostSetupIntentsBankP24PaymentMethodData!
}
input PostSetupIntentsPaymentMethodDataInput {
	wechatPay: JSON!
	usBankAccount: PostSetupIntentsUsBankAccountPaymentMethodDataInput!
	type: PostSetupIntentsTypePaymentMethodData!
	sofort: PostSetupIntentsSofortPaymentMethodDataInput!
	sepaDebit: PostSetupIntentsSepaDebitPaymentMethodDataInput!
	radarOptions: PostSetupIntentsRadarOptionsPaymentMethodDataInput!
	promptpay: JSON!
	pix: JSON!
	paynow: JSON!
	p24: PostSetupIntentsP24PaymentMethodDataInput!
	oxxo: JSON!
	metadata: JSON!
	link: JSON!
	konbini: JSON!
	klarna: PostSetupIntentsKlarnaPaymentMethodDataInput!
	interacPresent: JSON!
	ideal: PostSetupIntentsIdealPaymentMethodDataInput!
	grabpay: JSON!
	giropay: JSON!
	fpx: PostSetupIntentsFpxPaymentMethodDataInput!
	eps: PostSetupIntentsEpsPaymentMethodDataInput!
	customerBalance: JSON!
	boleto: PostSetupIntentsBoletoPaymentMethodDataInput!
	blik: JSON!
	billingDetails: PostSetupIntentsBillingDetailsPaymentMethodDataInput!
	bancontact: JSON!
	bacsDebit: PostSetupIntentsBacsDebitPaymentMethodDataInput!
	auBecsDebit: PostSetupIntentsAuBecsDebitPaymentMethodDataInput!
	alipay: JSON!
	afterpayClearpay: JSON!
	affirm: JSON!
	acssDebit: PostSetupIntentsAcssDebitPaymentMethodDataInput!
}
input PostSetupIntentsPaymentMethodOptionsInput {
	usBankAccount: PostSetupIntentsUsBankAccountPaymentMethodOptionsInput!
	sepaDebit: PostSetupIntentsSepaDebitPaymentMethodOptionsInput!
	link: PostSetupIntentsLinkPaymentMethodOptionsInput!
	card: PostSetupIntentsCardPaymentMethodOptionsInput!
	blik: PostSetupIntentsBlikPaymentMethodOptionsInput!
	acssDebit: PostSetupIntentsAcssDebitPaymentMethodOptionsInput!
}
enum PostSetupIntentsPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions {
	COMBINED
	INTERVAL
	SPORADIC
}
enum PostSetupIntentsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
input PostSetupIntentsRadarOptionsPaymentMethodDataInput {
	session: String!
}
enum PostSetupIntentsRequestThreeDSecureCardPaymentMethodOptions {
	ANY
	AUTOMATIC
}
enum PostSetupIntentsRequestedNetworksUsBankAccountPaymentMethodOptions {
	ACH
	US_DOMESTIC_WIRE
}
input PostSetupIntentsSepaDebitPaymentMethodDataInput {
	iban: String!
}
input PostSetupIntentsSepaDebitPaymentMethodOptionsInput {
	mandateOptions: JSON!
}
input PostSetupIntentsSingleUseInput {
	currency: String!
	amount: Int!
}
input PostSetupIntentsSofortPaymentMethodDataInput {
	country: PostSetupIntentsCountrySofortPaymentMethodData!
}
enum PostSetupIntentsSupportedTypesMandateOptionsCardPaymentMethodOptions {
	INDIA
}
enum PostSetupIntentsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions {
	BUSINESS
	PERSONAL
}
enum PostSetupIntentsTypeCustomerAcceptanceMandateData {
	OFFLINE
	ONLINE
}
enum PostSetupIntentsTypePaymentMethodData {
	ACSS_DEBIT
	AFFIRM
	AFTERPAY_CLEARPAY
	ALIPAY
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BLIK
	BOLETO
	CUSTOMER_BALANCE
	EPS
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KLARNA
	KONBINI
	LINK
	OXXO
	P_24
	PAYNOW
	PIX
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
input PostSetupIntentsUsBankAccountPaymentMethodDataInput {
	routingNumber: String!
	financialConnectionsAccount: String!
	accountType: PostSetupIntentsAccountTypeUsBankAccountPaymentMethodData!
	accountNumber: String!
	accountHolderType: PostSetupIntentsAccountHolderTypeUsBankAccountPaymentMethodData!
}
input PostSetupIntentsUsBankAccountPaymentMethodOptionsInput {
	verificationMethod: PostSetupIntentsVerificationMethodUsBankAccountPaymentMethodOptions!
	networks: PostSetupIntentsNetworksUsBankAccountPaymentMethodOptionsInput!
	financialConnections: PostSetupIntentsFinancialConnectionsUsBankAccountPaymentMethodOptionsInput!
}
enum PostSetupIntentsUsage {
	OFF_SESSION
	ON_SESSION
}
enum PostSetupIntentsVerificationMethodAcssDebitPaymentMethodOptions {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum PostSetupIntentsVerificationMethodUsBankAccountPaymentMethodOptions {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
input PostShippingRatesDeliveryEstimateInput {
	minimum: PostShippingRatesMinimumDeliveryEstimateInput!
	maximum: PostShippingRatesMaximumDeliveryEstimateInput!
}
input PostShippingRatesFixedAmountInput {
	currencyOptions: JSON!
	currency: String!
	amount: Int!
}
input PostShippingRatesInput {
	type: PostShippingRatesType!
	taxCode: String!
	taxBehavior: PostShippingRatesTaxBehavior!
	metadata: JSON!
	fixedAmount: PostShippingRatesFixedAmountInput!
	expand: [String!]!
	displayName: String!
	deliveryEstimate: PostShippingRatesDeliveryEstimateInput!
}
input PostShippingRatesMaximumDeliveryEstimateInput {
	value: Int!
	unit: PostShippingRatesUnitMaximumDeliveryEstimate!
}
input PostShippingRatesMinimumDeliveryEstimateInput {
	value: Int!
	unit: PostShippingRatesUnitMinimumDeliveryEstimate!
}
input PostShippingRatesShippingRateTokenFixedAmountInput {
	currencyOptions: JSON!
}
input PostShippingRatesShippingRateTokenInput {
	taxBehavior: PostShippingRatesShippingRateTokenTaxBehavior!
	metadata: UnionInput!
	fixedAmount: PostShippingRatesShippingRateTokenFixedAmountInput!
	expand: [String!]!
	active: Boolean!
}
enum PostShippingRatesShippingRateTokenTaxBehavior {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum PostShippingRatesTaxBehavior {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum PostShippingRatesType {
	FIXED_AMOUNT
}
enum PostShippingRatesUnitMaximumDeliveryEstimate {
	BUSINESS_DAY
	DAY
	HOUR
	MONTH
	WEEK
}
enum PostShippingRatesUnitMinimumDeliveryEstimate {
	BUSINESS_DAY
	DAY
	HOUR
	MONTH
	WEEK
}
input PostSourcesAcceptanceMandateInput {
	userAgent: String!
	type: PostSourcesTypeAcceptanceMandate!
	status: PostSourcesStatusAcceptanceMandate!
	online: PostSourcesOnlineAcceptanceMandateInput!
	offline: PostSourcesOfflineAcceptanceMandateInput!
	ip: String!
	date: Int!
}
input PostSourcesAddressOwnerInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostSourcesAddressShippingSourceOrderInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
enum PostSourcesFlow {
	CODE_VERIFICATION
	NONE
	RECEIVER
	REDIRECT
}
input PostSourcesInput {
	usage: PostSourcesUsage!
	type: String!
	token: String!
	statementDescriptor: String!
	sourceOrder: PostSourcesSourceOrderInput!
	redirect: PostSourcesRedirectInput!
	receiver: PostSourcesReceiverInput!
	owner: PostSourcesOwnerInput!
	originalSource: String!
	metadata: JSON!
	mandate: PostSourcesMandateInput!
	flow: PostSourcesFlow!
	expand: [String!]!
	customer: String!
	currency: String!
	amount: Int!
}
enum PostSourcesIntervalMandate {
	ONE_TIME
	SCHEDULED
	VARIABLE
}
input PostSourcesItemsSourceOrderInput {
	type: PostSourcesTypeItemsSourceOrder!
	quantity: Int!
	parent: String!
	description: String!
	currency: String!
	amount: Int!
}
input PostSourcesMandateInput {
	notificationMethod: PostSourcesNotificationMethodMandate!
	interval: PostSourcesIntervalMandate!
	currency: String!
	amount: UnionInput!
	acceptance: PostSourcesAcceptanceMandateInput!
}
enum PostSourcesNotificationMethodMandate {
	DEPRECATED_NONE
	EMAIL
	MANUAL
	NONE
	STRIPE_EMAIL
}
input PostSourcesOfflineAcceptanceMandateInput {
	contactEmail: String!
}
input PostSourcesOnlineAcceptanceMandateInput {
	userAgent: String!
	ip: String!
	date: Int!
}
input PostSourcesOwnerInput {
	phone: String!
	name: String!
	email: String!
	address: PostSourcesAddressOwnerInput!
}
input PostSourcesReceiverInput {
	refundAttributesMethod: PostSourcesRefundAttributesMethodReceiver!
}
input PostSourcesRedirectInput {
	returnUrl: String!
}
enum PostSourcesRefundAttributesMethodReceiver {
	EMAIL
	MANUAL
	NONE
}
input PostSourcesShippingSourceOrderInput {
	trackingNumber: String!
	phone: String!
	name: String!
	carrier: String!
	address: PostSourcesAddressShippingSourceOrderInput!
}
input PostSourcesSourceAcceptanceMandateInput {
	userAgent: String!
	type: PostSourcesSourceTypeAcceptanceMandate!
	status: PostSourcesSourceStatusAcceptanceMandate!
	online: PostSourcesSourceOnlineAcceptanceMandateInput!
	offline: PostSourcesSourceOfflineAcceptanceMandateInput!
	ip: String!
	date: Int!
}
input PostSourcesSourceAddressOwnerInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostSourcesSourceAddressShippingSourceOrderInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostSourcesSourceInput {
	sourceOrder: PostSourcesSourceSourceOrderInput!
	owner: PostSourcesSourceOwnerInput!
	metadata: UnionInput!
	mandate: PostSourcesSourceMandateInput!
	expand: [String!]!
	amount: Int!
}
enum PostSourcesSourceIntervalMandate {
	ONE_TIME
	SCHEDULED
	VARIABLE
}
input PostSourcesSourceItemsSourceOrderInput {
	type: PostSourcesSourceTypeItemsSourceOrder!
	quantity: Int!
	parent: String!
	description: String!
	currency: String!
	amount: Int!
}
input PostSourcesSourceMandateInput {
	notificationMethod: PostSourcesSourceNotificationMethodMandate!
	interval: PostSourcesSourceIntervalMandate!
	currency: String!
	amount: UnionInput!
	acceptance: PostSourcesSourceAcceptanceMandateInput!
}
enum PostSourcesSourceNotificationMethodMandate {
	DEPRECATED_NONE
	EMAIL
	MANUAL
	NONE
	STRIPE_EMAIL
}
input PostSourcesSourceOfflineAcceptanceMandateInput {
	contactEmail: String!
}
input PostSourcesSourceOnlineAcceptanceMandateInput {
	userAgent: String!
	ip: String!
	date: Int!
}
input PostSourcesSourceOrderInput {
	shipping: PostSourcesShippingSourceOrderInput!
	items: [PostSourcesItemsSourceOrderInput!]!
}
input PostSourcesSourceOwnerInput {
	phone: String!
	name: String!
	email: String!
	address: PostSourcesSourceAddressOwnerInput!
}
input PostSourcesSourceShippingSourceOrderInput {
	trackingNumber: String!
	phone: String!
	name: String!
	carrier: String!
	address: PostSourcesSourceAddressShippingSourceOrderInput!
}
input PostSourcesSourceSourceOrderInput {
	shipping: PostSourcesSourceShippingSourceOrderInput!
	items: [PostSourcesSourceItemsSourceOrderInput!]!
}
enum PostSourcesSourceStatusAcceptanceMandate {
	ACCEPTED
	PENDING
	REFUSED
	REVOKED
}
enum PostSourcesSourceTypeAcceptanceMandate {
	OFFLINE
	ONLINE
}
enum PostSourcesSourceTypeItemsSourceOrder {
	DISCOUNT
	SHIPPING
	SKU
	TAX
}
input PostSourcesSourceVerifyInput {
	values: [String!]!
	expand: [String!]!
}
enum PostSourcesStatusAcceptanceMandate {
	ACCEPTED
	PENDING
	REFUSED
	REVOKED
}
enum PostSourcesTypeAcceptanceMandate {
	OFFLINE
	ONLINE
}
enum PostSourcesTypeItemsSourceOrder {
	DISCOUNT
	SHIPPING
	SKU
	TAX
}
enum PostSourcesUsage {
	REUSABLE
	SINGLE_USE
}
enum PostSubscriptionItemsBillingThresholds {
	
}
input PostSubscriptionItemsBillingThresholdsInput {
	usageGte: Int!
}
input PostSubscriptionItemsBillingThresholdsUnionInput {
	postSubscriptionItemsBillingThresholds: PostSubscriptionItemsBillingThresholds
	postSubscriptionItemsBillingThresholdsInput: PostSubscriptionItemsBillingThresholdsInput
}
input PostSubscriptionItemsInput {
	taxRates: UnionInput!
	subscription: String!
	quantity: Int!
	prorationDate: Int!
	prorationBehavior: PostSubscriptionItemsProrationBehavior!
	priceData: PostSubscriptionItemsPriceDataInput!
	price: String!
	paymentBehavior: PostSubscriptionItemsPaymentBehavior!
	metadata: JSON!
	expand: [String!]!
	billingThresholds: PostSubscriptionItemsBillingThresholdsUnionInput!
}
enum PostSubscriptionItemsIntervalRecurringPriceData {
	DAY
	MONTH
	WEEK
	YEAR
}
enum PostSubscriptionItemsItemBillingThresholds {
	
}
input PostSubscriptionItemsItemBillingThresholdsInput {
	usageGte: Int!
}
input PostSubscriptionItemsItemBillingThresholdsUnionInput {
	postSubscriptionItemsItemBillingThresholds: PostSubscriptionItemsItemBillingThresholds
	postSubscriptionItemsItemBillingThresholdsInput: PostSubscriptionItemsItemBillingThresholdsInput
}
input PostSubscriptionItemsItemInput {
	taxRates: UnionInput!
	quantity: Int!
	prorationDate: Int!
	prorationBehavior: PostSubscriptionItemsItemProrationBehavior!
	priceData: PostSubscriptionItemsItemPriceDataInput!
	price: String!
	paymentBehavior: PostSubscriptionItemsItemPaymentBehavior!
	offSession: Boolean!
	metadata: UnionInput!
	expand: [String!]!
	billingThresholds: PostSubscriptionItemsItemBillingThresholdsUnionInput!
}
enum PostSubscriptionItemsItemIntervalRecurringPriceData {
	DAY
	MONTH
	WEEK
	YEAR
}
enum PostSubscriptionItemsItemPaymentBehavior {
	ALLOW_INCOMPLETE
	DEFAULT_INCOMPLETE
	ERROR_IF_INCOMPLETE
	PENDING_IF_INCOMPLETE
}
input PostSubscriptionItemsItemPriceDataInput {
	unitAmountDecimal: String!
	unitAmount: Int!
	taxBehavior: PostSubscriptionItemsItemTaxBehaviorPriceData!
	recurring: PostSubscriptionItemsItemRecurringPriceDataInput!
	product: String!
	currency: String!
}
enum PostSubscriptionItemsItemProrationBehavior {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
input PostSubscriptionItemsItemRecurringPriceDataInput {
	intervalCount: Int!
	interval: PostSubscriptionItemsItemIntervalRecurringPriceData!
}
enum PostSubscriptionItemsItemTaxBehaviorPriceData {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum PostSubscriptionItemsPaymentBehavior {
	ALLOW_INCOMPLETE
	DEFAULT_INCOMPLETE
	ERROR_IF_INCOMPLETE
	PENDING_IF_INCOMPLETE
}
input PostSubscriptionItemsPriceDataInput {
	unitAmountDecimal: String!
	unitAmount: Int!
	taxBehavior: PostSubscriptionItemsTaxBehaviorPriceData!
	recurring: PostSubscriptionItemsRecurringPriceDataInput!
	product: String!
	currency: String!
}
enum PostSubscriptionItemsProrationBehavior {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
input PostSubscriptionItemsRecurringPriceDataInput {
	intervalCount: Int!
	interval: PostSubscriptionItemsIntervalRecurringPriceData!
}
enum PostSubscriptionItemsSubscriptionItemUsageRecordsAction {
	INCREMENT
	SET
}
input PostSubscriptionItemsSubscriptionItemUsageRecordsInput {
	timestamp: UnionInput!
	quantity: Int!
	expand: [String!]!
	action: PostSubscriptionItemsSubscriptionItemUsageRecordsAction!
}
enum PostSubscriptionItemsTaxBehaviorPriceData {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
input PostSubscriptionSchedulesAddInvoiceItemsPhasesInput {
	taxRates: UnionInput!
	quantity: Int!
	priceData: PostSubscriptionSchedulesPriceDataAddInvoiceItemsPhasesInput!
	price: String!
}
input PostSubscriptionSchedulesAutomaticTaxDefaultSettingsInput {
	enabled: Boolean!
}
input PostSubscriptionSchedulesAutomaticTaxPhasesInput {
	enabled: Boolean!
}
enum PostSubscriptionSchedulesBillingCycleAnchorDefaultSettings {
	AUTOMATIC
	PHASE_START
}
enum PostSubscriptionSchedulesBillingCycleAnchorPhases {
	AUTOMATIC
	PHASE_START
}
enum PostSubscriptionSchedulesBillingThresholdsDefaultSettings {
	
}
input PostSubscriptionSchedulesBillingThresholdsDefaultSettingsInput {
	resetBillingCycleAnchor: Boolean!
	amountGte: Int!
}
input PostSubscriptionSchedulesBillingThresholdsDefaultSettingsUnionInput {
	postSubscriptionSchedulesBillingThresholdsDefaultSettings: PostSubscriptionSchedulesBillingThresholdsDefaultSettings
	postSubscriptionSchedulesBillingThresholdsDefaultSettingsInput: PostSubscriptionSchedulesBillingThresholdsDefaultSettingsInput
}
enum PostSubscriptionSchedulesBillingThresholdsItemsPhases {
	
}
input PostSubscriptionSchedulesBillingThresholdsItemsPhasesInput {
	usageGte: Int!
}
input PostSubscriptionSchedulesBillingThresholdsItemsPhasesUnionInput {
	postSubscriptionSchedulesBillingThresholdsItemsPhases: PostSubscriptionSchedulesBillingThresholdsItemsPhases
	postSubscriptionSchedulesBillingThresholdsItemsPhasesInput: PostSubscriptionSchedulesBillingThresholdsItemsPhasesInput
}
enum PostSubscriptionSchedulesBillingThresholdsPhases {
	
}
input PostSubscriptionSchedulesBillingThresholdsPhasesInput {
	resetBillingCycleAnchor: Boolean!
	amountGte: Int!
}
input PostSubscriptionSchedulesBillingThresholdsPhasesUnionInput {
	postSubscriptionSchedulesBillingThresholdsPhases: PostSubscriptionSchedulesBillingThresholdsPhases
	postSubscriptionSchedulesBillingThresholdsPhasesInput: PostSubscriptionSchedulesBillingThresholdsPhasesInput
}
enum PostSubscriptionSchedulesCollectionMethodDefaultSettings {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
enum PostSubscriptionSchedulesCollectionMethodPhases {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
input PostSubscriptionSchedulesDefaultSettingsInput {
	transferData: PostSubscriptionSchedulesTransferDataDefaultSettingsUnionInput!
	onBehalfOf: UnionInput!
	invoiceSettings: PostSubscriptionSchedulesInvoiceSettingsDefaultSettingsInput!
	description: String!
	defaultPaymentMethod: String!
	collectionMethod: PostSubscriptionSchedulesCollectionMethodDefaultSettings!
	billingThresholds: PostSubscriptionSchedulesBillingThresholdsDefaultSettingsUnionInput!
	billingCycleAnchor: PostSubscriptionSchedulesBillingCycleAnchorDefaultSettings!
	automaticTax: PostSubscriptionSchedulesAutomaticTaxDefaultSettingsInput!
	applicationFeePercent: Float!
}
enum PostSubscriptionSchedulesEndBehavior {
	CANCEL
	NONE
	RELEASE
	RENEW
}
input PostSubscriptionSchedulesInput {
	startDate: UnionInput!
	phases: [PostSubscriptionSchedulesPhasesInput!]!
	metadata: UnionInput!
	fromSubscription: String!
	expand: [String!]!
	endBehavior: PostSubscriptionSchedulesEndBehavior!
	defaultSettings: PostSubscriptionSchedulesDefaultSettingsInput!
	customer: String!
}
enum PostSubscriptionSchedulesIntervalRecurringPriceDataItemsPhases {
	DAY
	MONTH
	WEEK
	YEAR
}
input PostSubscriptionSchedulesInvoiceSettingsDefaultSettingsInput {
	daysUntilDue: Int!
}
input PostSubscriptionSchedulesInvoiceSettingsPhasesInput {
	daysUntilDue: Int!
}
input PostSubscriptionSchedulesItemsPhasesInput {
	taxRates: UnionInput!
	quantity: Int!
	priceData: PostSubscriptionSchedulesPriceDataItemsPhasesInput!
	price: String!
	metadata: JSON!
	billingThresholds: PostSubscriptionSchedulesBillingThresholdsItemsPhasesUnionInput!
}
input PostSubscriptionSchedulesPhasesInput {
	trialEnd: Int!
	trial: Boolean!
	transferData: PostSubscriptionSchedulesTransferDataPhasesInput!
	prorationBehavior: PostSubscriptionSchedulesProrationBehaviorPhases!
	onBehalfOf: String!
	metadata: JSON!
	iterations: Int!
	items: [PostSubscriptionSchedulesItemsPhasesInput!]!
	invoiceSettings: PostSubscriptionSchedulesInvoiceSettingsPhasesInput!
	endDate: Int!
	description: String!
	defaultTaxRates: UnionInput!
	defaultPaymentMethod: String!
	currency: String!
	coupon: String!
	collectionMethod: PostSubscriptionSchedulesCollectionMethodPhases!
	billingThresholds: PostSubscriptionSchedulesBillingThresholdsPhasesUnionInput!
	billingCycleAnchor: PostSubscriptionSchedulesBillingCycleAnchorPhases!
	automaticTax: PostSubscriptionSchedulesAutomaticTaxPhasesInput!
	applicationFeePercent: Float!
	addInvoiceItems: [PostSubscriptionSchedulesAddInvoiceItemsPhasesInput!]!
}
input PostSubscriptionSchedulesPriceDataAddInvoiceItemsPhasesInput {
	unitAmountDecimal: String!
	unitAmount: Int!
	taxBehavior: PostSubscriptionSchedulesTaxBehaviorPriceDataAddInvoiceItemsPhases!
	product: String!
	currency: String!
}
input PostSubscriptionSchedulesPriceDataItemsPhasesInput {
	unitAmountDecimal: String!
	unitAmount: Int!
	taxBehavior: PostSubscriptionSchedulesTaxBehaviorPriceDataItemsPhases!
	recurring: PostSubscriptionSchedulesRecurringPriceDataItemsPhasesInput!
	product: String!
	currency: String!
}
enum PostSubscriptionSchedulesProrationBehaviorPhases {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
input PostSubscriptionSchedulesRecurringPriceDataItemsPhasesInput {
	intervalCount: Int!
	interval: PostSubscriptionSchedulesIntervalRecurringPriceDataItemsPhases!
}
input PostSubscriptionSchedulesScheduleAddInvoiceItemsPhasesInput {
	taxRates: UnionInput!
	quantity: Int!
	priceData: PostSubscriptionSchedulesSchedulePriceDataAddInvoiceItemsPhasesInput!
	price: String!
}
input PostSubscriptionSchedulesScheduleAutomaticTaxDefaultSettingsInput {
	enabled: Boolean!
}
input PostSubscriptionSchedulesScheduleAutomaticTaxPhasesInput {
	enabled: Boolean!
}
enum PostSubscriptionSchedulesScheduleBillingCycleAnchorDefaultSettings {
	AUTOMATIC
	PHASE_START
}
enum PostSubscriptionSchedulesScheduleBillingCycleAnchorPhases {
	AUTOMATIC
	PHASE_START
}
enum PostSubscriptionSchedulesScheduleBillingThresholdsDefaultSettings {
	
}
input PostSubscriptionSchedulesScheduleBillingThresholdsDefaultSettingsInput {
	resetBillingCycleAnchor: Boolean!
	amountGte: Int!
}
input PostSubscriptionSchedulesScheduleBillingThresholdsDefaultSettingsUnionInput {
	postSubscriptionSchedulesScheduleBillingThresholdsDefaultSettings: PostSubscriptionSchedulesScheduleBillingThresholdsDefaultSettings
	postSubscriptionSchedulesScheduleBillingThresholdsDefaultSettingsInput: PostSubscriptionSchedulesScheduleBillingThresholdsDefaultSettingsInput
}
enum PostSubscriptionSchedulesScheduleBillingThresholdsItemsPhases {
	
}
input PostSubscriptionSchedulesScheduleBillingThresholdsItemsPhasesInput {
	usageGte: Int!
}
input PostSubscriptionSchedulesScheduleBillingThresholdsItemsPhasesUnionInput {
	postSubscriptionSchedulesScheduleBillingThresholdsItemsPhases: PostSubscriptionSchedulesScheduleBillingThresholdsItemsPhases
	postSubscriptionSchedulesScheduleBillingThresholdsItemsPhasesInput: PostSubscriptionSchedulesScheduleBillingThresholdsItemsPhasesInput
}
enum PostSubscriptionSchedulesScheduleBillingThresholdsPhases {
	
}
input PostSubscriptionSchedulesScheduleBillingThresholdsPhasesInput {
	resetBillingCycleAnchor: Boolean!
	amountGte: Int!
}
input PostSubscriptionSchedulesScheduleBillingThresholdsPhasesUnionInput {
	postSubscriptionSchedulesScheduleBillingThresholdsPhases: PostSubscriptionSchedulesScheduleBillingThresholdsPhases
	postSubscriptionSchedulesScheduleBillingThresholdsPhasesInput: PostSubscriptionSchedulesScheduleBillingThresholdsPhasesInput
}
input PostSubscriptionSchedulesScheduleCancelInput {
	prorate: Boolean!
	invoiceNow: Boolean!
	expand: [String!]!
}
enum PostSubscriptionSchedulesScheduleCollectionMethodDefaultSettings {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
enum PostSubscriptionSchedulesScheduleCollectionMethodPhases {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
input PostSubscriptionSchedulesScheduleDefaultSettingsInput {
	transferData: PostSubscriptionSchedulesScheduleTransferDataDefaultSettingsUnionInput!
	onBehalfOf: UnionInput!
	invoiceSettings: PostSubscriptionSchedulesScheduleInvoiceSettingsDefaultSettingsInput!
	description: String!
	defaultPaymentMethod: String!
	collectionMethod: PostSubscriptionSchedulesScheduleCollectionMethodDefaultSettings!
	billingThresholds: PostSubscriptionSchedulesScheduleBillingThresholdsDefaultSettingsUnionInput!
	billingCycleAnchor: PostSubscriptionSchedulesScheduleBillingCycleAnchorDefaultSettings!
	automaticTax: PostSubscriptionSchedulesScheduleAutomaticTaxDefaultSettingsInput!
	applicationFeePercent: Float!
}
enum PostSubscriptionSchedulesScheduleEndBehavior {
	CANCEL
	NONE
	RELEASE
	RENEW
}
input PostSubscriptionSchedulesScheduleInput {
	prorationBehavior: PostSubscriptionSchedulesScheduleProrationBehavior!
	phases: [PostSubscriptionSchedulesSchedulePhasesInput!]!
	metadata: UnionInput!
	expand: [String!]!
	endBehavior: PostSubscriptionSchedulesScheduleEndBehavior!
	defaultSettings: PostSubscriptionSchedulesScheduleDefaultSettingsInput!
}
enum PostSubscriptionSchedulesScheduleIntervalRecurringPriceDataItemsPhases {
	DAY
	MONTH
	WEEK
	YEAR
}
input PostSubscriptionSchedulesScheduleInvoiceSettingsDefaultSettingsInput {
	daysUntilDue: Int!
}
input PostSubscriptionSchedulesScheduleInvoiceSettingsPhasesInput {
	daysUntilDue: Int!
}
input PostSubscriptionSchedulesScheduleItemsPhasesInput {
	taxRates: UnionInput!
	quantity: Int!
	priceData: PostSubscriptionSchedulesSchedulePriceDataItemsPhasesInput!
	price: String!
	metadata: JSON!
	billingThresholds: PostSubscriptionSchedulesScheduleBillingThresholdsItemsPhasesUnionInput!
}
input PostSubscriptionSchedulesSchedulePhasesInput {
	trialEnd: UnionInput!
	trial: Boolean!
	transferData: PostSubscriptionSchedulesScheduleTransferDataPhasesInput!
	startDate: UnionInput!
	prorationBehavior: PostSubscriptionSchedulesScheduleProrationBehaviorPhases!
	onBehalfOf: String!
	metadata: JSON!
	iterations: Int!
	items: [PostSubscriptionSchedulesScheduleItemsPhasesInput!]!
	invoiceSettings: PostSubscriptionSchedulesScheduleInvoiceSettingsPhasesInput!
	endDate: UnionInput!
	description: String!
	defaultTaxRates: UnionInput!
	defaultPaymentMethod: String!
	coupon: String!
	collectionMethod: PostSubscriptionSchedulesScheduleCollectionMethodPhases!
	billingThresholds: PostSubscriptionSchedulesScheduleBillingThresholdsPhasesUnionInput!
	billingCycleAnchor: PostSubscriptionSchedulesScheduleBillingCycleAnchorPhases!
	automaticTax: PostSubscriptionSchedulesScheduleAutomaticTaxPhasesInput!
	applicationFeePercent: Float!
	addInvoiceItems: [PostSubscriptionSchedulesScheduleAddInvoiceItemsPhasesInput!]!
}
input PostSubscriptionSchedulesSchedulePriceDataAddInvoiceItemsPhasesInput {
	unitAmountDecimal: String!
	unitAmount: Int!
	taxBehavior: PostSubscriptionSchedulesScheduleTaxBehaviorPriceDataAddInvoiceItemsPhases!
	product: String!
	currency: String!
}
input PostSubscriptionSchedulesSchedulePriceDataItemsPhasesInput {
	unitAmountDecimal: String!
	unitAmount: Int!
	taxBehavior: PostSubscriptionSchedulesScheduleTaxBehaviorPriceDataItemsPhases!
	recurring: PostSubscriptionSchedulesScheduleRecurringPriceDataItemsPhasesInput!
	product: String!
	currency: String!
}
enum PostSubscriptionSchedulesScheduleProrationBehavior {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
enum PostSubscriptionSchedulesScheduleProrationBehaviorPhases {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
input PostSubscriptionSchedulesScheduleRecurringPriceDataItemsPhasesInput {
	intervalCount: Int!
	interval: PostSubscriptionSchedulesScheduleIntervalRecurringPriceDataItemsPhases!
}
input PostSubscriptionSchedulesScheduleReleaseInput {
	preserveCancelDate: Boolean!
	expand: [String!]!
}
enum PostSubscriptionSchedulesScheduleTaxBehaviorPriceDataAddInvoiceItemsPhases {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum PostSubscriptionSchedulesScheduleTaxBehaviorPriceDataItemsPhases {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum PostSubscriptionSchedulesScheduleTransferDataDefaultSettings {
	
}
input PostSubscriptionSchedulesScheduleTransferDataDefaultSettingsInput {
	destination: String!
	amountPercent: Float!
}
input PostSubscriptionSchedulesScheduleTransferDataDefaultSettingsUnionInput {
	postSubscriptionSchedulesScheduleTransferDataDefaultSettings: PostSubscriptionSchedulesScheduleTransferDataDefaultSettings
	postSubscriptionSchedulesScheduleTransferDataDefaultSettingsInput: PostSubscriptionSchedulesScheduleTransferDataDefaultSettingsInput
}
input PostSubscriptionSchedulesScheduleTransferDataPhasesInput {
	destination: String!
	amountPercent: Float!
}
enum PostSubscriptionSchedulesTaxBehaviorPriceDataAddInvoiceItemsPhases {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum PostSubscriptionSchedulesTaxBehaviorPriceDataItemsPhases {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum PostSubscriptionSchedulesTransferDataDefaultSettings {
	
}
input PostSubscriptionSchedulesTransferDataDefaultSettingsInput {
	destination: String!
	amountPercent: Float!
}
input PostSubscriptionSchedulesTransferDataDefaultSettingsUnionInput {
	postSubscriptionSchedulesTransferDataDefaultSettings: PostSubscriptionSchedulesTransferDataDefaultSettings
	postSubscriptionSchedulesTransferDataDefaultSettingsInput: PostSubscriptionSchedulesTransferDataDefaultSettingsInput
}
input PostSubscriptionSchedulesTransferDataPhasesInput {
	destination: String!
	amountPercent: Float!
}
enum PostSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettings {
	
}
input PostSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput {
	verificationMethod: PostSubscriptionsVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings!
	mandateOptions: PostSubscriptionsMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput!
}
input PostSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput {
	postSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettings: PostSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettings
	postSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput: PostSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput
}
input PostSubscriptionsAddInvoiceItemsInput {
	taxRates: UnionInput!
	quantity: Int!
	priceData: PostSubscriptionsPriceDataAddInvoiceItemsInput!
	price: String!
}
enum PostSubscriptionsAmountTypeMandateOptionsCardPaymentMethodOptionsPaymentSettings {
	FIXED
	MAXIMUM
}
input PostSubscriptionsAutomaticTaxInput {
	enabled: Boolean!
}
enum PostSubscriptionsBancontactPaymentMethodOptionsPaymentSettings {
	
}
input PostSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsInput {
	preferredLanguage: PostSubscriptionsPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings!
}
input PostSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsUnionInput {
	postSubscriptionsBancontactPaymentMethodOptionsPaymentSettings: PostSubscriptionsBancontactPaymentMethodOptionsPaymentSettings
	postSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsInput: PostSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsInput
}
input PostSubscriptionsBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	type: String!
	euBankTransfer: PostSubscriptionsEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput!
}
enum PostSubscriptionsBillingThresholds {
	
}
input PostSubscriptionsBillingThresholdsInput {
	resetBillingCycleAnchor: Boolean!
	amountGte: Int!
}
enum PostSubscriptionsBillingThresholdsItems {
	
}
input PostSubscriptionsBillingThresholdsItemsInput {
	usageGte: Int!
}
input PostSubscriptionsBillingThresholdsItemsUnionInput {
	postSubscriptionsBillingThresholdsItems: PostSubscriptionsBillingThresholdsItems
	postSubscriptionsBillingThresholdsItemsInput: PostSubscriptionsBillingThresholdsItemsInput
}
input PostSubscriptionsBillingThresholdsUnionInput {
	postSubscriptionsBillingThresholds: PostSubscriptionsBillingThresholds
	postSubscriptionsBillingThresholdsInput: PostSubscriptionsBillingThresholdsInput
}
enum PostSubscriptionsCardPaymentMethodOptionsPaymentSettings {
	
}
input PostSubscriptionsCardPaymentMethodOptionsPaymentSettingsInput {
	requestThreeDSecure: PostSubscriptionsRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings!
	network: PostSubscriptionsNetworkCardPaymentMethodOptionsPaymentSettings!
	mandateOptions: PostSubscriptionsMandateOptionsCardPaymentMethodOptionsPaymentSettingsInput!
}
input PostSubscriptionsCardPaymentMethodOptionsPaymentSettingsUnionInput {
	postSubscriptionsCardPaymentMethodOptionsPaymentSettings: PostSubscriptionsCardPaymentMethodOptionsPaymentSettings
	postSubscriptionsCardPaymentMethodOptionsPaymentSettingsInput: PostSubscriptionsCardPaymentMethodOptionsPaymentSettingsInput
}
enum PostSubscriptionsCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
enum PostSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettings {
	
}
input PostSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	fundingType: String!
	bankTransfer: PostSubscriptionsBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput!
}
input PostSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput {
	postSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettings: PostSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettings
	postSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsInput: PostSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsInput
}
input PostSubscriptionsEndBehaviorTrialSettingsInput {
	missingPaymentMethod: PostSubscriptionsMissingPaymentMethodEndBehaviorTrialSettings!
}
input PostSubscriptionsEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	country: String!
}
input PostSubscriptionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput {
	permissions: [PostSubscriptionsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings!]!
}
input PostSubscriptionsInput {
	trialSettings: PostSubscriptionsTrialSettingsInput!
	trialPeriodDays: Int!
	trialFromPlan: Boolean!
	trialEnd: UnionInput!
	transferData: PostSubscriptionsTransferDataInput!
	prorationBehavior: PostSubscriptionsProrationBehavior!
	promotionCode: String!
	pendingInvoiceItemInterval: PostSubscriptionsPendingInvoiceItemIntervalUnionInput!
	paymentSettings: PostSubscriptionsPaymentSettingsInput!
	paymentBehavior: PostSubscriptionsPaymentBehavior!
	onBehalfOf: UnionInput!
	offSession: Boolean!
	metadata: UnionInput!
	items: [PostSubscriptionsItemsInput!]!
	expand: [String!]!
	description: String!
	defaultTaxRates: UnionInput!
	defaultSource: String!
	defaultPaymentMethod: String!
	daysUntilDue: Int!
	customer: String!
	currency: String!
	coupon: String!
	collectionMethod: PostSubscriptionsCollectionMethod!
	cancelAtPeriodEnd: Boolean!
	cancelAt: Int!
	billingThresholds: PostSubscriptionsBillingThresholdsUnionInput!
	billingCycleAnchor: Int!
	backdateStartDate: Int!
	automaticTax: PostSubscriptionsAutomaticTaxInput!
	applicationFeePercent: Float!
	addInvoiceItems: [PostSubscriptionsAddInvoiceItemsInput!]!
}
enum PostSubscriptionsIntervalPendingInvoiceItemInterval {
	DAY
	MONTH
	WEEK
	YEAR
}
enum PostSubscriptionsIntervalRecurringPriceDataItems {
	DAY
	MONTH
	WEEK
	YEAR
}
input PostSubscriptionsItemsInput {
	taxRates: UnionInput!
	quantity: Int!
	priceData: PostSubscriptionsPriceDataItemsInput!
	price: String!
	metadata: JSON!
	billingThresholds: PostSubscriptionsBillingThresholdsItemsUnionInput!
}
input PostSubscriptionsMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput {
	transactionType: PostSubscriptionsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings!
}
input PostSubscriptionsMandateOptionsCardPaymentMethodOptionsPaymentSettingsInput {
	description: String!
	amountType: PostSubscriptionsAmountTypeMandateOptionsCardPaymentMethodOptionsPaymentSettings!
	amount: Int!
}
enum PostSubscriptionsMissingPaymentMethodEndBehaviorTrialSettings {
	CANCEL
	CREATE_INVOICE
	PAUSE
}
enum PostSubscriptionsNetworkCardPaymentMethodOptionsPaymentSettings {
	AMEX
	CARTES_BANCAIRES
	DINERS
	DISCOVER
	INTERAC
	JCB
	MASTERCARD
	UNIONPAY
	UNKNOWN
	VISA
}
enum PostSubscriptionsPaymentBehavior {
	ALLOW_INCOMPLETE
	DEFAULT_INCOMPLETE
	ERROR_IF_INCOMPLETE
	PENDING_IF_INCOMPLETE
}
input PostSubscriptionsPaymentMethodOptionsPaymentSettingsInput {
	usBankAccount: PostSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput!
	konbini: UnionInput!
	customerBalance: PostSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput!
	card: PostSubscriptionsCardPaymentMethodOptionsPaymentSettingsUnionInput!
	bancontact: PostSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsUnionInput!
	acssDebit: PostSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput!
}
input PostSubscriptionsPaymentSettingsInput {
	saveDefaultPaymentMethod: PostSubscriptionsSaveDefaultPaymentMethodPaymentSettings!
	paymentMethodTypes: UnionInput!
	paymentMethodOptions: PostSubscriptionsPaymentMethodOptionsPaymentSettingsInput!
}
enum PostSubscriptionsPendingInvoiceItemInterval {
	
}
input PostSubscriptionsPendingInvoiceItemIntervalInput {
	intervalCount: Int!
	interval: PostSubscriptionsIntervalPendingInvoiceItemInterval!
}
input PostSubscriptionsPendingInvoiceItemIntervalUnionInput {
	postSubscriptionsPendingInvoiceItemInterval: PostSubscriptionsPendingInvoiceItemInterval
	postSubscriptionsPendingInvoiceItemIntervalInput: PostSubscriptionsPendingInvoiceItemIntervalInput
}
enum PostSubscriptionsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
enum PostSubscriptionsPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings {
	DE
	EN
	FR
	NL
}
input PostSubscriptionsPriceDataAddInvoiceItemsInput {
	unitAmountDecimal: String!
	unitAmount: Int!
	taxBehavior: PostSubscriptionsTaxBehaviorPriceDataAddInvoiceItems!
	product: String!
	currency: String!
}
input PostSubscriptionsPriceDataItemsInput {
	unitAmountDecimal: String!
	unitAmount: Int!
	taxBehavior: PostSubscriptionsTaxBehaviorPriceDataItems!
	recurring: PostSubscriptionsRecurringPriceDataItemsInput!
	product: String!
	currency: String!
}
enum PostSubscriptionsProrationBehavior {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
input PostSubscriptionsRecurringPriceDataItemsInput {
	intervalCount: Int!
	interval: PostSubscriptionsIntervalRecurringPriceDataItems!
}
enum PostSubscriptionsRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings {
	ANY
	AUTOMATIC
}
enum PostSubscriptionsSaveDefaultPaymentMethodPaymentSettings {
	OFF
	ON_SUBSCRIPTION
}
enum PostSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettings {
	
}
input PostSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsInput {
	verificationMethod: PostSubscriptionsSubscriptionExposedIdVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings!
	mandateOptions: PostSubscriptionsSubscriptionExposedIdMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput!
}
input PostSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput {
	postSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettings: PostSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettings
	postSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsInput: PostSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsInput
}
input PostSubscriptionsSubscriptionExposedIdAddInvoiceItemsInput {
	taxRates: UnionInput!
	quantity: Int!
	priceData: PostSubscriptionsSubscriptionExposedIdPriceDataAddInvoiceItemsInput!
	price: String!
}
enum PostSubscriptionsSubscriptionExposedIdAmountTypeMandateOptionsCardPaymentMethodOptionsPaymentSettings {
	FIXED
	MAXIMUM
}
input PostSubscriptionsSubscriptionExposedIdAutomaticTaxInput {
	enabled: Boolean!
}
enum PostSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettings {
	
}
input PostSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsInput {
	preferredLanguage: PostSubscriptionsSubscriptionExposedIdPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings!
}
input PostSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsUnionInput {
	postSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettings: PostSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettings
	postSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsInput: PostSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsInput
}
input PostSubscriptionsSubscriptionExposedIdBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	type: String!
	euBankTransfer: PostSubscriptionsSubscriptionExposedIdEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput!
}
enum PostSubscriptionsSubscriptionExposedIdBehaviorPauseCollection {
	KEEP_AS_DRAFT
	MARK_UNCOLLECTIBLE
	VOID
}
enum PostSubscriptionsSubscriptionExposedIdBillingCycleAnchor {
	NOW
	UNCHANGED
}
enum PostSubscriptionsSubscriptionExposedIdBillingThresholds {
	
}
input PostSubscriptionsSubscriptionExposedIdBillingThresholdsInput {
	resetBillingCycleAnchor: Boolean!
	amountGte: Int!
}
enum PostSubscriptionsSubscriptionExposedIdBillingThresholdsItems {
	
}
input PostSubscriptionsSubscriptionExposedIdBillingThresholdsItemsInput {
	usageGte: Int!
}
input PostSubscriptionsSubscriptionExposedIdBillingThresholdsItemsUnionInput {
	postSubscriptionsSubscriptionExposedIdBillingThresholdsItems: PostSubscriptionsSubscriptionExposedIdBillingThresholdsItems
	postSubscriptionsSubscriptionExposedIdBillingThresholdsItemsInput: PostSubscriptionsSubscriptionExposedIdBillingThresholdsItemsInput
}
input PostSubscriptionsSubscriptionExposedIdBillingThresholdsUnionInput {
	postSubscriptionsSubscriptionExposedIdBillingThresholds: PostSubscriptionsSubscriptionExposedIdBillingThresholds
	postSubscriptionsSubscriptionExposedIdBillingThresholdsInput: PostSubscriptionsSubscriptionExposedIdBillingThresholdsInput
}
enum PostSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettings {
	
}
input PostSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsInput {
	requestThreeDSecure: PostSubscriptionsSubscriptionExposedIdRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings!
	network: PostSubscriptionsSubscriptionExposedIdNetworkCardPaymentMethodOptionsPaymentSettings!
	mandateOptions: PostSubscriptionsSubscriptionExposedIdMandateOptionsCardPaymentMethodOptionsPaymentSettingsInput!
}
input PostSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsUnionInput {
	postSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettings: PostSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettings
	postSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsInput: PostSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsInput
}
enum PostSubscriptionsSubscriptionExposedIdCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
enum PostSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettings {
	
}
input PostSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	fundingType: String!
	bankTransfer: PostSubscriptionsSubscriptionExposedIdBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput!
}
input PostSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput {
	postSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettings: PostSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettings
	postSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsInput: PostSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsInput
}
input PostSubscriptionsSubscriptionExposedIdEndBehaviorTrialSettingsInput {
	missingPaymentMethod: PostSubscriptionsSubscriptionExposedIdMissingPaymentMethodEndBehaviorTrialSettings!
}
input PostSubscriptionsSubscriptionExposedIdEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	country: String!
}
input PostSubscriptionsSubscriptionExposedIdFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput {
	permissions: [PostSubscriptionsSubscriptionExposedIdPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings!]!
}
input PostSubscriptionsSubscriptionExposedIdInput {
	trialSettings: PostSubscriptionsSubscriptionExposedIdTrialSettingsInput!
	trialFromPlan: Boolean!
	trialEnd: UnionInput!
	transferData: PostSubscriptionsSubscriptionExposedIdTransferDataUnionInput!
	prorationDate: Int!
	prorationBehavior: PostSubscriptionsSubscriptionExposedIdProrationBehavior!
	promotionCode: String!
	pendingInvoiceItemInterval: PostSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalUnionInput!
	paymentSettings: PostSubscriptionsSubscriptionExposedIdPaymentSettingsInput!
	paymentBehavior: PostSubscriptionsSubscriptionExposedIdPaymentBehavior!
	pauseCollection: PostSubscriptionsSubscriptionExposedIdPauseCollectionUnionInput!
	onBehalfOf: UnionInput!
	offSession: Boolean!
	metadata: UnionInput!
	items: [PostSubscriptionsSubscriptionExposedIdItemsInput!]!
	expand: [String!]!
	description: String!
	defaultTaxRates: UnionInput!
	defaultSource: String!
	defaultPaymentMethod: String!
	daysUntilDue: Int!
	coupon: String!
	collectionMethod: PostSubscriptionsSubscriptionExposedIdCollectionMethod!
	cancelAtPeriodEnd: Boolean!
	cancelAt: UnionInput!
	billingThresholds: PostSubscriptionsSubscriptionExposedIdBillingThresholdsUnionInput!
	billingCycleAnchor: PostSubscriptionsSubscriptionExposedIdBillingCycleAnchor!
	automaticTax: PostSubscriptionsSubscriptionExposedIdAutomaticTaxInput!
	applicationFeePercent: Float!
	addInvoiceItems: [PostSubscriptionsSubscriptionExposedIdAddInvoiceItemsInput!]!
}
enum PostSubscriptionsSubscriptionExposedIdIntervalPendingInvoiceItemInterval {
	DAY
	MONTH
	WEEK
	YEAR
}
enum PostSubscriptionsSubscriptionExposedIdIntervalRecurringPriceDataItems {
	DAY
	MONTH
	WEEK
	YEAR
}
input PostSubscriptionsSubscriptionExposedIdItemsInput {
	taxRates: UnionInput!
	quantity: Int!
	priceData: PostSubscriptionsSubscriptionExposedIdPriceDataItemsInput!
	price: String!
	metadata: UnionInput!
	id: String!
	deleted: Boolean!
	clearUsage: Boolean!
	billingThresholds: PostSubscriptionsSubscriptionExposedIdBillingThresholdsItemsUnionInput!
}
input PostSubscriptionsSubscriptionExposedIdMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput {
	transactionType: PostSubscriptionsSubscriptionExposedIdTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings!
}
input PostSubscriptionsSubscriptionExposedIdMandateOptionsCardPaymentMethodOptionsPaymentSettingsInput {
	description: String!
	amountType: PostSubscriptionsSubscriptionExposedIdAmountTypeMandateOptionsCardPaymentMethodOptionsPaymentSettings!
	amount: Int!
}
enum PostSubscriptionsSubscriptionExposedIdMissingPaymentMethodEndBehaviorTrialSettings {
	CANCEL
	CREATE_INVOICE
	PAUSE
}
enum PostSubscriptionsSubscriptionExposedIdNetworkCardPaymentMethodOptionsPaymentSettings {
	AMEX
	CARTES_BANCAIRES
	DINERS
	DISCOVER
	INTERAC
	JCB
	MASTERCARD
	UNIONPAY
	UNKNOWN
	VISA
}
enum PostSubscriptionsSubscriptionExposedIdPauseCollection {
	
}
input PostSubscriptionsSubscriptionExposedIdPauseCollectionInput {
	resumesAt: Int!
	behavior: PostSubscriptionsSubscriptionExposedIdBehaviorPauseCollection!
}
input PostSubscriptionsSubscriptionExposedIdPauseCollectionUnionInput {
	postSubscriptionsSubscriptionExposedIdPauseCollection: PostSubscriptionsSubscriptionExposedIdPauseCollection
	postSubscriptionsSubscriptionExposedIdPauseCollectionInput: PostSubscriptionsSubscriptionExposedIdPauseCollectionInput
}
enum PostSubscriptionsSubscriptionExposedIdPaymentBehavior {
	ALLOW_INCOMPLETE
	DEFAULT_INCOMPLETE
	ERROR_IF_INCOMPLETE
	PENDING_IF_INCOMPLETE
}
input PostSubscriptionsSubscriptionExposedIdPaymentMethodOptionsPaymentSettingsInput {
	usBankAccount: PostSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput!
	konbini: UnionInput!
	customerBalance: PostSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput!
	card: PostSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsUnionInput!
	bancontact: PostSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsUnionInput!
	acssDebit: PostSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput!
}
input PostSubscriptionsSubscriptionExposedIdPaymentSettingsInput {
	saveDefaultPaymentMethod: PostSubscriptionsSubscriptionExposedIdSaveDefaultPaymentMethodPaymentSettings!
	paymentMethodTypes: UnionInput!
	paymentMethodOptions: PostSubscriptionsSubscriptionExposedIdPaymentMethodOptionsPaymentSettingsInput!
}
enum PostSubscriptionsSubscriptionExposedIdPendingInvoiceItemInterval {
	
}
input PostSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalInput {
	intervalCount: Int!
	interval: PostSubscriptionsSubscriptionExposedIdIntervalPendingInvoiceItemInterval!
}
input PostSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalUnionInput {
	postSubscriptionsSubscriptionExposedIdPendingInvoiceItemInterval: PostSubscriptionsSubscriptionExposedIdPendingInvoiceItemInterval
	postSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalInput: PostSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalInput
}
enum PostSubscriptionsSubscriptionExposedIdPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
enum PostSubscriptionsSubscriptionExposedIdPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings {
	DE
	EN
	FR
	NL
}
input PostSubscriptionsSubscriptionExposedIdPriceDataAddInvoiceItemsInput {
	unitAmountDecimal: String!
	unitAmount: Int!
	taxBehavior: PostSubscriptionsSubscriptionExposedIdTaxBehaviorPriceDataAddInvoiceItems!
	product: String!
	currency: String!
}
input PostSubscriptionsSubscriptionExposedIdPriceDataItemsInput {
	unitAmountDecimal: String!
	unitAmount: Int!
	taxBehavior: PostSubscriptionsSubscriptionExposedIdTaxBehaviorPriceDataItems!
	recurring: PostSubscriptionsSubscriptionExposedIdRecurringPriceDataItemsInput!
	product: String!
	currency: String!
}
enum PostSubscriptionsSubscriptionExposedIdProrationBehavior {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
input PostSubscriptionsSubscriptionExposedIdRecurringPriceDataItemsInput {
	intervalCount: Int!
	interval: PostSubscriptionsSubscriptionExposedIdIntervalRecurringPriceDataItems!
}
enum PostSubscriptionsSubscriptionExposedIdRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings {
	ANY
	AUTOMATIC
}
enum PostSubscriptionsSubscriptionExposedIdSaveDefaultPaymentMethodPaymentSettings {
	OFF
	ON_SUBSCRIPTION
}
enum PostSubscriptionsSubscriptionExposedIdTaxBehaviorPriceDataAddInvoiceItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum PostSubscriptionsSubscriptionExposedIdTaxBehaviorPriceDataItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum PostSubscriptionsSubscriptionExposedIdTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings {
	BUSINESS
	PERSONAL
}
enum PostSubscriptionsSubscriptionExposedIdTransferData {
	
}
input PostSubscriptionsSubscriptionExposedIdTransferDataInput {
	destination: String!
	amountPercent: Float!
}
input PostSubscriptionsSubscriptionExposedIdTransferDataUnionInput {
	postSubscriptionsSubscriptionExposedIdTransferData: PostSubscriptionsSubscriptionExposedIdTransferData
	postSubscriptionsSubscriptionExposedIdTransferDataInput: PostSubscriptionsSubscriptionExposedIdTransferDataInput
}
input PostSubscriptionsSubscriptionExposedIdTrialSettingsInput {
	endBehavior: PostSubscriptionsSubscriptionExposedIdEndBehaviorTrialSettingsInput!
}
enum PostSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettings {
	
}
input PostSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsInput {
	verificationMethod: PostSubscriptionsSubscriptionExposedIdVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings!
	financialConnections: PostSubscriptionsSubscriptionExposedIdFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput!
}
input PostSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput {
	postSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettings: PostSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettings
	postSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsInput: PostSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsInput
}
enum PostSubscriptionsSubscriptionExposedIdVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum PostSubscriptionsSubscriptionExposedIdVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum PostSubscriptionsSubscriptionResumeBillingCycleAnchor {
	NOW
	UNCHANGED
}
input PostSubscriptionsSubscriptionResumeInput {
	prorationDate: Int!
	prorationBehavior: PostSubscriptionsSubscriptionResumeProrationBehavior!
	expand: [String!]!
	billingCycleAnchor: PostSubscriptionsSubscriptionResumeBillingCycleAnchor!
}
enum PostSubscriptionsSubscriptionResumeProrationBehavior {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
enum PostSubscriptionsTaxBehaviorPriceDataAddInvoiceItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum PostSubscriptionsTaxBehaviorPriceDataItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum PostSubscriptionsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings {
	BUSINESS
	PERSONAL
}
input PostSubscriptionsTransferDataInput {
	destination: String!
	amountPercent: Float!
}
input PostSubscriptionsTrialSettingsInput {
	endBehavior: PostSubscriptionsEndBehaviorTrialSettingsInput!
}
enum PostSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettings {
	
}
input PostSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput {
	verificationMethod: PostSubscriptionsVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings!
	financialConnections: PostSubscriptionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput!
}
input PostSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput {
	postSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettings: PostSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettings
	postSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput: PostSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput
}
enum PostSubscriptionsVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum PostSubscriptionsVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
input PostTaxRatesInput {
	taxType: PostTaxRatesTaxType!
	state: String!
	percentage: Float!
	metadata: JSON!
	jurisdiction: String!
	inclusive: Boolean!
	expand: [String!]!
	displayName: String!
	description: String!
	country: String!
	active: Boolean!
}
input PostTaxRatesTaxRateInput {
	taxType: PostTaxRatesTaxRateTaxType!
	state: String!
	metadata: UnionInput!
	jurisdiction: String!
	expand: [String!]!
	displayName: String!
	description: String!
	country: String!
	active: Boolean!
}
enum PostTaxRatesTaxRateTaxType {
	GST
	HST
	JCT
	PST
	QST
	RST
	SALES_TAX
	VAT
}
enum PostTaxRatesTaxType {
	GST
	HST
	JCT
	PST
	QST
	RST
	SALES_TAX
	VAT
}
input PostTerminalConfigurationsAudTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
input PostTerminalConfigurationsBbposWiseposEInput {
	splashscreen: UnionInput!
}
input PostTerminalConfigurationsCadTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
input PostTerminalConfigurationsChfTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
input PostTerminalConfigurationsConfigurationAudTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
enum PostTerminalConfigurationsConfigurationBbposWiseposE {
	
}
input PostTerminalConfigurationsConfigurationBbposWiseposEInput {
	splashscreen: UnionInput!
}
input PostTerminalConfigurationsConfigurationBbposWiseposEUnionInput {
	postTerminalConfigurationsConfigurationBbposWiseposE: PostTerminalConfigurationsConfigurationBbposWiseposE
	postTerminalConfigurationsConfigurationBbposWiseposEInput: PostTerminalConfigurationsConfigurationBbposWiseposEInput
}
input PostTerminalConfigurationsConfigurationCadTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
input PostTerminalConfigurationsConfigurationChfTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
input PostTerminalConfigurationsConfigurationCzkTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
input PostTerminalConfigurationsConfigurationDkkTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
input PostTerminalConfigurationsConfigurationEurTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
input PostTerminalConfigurationsConfigurationGbpTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
input PostTerminalConfigurationsConfigurationHkdTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
input PostTerminalConfigurationsConfigurationInput {
	verifoneP400: PostTerminalConfigurationsConfigurationVerifoneP400UnionInput!
	tipping: PostTerminalConfigurationsConfigurationTippingUnionInput!
	expand: [String!]!
	bbposWiseposE: PostTerminalConfigurationsConfigurationBbposWiseposEUnionInput!
}
input PostTerminalConfigurationsConfigurationMyrTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
input PostTerminalConfigurationsConfigurationNokTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
input PostTerminalConfigurationsConfigurationNzdTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
input PostTerminalConfigurationsConfigurationSekTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
input PostTerminalConfigurationsConfigurationSgdTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
enum PostTerminalConfigurationsConfigurationTipping {
	
}
input PostTerminalConfigurationsConfigurationTippingInput {
	usd: PostTerminalConfigurationsConfigurationUsdTippingInput!
	sgd: PostTerminalConfigurationsConfigurationSgdTippingInput!
	sek: PostTerminalConfigurationsConfigurationSekTippingInput!
	nzd: PostTerminalConfigurationsConfigurationNzdTippingInput!
	nok: PostTerminalConfigurationsConfigurationNokTippingInput!
	myr: PostTerminalConfigurationsConfigurationMyrTippingInput!
	hkd: PostTerminalConfigurationsConfigurationHkdTippingInput!
	gbp: PostTerminalConfigurationsConfigurationGbpTippingInput!
	eur: PostTerminalConfigurationsConfigurationEurTippingInput!
	dkk: PostTerminalConfigurationsConfigurationDkkTippingInput!
	czk: PostTerminalConfigurationsConfigurationCzkTippingInput!
	chf: PostTerminalConfigurationsConfigurationChfTippingInput!
	cad: PostTerminalConfigurationsConfigurationCadTippingInput!
	aud: PostTerminalConfigurationsConfigurationAudTippingInput!
}
input PostTerminalConfigurationsConfigurationTippingUnionInput {
	postTerminalConfigurationsConfigurationTipping: PostTerminalConfigurationsConfigurationTipping
	postTerminalConfigurationsConfigurationTippingInput: PostTerminalConfigurationsConfigurationTippingInput
}
input PostTerminalConfigurationsConfigurationUsdTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
enum PostTerminalConfigurationsConfigurationVerifoneP400 {
	
}
input PostTerminalConfigurationsConfigurationVerifoneP400Input {
	splashscreen: UnionInput!
}
input PostTerminalConfigurationsConfigurationVerifoneP400UnionInput {
	postTerminalConfigurationsConfigurationVerifoneP400: PostTerminalConfigurationsConfigurationVerifoneP400
	postTerminalConfigurationsConfigurationVerifoneP400Input: PostTerminalConfigurationsConfigurationVerifoneP400Input
}
input PostTerminalConfigurationsCzkTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
input PostTerminalConfigurationsDkkTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
input PostTerminalConfigurationsEurTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
input PostTerminalConfigurationsGbpTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
input PostTerminalConfigurationsHkdTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
input PostTerminalConfigurationsInput {
	verifoneP400: PostTerminalConfigurationsVerifoneP400Input!
	tipping: PostTerminalConfigurationsTippingUnionInput!
	expand: [String!]!
	bbposWiseposE: PostTerminalConfigurationsBbposWiseposEInput!
}
input PostTerminalConfigurationsMyrTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
input PostTerminalConfigurationsNokTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
input PostTerminalConfigurationsNzdTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
input PostTerminalConfigurationsSekTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
input PostTerminalConfigurationsSgdTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
enum PostTerminalConfigurationsTipping {
	
}
input PostTerminalConfigurationsTippingInput {
	usd: PostTerminalConfigurationsUsdTippingInput!
	sgd: PostTerminalConfigurationsSgdTippingInput!
	sek: PostTerminalConfigurationsSekTippingInput!
	nzd: PostTerminalConfigurationsNzdTippingInput!
	nok: PostTerminalConfigurationsNokTippingInput!
	myr: PostTerminalConfigurationsMyrTippingInput!
	hkd: PostTerminalConfigurationsHkdTippingInput!
	gbp: PostTerminalConfigurationsGbpTippingInput!
	eur: PostTerminalConfigurationsEurTippingInput!
	dkk: PostTerminalConfigurationsDkkTippingInput!
	czk: PostTerminalConfigurationsCzkTippingInput!
	chf: PostTerminalConfigurationsChfTippingInput!
	cad: PostTerminalConfigurationsCadTippingInput!
	aud: PostTerminalConfigurationsAudTippingInput!
}
input PostTerminalConfigurationsTippingUnionInput {
	postTerminalConfigurationsTipping: PostTerminalConfigurationsTipping
	postTerminalConfigurationsTippingInput: PostTerminalConfigurationsTippingInput
}
input PostTerminalConfigurationsUsdTippingInput {
	smartTipThreshold: Int!
	percentages: [Int!]!
	fixedAmounts: [Int!]!
}
input PostTerminalConfigurationsVerifoneP400Input {
	splashscreen: UnionInput!
}
input PostTerminalConnectionTokensInput {
	location: String!
	expand: [String!]!
}
input PostTerminalLocationsAddressInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostTerminalLocationsInput {
	metadata: UnionInput!
	expand: [String!]!
	displayName: String!
	configurationOverrides: String!
	address: PostTerminalLocationsAddressInput!
}
input PostTerminalLocationsLocationAddressInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostTerminalLocationsLocationInput {
	metadata: UnionInput!
	expand: [String!]!
	displayName: String!
	configurationOverrides: String!
	address: PostTerminalLocationsLocationAddressInput!
}
input PostTerminalReadersInput {
	registrationCode: String!
	metadata: UnionInput!
	location: String!
	label: String!
	expand: [String!]!
}
input PostTerminalReadersReaderCancelActionInput {
	expand: [String!]!
}
input PostTerminalReadersReaderInput {
	metadata: UnionInput!
	label: String!
	expand: [String!]!
}
input PostTerminalReadersReaderProcessPaymentIntentInput {
	processConfig: PostTerminalReadersReaderProcessPaymentIntentProcessConfigInput!
	paymentIntent: String!
	expand: [String!]!
}
input PostTerminalReadersReaderProcessPaymentIntentProcessConfigInput {
	tipping: PostTerminalReadersReaderProcessPaymentIntentTippingProcessConfigInput!
	skipTipping: Boolean!
}
input PostTerminalReadersReaderProcessPaymentIntentTippingProcessConfigInput {
	amountEligible: Int!
}
input PostTerminalReadersReaderProcessSetupIntentInput {
	setupIntent: String!
	expand: [String!]!
	customerConsentCollected: Boolean!
}
input PostTerminalReadersReaderSetReaderDisplayCartInput {
	total: Int!
	tax: Int!
	lineItems: [PostTerminalReadersReaderSetReaderDisplayLineItemsCartInput!]!
	currency: String!
}
input PostTerminalReadersReaderSetReaderDisplayInput {
	type: PostTerminalReadersReaderSetReaderDisplayType!
	expand: [String!]!
	cart: PostTerminalReadersReaderSetReaderDisplayCartInput!
}
input PostTerminalReadersReaderSetReaderDisplayLineItemsCartInput {
	quantity: Int!
	description: String!
	amount: Int!
}
enum PostTerminalReadersReaderSetReaderDisplayType {
	CART
}
input PostTestHelpersCustomersCustomerFundCashBalanceInput {
	reference: String!
	expand: [String!]!
	currency: String!
	amount: Int!
}
input PostTestHelpersIssuingCardsCardShippingDeliverInput {
	expand: [String!]!
}
input PostTestHelpersIssuingCardsCardShippingFailInput {
	expand: [String!]!
}
input PostTestHelpersIssuingCardsCardShippingReturnInput {
	expand: [String!]!
}
input PostTestHelpersIssuingCardsCardShippingShipInput {
	expand: [String!]!
}
input PostTestHelpersRefundsRefundExpireInput {
	expand: [String!]!
}
input PostTestHelpersTerminalReadersReaderPresentPaymentMethodCardPresentInput {
	number: String!
}
input PostTestHelpersTerminalReadersReaderPresentPaymentMethodInput {
	type: PostTestHelpersTerminalReadersReaderPresentPaymentMethodType!
	expand: [String!]!
	cardPresent: PostTestHelpersTerminalReadersReaderPresentPaymentMethodCardPresentInput!
}
enum PostTestHelpersTerminalReadersReaderPresentPaymentMethodType {
	CARD_PRESENT
}
input PostTestHelpersTestClocksInput {
	name: String!
	frozenTime: Int!
	expand: [String!]!
}
input PostTestHelpersTestClocksTestClockAdvanceInput {
	frozenTime: Int!
	expand: [String!]!
}
enum PostTestHelpersTreasuryInboundTransfersIdFailCodeFailureDetails {
	ACCOUNT_CLOSED
	ACCOUNT_FROZEN
	BANK_ACCOUNT_RESTRICTED
	BANK_OWNERSHIP_CHANGED
	DEBIT_NOT_AUTHORIZED
	INCORRECT_ACCOUNT_HOLDER_ADDRESS
	INCORRECT_ACCOUNT_HOLDER_NAME
	INCORRECT_ACCOUNT_HOLDER_TAX_ID
	INSUFFICIENT_FUNDS
	INVALID_ACCOUNT_NUMBER
	INVALID_CURRENCY
	NO_ACCOUNT
	OTHER
}
input PostTestHelpersTreasuryInboundTransfersIdFailFailureDetailsInput {
	code: PostTestHelpersTreasuryInboundTransfersIdFailCodeFailureDetails!
}
input PostTestHelpersTreasuryInboundTransfersIdFailInput {
	failureDetails: PostTestHelpersTreasuryInboundTransfersIdFailFailureDetailsInput!
	expand: [String!]!
}
input PostTestHelpersTreasuryInboundTransfersIdReturnInput {
	expand: [String!]!
}
input PostTestHelpersTreasuryInboundTransfersIdSucceedInput {
	expand: [String!]!
}
input PostTestHelpersTreasuryOutboundPaymentsIdFailInput {
	expand: [String!]!
}
input PostTestHelpersTreasuryOutboundPaymentsIdPostInput {
	expand: [String!]!
}
enum PostTestHelpersTreasuryOutboundPaymentsIdReturnCodeReturnedDetails {
	ACCOUNT_CLOSED
	ACCOUNT_FROZEN
	BANK_ACCOUNT_RESTRICTED
	BANK_OWNERSHIP_CHANGED
	DECLINED
	INCORRECT_ACCOUNT_HOLDER_NAME
	INVALID_ACCOUNT_NUMBER
	INVALID_CURRENCY
	NO_ACCOUNT
	OTHER
}
input PostTestHelpersTreasuryOutboundPaymentsIdReturnInput {
	returnedDetails: PostTestHelpersTreasuryOutboundPaymentsIdReturnReturnedDetailsInput!
	expand: [String!]!
}
input PostTestHelpersTreasuryOutboundPaymentsIdReturnReturnedDetailsInput {
	code: PostTestHelpersTreasuryOutboundPaymentsIdReturnCodeReturnedDetails!
}
input PostTestHelpersTreasuryOutboundTransfersOutboundTransferFailInput {
	expand: [String!]!
}
input PostTestHelpersTreasuryOutboundTransfersOutboundTransferPostInput {
	expand: [String!]!
}
enum PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnCodeReturnedDetails {
	ACCOUNT_CLOSED
	ACCOUNT_FROZEN
	BANK_ACCOUNT_RESTRICTED
	BANK_OWNERSHIP_CHANGED
	DECLINED
	INCORRECT_ACCOUNT_HOLDER_NAME
	INVALID_ACCOUNT_NUMBER
	INVALID_CURRENCY
	NO_ACCOUNT
	OTHER
}
input PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnInput {
	returnedDetails: PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnReturnedDetailsInput!
	expand: [String!]!
}
input PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnReturnedDetailsInput {
	code: PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnCodeReturnedDetails!
}
input PostTestHelpersTreasuryReceivedCreditsInitiatingPaymentMethodDetailsInput {
	usBankAccount: PostTestHelpersTreasuryReceivedCreditsUsBankAccountInitiatingPaymentMethodDetailsInput!
	type: PostTestHelpersTreasuryReceivedCreditsTypeInitiatingPaymentMethodDetails!
}
input PostTestHelpersTreasuryReceivedCreditsInput {
	network: PostTestHelpersTreasuryReceivedCreditsNetwork!
	initiatingPaymentMethodDetails: PostTestHelpersTreasuryReceivedCreditsInitiatingPaymentMethodDetailsInput!
	financialAccount: String!
	expand: [String!]!
	description: String!
	currency: String!
	amount: Int!
}
enum PostTestHelpersTreasuryReceivedCreditsNetwork {
	ACH
	US_DOMESTIC_WIRE
}
enum PostTestHelpersTreasuryReceivedCreditsTypeInitiatingPaymentMethodDetails {
	US_BANK_ACCOUNT
}
input PostTestHelpersTreasuryReceivedCreditsUsBankAccountInitiatingPaymentMethodDetailsInput {
	routingNumber: String!
	accountNumber: String!
	accountHolderName: String!
}
input PostTestHelpersTreasuryReceivedDebitsInitiatingPaymentMethodDetailsInput {
	usBankAccount: PostTestHelpersTreasuryReceivedDebitsUsBankAccountInitiatingPaymentMethodDetailsInput!
	type: PostTestHelpersTreasuryReceivedDebitsTypeInitiatingPaymentMethodDetails!
}
input PostTestHelpersTreasuryReceivedDebitsInput {
	network: PostTestHelpersTreasuryReceivedDebitsNetwork!
	initiatingPaymentMethodDetails: PostTestHelpersTreasuryReceivedDebitsInitiatingPaymentMethodDetailsInput!
	financialAccount: String!
	expand: [String!]!
	description: String!
	currency: String!
	amount: Int!
}
enum PostTestHelpersTreasuryReceivedDebitsNetwork {
	ACH
}
enum PostTestHelpersTreasuryReceivedDebitsTypeInitiatingPaymentMethodDetails {
	US_BANK_ACCOUNT
}
input PostTestHelpersTreasuryReceivedDebitsUsBankAccountInitiatingPaymentMethodDetailsInput {
	routingNumber: String!
	accountNumber: String!
	accountHolderName: String!
}
enum PostTokensAccountHolderTypeBankAccount {
	COMPANY
	INDIVIDUAL
}
input PostTokensAccountInput {
	tosShownAndAccepted: Boolean!
	individual: PostTokensIndividualAccountInput!
	company: PostTokensCompanyAccountInput!
	businessType: PostTokensBusinessTypeAccount!
}
enum PostTokensAccountTypeBankAccount {
	CHECKING
	FUTSU
	SAVINGS
	TOZA
}
input PostTokensAdditionalDocumentVerificationIndividualAccountInput {
	front: String!
	back: String!
}
input PostTokensAdditionalDocumentVerificationPersonInput {
	front: String!
	back: String!
}
input PostTokensAddressCompanyAccountInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostTokensAddressIndividualAccountInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostTokensAddressKanaCompanyAccountInput {
	town: String!
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostTokensAddressKanaIndividualAccountInput {
	town: String!
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostTokensAddressKanaPersonInput {
	town: String!
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostTokensAddressKanjiCompanyAccountInput {
	town: String!
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostTokensAddressKanjiIndividualAccountInput {
	town: String!
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostTokensAddressKanjiPersonInput {
	town: String!
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostTokensAddressPersonInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostTokensBankAccountInput {
	routingNumber: String!
	currency: String!
	country: String!
	accountType: PostTokensAccountTypeBankAccount!
	accountNumber: String!
	accountHolderType: PostTokensAccountHolderTypeBankAccount!
	accountHolderName: String!
}
enum PostTokensBusinessTypeAccount {
	COMPANY
	GOVERNMENT_ENTITY
	INDIVIDUAL
	NON_PROFIT
}
input PostTokensCardInput {
	number: String!
	name: String!
	expYear: String!
	expMonth: String!
	cvc: String!
	currency: String!
	addressZip: String!
	addressState: String!
	addressLine2: String!
	addressLine1: String!
	addressCountry: String!
	addressCity: String!
}
input PostTokensCardUnionInput {
	string: String
	postTokensCardInput: PostTokensCardInput
}
input PostTokensCompanyAccountInput {
	verification: PostTokensVerificationCompanyAccountInput!
	vatId: String!
	taxIdRegistrar: String!
	taxId: String!
	structure: PostTokensStructureCompanyAccount!
	registrationNumber: String!
	phone: String!
	ownershipDeclarationShownAndSigned: Boolean!
	ownershipDeclaration: PostTokensOwnershipDeclarationCompanyAccountInput!
	ownersProvided: Boolean!
	nameKanji: String!
	nameKana: String!
	name: String!
	executivesProvided: Boolean!
	directorsProvided: Boolean!
	addressKanji: PostTokensAddressKanjiCompanyAccountInput!
	addressKana: PostTokensAddressKanaCompanyAccountInput!
	address: PostTokensAddressCompanyAccountInput!
}
input PostTokensCompanyAuthorizationDocumentsPersonInput {
	files: [String!]!
}
input PostTokensCvcUpdateInput {
	cvc: String!
}
enum PostTokensDobIndividualAccount {
	
}
input PostTokensDobIndividualAccountInput {
	year: Int!
	month: Int!
	day: Int!
}
input PostTokensDobIndividualAccountUnionInput {
	postTokensDobIndividualAccount: PostTokensDobIndividualAccount
	postTokensDobIndividualAccountInput: PostTokensDobIndividualAccountInput
}
enum PostTokensDobPerson {
	
}
input PostTokensDobPersonInput {
	year: Int!
	month: Int!
	day: Int!
}
input PostTokensDobPersonUnionInput {
	postTokensDobPerson: PostTokensDobPerson
	postTokensDobPersonInput: PostTokensDobPersonInput
}
input PostTokensDocumentVerificationCompanyAccountInput {
	front: String!
	back: String!
}
input PostTokensDocumentVerificationIndividualAccountInput {
	front: String!
	back: String!
}
input PostTokensDocumentVerificationPersonInput {
	front: String!
	back: String!
}
input PostTokensDocumentsPersonInput {
	visa: PostTokensVisaDocumentsPersonInput!
	passport: PostTokensPassportDocumentsPersonInput!
	companyAuthorization: PostTokensCompanyAuthorizationDocumentsPersonInput!
}
input PostTokensIndividualAccountInput {
	verification: PostTokensVerificationIndividualAccountInput!
	ssnLast4: String!
	registeredAddress: PostTokensRegisteredAddressIndividualAccountInput!
	politicalExposure: PostTokensPoliticalExposureIndividualAccount!
	phone: String!
	metadata: UnionInput!
	maidenName: String!
	lastNameKanji: String!
	lastNameKana: String!
	lastName: String!
	idNumberSecondary: String!
	idNumber: String!
	gender: String!
	fullNameAliases: UnionInput!
	firstNameKanji: String!
	firstNameKana: String!
	firstName: String!
	email: String!
	dob: PostTokensDobIndividualAccountUnionInput!
	addressKanji: PostTokensAddressKanjiIndividualAccountInput!
	addressKana: PostTokensAddressKanaIndividualAccountInput!
	address: PostTokensAddressIndividualAccountInput!
}
input PostTokensInput {
	pii: PostTokensPiiInput!
	person: PostTokensPersonInput!
	expand: [String!]!
	cvcUpdate: PostTokensCvcUpdateInput!
	customer: String!
	card: PostTokensCardUnionInput!
	bankAccount: PostTokensBankAccountInput!
	account: PostTokensAccountInput!
}
input PostTokensOwnershipDeclarationCompanyAccountInput {
	userAgent: String!
	ip: String!
	date: Int!
}
input PostTokensPassportDocumentsPersonInput {
	files: [String!]!
}
input PostTokensPersonInput {
	verification: PostTokensVerificationPersonInput!
	ssnLast4: String!
	relationship: PostTokensRelationshipPersonInput!
	registeredAddress: PostTokensRegisteredAddressPersonInput!
	politicalExposure: String!
	phone: String!
	nationality: String!
	metadata: UnionInput!
	maidenName: String!
	lastNameKanji: String!
	lastNameKana: String!
	lastName: String!
	idNumberSecondary: String!
	idNumber: String!
	gender: String!
	fullNameAliases: UnionInput!
	firstNameKanji: String!
	firstNameKana: String!
	firstName: String!
	email: String!
	documents: PostTokensDocumentsPersonInput!
	dob: PostTokensDobPersonUnionInput!
	addressKanji: PostTokensAddressKanjiPersonInput!
	addressKana: PostTokensAddressKanaPersonInput!
	address: PostTokensAddressPersonInput!
}
input PostTokensPiiInput {
	idNumber: String!
}
enum PostTokensPoliticalExposureIndividualAccount {
	EXISTING
	NONE
}
input PostTokensRegisteredAddressIndividualAccountInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostTokensRegisteredAddressPersonInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostTokensRelationshipPersonInput {
	title: String!
	representative: Boolean!
	percentOwnership: UnionInput!
	owner: Boolean!
	executive: Boolean!
	director: Boolean!
}
enum PostTokensStructureCompanyAccount {
	
	FREE_ZONE_ESTABLISHMENT
	FREE_ZONE_LLC
	GOVERNMENT_INSTRUMENTALITY
	GOVERNMENTAL_UNIT
	INCORPORATED_NON_PROFIT
	LIMITED_LIABILITY_PARTNERSHIP
	LLC
	MULTI_MEMBER_LLC
	PRIVATE_COMPANY
	PRIVATE_CORPORATION
	PRIVATE_PARTNERSHIP
	PUBLIC_COMPANY
	PUBLIC_CORPORATION
	PUBLIC_PARTNERSHIP
	SINGLE_MEMBER_LLC
	SOLE_ESTABLISHMENT
	SOLE_PROPRIETORSHIP
	TAX_EXEMPT_GOVERNMENT_INSTRUMENTALITY
	UNINCORPORATED_ASSOCIATION
	UNINCORPORATED_NON_PROFIT
}
input PostTokensVerificationCompanyAccountInput {
	document: PostTokensDocumentVerificationCompanyAccountInput!
}
input PostTokensVerificationIndividualAccountInput {
	document: PostTokensDocumentVerificationIndividualAccountInput!
	additionalDocument: PostTokensAdditionalDocumentVerificationIndividualAccountInput!
}
input PostTokensVerificationPersonInput {
	document: PostTokensDocumentVerificationPersonInput!
	additionalDocument: PostTokensAdditionalDocumentVerificationPersonInput!
}
input PostTokensVisaDocumentsPersonInput {
	files: [String!]!
}
input PostTopupsInput {
	transferGroup: String!
	statementDescriptor: String!
	source: String!
	metadata: UnionInput!
	expand: [String!]!
	description: String!
	currency: String!
	amount: Int!
}
input PostTopupsTopupCancelInput {
	expand: [String!]!
}
input PostTopupsTopupInput {
	metadata: UnionInput!
	expand: [String!]!
	description: String!
}
input PostTransfersIdReversalsInput {
	refundApplicationFee: Boolean!
	metadata: UnionInput!
	expand: [String!]!
	description: String!
	amount: Int!
}
input PostTransfersInput {
	transferGroup: String!
	sourceType: PostTransfersSourceType!
	sourceTransaction: String!
	metadata: JSON!
	expand: [String!]!
	destination: String!
	description: String!
	currency: String!
	amount: Int!
}
enum PostTransfersSourceType {
	BANK_ACCOUNT
	CARD
	FPX
}
input PostTransfersTransferInput {
	metadata: UnionInput!
	expand: [String!]!
	description: String!
}
input PostTransfersTransferReversalsIdInput {
	metadata: UnionInput!
	expand: [String!]!
}
input PostTreasuryCreditReversalsInput {
	receivedCredit: String!
	metadata: JSON!
	expand: [String!]!
}
input PostTreasuryDebitReversalsInput {
	receivedDebit: String!
	metadata: JSON!
	expand: [String!]!
}
input PostTreasuryFinancialAccountsAbaFinancialAddressesFeaturesInput {
	requested: Boolean!
}
input PostTreasuryFinancialAccountsAchInboundTransfersFeaturesInput {
	requested: Boolean!
}
input PostTreasuryFinancialAccountsAchOutboundPaymentsFeaturesInput {
	requested: Boolean!
}
input PostTreasuryFinancialAccountsAchOutboundTransfersFeaturesInput {
	requested: Boolean!
}
input PostTreasuryFinancialAccountsCardIssuingFeaturesInput {
	requested: Boolean!
}
input PostTreasuryFinancialAccountsDepositInsuranceFeaturesInput {
	requested: Boolean!
}
input PostTreasuryFinancialAccountsFeaturesInput {
	outboundTransfers: PostTreasuryFinancialAccountsOutboundTransfersFeaturesInput!
	outboundPayments: PostTreasuryFinancialAccountsOutboundPaymentsFeaturesInput!
	intraStripeFlows: PostTreasuryFinancialAccountsIntraStripeFlowsFeaturesInput!
	inboundTransfers: PostTreasuryFinancialAccountsInboundTransfersFeaturesInput!
	financialAddresses: PostTreasuryFinancialAccountsFinancialAddressesFeaturesInput!
	depositInsurance: PostTreasuryFinancialAccountsDepositInsuranceFeaturesInput!
	cardIssuing: PostTreasuryFinancialAccountsCardIssuingFeaturesInput!
}
input PostTreasuryFinancialAccountsFinancialAccountAbaFinancialAddressesFeaturesInput {
	requested: Boolean!
}
input PostTreasuryFinancialAccountsFinancialAccountAchInboundTransfersFeaturesInput {
	requested: Boolean!
}
input PostTreasuryFinancialAccountsFinancialAccountAchOutboundPaymentsFeaturesInput {
	requested: Boolean!
}
input PostTreasuryFinancialAccountsFinancialAccountAchOutboundTransfersFeaturesInput {
	requested: Boolean!
}
input PostTreasuryFinancialAccountsFinancialAccountCardIssuingFeaturesInput {
	requested: Boolean!
}
input PostTreasuryFinancialAccountsFinancialAccountDepositInsuranceFeaturesInput {
	requested: Boolean!
}
input PostTreasuryFinancialAccountsFinancialAccountFeaturesInput {
	outboundTransfers: PostTreasuryFinancialAccountsFinancialAccountOutboundTransfersFeaturesInput!
	outboundPayments: PostTreasuryFinancialAccountsFinancialAccountOutboundPaymentsFeaturesInput!
	intraStripeFlows: PostTreasuryFinancialAccountsFinancialAccountIntraStripeFlowsFeaturesInput!
	inboundTransfers: PostTreasuryFinancialAccountsFinancialAccountInboundTransfersFeaturesInput!
	financialAddresses: PostTreasuryFinancialAccountsFinancialAccountFinancialAddressesFeaturesInput!
	depositInsurance: PostTreasuryFinancialAccountsFinancialAccountDepositInsuranceFeaturesInput!
	cardIssuing: PostTreasuryFinancialAccountsFinancialAccountCardIssuingFeaturesInput!
}
input PostTreasuryFinancialAccountsFinancialAccountFinancialAddressesFeaturesInput {
	aba: PostTreasuryFinancialAccountsFinancialAccountAbaFinancialAddressesFeaturesInput!
}
enum PostTreasuryFinancialAccountsFinancialAccountInboundFlowsPlatformRestrictions {
	RESTRICTED
	UNRESTRICTED
}
input PostTreasuryFinancialAccountsFinancialAccountInboundTransfersFeaturesInput {
	ach: PostTreasuryFinancialAccountsFinancialAccountAchInboundTransfersFeaturesInput!
}
input PostTreasuryFinancialAccountsFinancialAccountInput {
	platformRestrictions: PostTreasuryFinancialAccountsFinancialAccountPlatformRestrictionsInput!
	metadata: JSON!
	features: PostTreasuryFinancialAccountsFinancialAccountFeaturesInput!
	expand: [String!]!
}
input PostTreasuryFinancialAccountsFinancialAccountIntraStripeFlowsFeaturesInput {
	requested: Boolean!
}
enum PostTreasuryFinancialAccountsFinancialAccountOutboundFlowsPlatformRestrictions {
	RESTRICTED
	UNRESTRICTED
}
input PostTreasuryFinancialAccountsFinancialAccountOutboundPaymentsFeaturesInput {
	usDomesticWire: PostTreasuryFinancialAccountsFinancialAccountUsDomesticWireOutboundPaymentsFeaturesInput!
	ach: PostTreasuryFinancialAccountsFinancialAccountAchOutboundPaymentsFeaturesInput!
}
input PostTreasuryFinancialAccountsFinancialAccountOutboundTransfersFeaturesInput {
	usDomesticWire: PostTreasuryFinancialAccountsFinancialAccountUsDomesticWireOutboundTransfersFeaturesInput!
	ach: PostTreasuryFinancialAccountsFinancialAccountAchOutboundTransfersFeaturesInput!
}
input PostTreasuryFinancialAccountsFinancialAccountPlatformRestrictionsInput {
	outboundFlows: PostTreasuryFinancialAccountsFinancialAccountOutboundFlowsPlatformRestrictions!
	inboundFlows: PostTreasuryFinancialAccountsFinancialAccountInboundFlowsPlatformRestrictions!
}
input PostTreasuryFinancialAccountsFinancialAccountUsDomesticWireOutboundPaymentsFeaturesInput {
	requested: Boolean!
}
input PostTreasuryFinancialAccountsFinancialAccountUsDomesticWireOutboundTransfersFeaturesInput {
	requested: Boolean!
}
input PostTreasuryFinancialAccountsFinancialAddressesFeaturesInput {
	aba: PostTreasuryFinancialAccountsAbaFinancialAddressesFeaturesInput!
}
enum PostTreasuryFinancialAccountsInboundFlowsPlatformRestrictions {
	RESTRICTED
	UNRESTRICTED
}
input PostTreasuryFinancialAccountsInboundTransfersFeaturesInput {
	ach: PostTreasuryFinancialAccountsAchInboundTransfersFeaturesInput!
}
input PostTreasuryFinancialAccountsInput {
	supportedCurrencies: [String!]!
	platformRestrictions: PostTreasuryFinancialAccountsPlatformRestrictionsInput!
	metadata: JSON!
	features: PostTreasuryFinancialAccountsFeaturesInput!
	expand: [String!]!
}
input PostTreasuryFinancialAccountsIntraStripeFlowsFeaturesInput {
	requested: Boolean!
}
enum PostTreasuryFinancialAccountsOutboundFlowsPlatformRestrictions {
	RESTRICTED
	UNRESTRICTED
}
input PostTreasuryFinancialAccountsOutboundPaymentsFeaturesInput {
	usDomesticWire: PostTreasuryFinancialAccountsUsDomesticWireOutboundPaymentsFeaturesInput!
	ach: PostTreasuryFinancialAccountsAchOutboundPaymentsFeaturesInput!
}
input PostTreasuryFinancialAccountsOutboundTransfersFeaturesInput {
	usDomesticWire: PostTreasuryFinancialAccountsUsDomesticWireOutboundTransfersFeaturesInput!
	ach: PostTreasuryFinancialAccountsAchOutboundTransfersFeaturesInput!
}
input PostTreasuryFinancialAccountsPlatformRestrictionsInput {
	outboundFlows: PostTreasuryFinancialAccountsOutboundFlowsPlatformRestrictions!
	inboundFlows: PostTreasuryFinancialAccountsInboundFlowsPlatformRestrictions!
}
input PostTreasuryFinancialAccountsUsDomesticWireOutboundPaymentsFeaturesInput {
	requested: Boolean!
}
input PostTreasuryFinancialAccountsUsDomesticWireOutboundTransfersFeaturesInput {
	requested: Boolean!
}
input PostTreasuryInboundTransfersInboundTransferCancelInput {
	expand: [String!]!
}
input PostTreasuryInboundTransfersInput {
	statementDescriptor: String!
	originPaymentMethod: String!
	metadata: JSON!
	financialAccount: String!
	expand: [String!]!
	description: String!
	currency: String!
	amount: Int!
}
enum PostTreasuryOutboundPaymentsAccountHolderTypeUsBankAccountDestinationPaymentMethodData {
	COMPANY
	INDIVIDUAL
}
enum PostTreasuryOutboundPaymentsAccountTypeUsBankAccountDestinationPaymentMethodData {
	CHECKING
	SAVINGS
}
enum PostTreasuryOutboundPaymentsAddressBillingDetailsDestinationPaymentMethodData {
	
}
input PostTreasuryOutboundPaymentsAddressBillingDetailsDestinationPaymentMethodDataInput {
	state: String!
	postalCode: String!
	line2: String!
	line1: String!
	country: String!
	city: String!
}
input PostTreasuryOutboundPaymentsAddressBillingDetailsDestinationPaymentMethodDataUnionInput {
	postTreasuryOutboundPaymentsAddressBillingDetailsDestinationPaymentMethodData: PostTreasuryOutboundPaymentsAddressBillingDetailsDestinationPaymentMethodData
	postTreasuryOutboundPaymentsAddressBillingDetailsDestinationPaymentMethodDataInput: PostTreasuryOutboundPaymentsAddressBillingDetailsDestinationPaymentMethodDataInput
}
input PostTreasuryOutboundPaymentsBillingDetailsDestinationPaymentMethodDataInput {
	phone: String!
	name: String!
	email: UnionInput!
	address: PostTreasuryOutboundPaymentsAddressBillingDetailsDestinationPaymentMethodDataUnionInput!
}
input PostTreasuryOutboundPaymentsDestinationPaymentMethodDataInput {
	usBankAccount: PostTreasuryOutboundPaymentsUsBankAccountDestinationPaymentMethodDataInput!
	type: PostTreasuryOutboundPaymentsTypeDestinationPaymentMethodData!
	metadata: JSON!
	financialAccount: String!
	billingDetails: PostTreasuryOutboundPaymentsBillingDetailsDestinationPaymentMethodDataInput!
}
input PostTreasuryOutboundPaymentsDestinationPaymentMethodOptionsInput {
	usBankAccount: PostTreasuryOutboundPaymentsUsBankAccountDestinationPaymentMethodOptionsUnionInput!
}
input PostTreasuryOutboundPaymentsEndUserDetailsInput {
	present: Boolean!
	ipAddress: String!
}
input PostTreasuryOutboundPaymentsIdCancelInput {
	expand: [String!]!
}
input PostTreasuryOutboundPaymentsInput {
	statementDescriptor: String!
	metadata: JSON!
	financialAccount: String!
	expand: [String!]!
	endUserDetails: PostTreasuryOutboundPaymentsEndUserDetailsInput!
	destinationPaymentMethodOptions: PostTreasuryOutboundPaymentsDestinationPaymentMethodOptionsInput!
	destinationPaymentMethodData: PostTreasuryOutboundPaymentsDestinationPaymentMethodDataInput!
	destinationPaymentMethod: String!
	description: String!
	customer: String!
	currency: String!
	amount: Int!
}
enum PostTreasuryOutboundPaymentsNetworkUsBankAccountDestinationPaymentMethodOptions {
	ACH
	US_DOMESTIC_WIRE
}
enum PostTreasuryOutboundPaymentsTypeDestinationPaymentMethodData {
	FINANCIAL_ACCOUNT
	US_BANK_ACCOUNT
}
input PostTreasuryOutboundPaymentsUsBankAccountDestinationPaymentMethodDataInput {
	routingNumber: String!
	financialConnectionsAccount: String!
	accountType: PostTreasuryOutboundPaymentsAccountTypeUsBankAccountDestinationPaymentMethodData!
	accountNumber: String!
	accountHolderType: PostTreasuryOutboundPaymentsAccountHolderTypeUsBankAccountDestinationPaymentMethodData!
}
enum PostTreasuryOutboundPaymentsUsBankAccountDestinationPaymentMethodOptions {
	
}
input PostTreasuryOutboundPaymentsUsBankAccountDestinationPaymentMethodOptionsInput {
	network: PostTreasuryOutboundPaymentsNetworkUsBankAccountDestinationPaymentMethodOptions!
}
input PostTreasuryOutboundPaymentsUsBankAccountDestinationPaymentMethodOptionsUnionInput {
	postTreasuryOutboundPaymentsUsBankAccountDestinationPaymentMethodOptions: PostTreasuryOutboundPaymentsUsBankAccountDestinationPaymentMethodOptions
	postTreasuryOutboundPaymentsUsBankAccountDestinationPaymentMethodOptionsInput: PostTreasuryOutboundPaymentsUsBankAccountDestinationPaymentMethodOptionsInput
}
input PostTreasuryOutboundTransfersDestinationPaymentMethodOptionsInput {
	usBankAccount: PostTreasuryOutboundTransfersUsBankAccountDestinationPaymentMethodOptionsUnionInput!
}
input PostTreasuryOutboundTransfersInput {
	statementDescriptor: String!
	metadata: JSON!
	financialAccount: String!
	expand: [String!]!
	destinationPaymentMethodOptions: PostTreasuryOutboundTransfersDestinationPaymentMethodOptionsInput!
	destinationPaymentMethod: String!
	description: String!
	currency: String!
	amount: Int!
}
enum PostTreasuryOutboundTransfersNetworkUsBankAccountDestinationPaymentMethodOptions {
	ACH
	US_DOMESTIC_WIRE
}
input PostTreasuryOutboundTransfersOutboundTransferCancelInput {
	expand: [String!]!
}
enum PostTreasuryOutboundTransfersUsBankAccountDestinationPaymentMethodOptions {
	
}
input PostTreasuryOutboundTransfersUsBankAccountDestinationPaymentMethodOptionsInput {
	network: PostTreasuryOutboundTransfersNetworkUsBankAccountDestinationPaymentMethodOptions!
}
input PostTreasuryOutboundTransfersUsBankAccountDestinationPaymentMethodOptionsUnionInput {
	postTreasuryOutboundTransfersUsBankAccountDestinationPaymentMethodOptions: PostTreasuryOutboundTransfersUsBankAccountDestinationPaymentMethodOptions
	postTreasuryOutboundTransfersUsBankAccountDestinationPaymentMethodOptionsInput: PostTreasuryOutboundTransfersUsBankAccountDestinationPaymentMethodOptionsInput
}
enum PostWebhookEndpointsApiVersion {
	2011_01_01
	2011_06_21
	2011_06_28
	2011_08_01
	2011_09_15
	2011_11_17
	2012_02_23
	2012_03_25
	2012_06_18
	2012_06_28
	2012_07_09
	2012_09_24
	2012_10_26
	2012_11_07
	2013_02_11
	2013_02_13
	2013_07_05
	2013_08_12
	2013_08_13
	2013_10_29
	2013_12_03
	2014_01_31
	2014_03_13
	2014_03_28
	2014_05_19
	2014_06_13
	2014_06_17
	2014_07_22
	2014_07_26
	2014_08_04
	2014_08_20
	2014_09_08
	2014_10_07
	2014_11_05
	2014_11_20
	2014_12_08
	2014_12_17
	2014_12_22
	2015_01_11
	2015_01_26
	2015_02_10
	2015_02_16
	2015_02_18
	2015_03_24
	2015_04_07
	2015_06_15
	2015_07_07
	2015_07_13
	2015_07_28
	2015_08_07
	2015_08_19
	2015_09_03
	2015_09_08
	2015_09_23
	2015_10_01
	2015_10_12
	2015_10_16
	2016_02_03
	2016_02_19
	2016_02_22
	2016_02_23
	2016_02_29
	2016_03_07
	2016_06_15
	2016_07_06
	2016_10_19
	2017_01_27
	2017_02_14
	2017_04_06
	2017_05_25
	2017_06_05
	2017_08_15
	2017_12_14
	2018_01_23
	2018_02_05
	2018_02_06
	2018_02_28
	2018_05_21
	2018_07_27
	2018_08_23
	2018_09_06
	2018_09_24
	2018_10_31
	2018_11_08
	2019_02_11
	2019_02_19
	2019_03_14
	2019_05_16
	2019_08_14
	2019_09_09
	2019_10_08
	2019_10_17
	2019_11_05
	2019_12_03
	2020_03_02
	2020_08_27
	2022_08_01
	2022_11_15
}
enum PostWebhookEndpointsEnabledEvents {
	
	ACCOUNT_APPLICATION_AUTHORIZED
	ACCOUNT_APPLICATION_DEAUTHORIZED
	ACCOUNT_EXTERNAL_ACCOUNT_CREATED
	ACCOUNT_EXTERNAL_ACCOUNT_DELETED
	ACCOUNT_EXTERNAL_ACCOUNT_UPDATED
	ACCOUNT_UPDATED
	APPLICATION_FEE_CREATED
	APPLICATION_FEE_REFUND_UPDATED
	APPLICATION_FEE_REFUNDED
	BALANCE_AVAILABLE
	BILLING_PORTAL_CONFIGURATION_CREATED
	BILLING_PORTAL_CONFIGURATION_UPDATED
	BILLING_PORTAL_SESSION_CREATED
	CAPABILITY_UPDATED
	CASH_BALANCE_FUNDS_AVAILABLE
	CHARGE_CAPTURED
	CHARGE_DISPUTE_CLOSED
	CHARGE_DISPUTE_CREATED
	CHARGE_DISPUTE_FUNDS_REINSTATED
	CHARGE_DISPUTE_FUNDS_WITHDRAWN
	CHARGE_DISPUTE_UPDATED
	CHARGE_EXPIRED
	CHARGE_FAILED
	CHARGE_PENDING
	CHARGE_REFUND_UPDATED
	CHARGE_REFUNDED
	CHARGE_SUCCEEDED
	CHARGE_UPDATED
	CHECKOUT_SESSION_ASYNC_PAYMENT_FAILED
	CHECKOUT_SESSION_ASYNC_PAYMENT_SUCCEEDED
	CHECKOUT_SESSION_COMPLETED
	CHECKOUT_SESSION_EXPIRED
	COUPON_CREATED
	COUPON_DELETED
	COUPON_UPDATED
	CREDIT_NOTE_CREATED
	CREDIT_NOTE_UPDATED
	CREDIT_NOTE_VOIDED
	CUSTOMER_CREATED
	CUSTOMER_DELETED
	CUSTOMER_DISCOUNT_CREATED
	CUSTOMER_DISCOUNT_DELETED
	CUSTOMER_DISCOUNT_UPDATED
	CUSTOMER_SOURCE_CREATED
	CUSTOMER_SOURCE_DELETED
	CUSTOMER_SOURCE_EXPIRING
	CUSTOMER_SOURCE_UPDATED
	CUSTOMER_SUBSCRIPTION_CREATED
	CUSTOMER_SUBSCRIPTION_DELETED
	CUSTOMER_SUBSCRIPTION_PAUSED
	CUSTOMER_SUBSCRIPTION_PENDING_UPDATE_APPLIED
	CUSTOMER_SUBSCRIPTION_PENDING_UPDATE_EXPIRED
	CUSTOMER_SUBSCRIPTION_RESUMED
	CUSTOMER_SUBSCRIPTION_TRIAL_WILL_END
	CUSTOMER_SUBSCRIPTION_UPDATED
	CUSTOMER_TAX_ID_CREATED
	CUSTOMER_TAX_ID_DELETED
	CUSTOMER_TAX_ID_UPDATED
	CUSTOMER_UPDATED
	CUSTOMER_CASH_BALANCE_TRANSACTION_CREATED
	FILE_CREATED
	FINANCIAL_CONNECTIONS_ACCOUNT_CREATED
	FINANCIAL_CONNECTIONS_ACCOUNT_DEACTIVATED
	FINANCIAL_CONNECTIONS_ACCOUNT_DISCONNECTED
	FINANCIAL_CONNECTIONS_ACCOUNT_REACTIVATED
	FINANCIAL_CONNECTIONS_ACCOUNT_REFRESHED_BALANCE
	IDENTITY_VERIFICATION_SESSION_CANCELED
	IDENTITY_VERIFICATION_SESSION_CREATED
	IDENTITY_VERIFICATION_SESSION_PROCESSING
	IDENTITY_VERIFICATION_SESSION_REDACTED
	IDENTITY_VERIFICATION_SESSION_REQUIRES_INPUT
	IDENTITY_VERIFICATION_SESSION_VERIFIED
	INVOICE_CREATED
	INVOICE_DELETED
	INVOICE_FINALIZATION_FAILED
	INVOICE_FINALIZED
	INVOICE_MARKED_UNCOLLECTIBLE
	INVOICE_PAID
	INVOICE_PAYMENT_ACTION_REQUIRED
	INVOICE_PAYMENT_FAILED
	INVOICE_PAYMENT_SUCCEEDED
	INVOICE_SENT
	INVOICE_UPCOMING
	INVOICE_UPDATED
	INVOICE_VOIDED
	INVOICEITEM_CREATED
	INVOICEITEM_DELETED
	INVOICEITEM_UPDATED
	ISSUING_AUTHORIZATION_CREATED
	ISSUING_AUTHORIZATION_REQUEST
	ISSUING_AUTHORIZATION_UPDATED
	ISSUING_CARD_CREATED
	ISSUING_CARD_UPDATED
	ISSUING_CARDHOLDER_CREATED
	ISSUING_CARDHOLDER_UPDATED
	ISSUING_DISPUTE_CLOSED
	ISSUING_DISPUTE_CREATED
	ISSUING_DISPUTE_FUNDS_REINSTATED
	ISSUING_DISPUTE_SUBMITTED
	ISSUING_DISPUTE_UPDATED
	ISSUING_TRANSACTION_CREATED
	ISSUING_TRANSACTION_UPDATED
	MANDATE_UPDATED
	ORDER_CREATED
	PAYMENT_INTENT_AMOUNT_CAPTURABLE_UPDATED
	PAYMENT_INTENT_CANCELED
	PAYMENT_INTENT_CREATED
	PAYMENT_INTENT_PARTIALLY_FUNDED
	PAYMENT_INTENT_PAYMENT_FAILED
	PAYMENT_INTENT_PROCESSING
	PAYMENT_INTENT_REQUIRES_ACTION
	PAYMENT_INTENT_SUCCEEDED
	PAYMENT_LINK_CREATED
	PAYMENT_LINK_UPDATED
	PAYMENT_METHOD_ATTACHED
	PAYMENT_METHOD_AUTOMATICALLY_UPDATED
	PAYMENT_METHOD_DETACHED
	PAYMENT_METHOD_UPDATED
	PAYOUT_CANCELED
	PAYOUT_CREATED
	PAYOUT_FAILED
	PAYOUT_PAID
	PAYOUT_UPDATED
	PERSON_CREATED
	PERSON_DELETED
	PERSON_UPDATED
	PLAN_CREATED
	PLAN_DELETED
	PLAN_UPDATED
	PRICE_CREATED
	PRICE_DELETED
	PRICE_UPDATED
	PRODUCT_CREATED
	PRODUCT_DELETED
	PRODUCT_UPDATED
	PROMOTION_CODE_CREATED
	PROMOTION_CODE_UPDATED
	QUOTE_ACCEPTED
	QUOTE_CANCELED
	QUOTE_CREATED
	QUOTE_FINALIZED
	RADAR_EARLY_FRAUD_WARNING_CREATED
	RADAR_EARLY_FRAUD_WARNING_UPDATED
	RECIPIENT_CREATED
	RECIPIENT_DELETED
	RECIPIENT_UPDATED
	REFUND_CREATED
	REFUND_UPDATED
	REPORTING_REPORT_RUN_FAILED
	REPORTING_REPORT_RUN_SUCCEEDED
	REPORTING_REPORT_TYPE_UPDATED
	REVIEW_CLOSED
	REVIEW_OPENED
	SETUP_INTENT_CANCELED
	SETUP_INTENT_CREATED
	SETUP_INTENT_REQUIRES_ACTION
	SETUP_INTENT_SETUP_FAILED
	SETUP_INTENT_SUCCEEDED
	SIGMA_SCHEDULED_QUERY_RUN_CREATED
	SKU_CREATED
	SKU_DELETED
	SKU_UPDATED
	SOURCE_CANCELED
	SOURCE_CHARGEABLE
	SOURCE_FAILED
	SOURCE_MANDATE_NOTIFICATION
	SOURCE_REFUND_ATTRIBUTES_REQUIRED
	SOURCE_TRANSACTION_CREATED
	SOURCE_TRANSACTION_UPDATED
	SUBSCRIPTION_SCHEDULE_ABORTED
	SUBSCRIPTION_SCHEDULE_CANCELED
	SUBSCRIPTION_SCHEDULE_COMPLETED
	SUBSCRIPTION_SCHEDULE_CREATED
	SUBSCRIPTION_SCHEDULE_EXPIRING
	SUBSCRIPTION_SCHEDULE_RELEASED
	SUBSCRIPTION_SCHEDULE_UPDATED
	TAX_RATE_CREATED
	TAX_RATE_UPDATED
	TERMINAL_READER_ACTION_FAILED
	TERMINAL_READER_ACTION_SUCCEEDED
	TEST_HELPERS_TEST_CLOCK_ADVANCING
	TEST_HELPERS_TEST_CLOCK_CREATED
	TEST_HELPERS_TEST_CLOCK_DELETED
	TEST_HELPERS_TEST_CLOCK_INTERNAL_FAILURE
	TEST_HELPERS_TEST_CLOCK_READY
	TOPUP_CANCELED
	TOPUP_CREATED
	TOPUP_FAILED
	TOPUP_REVERSED
	TOPUP_SUCCEEDED
	TRANSFER_CREATED
	TRANSFER_REVERSED
	TRANSFER_UPDATED
	TREASURY_CREDIT_REVERSAL_CREATED
	TREASURY_CREDIT_REVERSAL_POSTED
	TREASURY_DEBIT_REVERSAL_COMPLETED
	TREASURY_DEBIT_REVERSAL_CREATED
	TREASURY_DEBIT_REVERSAL_INITIAL_CREDIT_GRANTED
	TREASURY_FINANCIAL_ACCOUNT_CLOSED
	TREASURY_FINANCIAL_ACCOUNT_CREATED
	TREASURY_FINANCIAL_ACCOUNT_FEATURES_STATUS_UPDATED
	TREASURY_INBOUND_TRANSFER_CANCELED
	TREASURY_INBOUND_TRANSFER_CREATED
	TREASURY_INBOUND_TRANSFER_FAILED
	TREASURY_INBOUND_TRANSFER_SUCCEEDED
	TREASURY_OUTBOUND_PAYMENT_CANCELED
	TREASURY_OUTBOUND_PAYMENT_CREATED
	TREASURY_OUTBOUND_PAYMENT_EXPECTED_ARRIVAL_DATE_UPDATED
	TREASURY_OUTBOUND_PAYMENT_FAILED
	TREASURY_OUTBOUND_PAYMENT_POSTED
	TREASURY_OUTBOUND_PAYMENT_RETURNED
	TREASURY_OUTBOUND_TRANSFER_CANCELED
	TREASURY_OUTBOUND_TRANSFER_CREATED
	TREASURY_OUTBOUND_TRANSFER_EXPECTED_ARRIVAL_DATE_UPDATED
	TREASURY_OUTBOUND_TRANSFER_FAILED
	TREASURY_OUTBOUND_TRANSFER_POSTED
	TREASURY_OUTBOUND_TRANSFER_RETURNED
	TREASURY_RECEIVED_CREDIT_CREATED
	TREASURY_RECEIVED_CREDIT_FAILED
	TREASURY_RECEIVED_CREDIT_SUCCEEDED
	TREASURY_RECEIVED_DEBIT_CREATED
}
input PostWebhookEndpointsInput {
	url: String!
	metadata: UnionInput!
	expand: [String!]!
	enabledEvents: [PostWebhookEndpointsEnabledEvents!]!
	description: String!
	connect: Boolean!
	apiVersion: PostWebhookEndpointsApiVersion!
}
enum PostWebhookEndpointsWebhookEndpointEnabledEvents {
	
	ACCOUNT_APPLICATION_AUTHORIZED
	ACCOUNT_APPLICATION_DEAUTHORIZED
	ACCOUNT_EXTERNAL_ACCOUNT_CREATED
	ACCOUNT_EXTERNAL_ACCOUNT_DELETED
	ACCOUNT_EXTERNAL_ACCOUNT_UPDATED
	ACCOUNT_UPDATED
	APPLICATION_FEE_CREATED
	APPLICATION_FEE_REFUND_UPDATED
	APPLICATION_FEE_REFUNDED
	BALANCE_AVAILABLE
	BILLING_PORTAL_CONFIGURATION_CREATED
	BILLING_PORTAL_CONFIGURATION_UPDATED
	BILLING_PORTAL_SESSION_CREATED
	CAPABILITY_UPDATED
	CASH_BALANCE_FUNDS_AVAILABLE
	CHARGE_CAPTURED
	CHARGE_DISPUTE_CLOSED
	CHARGE_DISPUTE_CREATED
	CHARGE_DISPUTE_FUNDS_REINSTATED
	CHARGE_DISPUTE_FUNDS_WITHDRAWN
	CHARGE_DISPUTE_UPDATED
	CHARGE_EXPIRED
	CHARGE_FAILED
	CHARGE_PENDING
	CHARGE_REFUND_UPDATED
	CHARGE_REFUNDED
	CHARGE_SUCCEEDED
	CHARGE_UPDATED
	CHECKOUT_SESSION_ASYNC_PAYMENT_FAILED
	CHECKOUT_SESSION_ASYNC_PAYMENT_SUCCEEDED
	CHECKOUT_SESSION_COMPLETED
	CHECKOUT_SESSION_EXPIRED
	COUPON_CREATED
	COUPON_DELETED
	COUPON_UPDATED
	CREDIT_NOTE_CREATED
	CREDIT_NOTE_UPDATED
	CREDIT_NOTE_VOIDED
	CUSTOMER_CREATED
	CUSTOMER_DELETED
	CUSTOMER_DISCOUNT_CREATED
	CUSTOMER_DISCOUNT_DELETED
	CUSTOMER_DISCOUNT_UPDATED
	CUSTOMER_SOURCE_CREATED
	CUSTOMER_SOURCE_DELETED
	CUSTOMER_SOURCE_EXPIRING
	CUSTOMER_SOURCE_UPDATED
	CUSTOMER_SUBSCRIPTION_CREATED
	CUSTOMER_SUBSCRIPTION_DELETED
	CUSTOMER_SUBSCRIPTION_PAUSED
	CUSTOMER_SUBSCRIPTION_PENDING_UPDATE_APPLIED
	CUSTOMER_SUBSCRIPTION_PENDING_UPDATE_EXPIRED
	CUSTOMER_SUBSCRIPTION_RESUMED
	CUSTOMER_SUBSCRIPTION_TRIAL_WILL_END
	CUSTOMER_SUBSCRIPTION_UPDATED
	CUSTOMER_TAX_ID_CREATED
	CUSTOMER_TAX_ID_DELETED
	CUSTOMER_TAX_ID_UPDATED
	CUSTOMER_UPDATED
	CUSTOMER_CASH_BALANCE_TRANSACTION_CREATED
	FILE_CREATED
	FINANCIAL_CONNECTIONS_ACCOUNT_CREATED
	FINANCIAL_CONNECTIONS_ACCOUNT_DEACTIVATED
	FINANCIAL_CONNECTIONS_ACCOUNT_DISCONNECTED
	FINANCIAL_CONNECTIONS_ACCOUNT_REACTIVATED
	FINANCIAL_CONNECTIONS_ACCOUNT_REFRESHED_BALANCE
	IDENTITY_VERIFICATION_SESSION_CANCELED
	IDENTITY_VERIFICATION_SESSION_CREATED
	IDENTITY_VERIFICATION_SESSION_PROCESSING
	IDENTITY_VERIFICATION_SESSION_REDACTED
	IDENTITY_VERIFICATION_SESSION_REQUIRES_INPUT
	IDENTITY_VERIFICATION_SESSION_VERIFIED
	INVOICE_CREATED
	INVOICE_DELETED
	INVOICE_FINALIZATION_FAILED
	INVOICE_FINALIZED
	INVOICE_MARKED_UNCOLLECTIBLE
	INVOICE_PAID
	INVOICE_PAYMENT_ACTION_REQUIRED
	INVOICE_PAYMENT_FAILED
	INVOICE_PAYMENT_SUCCEEDED
	INVOICE_SENT
	INVOICE_UPCOMING
	INVOICE_UPDATED
	INVOICE_VOIDED
	INVOICEITEM_CREATED
	INVOICEITEM_DELETED
	INVOICEITEM_UPDATED
	ISSUING_AUTHORIZATION_CREATED
	ISSUING_AUTHORIZATION_REQUEST
	ISSUING_AUTHORIZATION_UPDATED
	ISSUING_CARD_CREATED
	ISSUING_CARD_UPDATED
	ISSUING_CARDHOLDER_CREATED
	ISSUING_CARDHOLDER_UPDATED
	ISSUING_DISPUTE_CLOSED
	ISSUING_DISPUTE_CREATED
	ISSUING_DISPUTE_FUNDS_REINSTATED
	ISSUING_DISPUTE_SUBMITTED
	ISSUING_DISPUTE_UPDATED
	ISSUING_TRANSACTION_CREATED
	ISSUING_TRANSACTION_UPDATED
	MANDATE_UPDATED
	ORDER_CREATED
	PAYMENT_INTENT_AMOUNT_CAPTURABLE_UPDATED
	PAYMENT_INTENT_CANCELED
	PAYMENT_INTENT_CREATED
	PAYMENT_INTENT_PARTIALLY_FUNDED
	PAYMENT_INTENT_PAYMENT_FAILED
	PAYMENT_INTENT_PROCESSING
	PAYMENT_INTENT_REQUIRES_ACTION
	PAYMENT_INTENT_SUCCEEDED
	PAYMENT_LINK_CREATED
	PAYMENT_LINK_UPDATED
	PAYMENT_METHOD_ATTACHED
	PAYMENT_METHOD_AUTOMATICALLY_UPDATED
	PAYMENT_METHOD_DETACHED
	PAYMENT_METHOD_UPDATED
	PAYOUT_CANCELED
	PAYOUT_CREATED
	PAYOUT_FAILED
	PAYOUT_PAID
	PAYOUT_UPDATED
	PERSON_CREATED
	PERSON_DELETED
	PERSON_UPDATED
	PLAN_CREATED
	PLAN_DELETED
	PLAN_UPDATED
	PRICE_CREATED
	PRICE_DELETED
	PRICE_UPDATED
	PRODUCT_CREATED
	PRODUCT_DELETED
	PRODUCT_UPDATED
	PROMOTION_CODE_CREATED
	PROMOTION_CODE_UPDATED
	QUOTE_ACCEPTED
	QUOTE_CANCELED
	QUOTE_CREATED
	QUOTE_FINALIZED
	RADAR_EARLY_FRAUD_WARNING_CREATED
	RADAR_EARLY_FRAUD_WARNING_UPDATED
	RECIPIENT_CREATED
	RECIPIENT_DELETED
	RECIPIENT_UPDATED
	REFUND_CREATED
	REFUND_UPDATED
	REPORTING_REPORT_RUN_FAILED
	REPORTING_REPORT_RUN_SUCCEEDED
	REPORTING_REPORT_TYPE_UPDATED
	REVIEW_CLOSED
	REVIEW_OPENED
	SETUP_INTENT_CANCELED
	SETUP_INTENT_CREATED
	SETUP_INTENT_REQUIRES_ACTION
	SETUP_INTENT_SETUP_FAILED
	SETUP_INTENT_SUCCEEDED
	SIGMA_SCHEDULED_QUERY_RUN_CREATED
	SKU_CREATED
	SKU_DELETED
	SKU_UPDATED
	SOURCE_CANCELED
	SOURCE_CHARGEABLE
	SOURCE_FAILED
	SOURCE_MANDATE_NOTIFICATION
	SOURCE_REFUND_ATTRIBUTES_REQUIRED
	SOURCE_TRANSACTION_CREATED
	SOURCE_TRANSACTION_UPDATED
	SUBSCRIPTION_SCHEDULE_ABORTED
	SUBSCRIPTION_SCHEDULE_CANCELED
	SUBSCRIPTION_SCHEDULE_COMPLETED
	SUBSCRIPTION_SCHEDULE_CREATED
	SUBSCRIPTION_SCHEDULE_EXPIRING
	SUBSCRIPTION_SCHEDULE_RELEASED
	SUBSCRIPTION_SCHEDULE_UPDATED
	TAX_RATE_CREATED
	TAX_RATE_UPDATED
	TERMINAL_READER_ACTION_FAILED
	TERMINAL_READER_ACTION_SUCCEEDED
	TEST_HELPERS_TEST_CLOCK_ADVANCING
	TEST_HELPERS_TEST_CLOCK_CREATED
	TEST_HELPERS_TEST_CLOCK_DELETED
	TEST_HELPERS_TEST_CLOCK_INTERNAL_FAILURE
	TEST_HELPERS_TEST_CLOCK_READY
	TOPUP_CANCELED
	TOPUP_CREATED
	TOPUP_FAILED
	TOPUP_REVERSED
	TOPUP_SUCCEEDED
	TRANSFER_CREATED
	TRANSFER_REVERSED
	TRANSFER_UPDATED
	TREASURY_CREDIT_REVERSAL_CREATED
	TREASURY_CREDIT_REVERSAL_POSTED
	TREASURY_DEBIT_REVERSAL_COMPLETED
	TREASURY_DEBIT_REVERSAL_CREATED
	TREASURY_DEBIT_REVERSAL_INITIAL_CREDIT_GRANTED
	TREASURY_FINANCIAL_ACCOUNT_CLOSED
	TREASURY_FINANCIAL_ACCOUNT_CREATED
	TREASURY_FINANCIAL_ACCOUNT_FEATURES_STATUS_UPDATED
	TREASURY_INBOUND_TRANSFER_CANCELED
	TREASURY_INBOUND_TRANSFER_CREATED
	TREASURY_INBOUND_TRANSFER_FAILED
	TREASURY_INBOUND_TRANSFER_SUCCEEDED
	TREASURY_OUTBOUND_PAYMENT_CANCELED
	TREASURY_OUTBOUND_PAYMENT_CREATED
	TREASURY_OUTBOUND_PAYMENT_EXPECTED_ARRIVAL_DATE_UPDATED
	TREASURY_OUTBOUND_PAYMENT_FAILED
	TREASURY_OUTBOUND_PAYMENT_POSTED
	TREASURY_OUTBOUND_PAYMENT_RETURNED
	TREASURY_OUTBOUND_TRANSFER_CANCELED
	TREASURY_OUTBOUND_TRANSFER_CREATED
	TREASURY_OUTBOUND_TRANSFER_EXPECTED_ARRIVAL_DATE_UPDATED
	TREASURY_OUTBOUND_TRANSFER_FAILED
	TREASURY_OUTBOUND_TRANSFER_POSTED
	TREASURY_OUTBOUND_TRANSFER_RETURNED
	TREASURY_RECEIVED_CREDIT_CREATED
	TREASURY_RECEIVED_CREDIT_FAILED
	TREASURY_RECEIVED_CREDIT_SUCCEEDED
	TREASURY_RECEIVED_DEBIT_CREATED
}
input PostWebhookEndpointsWebhookEndpointInput {
	url: String!
	metadata: UnionInput!
	expand: [String!]!
	enabledEvents: [PostWebhookEndpointsWebhookEndpointEnabledEvents!]!
	disabled: Boolean!
	description: String!
}
type Price {
	unitAmountDecimal: String
	unitAmount: Int
	type: PriceType!
	transformQuantity: TransformQuantityUnion
	tiersMode: PriceTiersMode
	tiers: [PriceTier!]!
	taxBehavior: PriceTaxBehavior
	recurring: RecurringUnion
	product: DeletedProductOrProductUnion!
	object: PriceObject!
	nickname: String
	metadata: JSON!
	lookupKey: String
	livemode: Boolean!
	id: String!
	customUnitAmount: CustomUnitAmountUnion
	currencyOptions: JSON!
	currency: String!
	created: Int!
	billingScheme: PriceBillingScheme!
	active: Boolean!
}
enum PriceBillingScheme {
	PER_UNIT
	TIERED
}
enum PriceObject {
	PRICE
}
enum PriceTaxBehavior {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
type PriceTier {
	upTo: Int
	unitAmountDecimal: String
	unitAmount: Int
	flatAmountDecimal: String
	flatAmount: Int
}
enum PriceTiersMode {
	GRADUATED
	VOLUME
}
enum PriceType {
	ONE_TIME
	RECURRING
}
union PriceUnion = Price
type Product {
	url: String
	updated: Int!
	unitLabel: String
	taxCode: TaxCodeUnion
	statementDescriptor: String
	shippable: Boolean
	packageDimensions: PackageDimensionsUnion
	object: ProductObject!
	name: String!
	metadata: JSON!
	livemode: Boolean!
	images: [String!]!
	id: String!
	description: String
	defaultPrice: PriceUnion
	created: Int!
	active: Boolean!
}
enum ProductObject {
	PRODUCT
}
type PromotionCode {
	timesRedeemed: Int!
	restrictions: PromotionCodesResourceRestrictions!
	object: PromotionCodeObject!
	metadata: JSON!
	maxRedemptions: Int
	livemode: Boolean!
	id: String!
	expiresAt: Int
	customer: DeletedCustomerOrCustomerUnion
	created: Int!
	coupon: Coupon!
	code: String!
	active: Boolean!
}
enum PromotionCodeObject {
	PROMOTION_CODE
}
union PromotionCodeUnion = PromotionCode
type PromotionCodesResourceRestrictions {
	minimumAmountCurrency: String
	minimumAmount: Int
	firstTimeTransaction: Boolean!
	currencyOptions: JSON!
}
type Query {
	getAccount(expand: [String!]!, input: JSON!): Account!
	getAccounts(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetAccountsUnionInput!, input: JSON!): GetAccounts!
	getAccountsAccount(account: String!, expand: [String!]!, input: JSON!): Account!
	getAccountsAccountBankAccountsId(id: String!, account: String!, expand: [String!]!, input: JSON!): ExternalAccount!
	getAccountsAccountCapabilities(account: String!, expand: [String!]!, input: JSON!): GetAccountsAccountCapabilities!
	getAccountsAccountCapabilitiesCapability(capability: String!, account: String!, expand: [String!]!, input: JSON!): Capability!
	getAccountsAccountExternalAccounts(account: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetAccountsAccountExternalAccounts!
	getAccountsAccountExternalAccountsId(id: String!, account: String!, expand: [String!]!, input: JSON!): ExternalAccount!
	getAccountsAccountPeople(account: String!, starting_after: String!, relationship: GetAccountsAccountPeopleInput!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetAccountsAccountPeople!
	getAccountsAccountPeoplePerson(person: String!, account: String!, expand: [String!]!, input: JSON!): Person!
	getAccountsAccountPersons(account: String!, starting_after: String!, relationship: GetAccountsAccountPersonsInput!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetAccountsAccountPersons!
	getAccountsAccountPersonsPerson(person: String!, account: String!, expand: [String!]!, input: JSON!): Person!
	getApplePayDomains(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, domain_name: String!, input: JSON!): GetApplePayDomains!
	getApplePayDomainsDomain(domain: String!, expand: [String!]!, input: JSON!): ApplePayDomain!
	getApplicationFees(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetApplicationFeesUnionInput!, charge: String!, input: JSON!): GetApplicationFees!
	getApplicationFeesFeeRefundsId(id: String!, fee: String!, expand: [String!]!, input: JSON!): FeeRefund!
	getApplicationFeesId(id: String!, expand: [String!]!, input: JSON!): ApplicationFee!
	getApplicationFeesIdRefunds(id: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetApplicationFeesIdRefunds!
	getAppsSecrets(starting_after: String!, scope: GetAppsSecretsInput!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetAppsSecrets!
	getAppsSecretsFind(scope: GetAppsSecretsFindInput!, name: String!, expand: [String!]!, input: JSON!): AppsSecret!
	getBalance(expand: [String!]!, input: JSON!): Balance!
	getBalanceHistory(type: String!, starting_after: String!, source: String!, payout: String!, limit: Int!, expand: [String!]!, ending_before: String!, currency: String!, created: GetBalanceHistoryUnionInput!, input: JSON!): GetBalanceHistory!
	getBalanceHistoryId(id: String!, expand: [String!]!, input: JSON!): BalanceTransaction!
	getBalanceTransactions(type: String!, starting_after: String!, source: String!, payout: String!, limit: Int!, expand: [String!]!, ending_before: String!, currency: String!, created: GetBalanceTransactionsUnionInput!, input: JSON!): GetBalanceTransactions!
	getBalanceTransactionsId(id: String!, expand: [String!]!, input: JSON!): BalanceTransaction!
	getBillingPortalConfigurations(starting_after: String!, limit: Int!, is_default: Boolean!, expand: [String!]!, ending_before: String!, active: Boolean!, input: JSON!): GetBillingPortalConfigurations!
	getBillingPortalConfigurationsConfiguration(configuration: String!, expand: [String!]!, input: JSON!): BillingPortalConfiguration!
	getCharges(transfer_group: String!, starting_after: String!, payment_intent: String!, limit: Int!, expand: [String!]!, ending_before: String!, customer: String!, created: GetChargesUnionInput!, input: JSON!): GetCharges!
	getChargesSearch(query: String!, page: String!, limit: Int!, expand: [String!]!, input: JSON!): GetChargesSearch!
	getChargesCharge(charge: String!, expand: [String!]!, input: JSON!): Charge!
	getChargesChargeDispute(charge: String!, expand: [String!]!, input: JSON!): Dispute!
	getChargesChargeRefunds(charge: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetChargesChargeRefunds!
	getChargesChargeRefundsRefund(refund: String!, charge: String!, expand: [String!]!, input: JSON!): Refund!
	getCheckoutSessions(subscription: String!, starting_after: String!, payment_link: String!, payment_intent: String!, limit: Int!, expand: [String!]!, ending_before: String!, customer_details: GetCheckoutSessionsInput!, customer: String!, input: JSON!): GetCheckoutSessions!
	getCheckoutSessionsSession(session: String!, expand: [String!]!, input: JSON!): CheckoutSession!
	getCheckoutSessionsSessionLineItems(session: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetCheckoutSessionsSessionLineItems!
	getCountrySpecs(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetCountrySpecs!
	getCountrySpecsCountry(country: String!, expand: [String!]!, input: JSON!): CountrySpec!
	getCoupons(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetCouponsUnionInput!, input: JSON!): GetCoupons!
	getCouponsCoupon(coupon: String!, expand: [String!]!, input: JSON!): Coupon!
	getCreditNotes(starting_after: String!, limit: Int!, invoice: String!, expand: [String!]!, ending_before: String!, customer: String!, input: JSON!): GetCreditNotes!
	getCreditNotesPreview(shipping_cost: GetCreditNotesPreviewInput!, refund_amount: Int!, refund: String!, reason: GetCreditNotesPreview!, out_of_band_amount: Int!, metadata: JSON!, memo: String!, lines: [GetCreditNotesPreviewInput!]!, invoice: String!, expand: [String!]!, credit_amount: Int!, amount: Int!, input: JSON!): CreditNote!
	getCreditNotesPreviewLines(starting_after: String!, shipping_cost: GetCreditNotesPreviewLinesInput!, refund_amount: Int!, refund: String!, reason: GetCreditNotesPreviewLines!, out_of_band_amount: Int!, metadata: JSON!, memo: String!, lines: [GetCreditNotesPreviewLinesInput!]!, limit: Int!, invoice: String!, expand: [String!]!, ending_before: String!, credit_amount: Int!, amount: Int!, input: JSON!): GetCreditNotesPreviewLines!
	getCreditNotesCreditNoteLines(creditNote: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetCreditNotesCreditNoteLines!
	getCreditNotesId(id: String!, expand: [String!]!, input: JSON!): CreditNote!
	getCustomers(test_clock: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, email: String!, created: GetCustomersUnionInput!, input: JSON!): GetCustomers!
	getCustomersSearch(query: String!, page: String!, limit: Int!, expand: [String!]!, input: JSON!): GetCustomersSearch!
	getCustomersCustomer(customer: String!, expand: [String!]!, input: JSON!): DeletedCustomerOrCustomerUnion!
	getCustomersCustomerBalanceTransactions(customer: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetCustomersCustomerBalanceTransactions!
	getCustomersCustomerBalanceTransactionsTransaction(transaction: String!, customer: String!, expand: [String!]!, input: JSON!): CustomerBalanceTransaction!
	getCustomersCustomerBankAccounts(customer: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetCustomersCustomerBankAccounts!
	getCustomersCustomerBankAccountsId(id: String!, customer: String!, expand: [String!]!, input: JSON!): BankAccount!
	getCustomersCustomerCards(customer: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetCustomersCustomerCards!
	getCustomersCustomerCardsId(id: String!, customer: String!, expand: [String!]!, input: JSON!): Card!
	getCustomersCustomerCashBalance(customer: String!, expand: [String!]!, input: JSON!): CashBalance!
	getCustomersCustomerCashBalanceTransactions(customer: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetCustomersCustomerCashBalanceTransactions!
	getCustomersCustomerCashBalanceTransactionsTransaction(transaction: String!, customer: String!, expand: [String!]!, input: JSON!): CustomerCashBalanceTransaction!
	getCustomersCustomerDiscount(customer: String!, expand: [String!]!, input: JSON!): Discount!
	getCustomersCustomerPaymentMethods(customer: String!, type: GetCustomersCustomerPaymentMethods!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetCustomersCustomerPaymentMethods!
	getCustomersCustomerPaymentMethodsPaymentMethod(paymentMethod: String!, customer: String!, expand: [String!]!, input: JSON!): PaymentMethod!
	getCustomersCustomerSources(customer: String!, starting_after: String!, object: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetCustomersCustomerSources!
	getCustomersCustomerSourcesId(id: String!, customer: String!, expand: [String!]!, input: JSON!): PaymentSource!
	getCustomersCustomerSubscriptions(customer: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetCustomersCustomerSubscriptions!
	getCustomersCustomerSubscriptionsSubscriptionExposedId(subscriptionExposedId: String!, customer: String!, expand: [String!]!, input: JSON!): Subscription!
	getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount(subscriptionExposedId: String!, customer: String!, expand: [String!]!, input: JSON!): Discount!
	getCustomersCustomerTaxIds(customer: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetCustomersCustomerTaxIds!
	getCustomersCustomerTaxIdsId(id: String!, customer: String!, expand: [String!]!, input: JSON!): TaxId!
	getDisputes(starting_after: String!, payment_intent: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetDisputesUnionInput!, charge: String!, input: JSON!): GetDisputes!
	getDisputesDispute(dispute: String!, expand: [String!]!, input: JSON!): Dispute!
	getEvents(types: [String!]!, type: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, delivery_success: Boolean!, created: GetEventsUnionInput!, input: JSON!): GetEvents!
	getEventsId(id: String!, expand: [String!]!, input: JSON!): Event!
	getExchangeRates(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetExchangeRates!
	getExchangeRatesRateId(rateId: String!, expand: [String!]!, input: JSON!): ExchangeRate!
	getFileLinks(starting_after: String!, limit: Int!, file: String!, expired: Boolean!, expand: [String!]!, ending_before: String!, created: GetFileLinksUnionInput!, input: JSON!): GetFileLinks!
	getFileLinksLink(link: String!, expand: [String!]!, input: JSON!): FileLink!
	getFiles(starting_after: String!, purpose: GetFiles!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetFilesUnionInput!, input: JSON!): GetFiles!
	getFilesFile(file: String!, expand: [String!]!, input: JSON!): File!
	getFinancialConnectionsAccounts(starting_after: String!, session: String!, limit: Int!, expand: [String!]!, ending_before: String!, account_holder: GetFinancialConnectionsAccountsInput!, input: JSON!): GetFinancialConnectionsAccounts!
	getFinancialConnectionsAccountsAccount(account: String!, expand: [String!]!, input: JSON!): FinancialConnectionsAccount!
	getFinancialConnectionsAccountsAccountOwners(account: String!, starting_after: String!, ownership: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetFinancialConnectionsAccountsAccountOwners!
	getFinancialConnectionsSessionsSession(session: String!, expand: [String!]!, input: JSON!): FinancialConnectionsSession!
	getIdentityVerificationReports(verification_session: String!, type: GetIdentityVerificationReports!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetIdentityVerificationReportsUnionInput!, input: JSON!): GetIdentityVerificationReports!
	getIdentityVerificationReportsReport(report: String!, expand: [String!]!, input: JSON!): IdentityVerificationReport!
	getIdentityVerificationSessions(status: GetIdentityVerificationSessions!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetIdentityVerificationSessionsUnionInput!, input: JSON!): GetIdentityVerificationSessions!
	getIdentityVerificationSessionsSession(session: String!, expand: [String!]!, input: JSON!): IdentityVerificationSession!
	getInvoiceitems(starting_after: String!, pending: Boolean!, limit: Int!, invoice: String!, expand: [String!]!, ending_before: String!, customer: String!, created: GetInvoiceitemsUnionInput!, input: JSON!): GetInvoiceitems!
	getInvoiceitemsInvoiceitem(invoiceitem: String!, expand: [String!]!, input: JSON!): Invoiceitem!
	getInvoices(subscription: String!, status: GetInvoices!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, due_date: GetInvoicesUnionInput!, customer: String!, created: GetInvoicesUnionInput!, collection_method: GetInvoices!, input: JSON!): GetInvoices!
	getInvoicesSearch(query: String!, page: String!, limit: Int!, expand: [String!]!, input: JSON!): GetInvoicesSearch!
	getInvoicesUpcoming(subscription_trial_from_plan: Boolean!, subscription_trial_end: UnionInput!, subscription_start_date: Int!, subscription_resume_at: GetInvoicesUpcoming!, subscription_proration_date: Int!, subscription_proration_behavior: GetInvoicesUpcoming!, subscription_items: [GetInvoicesUpcomingInput!]!, subscription_default_tax_rates: UnionInput!, subscription_cancel_now: Boolean!, subscription_cancel_at_period_end: Boolean!, subscription_cancel_at: UnionInput!, subscription_billing_cycle_anchor: UnionInput!, subscription: String!, schedule: String!, invoice_items: [GetInvoicesUpcomingInput!]!, expand: [String!]!, discounts: GetInvoicesUpcomingUnionInput!, customer_details: GetInvoicesUpcomingInput!, customer: String!, currency: String!, coupon: String!, automatic_tax: GetInvoicesUpcomingInput!, input: JSON!): Invoice!
	getInvoicesUpcomingLines(subscription_trial_from_plan: Boolean!, subscription_trial_end: UnionInput!, subscription_start_date: Int!, subscription_resume_at: GetInvoicesUpcomingLines!, subscription_proration_date: Int!, subscription_proration_behavior: GetInvoicesUpcomingLines!, subscription_items: [GetInvoicesUpcomingLinesInput!]!, subscription_default_tax_rates: UnionInput!, subscription_cancel_now: Boolean!, subscription_cancel_at_period_end: Boolean!, subscription_cancel_at: UnionInput!, subscription_billing_cycle_anchor: UnionInput!, subscription: String!, starting_after: String!, schedule: String!, limit: Int!, invoice_items: [GetInvoicesUpcomingLinesInput!]!, expand: [String!]!, ending_before: String!, discounts: GetInvoicesUpcomingLinesUnionInput!, customer_details: GetInvoicesUpcomingLinesInput!, customer: String!, currency: String!, coupon: String!, automatic_tax: GetInvoicesUpcomingLinesInput!, input: JSON!): GetInvoicesUpcomingLines!
	getInvoicesInvoice(invoice: String!, expand: [String!]!, input: JSON!): Invoice!
	getInvoicesInvoiceLines(invoice: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetInvoicesInvoiceLines!
	getIssuingAuthorizations(status: GetIssuingAuthorizations!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetIssuingAuthorizationsUnionInput!, cardholder: String!, card: String!, input: JSON!): GetIssuingAuthorizations!
	getIssuingAuthorizationsAuthorization(authorization: String!, expand: [String!]!, input: JSON!): IssuingAuthorization!
	getIssuingCardholders(type: GetIssuingCardholders!, status: GetIssuingCardholders!, starting_after: String!, phone_number: String!, limit: Int!, expand: [String!]!, ending_before: String!, email: String!, created: GetIssuingCardholdersUnionInput!, input: JSON!): GetIssuingCardholders!
	getIssuingCardholdersCardholder(cardholder: String!, expand: [String!]!, input: JSON!): IssuingCardholder!
	getIssuingCards(type: GetIssuingCards!, status: GetIssuingCards!, starting_after: String!, limit: Int!, last4: String!, expand: [String!]!, exp_year: Int!, exp_month: Int!, ending_before: String!, created: GetIssuingCardsUnionInput!, cardholder: String!, input: JSON!): GetIssuingCards!
	getIssuingCardsCard(card: String!, expand: [String!]!, input: JSON!): IssuingCard!
	getIssuingDisputes(transaction: String!, status: GetIssuingDisputes!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetIssuingDisputesUnionInput!, input: JSON!): GetIssuingDisputes!
	getIssuingDisputesDispute(dispute: String!, expand: [String!]!, input: JSON!): IssuingDispute!
	getIssuingSettlements(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetIssuingSettlementsUnionInput!, input: JSON!): GetIssuingSettlements!
	getIssuingSettlementsSettlement(settlement: String!, expand: [String!]!, input: JSON!): IssuingSettlement!
	getIssuingTransactions(type: GetIssuingTransactions!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetIssuingTransactionsUnionInput!, cardholder: String!, card: String!, input: JSON!): GetIssuingTransactions!
	getIssuingTransactionsTransaction(transaction: String!, expand: [String!]!, input: JSON!): IssuingTransaction!
	getLinkAccountSessionsSession(session: String!, expand: [String!]!, input: JSON!): FinancialConnectionsSession!
	getLinkedAccounts(starting_after: String!, session: String!, limit: Int!, expand: [String!]!, ending_before: String!, account_holder: GetLinkedAccountsInput!, input: JSON!): GetLinkedAccounts!
	getLinkedAccountsAccount(account: String!, expand: [String!]!, input: JSON!): FinancialConnectionsAccount!
	getLinkedAccountsAccountOwners(account: String!, starting_after: String!, ownership: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetLinkedAccountsAccountOwners!
	getMandatesMandate(mandate: String!, expand: [String!]!, input: JSON!): Mandate!
	getPaymentIntents(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, customer: String!, created: GetPaymentIntentsUnionInput!, input: JSON!): GetPaymentIntents!
	getPaymentIntentsSearch(query: String!, page: String!, limit: Int!, expand: [String!]!, input: JSON!): GetPaymentIntentsSearch!
	getPaymentIntentsIntent(intent: String!, expand: [String!]!, client_secret: String!, input: JSON!): PaymentIntent!
	getPaymentLinks(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, active: Boolean!, input: JSON!): GetPaymentLinks!
	getPaymentLinksPaymentLink(paymentLink: String!, expand: [String!]!, input: JSON!): PaymentLink!
	getPaymentLinksPaymentLinkLineItems(paymentLink: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetPaymentLinksPaymentLinkLineItems!
	getPaymentMethods(type: GetPaymentMethods!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, customer: String!, input: JSON!): GetPaymentMethods!
	getPaymentMethodsPaymentMethod(paymentMethod: String!, expand: [String!]!, input: JSON!): PaymentMethod!
	getPayouts(status: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, destination: String!, created: GetPayoutsUnionInput!, arrival_date: GetPayoutsUnionInput!, input: JSON!): GetPayouts!
	getPayoutsPayout(payout: String!, expand: [String!]!, input: JSON!): Payout!
	getPlans(starting_after: String!, product: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetPlansUnionInput!, active: Boolean!, input: JSON!): GetPlans!
	getPlansPlan(plan: String!, expand: [String!]!, input: JSON!): Plan!
	getPrices(type: GetPrices!, starting_after: String!, recurring: GetPricesInput!, product: String!, lookup_keys: [String!]!, limit: Int!, expand: [String!]!, ending_before: String!, currency: String!, created: GetPricesUnionInput!, active: Boolean!, input: JSON!): GetPrices!
	getPricesSearch(query: String!, page: String!, limit: Int!, expand: [String!]!, input: JSON!): GetPricesSearch!
	getPricesPrice(price: String!, expand: [String!]!, input: JSON!): Price!
	getProducts(url: String!, starting_after: String!, shippable: Boolean!, limit: Int!, ids: [String!]!, expand: [String!]!, ending_before: String!, created: GetProductsUnionInput!, active: Boolean!, input: JSON!): GetProducts!
	getProductsSearch(query: String!, page: String!, limit: Int!, expand: [String!]!, input: JSON!): GetProductsSearch!
	getProductsId(id: String!, expand: [String!]!, input: JSON!): Product!
	getPromotionCodes(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, customer: String!, created: GetPromotionCodesUnionInput!, coupon: String!, code: String!, active: Boolean!, input: JSON!): GetPromotionCodes!
	getPromotionCodesPromotionCode(promotionCode: String!, expand: [String!]!, input: JSON!): PromotionCode!
	getQuotes(test_clock: String!, status: GetQuotes!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, customer: String!, input: JSON!): GetQuotes!
	getQuotesQuote(quote: String!, expand: [String!]!, input: JSON!): Quote!
	getQuotesQuoteComputedUpfrontLineItems(quote: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetQuotesQuoteComputedUpfrontLineItems!
	getQuotesQuoteLineItems(quote: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetQuotesQuoteLineItems!
	getQuotesQuotePdf(quote: String!, expand: [String!]!, input: JSON!): String!
	getRadarEarlyFraudWarnings(starting_after: String!, payment_intent: String!, limit: Int!, expand: [String!]!, ending_before: String!, charge: String!, input: JSON!): GetRadarEarlyFraudWarnings!
	getRadarEarlyFraudWarningsEarlyFraudWarning(earlyFraudWarning: String!, expand: [String!]!, input: JSON!): RadarEarlyFraudWarning!
	getRadarValueListItems(value_list: String!, value: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetRadarValueListItemsUnionInput!, input: JSON!): GetRadarValueListItems!
	getRadarValueListItemsItem(item: String!, expand: [String!]!, input: JSON!): RadarValueListItem!
	getRadarValueLists(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetRadarValueListsUnionInput!, contains: String!, alias: String!, input: JSON!): GetRadarValueLists!
	getRadarValueListsValueList(valueList: String!, expand: [String!]!, input: JSON!): RadarValueList!
	getRefunds(starting_after: String!, payment_intent: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetRefundsUnionInput!, charge: String!, input: JSON!): GetRefunds!
	getRefundsRefund(refund: String!, expand: [String!]!, input: JSON!): Refund!
	getReportingReportRuns(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetReportingReportRunsUnionInput!, input: JSON!): GetReportingReportRuns!
	getReportingReportRunsReportRun(reportRun: String!, expand: [String!]!, input: JSON!): ReportingReportRun!
	getReportingReportTypes(expand: [String!]!, input: JSON!): GetReportingReportTypes!
	getReportingReportTypesReportType(reportType: String!, expand: [String!]!, input: JSON!): ReportingReportType!
	getReviews(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetReviewsUnionInput!, input: JSON!): GetReviews!
	getReviewsReview(review: String!, expand: [String!]!, input: JSON!): Review!
	getSetupAttempts(starting_after: String!, setup_intent: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetSetupAttemptsUnionInput!, input: JSON!): GetSetupAttempts!
	getSetupIntents(starting_after: String!, payment_method: String!, limit: Int!, expand: [String!]!, ending_before: String!, customer: String!, created: GetSetupIntentsUnionInput!, attach_to_self: Boolean!, input: JSON!): GetSetupIntents!
	getSetupIntentsIntent(intent: String!, expand: [String!]!, client_secret: String!, input: JSON!): SetupIntent!
	getShippingRates(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, currency: String!, created: GetShippingRatesUnionInput!, active: Boolean!, input: JSON!): GetShippingRates!
	getShippingRatesShippingRateToken(shippingRateToken: String!, expand: [String!]!, input: JSON!): ShippingRate!
	getSigmaScheduledQueryRuns(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetSigmaScheduledQueryRuns!
	getSigmaScheduledQueryRunsScheduledQueryRun(scheduledQueryRun: String!, expand: [String!]!, input: JSON!): ScheduledQueryRun!
	getSourcesSource(source: String!, expand: [String!]!, client_secret: String!, input: JSON!): Source!
	getSourcesSourceMandateNotificationsMandateNotification(source: String!, mandateNotification: String!, expand: [String!]!, input: JSON!): SourceMandateNotification!
	getSourcesSourceSourceTransactions(source: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetSourcesSourceSourceTransactions!
	getSourcesSourceSourceTransactionsSourceTransaction(sourceTransaction: String!, source: String!, expand: [String!]!, input: JSON!): SourceTransaction!
	getSubscriptionItems(subscription: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetSubscriptionItems!
	getSubscriptionItemsItem(item: String!, expand: [String!]!, input: JSON!): SubscriptionItem!
	getSubscriptionItemsSubscriptionItemUsageRecordSummaries(subscriptionItem: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetSubscriptionItemsSubscriptionItemUsageRecordSummaries!
	getSubscriptionSchedules(starting_after: String!, scheduled: Boolean!, released_at: GetSubscriptionSchedulesUnionInput!, limit: Int!, expand: [String!]!, ending_before: String!, customer: String!, created: GetSubscriptionSchedulesUnionInput!, completed_at: GetSubscriptionSchedulesUnionInput!, canceled_at: GetSubscriptionSchedulesUnionInput!, input: JSON!): GetSubscriptionSchedules!
	getSubscriptionSchedulesSchedule(schedule: String!, expand: [String!]!, input: JSON!): SubscriptionSchedule!
	getSubscriptions(test_clock: String!, status: GetSubscriptions!, starting_after: String!, price: String!, limit: Int!, expand: [String!]!, ending_before: String!, customer: String!, current_period_start: GetSubscriptionsUnionInput!, current_period_end: GetSubscriptionsUnionInput!, created: GetSubscriptionsUnionInput!, collection_method: GetSubscriptions!, input: JSON!): GetSubscriptions!
	getSubscriptionsSearch(query: String!, page: String!, limit: Int!, expand: [String!]!, input: JSON!): GetSubscriptionsSearch!
	getSubscriptionsSubscriptionExposedId(subscriptionExposedId: String!, expand: [String!]!, input: JSON!): Subscription!
	getTaxCodes(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetTaxCodes!
	getTaxCodesId(id: String!, expand: [String!]!, input: JSON!): TaxCode!
	getTaxRates(starting_after: String!, limit: Int!, inclusive: Boolean!, expand: [String!]!, ending_before: String!, created: GetTaxRatesUnionInput!, active: Boolean!, input: JSON!): GetTaxRates!
	getTaxRatesTaxRate(taxRate: String!, expand: [String!]!, input: JSON!): TaxRate!
	getTerminalConfigurations(starting_after: String!, limit: Int!, is_account_default: Boolean!, expand: [String!]!, ending_before: String!, input: JSON!): GetTerminalConfigurations!
	getTerminalConfigurationsConfiguration(configuration: String!, expand: [String!]!, input: JSON!): DeletedTerminalConfigurationOrTerminalConfigurationUnion!
	getTerminalLocations(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetTerminalLocations!
	getTerminalLocationsLocation(location: String!, expand: [String!]!, input: JSON!): DeletedTerminalLocationOrTerminalLocationUnion!
	getTerminalReaders(status: GetTerminalReaders!, starting_after: String!, location: String!, limit: Int!, expand: [String!]!, ending_before: String!, device_type: GetTerminalReaders!, input: JSON!): GetTerminalReaders!
	getTerminalReadersReader(reader: String!, expand: [String!]!, input: JSON!): DeletedTerminalReaderOrTerminalReaderUnion!
	getTestHelpersTestClocks(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetTestHelpersTestClocks!
	getTestHelpersTestClocksTestClock(testClock: String!, expand: [String!]!, input: JSON!): TestHelpersTestClock!
	getTokensToken(token: String!, expand: [String!]!, input: JSON!): Token!
	getTopups(status: GetTopups!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetTopupsUnionInput!, amount: GetTopupsUnionInput!, input: JSON!): GetTopups!
	getTopupsTopup(topup: String!, expand: [String!]!, input: JSON!): Topup!
	getTransfers(transfer_group: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, destination: String!, created: GetTransfersUnionInput!, input: JSON!): GetTransfers!
	getTransfersIdReversals(id: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetTransfersIdReversals!
	getTransfersTransfer(transfer: String!, expand: [String!]!, input: JSON!): Transfer!
	getTransfersTransferReversalsId(transfer: String!, id: String!, expand: [String!]!, input: JSON!): TransferReversal!
	getTreasuryCreditReversals(status: GetTreasuryCreditReversals!, starting_after: String!, received_credit: String!, limit: Int!, financial_account: String!, expand: [String!]!, ending_before: String!, input: JSON!): GetTreasuryCreditReversals!
	getTreasuryCreditReversalsCreditReversal(creditReversal: String!, expand: [String!]!, input: JSON!): TreasuryCreditReversal!
	getTreasuryDebitReversals(status: GetTreasuryDebitReversals!, starting_after: String!, resolution: GetTreasuryDebitReversals!, received_debit: String!, limit: Int!, financial_account: String!, expand: [String!]!, ending_before: String!, input: JSON!): GetTreasuryDebitReversals!
	getTreasuryDebitReversalsDebitReversal(debitReversal: String!, expand: [String!]!, input: JSON!): TreasuryDebitReversal!
	getTreasuryFinancialAccounts(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetTreasuryFinancialAccountsUnionInput!, input: JSON!): GetTreasuryFinancialAccounts!
	getTreasuryFinancialAccountsFinancialAccount(financialAccount: String!, expand: [String!]!, input: JSON!): TreasuryFinancialAccount!
	getTreasuryFinancialAccountsFinancialAccountFeatures(financialAccount: String!, expand: [String!]!, input: JSON!): TreasuryFinancialAccountFeatures!
	getTreasuryInboundTransfers(status: GetTreasuryInboundTransfers!, starting_after: String!, limit: Int!, financial_account: String!, expand: [String!]!, ending_before: String!, input: JSON!): GetTreasuryInboundTransfers!
	getTreasuryInboundTransfersId(id: String!, expand: [String!]!, input: JSON!): TreasuryInboundTransfer!
	getTreasuryOutboundPayments(status: GetTreasuryOutboundPayments!, starting_after: String!, limit: Int!, financial_account: String!, expand: [String!]!, ending_before: String!, customer: String!, input: JSON!): GetTreasuryOutboundPayments!
	getTreasuryOutboundPaymentsId(id: String!, expand: [String!]!, input: JSON!): TreasuryOutboundPayment!
	getTreasuryOutboundTransfers(status: GetTreasuryOutboundTransfers!, starting_after: String!, limit: Int!, financial_account: String!, expand: [String!]!, ending_before: String!, input: JSON!): GetTreasuryOutboundTransfers!
	getTreasuryOutboundTransfersOutboundTransfer(outboundTransfer: String!, expand: [String!]!, input: JSON!): TreasuryOutboundTransfer!
	getTreasuryReceivedCredits(status: GetTreasuryReceivedCredits!, starting_after: String!, linked_flows: GetTreasuryReceivedCreditsInput!, limit: Int!, financial_account: String!, expand: [String!]!, ending_before: String!, input: JSON!): GetTreasuryReceivedCredits!
	getTreasuryReceivedCreditsId(id: String!, expand: [String!]!, input: JSON!): TreasuryReceivedCredit!
	getTreasuryReceivedDebits(status: GetTreasuryReceivedDebits!, starting_after: String!, limit: Int!, financial_account: String!, expand: [String!]!, ending_before: String!, input: JSON!): GetTreasuryReceivedDebits!
	getTreasuryReceivedDebitsId(id: String!, expand: [String!]!, input: JSON!): TreasuryReceivedDebit!
	getTreasuryTransactionEntries(transaction: String!, starting_after: String!, order_by: GetTreasuryTransactionEntries!, limit: Int!, financial_account: String!, expand: [String!]!, ending_before: String!, effective_at: GetTreasuryTransactionEntriesUnionInput!, created: GetTreasuryTransactionEntriesUnionInput!, input: JSON!): GetTreasuryTransactionEntries!
	getTreasuryTransactionEntriesId(id: String!, expand: [String!]!, input: JSON!): TreasuryTransactionEntry!
	getTreasuryTransactions(status_transitions: GetTreasuryTransactionsInput!, status: GetTreasuryTransactions!, starting_after: String!, order_by: GetTreasuryTransactions!, limit: Int!, financial_account: String!, expand: [String!]!, ending_before: String!, created: GetTreasuryTransactionsUnionInput!, input: JSON!): GetTreasuryTransactions!
	getTreasuryTransactionsId(id: String!, expand: [String!]!, input: JSON!): TreasuryTransaction!
	getWebhookEndpoints(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, input: JSON!): GetWebhookEndpoints!
	getWebhookEndpointsWebhookEndpoint(webhookEndpoint: String!, expand: [String!]!, input: JSON!): WebhookEndpoint!
}
type Quote {
	transferData: QuotesResourceTransferDataUnion
	totalDetails: QuotesResourceTotalDetails!
	testClock: TestHelpersTestClockUnion
	subscriptionSchedule: SubscriptionScheduleUnion
	subscriptionData: QuotesResourceSubscriptionDataSubscriptionData!
	subscription: SubscriptionUnion
	statusTransitions: QuotesResourceStatusTransitions!
	status: QuoteStatus!
	onBehalfOf: AccountUnion
	object: QuoteObject!
	number: String
	metadata: JSON!
	livemode: Boolean!
	lineItems: QuoteLineItems!
	invoiceSettings: InvoiceSettingQuoteSettingUnion
	invoice: DeletedInvoiceOrInvoiceUnion
	id: String!
	header: String
	fromQuote: QuotesResourceFromQuoteUnion
	footer: String
	expiresAt: Int!
	discounts: [DiscountUnion!]!
	description: String
	defaultTaxRates: [TaxRateUnion!]!
	customer: DeletedCustomerOrCustomerUnion
	currency: String
	created: Int!
	computed: QuotesResourceComputed!
	collectionMethod: QuoteCollectionMethod!
	automaticTax: QuotesResourceAutomaticTax!
	applicationFeePercent: Float
	applicationFeeAmount: Int
	application: DeletedApplicationOrApplicationUnion
	amountTotal: Int!
	amountSubtotal: Int!
}
enum QuoteCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
type QuoteLineItems {
	url: String!
	object: QuoteObjectLineItems!
	hasMore: Boolean!
	data: [Item!]!
}
enum QuoteObject {
	QUOTE
}
enum QuoteObjectLineItems {
	LIST
}
enum QuoteStatus {
	ACCEPTED
	CANCELED
	DRAFT
	OPEN
}
union QuoteUnion = Quote
type QuotesResourceAutomaticTax {
	status: QuotesResourceAutomaticTaxStatus
	enabled: Boolean!
}
enum QuotesResourceAutomaticTaxStatus {
	COMPLETE
	FAILED
	REQUIRES_LOCATION_INPUTS
}
type QuotesResourceComputed {
	upfront: QuotesResourceUpfront!
	recurring: QuotesResourceRecurringUnion
}
type QuotesResourceFromQuote {
	quote: QuoteUnion!
	isRevision: Boolean!
}
union QuotesResourceFromQuoteUnion = QuotesResourceFromQuote
type QuotesResourceRecurring {
	totalDetails: QuotesResourceTotalDetails!
	intervalCount: Int!
	interval: QuotesResourceRecurringInterval!
	amountTotal: Int!
	amountSubtotal: Int!
}
enum QuotesResourceRecurringInterval {
	DAY
	MONTH
	WEEK
	YEAR
}
union QuotesResourceRecurringUnion = QuotesResourceRecurring
type QuotesResourceStatusTransitions {
	finalizedAt: Int
	canceledAt: Int
	acceptedAt: Int
}
type QuotesResourceSubscriptionDataSubscriptionData {
	trialPeriodDays: Int
	effectiveDate: Int
	description: String
}
type QuotesResourceTotalDetails {
	breakdown: QuotesResourceTotalDetailsResourceBreakdown!
	amountTax: Int!
	amountShipping: Int
	amountDiscount: Int!
}
type QuotesResourceTotalDetailsResourceBreakdown {
	taxes: [LineItemsTaxAmount!]!
	discounts: [LineItemsDiscountAmount!]!
}
type QuotesResourceTransferData {
	destination: AccountUnion!
	amountPercent: Float
	amount: Int
}
union QuotesResourceTransferDataUnion = QuotesResourceTransferData
type QuotesResourceUpfront {
	totalDetails: QuotesResourceTotalDetails!
	lineItems: QuotesResourceUpfrontLineItems!
	amountTotal: Int!
	amountSubtotal: Int!
}
type QuotesResourceUpfrontLineItems {
	url: String!
	object: QuotesResourceUpfrontObjectLineItems!
	hasMore: Boolean!
	data: [Item!]!
}
enum QuotesResourceUpfrontObjectLineItems {
	LIST
}
type RadarEarlyFraudWarning {
	paymentIntent: PaymentIntentUnion!
	object: RadarEarlyFraudWarningObject!
	livemode: Boolean!
	id: String!
	fraudType: String!
	created: Int!
	charge: ChargeUnion!
	actionable: Boolean!
}
enum RadarEarlyFraudWarningObject {
	RADAR_EARLY_FRAUD_WARNING
}
type RadarRadarOptions {
	session: String!
}
type RadarReviewResourceLocation {
	region: String
	longitude: Float
	latitude: Float
	country: String
	city: String
}
union RadarReviewResourceLocationUnion = RadarReviewResourceLocation
type RadarReviewResourceSession {
	version: String
	platform: String
	device: String
	browser: String
}
union RadarReviewResourceSessionUnion = RadarReviewResourceSession
type RadarValueList {
	object: RadarValueListObject!
	name: String!
	metadata: JSON!
	livemode: Boolean!
	listItems: RadarValueListListItems!
	itemType: RadarValueListItemType!
	id: String!
	createdBy: String!
	created: Int!
	alias: String!
}
type RadarValueListItem {
	valueList: String!
	value: String!
	object: RadarValueListItemObject!
	livemode: Boolean!
	id: String!
	createdBy: String!
	created: Int!
}
enum RadarValueListItemObject {
	RADAR_VALUE_LIST_ITEM
}
enum RadarValueListItemType {
	CARD_BIN
	CARD_FINGERPRINT
	CASE_SENSITIVE_STRING
	COUNTRY
	CUSTOMER_ID
	EMAIL
	IP_ADDRESS
	STRING
}
type RadarValueListListItems {
	url: String!
	object: RadarValueListObjectListItems!
	hasMore: Boolean!
	data: [RadarValueListItem!]!
}
enum RadarValueListObject {
	RADAR_VALUE_LIST
}
enum RadarValueListObjectListItems {
	LIST
}
type ReceivedPaymentMethodDetailsFinancialAccount {
	network: ReceivedPaymentMethodDetailsFinancialAccountNetwork!
	id: String!
}
enum ReceivedPaymentMethodDetailsFinancialAccountNetwork {
	STRIPE
}
type Recurring {
	usageType: RecurringUsageType!
	intervalCount: Int!
	interval: RecurringInterval!
	aggregateUsage: RecurringAggregateUsage
}
enum RecurringAggregateUsage {
	LAST_DURING_PERIOD
	LAST_EVER
	MAX
	SUM
}
enum RecurringInterval {
	DAY
	MONTH
	WEEK
	YEAR
}
union RecurringUnion = Recurring
enum RecurringUsageType {
	LICENSED
	METERED
}
type Refund {
	transferReversal: TransferReversalUnion
	status: String
	sourceTransferReversal: TransferReversalUnion
	receiptNumber: String
	reason: RefundReason
	paymentIntent: PaymentIntentUnion
	object: RefundObject!
	nextAction: RefundNextAction!
	metadata: JSON!
	instructionsEmail: String!
	id: String!
	failureReason: String!
	failureBalanceTransaction: BalanceTransactionUnion!
	description: String!
	currency: String!
	created: Int!
	charge: ChargeUnion
	balanceTransaction: BalanceTransactionUnion
	amount: Int!
}
type RefundNextAction {
	type: String!
	displayDetails: RefundNextActionDisplayDetailsUnion
}
type RefundNextActionDisplayDetails {
	expiresAt: Int!
	emailSent: EmailSent!
}
union RefundNextActionDisplayDetailsUnion = RefundNextActionDisplayDetails
enum RefundObject {
	REFUND
}
enum RefundReason {
	DUPLICATE
	EXPIRED_UNCAPTURED_CHARGE
	FRAUDULENT
	REQUESTED_BY_CUSTOMER
}
union RefundUnion = Refund
type ReportingReportRun {
	succeededAt: Int
	status: String!
	result: FileUnion
	reportType: String!
	parameters: FinancialReportingFinanceReportRunRunParameters!
	object: ReportingReportRunObject!
	livemode: Boolean!
	id: String!
	error: String
	created: Int!
}
enum ReportingReportRunObject {
	REPORTING_REPORT_RUN
}
type ReportingReportType {
	version: Int!
	updated: Int!
	object: ReportingReportTypeObject!
	name: String!
	livemode: Boolean!
	id: String!
	defaultColumns: [String!]
	dataAvailableStart: Int!
	dataAvailableEnd: Int!
}
enum ReportingReportTypeObject {
	REPORTING_REPORT_TYPE
}
type ReserveTransaction {
	object: ReserveTransactionObject!
	id: String!
	description: String
	currency: String!
	amount: Int!
}
enum ReserveTransactionObject {
	RESERVE_TRANSACTION
}
type Review {
	session: RadarReviewResourceSessionUnion
	reason: String!
	paymentIntent: PaymentIntentUnion!
	openedReason: ReviewOpenedReason!
	open: Boolean!
	object: ReviewObject!
	livemode: Boolean!
	ipAddressLocation: RadarReviewResourceLocationUnion
	ipAddress: String
	id: String!
	created: Int!
	closedReason: ReviewClosedReason
	charge: ChargeUnion
	billingZip: String
}
enum ReviewClosedReason {
	APPROVED
	DISPUTED
	REDACTED
	REFUNDED
	REFUNDED_AS_FRAUD
}
enum ReviewObject {
	REVIEW
}
enum ReviewOpenedReason {
	MANUAL
	RULE
}
union ReviewUnion = Review
type Rule {
	predicate: String!
	id: String!
	action: String!
}
union RuleUnion = Rule
type ScheduledQueryRun {
	title: String!
	status: String!
	sql: String!
	resultAvailableUntil: Int!
	object: ScheduledQueryRunObject!
	livemode: Boolean!
	id: String!
	file: FileUnion
	error: SigmaScheduledQueryRunError!
	dataLoadTime: Int!
	created: Int!
}
enum ScheduledQueryRunObject {
	SCHEDULED_QUERY_RUN
}
type SchedulesPhaseAutomaticTax {
	enabled: Boolean!
}
type SecretServiceResourceScope {
	user: String!
	type: SecretServiceResourceScopeType!
}
enum SecretServiceResourceScopeType {
	ACCOUNT
	USER
}
type SepaDebitGeneratedFrom {
	setupAttempt: SetupAttemptUnion
	charge: ChargeUnion
}
union SepaDebitGeneratedFromUnion = SepaDebitGeneratedFrom
type SetupAttempt {
	usage: String!
	status: String!
	setupIntent: SetupIntentUnion!
	setupError: ApiErrorsUnion
	paymentMethodDetails: SetupAttemptPaymentMethodDetails!
	paymentMethod: PaymentMethodUnion!
	onBehalfOf: AccountUnion
	object: SetupAttemptObject!
	livemode: Boolean!
	id: String!
	flowDirections: [SetupAttemptFlowDirections!]
	customer: DeletedCustomerOrCustomerUnion
	created: Int!
	attachToSelf: Boolean!
	application: ApplicationUnion
}
enum SetupAttemptFlowDirections {
	INBOUND
	OUTBOUND
}
enum SetupAttemptObject {
	SETUP_ATTEMPT
}
type SetupAttemptPaymentMethodDetails {
	usBankAccount: SetupAttemptPaymentMethodDetailsUsBankAccount!
	type: String!
	sofort: SetupAttemptPaymentMethodDetailsSofort!
	sepaDebit: SetupAttemptPaymentMethodDetailsSepaDebit!
	link: SetupAttemptPaymentMethodDetailsLink!
	klarna: SetupAttemptPaymentMethodDetailsKlarna!
	ideal: SetupAttemptPaymentMethodDetailsIdeal!
	cardPresent: SetupAttemptPaymentMethodDetailsCardPresent!
	card: SetupAttemptPaymentMethodDetailsCard!
	boleto: SetupAttemptPaymentMethodDetailsBoleto!
	blik: SetupAttemptPaymentMethodDetailsBlik!
	bancontact: SetupAttemptPaymentMethodDetailsBancontact!
	bacsDebit: SetupAttemptPaymentMethodDetailsBacsDebit!
	auBecsDebit: SetupAttemptPaymentMethodDetailsAuBecsDebit!
	acssDebit: SetupAttemptPaymentMethodDetailsAcssDebit!
}
type SetupAttemptPaymentMethodDetailsBancontact {
	verifiedName: String
	preferredLanguage: SetupAttemptPaymentMethodDetailsBancontactPreferredLanguage
	ibanLast4: String
	generatedSepaDebitMandate: MandateUnion
	generatedSepaDebit: PaymentMethodUnion
	bic: String
	bankName: String
	bankCode: String
}
enum SetupAttemptPaymentMethodDetailsBancontactPreferredLanguage {
	DE
	EN
	FR
	NL
}
type SetupAttemptPaymentMethodDetailsCard {
	threeDSecure: ThreeDSecureDetailsUnion
}
type SetupAttemptPaymentMethodDetailsCardPresent {
	generatedCard: PaymentMethodUnion
}
type SetupAttemptPaymentMethodDetailsIdeal {
	verifiedName: String
	ibanLast4: String
	generatedSepaDebitMandate: MandateUnion
	generatedSepaDebit: PaymentMethodUnion
	bic: SetupAttemptPaymentMethodDetailsIdealBic
	bank: SetupAttemptPaymentMethodDetailsIdealBank
}
enum SetupAttemptPaymentMethodDetailsIdealBank {
	ABN_AMRO
	ASN_BANK
	BUNQ
	HANDELSBANKEN
	ING
	KNAB
	MONEYOU
	RABOBANK
	REGIOBANK
	REVOLUT
	SNS_BANK
	TRIODOS_BANK
	VAN_LANSCHOT
}
enum SetupAttemptPaymentMethodDetailsIdealBic {
	ABNANL2A
	ASNBNL21
	BUNQNL2A
	FVLBNL22
	HANDNL2A
	INGBNL2A
	KNABNL2H
	MOYONL21
	RABONL2U
	RBRBNL21
	REVOLT21
	SNSBNL2A
	TRIONL2U
}
type SetupAttemptPaymentMethodDetailsSofort {
	verifiedName: String
	preferredLanguage: SetupAttemptPaymentMethodDetailsSofortPreferredLanguage
	ibanLast4: String
	generatedSepaDebitMandate: MandateUnion
	generatedSepaDebit: PaymentMethodUnion
	bic: String
	bankName: String
	bankCode: String
}
enum SetupAttemptPaymentMethodDetailsSofortPreferredLanguage {
	DE
	EN
	FR
	NL
}
union SetupAttemptUnion = SetupAttempt
type SetupIntent {
	usage: String!
	status: SetupIntentStatus!
	singleUseMandate: MandateUnion
	paymentMethodTypes: [String!]!
	paymentMethodOptions: SetupIntentPaymentMethodOptionsUnion
	paymentMethod: PaymentMethodUnion
	onBehalfOf: AccountUnion
	object: SetupIntentObject!
	nextAction: SetupIntentNextActionUnion
	metadata: JSON!
	mandate: MandateUnion
	livemode: Boolean!
	latestAttempt: SetupAttemptUnion
	lastSetupError: ApiErrorsUnion
	id: String!
	flowDirections: [SetupIntentFlowDirections!]
	description: String
	customer: DeletedCustomerOrCustomerUnion
	created: Int!
	clientSecret: String
	cancellationReason: SetupIntentCancellationReason
	attachToSelf: Boolean!
	application: ApplicationUnion
}
enum SetupIntentCancellationReason {
	ABANDONED
	DUPLICATE
	REQUESTED_BY_CUSTOMER
}
enum SetupIntentFlowDirections {
	INBOUND
	OUTBOUND
}
type SetupIntentNextAction {
	verifyWithMicrodeposits: SetupIntentNextActionVerifyWithMicrodeposits!
	useStripeSdk: JSON!
	type: String!
	redirectToUrl: SetupIntentNextActionRedirectToUrl!
}
type SetupIntentNextActionRedirectToUrl {
	url: String
	returnUrl: String
}
union SetupIntentNextActionUnion = SetupIntentNextAction
type SetupIntentNextActionVerifyWithMicrodeposits {
	microdepositType: SetupIntentNextActionVerifyWithMicrodepositsMicrodepositType
	hostedVerificationUrl: String!
	arrivalDate: Int!
}
enum SetupIntentNextActionVerifyWithMicrodepositsMicrodepositType {
	AMOUNTS
	DESCRIPTOR_CODE
}
enum SetupIntentObject {
	SETUP_INTENT
}
type SetupIntentPaymentMethodOptions {
	usBankAccount: SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsUsBankAccountUnion!
	sepaDebit: SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsSepaDebitUnion!
	link: SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsLinkUnion!
	card: SetupIntentPaymentMethodOptionsCard!
	blik: SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsBlikUnion!
	acssDebit: SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsAcssDebitUnion!
}
type SetupIntentPaymentMethodOptionsAcssDebit {
	verificationMethod: SetupIntentPaymentMethodOptionsAcssDebitVerificationMethod!
	mandateOptions: SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit!
	currency: SetupIntentPaymentMethodOptionsAcssDebitCurrency
}
enum SetupIntentPaymentMethodOptionsAcssDebitCurrency {
	CAD
	USD
}
enum SetupIntentPaymentMethodOptionsAcssDebitVerificationMethod {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
type SetupIntentPaymentMethodOptionsBlik {
	mandateOptions: SetupIntentPaymentMethodOptionsMandateOptionsBlik!
}
type SetupIntentPaymentMethodOptionsCard {
	requestThreeDSecure: SetupIntentPaymentMethodOptionsCardRequestThreeDSecure
	network: SetupIntentPaymentMethodOptionsCardNetwork
	mandateOptions: SetupIntentPaymentMethodOptionsCardMandateOptionsUnion
}
type SetupIntentPaymentMethodOptionsCardMandateOptions {
	supportedTypes: [SetupIntentPaymentMethodOptionsCardMandateOptionsSupportedTypes!]
	startDate: Int!
	reference: String!
	intervalCount: Int
	interval: SetupIntentPaymentMethodOptionsCardMandateOptionsInterval!
	endDate: Int
	description: String
	currency: String!
	amountType: SetupIntentPaymentMethodOptionsCardMandateOptionsAmountType!
	amount: Int!
}
enum SetupIntentPaymentMethodOptionsCardMandateOptionsAmountType {
	FIXED
	MAXIMUM
}
enum SetupIntentPaymentMethodOptionsCardMandateOptionsInterval {
	DAY
	MONTH
	SPORADIC
	WEEK
	YEAR
}
enum SetupIntentPaymentMethodOptionsCardMandateOptionsSupportedTypes {
	INDIA
}
union SetupIntentPaymentMethodOptionsCardMandateOptionsUnion = SetupIntentPaymentMethodOptionsCardMandateOptions
enum SetupIntentPaymentMethodOptionsCardNetwork {
	AMEX
	CARTES_BANCAIRES
	DINERS
	DISCOVER
	INTERAC
	JCB
	MASTERCARD
	UNIONPAY
	UNKNOWN
	VISA
}
enum SetupIntentPaymentMethodOptionsCardRequestThreeDSecure {
	ANY
	AUTOMATIC
	CHALLENGE_ONLY
}
type SetupIntentPaymentMethodOptionsLink {
	persistentToken: String
}
type SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit {
	transactionType: SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionType
	paymentSchedule: SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentSchedule
	intervalDescription: String
	defaultFor: [SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitDefaultFor!]!
	customMandateUrl: String!
}
enum SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitDefaultFor {
	INVOICE
	SUBSCRIPTION
}
enum SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentSchedule {
	COMBINED
	INTERVAL
	SPORADIC
}
enum SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionType {
	BUSINESS
	PERSONAL
}
type SetupIntentPaymentMethodOptionsMandateOptionsBlik {
	type: SetupIntentPaymentMethodOptionsMandateOptionsBlikType
	offSession: MandateOptionsOffSessionDetailsBlik!
	expiresAfter: Int
}
enum SetupIntentPaymentMethodOptionsMandateOptionsBlikType {
	OFF_SESSION
	ON_SESSION
}
type SetupIntentPaymentMethodOptionsSepaDebit {
	mandateOptions: SetupIntentPaymentMethodOptionsMandateOptionsSepaDebit!
}
union SetupIntentPaymentMethodOptionsUnion = SetupIntentPaymentMethodOptions
type SetupIntentPaymentMethodOptionsUsBankAccount {
	verificationMethod: SetupIntentPaymentMethodOptionsUsBankAccountVerificationMethod!
	financialConnections: LinkedAccountOptionsUsBankAccount!
}
enum SetupIntentPaymentMethodOptionsUsBankAccountVerificationMethod {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum SetupIntentStatus {
	CANCELED
	PROCESSING
	REQUIRES_ACTION
	REQUIRES_CONFIRMATION
	REQUIRES_PAYMENT_METHOD
	SUCCEEDED
}
type SetupIntentTypeSpecificPaymentMethodOptionsClient {
	verificationMethod: SetupIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod!
}
union SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsAcssDebitUnion = SetupIntentTypeSpecificPaymentMethodOptionsClient | SetupIntentPaymentMethodOptionsAcssDebit
union SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsBlikUnion = SetupIntentTypeSpecificPaymentMethodOptionsClient | SetupIntentPaymentMethodOptionsBlik
union SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsLinkUnion = SetupIntentTypeSpecificPaymentMethodOptionsClient | SetupIntentPaymentMethodOptionsLink
union SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsSepaDebitUnion = SetupIntentTypeSpecificPaymentMethodOptionsClient | SetupIntentPaymentMethodOptionsSepaDebit
union SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsUsBankAccountUnion = SetupIntentTypeSpecificPaymentMethodOptionsClient | SetupIntentPaymentMethodOptionsUsBankAccount
enum SetupIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
union SetupIntentUnion = SetupIntent
type Shipping {
	trackingNumber: String
	phone: String
	name: String!
	carrier: String
	address: Address!
}
type ShippingRate {
	type: ShippingRateType!
	taxCode: TaxCodeUnion
	taxBehavior: ShippingRateTaxBehavior
	object: ShippingRateObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	fixedAmount: ShippingRateFixedAmount!
	displayName: String
	deliveryEstimate: ShippingRateDeliveryEstimateUnion
	created: Int!
	active: Boolean!
}
type ShippingRateDeliveryEstimate {
	minimum: ShippingRateDeliveryEstimateBoundUnion
	maximum: ShippingRateDeliveryEstimateBoundUnion
}
type ShippingRateDeliveryEstimateBound {
	value: Int!
	unit: ShippingRateDeliveryEstimateBoundUnit!
}
union ShippingRateDeliveryEstimateBoundUnion = ShippingRateDeliveryEstimateBound
enum ShippingRateDeliveryEstimateBoundUnit {
	BUSINESS_DAY
	DAY
	HOUR
	MONTH
	WEEK
}
union ShippingRateDeliveryEstimateUnion = ShippingRateDeliveryEstimate
type ShippingRateFixedAmount {
	currencyOptions: JSON!
	currency: String!
	amount: Int!
}
enum ShippingRateObject {
	SHIPPING_RATE
}
enum ShippingRateTaxBehavior {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum ShippingRateType {
	FIXED_AMOUNT
}
union ShippingRateUnion = ShippingRate
union ShippingUnion = Shipping
type SigmaScheduledQueryRunError {
	message: String!
}
type Source {
	wechat: SourceTypeWechat!
	usage: String
	type: SourceType!
	threeDSecure: SourceTypeThreeDSecure!
	status: String!
	statementDescriptor: String
	sourceOrder: SourceOrder!
	sofort: SourceTypeSofort!
	sepaDebit: SourceTypeSepaDebit!
	redirect: SourceRedirectFlow!
	receiver: SourceReceiverFlow!
	p24: SourceTypeP24!
	owner: SourceOwnerUnion
	object: SourceObject!
	multibanco: SourceTypeMultibanco!
	metadata: JSON!
	livemode: Boolean!
	klarna: SourceTypeKlarna!
	ideal: SourceTypeIdeal!
	id: String!
	giropay: SourceTypeGiropay!
	flow: String!
	eps: SourceTypeEps!
	customer: String!
	currency: String
	created: Int!
	codeVerification: SourceCodeVerificationFlow!
	clientSecret: String!
	cardPresent: SourceTypeCardPresent!
	card: SourceTypeCard!
	bancontact: SourceTypeBancontact!
	auBecsDebit: SourceTypeAuBecsDebit!
	amount: Int
	alipay: SourceTypeAlipay!
	acssDebit: SourceTypeAcssDebit!
	achDebit: SourceTypeAchDebit!
	achCreditTransfer: SourceTypeAchCreditTransfer!
}
type SourceCodeVerificationFlow {
	status: String!
	attemptsRemaining: Int!
}
type SourceMandateNotification {
	type: String!
	status: String!
	source: Source!
	sepaDebit: SourceMandateNotificationSepaDebitData!
	reason: String!
	object: SourceMandateNotificationObject!
	livemode: Boolean!
	id: String!
	created: Int!
	bacsDebit: SourceMandateNotificationBacsDebitData!
	amount: Int
	acssDebit: SourceMandateNotificationAcssDebitData!
}
type SourceMandateNotificationAcssDebitData {
	statementDescriptor: String!
}
type SourceMandateNotificationBacsDebitData {
	last4: String!
}
enum SourceMandateNotificationObject {
	SOURCE_MANDATE_NOTIFICATION
}
type SourceMandateNotificationSepaDebitData {
	mandateReference: String!
	last4: String!
	creditorIdentifier: String!
}
enum SourceObject {
	SOURCE
}
union SourceOrBankAccountOrCardUnion = Source | BankAccount | Card
union SourceOrCardOrBankAccountOrAccountUnion = Source | Card | BankAccount | Account
union SourceOrCardOrBankAccountUnion = Source | Card | BankAccount
type SourceOrder {
	shipping: Shipping!
	items: [SourceOrderItem!]
	email: String!
	currency: String!
	amount: Int!
}
type SourceOrderItem {
	type: String
	quantity: Int!
	parent: String
	description: String
	currency: String
	amount: Int
}
type SourceOwner {
	verifiedPhone: String
	verifiedName: String
	verifiedEmail: String
	verifiedAddress: AddressUnion
	phone: String
	name: String
	email: String
	address: AddressUnion
}
union SourceOwnerUnion = SourceOwner
type SourceReceiverFlow {
	refundAttributesStatus: String!
	refundAttributesMethod: String!
	amountReturned: Int!
	amountReceived: Int!
	amountCharged: Int!
	address: String
}
type SourceRedirectFlow {
	url: String!
	status: String!
	returnUrl: String!
	failureReason: String
}
type SourceTransaction {
	type: SourceTransactionType!
	status: String!
	source: String!
	sepaCreditTransfer: SourceTransactionSepaCreditTransferData!
	paperCheck: SourceTransactionPaperCheckData!
	object: SourceTransactionObject!
	livemode: Boolean!
	id: String!
	gbpCreditTransfer: SourceTransactionGbpCreditTransferData!
	currency: String!
	created: Int!
	chfCreditTransfer: SourceTransactionChfCreditTransferData!
	amount: Int!
	achCreditTransfer: SourceTransactionAchCreditTransferData!
}
type SourceTransactionAchCreditTransferData {
	routingNumber: String!
	last4: String!
	fingerprint: String!
	customerData: String!
}
type SourceTransactionChfCreditTransferData {
	senderName: String!
	senderIban: String!
	senderAddressLine1: String!
	senderAddressCountry: String!
	reference: String!
}
type SourceTransactionGbpCreditTransferData {
	senderSortCode: String!
	senderName: String!
	senderAccountNumber: String!
	reference: String!
	last4: String!
	fundingMethod: String!
	fingerprint: String!
}
enum SourceTransactionObject {
	SOURCE_TRANSACTION
}
type SourceTransactionPaperCheckData {
	invoices: String!
	availableAt: String!
}
type SourceTransactionSepaCreditTransferData {
	senderName: String!
	senderIban: String!
	reference: String!
}
enum SourceTransactionType {
	ACH_CREDIT_TRANSFER
	ACH_DEBIT
	ALIPAY
	BANCONTACT
	CARD
	CARD_PRESENT
	EPS
	GIROPAY
	IDEAL
	KLARNA
	MULTIBANCO
	P_24
	SEPA_DEBIT
	SOFORT
	THREE_D_SECURE
	WECHAT
}
enum SourceType {
	ACH_CREDIT_TRANSFER
	ACH_DEBIT
	ACSS_DEBIT
	ALIPAY
	AU_BECS_DEBIT
	BANCONTACT
	CARD
	CARD_PRESENT
	EPS
	GIROPAY
	IDEAL
	KLARNA
	MULTIBANCO
	P_24
	SEPA_DEBIT
	SOFORT
	THREE_D_SECURE
	WECHAT
}
type SourceTypeAchCreditTransfer {
	swiftCode: String
	routingNumber: String
	refundRoutingNumber: String
	refundAccountHolderType: String
	refundAccountHolderName: String
	fingerprint: String
	bankName: String
	accountNumber: String
}
type SourceTypeAchDebit {
	type: String
	routingNumber: String
	last4: String
	fingerprint: String
	country: String
	bankName: String
}
type SourceTypeAcssDebit {
	routingNumber: String
	last4: String
	fingerprint: String
	country: String
	category: String
	bankName: String
	bankAddressPostalCode: String
	bankAddressLine2: String
	bankAddressLine1: String
	bankAddressCity: String
}
type SourceTypeAlipay {
	statementDescriptor: String
	nativeUrl: String
	dataString: String
}
type SourceTypeAuBecsDebit {
	last4: String
	fingerprint: String
	bsbNumber: String
}
type SourceTypeBancontact {
	statementDescriptor: String
	preferredLanguage: String
	ibanLast4: String
	bic: String
	bankName: String
	bankCode: String
}
type SourceTypeCard {
	tokenizationMethod: String
	threeDSecure: String!
	name: String
	last4: String
	funding: String
	fingerprint: String!
	expYear: Int
	expMonth: Int
	dynamicLast4: String
	cvcCheck: String
	country: String
	brand: String
	addressZipCheck: String
	addressLine1Check: String
}
type SourceTypeCardPresent {
	transactionStatusInformation: String!
	terminalVerificationResults: String!
	reader: String
	readMethod: String
	posEntryMode: String!
	posDeviceId: String
	last4: String
	funding: String
	fingerprint: String!
	expYear: Int
	expMonth: Int
	evidenceTransactionCertificate: String
	evidenceCustomerSignature: String
	emvAuthData: String!
	dedicatedFileName: String!
	dataType: String
	cvmType: String!
	country: String
	brand: String
	authorizationResponseCode: String!
	authorizationCode: String
	applicationPreferredName: String!
	applicationCryptogram: String!
}
type SourceTypeEps {
	statementDescriptor: String
	reference: String
}
type SourceTypeGiropay {
	statementDescriptor: String
	bic: String
	bankName: String
	bankCode: String
}
type SourceTypeIdeal {
	statementDescriptor: String
	ibanLast4: String
	bic: String
	bank: String
}
type SourceTypeKlarna {
	shippingLastName: String!
	shippingFirstName: String!
	shippingDelay: Int!
	redirectUrl: String!
	purchaseType: String!
	purchaseCountry: String!
	paymentMethodCategories: String!
	payOverTimeRedirectUrl: String!
	payOverTimeName: String!
	payOverTimeAssetUrlsStandard: String!
	payOverTimeAssetUrlsDescriptive: String!
	payNowRedirectUrl: String!
	payNowName: String!
	payNowAssetUrlsStandard: String!
	payNowAssetUrlsDescriptive: String!
	payLaterRedirectUrl: String!
	payLaterName: String!
	payLaterAssetUrlsStandard: String!
	payLaterAssetUrlsDescriptive: String!
	pageTitle: String!
	logoUrl: String!
	locale: String!
	lastName: String!
	firstName: String!
	clientToken: String
	backgroundImageUrl: String!
}
type SourceTypeMultibanco {
	refundIban: String
	refundAccountHolderName: String
	refundAccountHolderAddressState: String
	refundAccountHolderAddressPostalCode: String
	refundAccountHolderAddressLine2: String
	refundAccountHolderAddressLine1: String
	refundAccountHolderAddressCountry: String
	refundAccountHolderAddressCity: String
	reference: String
	entity: String
}
type SourceTypeP24 {
	reference: String
}
type SourceTypeSepaDebit {
	mandateUrl: String
	mandateReference: String
	last4: String
	fingerprint: String
	country: String
	branchCode: String
	bankCode: String
}
type SourceTypeSofort {
	statementDescriptor: String
	preferredLanguage: String
	ibanLast4: String
	country: String
	bic: String
	bankName: String
	bankCode: String
}
type SourceTypeThreeDSecure {
	tokenizationMethod: String
	threeDSecure: String!
	name: String
	last4: String
	funding: String
	fingerprint: String!
	expYear: Int
	expMonth: Int
	dynamicLast4: String
	cvcCheck: String
	customer: String
	country: String
	card: String
	brand: String
	authenticated: Boolean
	addressZipCheck: String
	addressLine1Check: String
}
type SourceTypeWechat {
	statementDescriptor: String!
	qrCodeUrl: String
	prepayId: String!
}
union SourceUnion = Source
type Subscription {
	trialStart: Int
	trialSettings: SubscriptionsTrialsResourceTrialSettingsUnion
	trialEnd: Int
	transferData: SubscriptionTransferDataUnion
	testClock: TestHelpersTestClockUnion
	status: SubscriptionStatus!
	startDate: Int!
	schedule: SubscriptionScheduleUnion
	pendingUpdate: SubscriptionsResourcePendingUpdateUnion
	pendingSetupIntent: SetupIntentUnion
	pendingInvoiceItemInterval: SubscriptionPendingInvoiceItemIntervalUnion
	paymentSettings: SubscriptionsResourcePaymentSettingsUnion
	pauseCollection: SubscriptionsResourcePauseCollectionUnion
	onBehalfOf: AccountUnion
	object: SubscriptionObject!
	nextPendingInvoiceItemInvoice: Int
	metadata: JSON!
	livemode: Boolean!
	latestInvoice: InvoiceUnion
	items: SubscriptionItems!
	id: String!
	endedAt: Int
	discount: DiscountUnion
	description: String
	defaultTaxRates: [TaxRate!]
	defaultSource: SourceOrCardOrBankAccountUnion
	defaultPaymentMethod: PaymentMethodUnion
	daysUntilDue: Int
	customer: DeletedCustomerOrCustomerUnion!
	currentPeriodStart: Int!
	currentPeriodEnd: Int!
	currency: String!
	created: Int!
	collectionMethod: SubscriptionCollectionMethod!
	canceledAt: Int
	cancelAtPeriodEnd: Boolean!
	cancelAt: Int
	billingThresholds: SubscriptionBillingThresholdsUnion
	billingCycleAnchor: Int!
	automaticTax: SubscriptionAutomaticTax!
	applicationFeePercent: Float
	application: DeletedApplicationOrApplicationUnion
}
type SubscriptionAutomaticTax {
	enabled: Boolean!
}
type SubscriptionBillingThresholds {
	resetBillingCycleAnchor: Boolean
	amountGte: Int
}
union SubscriptionBillingThresholdsUnion = SubscriptionBillingThresholds
enum SubscriptionCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
type SubscriptionItem {
	taxRates: [TaxRate!]
	subscription: String!
	quantity: Int!
	price: Price!
	object: SubscriptionItemObject!
	metadata: JSON!
	id: String!
	created: Int!
	billingThresholds: SubscriptionItemBillingThresholdsUnion
}
type SubscriptionItemBillingThresholds {
	usageGte: Int
}
union SubscriptionItemBillingThresholdsUnion = SubscriptionItemBillingThresholds
enum SubscriptionItemObject {
	SUBSCRIPTION_ITEM
}
type SubscriptionItems {
	url: String!
	object: SubscriptionObjectItems!
	hasMore: Boolean!
	data: [SubscriptionItem!]!
}
enum SubscriptionObject {
	SUBSCRIPTION
}
enum SubscriptionObjectItems {
	LIST
}
type SubscriptionPaymentMethodOptionsCard {
	requestThreeDSecure: SubscriptionPaymentMethodOptionsCardRequestThreeDSecure
	network: SubscriptionPaymentMethodOptionsCardNetwork
	mandateOptions: InvoiceMandateOptionsCard!
}
enum SubscriptionPaymentMethodOptionsCardNetwork {
	AMEX
	CARTES_BANCAIRES
	DINERS
	DISCOVER
	INTERAC
	JCB
	MASTERCARD
	UNIONPAY
	UNKNOWN
	VISA
}
enum SubscriptionPaymentMethodOptionsCardRequestThreeDSecure {
	ANY
	AUTOMATIC
}
union SubscriptionPaymentMethodOptionsCardUnion = SubscriptionPaymentMethodOptionsCard
type SubscriptionPendingInvoiceItemInterval {
	intervalCount: Int!
	interval: SubscriptionPendingInvoiceItemIntervalInterval!
}
enum SubscriptionPendingInvoiceItemIntervalInterval {
	DAY
	MONTH
	WEEK
	YEAR
}
union SubscriptionPendingInvoiceItemIntervalUnion = SubscriptionPendingInvoiceItemInterval
type SubscriptionSchedule {
	testClock: TestHelpersTestClockUnion
	subscription: SubscriptionUnion
	status: SubscriptionScheduleStatus!
	releasedSubscription: String
	releasedAt: Int
	phases: [SubscriptionSchedulePhaseConfiguration!]!
	object: SubscriptionScheduleObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	endBehavior: SubscriptionScheduleEndBehavior!
	defaultSettings: SubscriptionSchedulesResourceDefaultSettings!
	customer: DeletedCustomerOrCustomerUnion!
	currentPhase: SubscriptionScheduleCurrentPhaseUnion
	created: Int!
	completedAt: Int
	canceledAt: Int
	application: DeletedApplicationOrApplicationUnion
}
type SubscriptionScheduleAddInvoiceItem {
	taxRates: [TaxRate!]
	quantity: Int
	price: DeletedPriceOrPriceUnion!
}
type SubscriptionScheduleConfigurationItem {
	taxRates: [TaxRate!]
	quantity: Int!
	price: DeletedPriceOrPriceUnion!
	metadata: JSON!
	billingThresholds: SubscriptionItemBillingThresholdsUnion
}
type SubscriptionScheduleCurrentPhase {
	startDate: Int!
	endDate: Int!
}
union SubscriptionScheduleCurrentPhaseUnion = SubscriptionScheduleCurrentPhase
enum SubscriptionScheduleEndBehavior {
	CANCEL
	NONE
	RELEASE
	RENEW
}
enum SubscriptionScheduleObject {
	SUBSCRIPTION_SCHEDULE
}
type SubscriptionSchedulePhaseConfiguration {
	trialEnd: Int
	transferData: SubscriptionTransferDataUnion
	startDate: Int!
	prorationBehavior: SubscriptionSchedulePhaseConfigurationProrationBehavior!
	onBehalfOf: AccountUnion
	metadata: JSON!
	items: [SubscriptionScheduleConfigurationItem!]!
	invoiceSettings: InvoiceSettingSubscriptionScheduleSettingUnion
	endDate: Int!
	description: String
	defaultTaxRates: [TaxRate!]
	defaultPaymentMethod: PaymentMethodUnion
	currency: String!
	coupon: DeletedCouponOrCouponUnion
	collectionMethod: SubscriptionSchedulePhaseConfigurationCollectionMethod
	billingThresholds: SubscriptionBillingThresholdsUnion
	billingCycleAnchor: SubscriptionSchedulePhaseConfigurationBillingCycleAnchor
	automaticTax: SchedulesPhaseAutomaticTax!
	applicationFeePercent: Float
	addInvoiceItems: [SubscriptionScheduleAddInvoiceItem!]!
}
enum SubscriptionSchedulePhaseConfigurationBillingCycleAnchor {
	AUTOMATIC
	PHASE_START
}
enum SubscriptionSchedulePhaseConfigurationCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
enum SubscriptionSchedulePhaseConfigurationProrationBehavior {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
enum SubscriptionScheduleStatus {
	ACTIVE
	CANCELED
	COMPLETED
	NOT_STARTED
	RELEASED
}
union SubscriptionScheduleUnion = SubscriptionSchedule
type SubscriptionSchedulesResourceDefaultSettings {
	transferData: SubscriptionTransferDataUnion
	onBehalfOf: AccountUnion
	invoiceSettings: InvoiceSettingSubscriptionScheduleSettingUnion
	description: String
	defaultPaymentMethod: PaymentMethodUnion
	collectionMethod: SubscriptionSchedulesResourceDefaultSettingsCollectionMethod
	billingThresholds: SubscriptionBillingThresholdsUnion
	billingCycleAnchor: SubscriptionSchedulesResourceDefaultSettingsBillingCycleAnchor!
	automaticTax: SubscriptionSchedulesResourceDefaultSettingsAutomaticTax!
	applicationFeePercent: Float
}
type SubscriptionSchedulesResourceDefaultSettingsAutomaticTax {
	enabled: Boolean!
}
enum SubscriptionSchedulesResourceDefaultSettingsBillingCycleAnchor {
	AUTOMATIC
	PHASE_START
}
enum SubscriptionSchedulesResourceDefaultSettingsCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
enum SubscriptionStatus {
	ACTIVE
	CANCELED
	INCOMPLETE
	INCOMPLETE_EXPIRED
	PAST_DUE
	PAUSED
	TRIALING
	UNPAID
}
type SubscriptionTransferData {
	destination: AccountUnion!
	amountPercent: Float
}
union SubscriptionTransferDataUnion = SubscriptionTransferData
union SubscriptionUnion = Subscription
type SubscriptionsResourcePauseCollection {
	resumesAt: Int
	behavior: SubscriptionsResourcePauseCollectionBehavior!
}
enum SubscriptionsResourcePauseCollectionBehavior {
	KEEP_AS_DRAFT
	MARK_UNCOLLECTIBLE
	VOID
}
union SubscriptionsResourcePauseCollectionUnion = SubscriptionsResourcePauseCollection
type SubscriptionsResourcePaymentMethodOptions {
	usBankAccount: InvoicePaymentMethodOptionsUsBankAccountUnion
	konbini: Union
	customerBalance: InvoicePaymentMethodOptionsCustomerBalanceUnion
	card: SubscriptionPaymentMethodOptionsCardUnion
	bancontact: InvoicePaymentMethodOptionsBancontactUnion
	acssDebit: InvoicePaymentMethodOptionsAcssDebitUnion
}
union SubscriptionsResourcePaymentMethodOptionsUnion = SubscriptionsResourcePaymentMethodOptions
type SubscriptionsResourcePaymentSettings {
	saveDefaultPaymentMethod: SubscriptionsResourcePaymentSettingsSaveDefaultPaymentMethod
	paymentMethodTypes: [SubscriptionsResourcePaymentSettingsPaymentMethodTypes!]
	paymentMethodOptions: SubscriptionsResourcePaymentMethodOptionsUnion
}
enum SubscriptionsResourcePaymentSettingsPaymentMethodTypes {
	ACH_CREDIT_TRANSFER
	ACH_DEBIT
	ACSS_DEBIT
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BOLETO
	CARD
	CUSTOMER_BALANCE
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KONBINI
	LINK
	PAYNOW
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
enum SubscriptionsResourcePaymentSettingsSaveDefaultPaymentMethod {
	OFF
	ON_SUBSCRIPTION
}
union SubscriptionsResourcePaymentSettingsUnion = SubscriptionsResourcePaymentSettings
type SubscriptionsResourcePendingUpdate {
	trialFromPlan: Boolean
	trialEnd: Int
	subscriptionItems: [SubscriptionItem!]
	expiresAt: Int!
	billingCycleAnchor: Int
}
union SubscriptionsResourcePendingUpdateUnion = SubscriptionsResourcePendingUpdate
type SubscriptionsTrialsResourceEndBehavior {
	missingPaymentMethod: SubscriptionsTrialsResourceEndBehaviorMissingPaymentMethod!
}
enum SubscriptionsTrialsResourceEndBehaviorMissingPaymentMethod {
	CANCEL
	CREATE_INVOICE
	PAUSE
}
type SubscriptionsTrialsResourceTrialSettings {
	endBehavior: SubscriptionsTrialsResourceEndBehavior!
}
union SubscriptionsTrialsResourceTrialSettingsUnion = SubscriptionsTrialsResourceTrialSettings
type TaxCode {
	object: TaxCodeObject!
	name: String!
	id: String!
	description: String!
}
enum TaxCodeObject {
	TAX_CODE
}
union TaxCodeUnion = TaxCode
type TaxDeductedAtSource {
	taxDeductionAccountNumber: String!
	periodStart: Int!
	periodEnd: Int!
	object: TaxDeductedAtSourceObject!
	id: String!
}
enum TaxDeductedAtSourceObject {
	TAX_DEDUCTED_AT_SOURCE
}
type TaxId {
	verification: TaxIdVerificationUnion
	value: String!
	type: TaxIdType!
	object: TaxIdObject!
	livemode: Boolean!
	id: String!
	customer: CustomerUnion
	created: Int!
	country: String
}
enum TaxIdObject {
	TAX_ID
}
enum TaxIdType {
	AE_TRN
	AU_ABN
	AU_ARN
	BG_UIC
	BR_CNPJ
	BR_CPF
	CA_BN
	CA_GST_HST
	CA_PST_BC
	CA_PST_MB
	CA_PST_SK
	CA_QST
	CH_VAT
	CL_TIN
	EG_TIN
	ES_CIF
	EU_OSS_VAT
	EU_VAT
	GB_VAT
	GE_VAT
	HK_BR
	HU_TIN
	ID_NPWP
	IL_VAT
	IN_GST
	IS_VAT
	JP_CN
	JP_RN
	JP_TRN
	KE_PIN
	KR_BRN
	LI_UID
	MX_RFC
	MY_FRP
	MY_ITN
	MY_SST
	NO_VAT
	NZ_GST
	PH_TIN
	RU_INN
	RU_KPP
	SA_VAT
	SG_GST
	SG_UEN
	SI_TIN
	TH_VAT
	TR_TIN
	TW_VAT
	UA_VAT
	UNKNOWN
	US_EIN
	ZA_VAT
}
type TaxIdVerification {
	verifiedName: String
	verifiedAddress: String
	status: TaxIdVerificationStatus!
}
enum TaxIdVerificationStatus {
	PENDING
	UNAVAILABLE
	UNVERIFIED
	VERIFIED
}
union TaxIdVerificationUnion = TaxIdVerification
type TaxRate {
	taxType: TaxRateTaxType
	state: String
	percentage: Float!
	object: TaxRateObject!
	metadata: JSON!
	livemode: Boolean!
	jurisdiction: String
	inclusive: Boolean!
	id: String!
	displayName: String!
	description: String
	created: Int!
	country: String
	active: Boolean!
}
enum TaxRateObject {
	TAX_RATE
}
enum TaxRateTaxType {
	GST
	HST
	JCT
	PST
	QST
	RST
	SALES_TAX
	VAT
}
union TaxRateUnion = TaxRate
type TerminalConfiguration {
	verifoneP400: TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig!
	tipping: TerminalConfigurationConfigurationResourceTipping!
	object: TerminalConfigurationObject!
	livemode: Boolean!
	isAccountDefault: Boolean
	id: String!
	bbposWiseposE: TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig!
}
type TerminalConfigurationConfigurationResourceCurrencySpecificConfig {
	smartTipThreshold: Int!
	percentages: [Int!]
	fixedAmounts: [Int!]
}
type TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig {
	splashscreen: FileUnion!
}
type TerminalConfigurationConfigurationResourceTipping {
	usd: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	sgd: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	sek: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	nzd: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	nok: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	myr: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	hkd: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	gbp: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	eur: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	dkk: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	czk: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	chf: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	cad: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	aud: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
}
enum TerminalConfigurationObject {
	TERMINAL_CONFIGURATION
}
type TerminalConnectionToken {
	secret: String!
	object: TerminalConnectionTokenObject!
	location: String!
}
enum TerminalConnectionTokenObject {
	TERMINAL_CONNECTION_TOKEN
}
type TerminalLocation {
	object: TerminalLocationObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	displayName: String!
	configurationOverrides: String!
	address: Address!
}
enum TerminalLocationObject {
	TERMINAL_LOCATION
}
union TerminalLocationUnion = TerminalLocation
type TerminalReader {
	status: String
	serialNumber: String!
	object: TerminalReaderObject!
	metadata: JSON!
	location: TerminalLocationUnion
	livemode: Boolean!
	label: String!
	ipAddress: String
	id: String!
	deviceType: TerminalReaderDeviceType!
	deviceSwVersion: String
	action: TerminalReaderReaderResourceReaderActionUnion
}
enum TerminalReaderDeviceType {
	BBPOS_CHIPPER_2X
	BBPOS_WISEPAD_3
	BBPOS_WISEPOS_E
	SIMULATED_WISEPOS_E
	STRIPE_M_2
	VERIFONE_P400
}
enum TerminalReaderObject {
	TERMINAL_READER
}
type TerminalReaderReaderResourceCart {
	total: Int!
	tax: Int
	lineItems: [TerminalReaderReaderResourceLineItem!]!
	currency: String!
}
union TerminalReaderReaderResourceCartUnion = TerminalReaderReaderResourceCart
type TerminalReaderReaderResourceLineItem {
	quantity: Int!
	description: String!
	amount: Int!
}
type TerminalReaderReaderResourceProcessConfig {
	tipping: TerminalReaderReaderResourceTippingConfig!
	skipTipping: Boolean!
}
type TerminalReaderReaderResourceProcessPaymentIntentAction {
	processConfig: TerminalReaderReaderResourceProcessConfig!
	paymentIntent: PaymentIntentUnion!
}
type TerminalReaderReaderResourceProcessSetupIntentAction {
	setupIntent: SetupIntentUnion!
	generatedCard: String!
}
type TerminalReaderReaderResourceReaderAction {
	type: TerminalReaderReaderResourceReaderActionType!
	status: TerminalReaderReaderResourceReaderActionStatus!
	setReaderDisplay: TerminalReaderReaderResourceSetReaderDisplayAction!
	processSetupIntent: TerminalReaderReaderResourceProcessSetupIntentAction!
	processPaymentIntent: TerminalReaderReaderResourceProcessPaymentIntentAction!
	failureMessage: String
	failureCode: String
}
enum TerminalReaderReaderResourceReaderActionStatus {
	FAILED
	IN_PROGRESS
	SUCCEEDED
}
enum TerminalReaderReaderResourceReaderActionType {
	PROCESS_PAYMENT_INTENT
	PROCESS_SETUP_INTENT
	SET_READER_DISPLAY
}
union TerminalReaderReaderResourceReaderActionUnion = TerminalReaderReaderResourceReaderAction
type TerminalReaderReaderResourceSetReaderDisplayAction {
	type: TerminalReaderReaderResourceSetReaderDisplayActionType!
	cart: TerminalReaderReaderResourceCartUnion
}
enum TerminalReaderReaderResourceSetReaderDisplayActionType {
	CART
}
type TerminalReaderReaderResourceTippingConfig {
	amountEligible: Int!
}
type TestHelpersTestClock {
	status: TestHelpersTestClockStatus!
	object: TestHelpersTestClockObject!
	name: String
	livemode: Boolean!
	id: String!
	frozenTime: Int!
	deletesAfter: Int!
	created: Int!
}
enum TestHelpersTestClockObject {
	TEST_HELPERS_TEST_CLOCK
}
enum TestHelpersTestClockStatus {
	ADVANCING
	INTERNAL_FAILURE
	READY
}
union TestHelpersTestClockUnion = TestHelpersTestClock
type ThreeDSecureDetails {
	version: ThreeDSecureDetailsVersion
	resultReason: ThreeDSecureDetailsResultReason
	result: ThreeDSecureDetailsResult
	authenticationFlow: ThreeDSecureDetailsAuthenticationFlow
}
enum ThreeDSecureDetailsAuthenticationFlow {
	CHALLENGE
	FRICTIONLESS
}
enum ThreeDSecureDetailsResult {
	ATTEMPT_ACKNOWLEDGED
	AUTHENTICATED
	EXEMPTED
	FAILED
	NOT_SUPPORTED
	PROCESSING_ERROR
}
enum ThreeDSecureDetailsResultReason {
	ABANDONED
	BYPASSED
	CANCELED
	CARD_NOT_ENROLLED
	NETWORK_NOT_SUPPORTED
	PROTOCOL_ERROR
	REJECTED
}
union ThreeDSecureDetailsUnion = ThreeDSecureDetails
enum ThreeDSecureDetailsVersion {
	1_0_2
	2_1_0
	2_2_0
}
type ThreeDSecureUsage {
	supported: Boolean!
}
union ThreeDSecureUsageUnion = ThreeDSecureUsage
type Token {
	used: Boolean!
	type: String!
	object: TokenObject!
	livemode: Boolean!
	id: String!
	created: Int!
	clientIp: String
	card: Card!
	bankAccount: BankAccount!
}
enum TokenObject {
	TOKEN
}
type Topup {
	transferGroup: String
	status: TopupStatus!
	statementDescriptor: String
	source: SourceUnion
	object: TopupObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	failureMessage: String
	failureCode: String
	expectedAvailabilityDate: Int
	description: String
	currency: String!
	created: Int!
	balanceTransaction: BalanceTransactionUnion
	amount: Int!
}
enum TopupObject {
	TOPUP
}
enum TopupStatus {
	CANCELED
	FAILED
	PENDING
	REVERSED
	SUCCEEDED
}
type Transfer {
	transferGroup: String
	sourceType: String!
	sourceTransaction: ChargeUnion
	reversed: Boolean!
	reversals: TransferReversals!
	object: TransferObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	destinationPayment: ChargeUnion!
	destination: AccountUnion
	description: String
	currency: String!
	created: Int!
	balanceTransaction: BalanceTransactionUnion
	amountReversed: Int!
	amount: Int!
}
type TransferData {
	destination: AccountUnion!
	amount: Int!
}
union TransferDataUnion = TransferData
enum TransferObject {
	TRANSFER
}
enum TransferObjectReversals {
	LIST
}
type TransferReversal {
	transfer: TransferUnion!
	sourceRefund: RefundUnion
	object: TransferReversalObject!
	metadata: JSON!
	id: String!
	destinationPaymentRefund: RefundUnion
	currency: String!
	created: Int!
	balanceTransaction: BalanceTransactionUnion
	amount: Int!
}
enum TransferReversalObject {
	TRANSFER_REVERSAL
}
union TransferReversalOrTransferOrTopupOrTaxDeductedAtSourceOrReserveTransactionOrRefundOrPlatformTaxFeeOrPayoutOrIssuingTransactionOrIssuingDisputeOrIssuingAuthorizationOrFeeRefundOrDisputeOrConnectCollectionTransferOrChargeOrApplicationFeeUnion = TransferReversal | Transfer | Topup | TaxDeductedAtSource | ReserveTransaction | Refund | PlatformTaxFee | Payout | IssuingTransaction | IssuingDispute | IssuingAuthorization | FeeRefund | Dispute | ConnectCollectionTransfer | Charge | ApplicationFee
union TransferReversalUnion = TransferReversal
type TransferReversals {
	url: String!
	object: TransferObjectReversals!
	hasMore: Boolean!
	data: [TransferReversal!]!
}
type TransferSchedule {
	weeklyAnchor: String!
	monthlyAnchor: Int!
	interval: String!
	delayDays: Int!
}
union TransferUnion = Transfer
type TransformQuantity {
	round: TransformQuantityRound!
	divideBy: Int!
}
enum TransformQuantityRound {
	DOWN
	UP
}
union TransformQuantityUnion = TransformQuantity
type TransformUsage {
	round: TransformUsageRound!
	divideBy: Int!
}
enum TransformUsageRound {
	DOWN
	UP
}
union TransformUsageUnion = TransformUsage
type TreasuryCreditReversal {
	transaction: TreasuryTransactionUnion
	statusTransitions: TreasuryReceivedCreditsResourceStatusTransitions!
	status: TreasuryCreditReversalStatus!
	receivedCredit: String!
	object: TreasuryCreditReversalObject!
	network: TreasuryCreditReversalNetwork!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String!
	currency: String!
	created: Int!
	amount: Int!
}
enum TreasuryCreditReversalNetwork {
	ACH
	STRIPE
}
enum TreasuryCreditReversalObject {
	TREASURY_CREDIT_REVERSAL
}
enum TreasuryCreditReversalStatus {
	CANCELED
	POSTED
	PROCESSING
}
type TreasuryDebitReversal {
	transaction: TreasuryTransactionUnion
	statusTransitions: TreasuryReceivedDebitsResourceStatusTransitions!
	status: TreasuryDebitReversalStatus!
	receivedDebit: String!
	object: TreasuryDebitReversalObject!
	network: TreasuryDebitReversalNetwork!
	metadata: JSON!
	livemode: Boolean!
	linkedFlows: TreasuryReceivedDebitsResourceDebitReversalLinkedFlowsUnion
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String
	currency: String!
	created: Int!
	amount: Int!
}
enum TreasuryDebitReversalNetwork {
	ACH
	CARD
}
enum TreasuryDebitReversalObject {
	TREASURY_DEBIT_REVERSAL
}
enum TreasuryDebitReversalStatus {
	FAILED
	PROCESSING
	SUCCEEDED
}
type TreasuryFinancialAccount {
	supportedCurrencies: [String!]!
	statusDetails: TreasuryFinancialAccountsResourceStatusDetails!
	status: TreasuryFinancialAccountStatus!
	restrictedFeatures: [TreasuryFinancialAccountRestrictedFeatures!]!
	platformRestrictions: TreasuryFinancialAccountsResourcePlatformRestrictionsUnion
	pendingFeatures: [TreasuryFinancialAccountPendingFeatures!]!
	object: TreasuryFinancialAccountObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	financialAddresses: [TreasuryFinancialAccountsResourceFinancialAddress!]!
	features: TreasuryFinancialAccountFeatures!
	created: Int!
	country: String!
	balance: TreasuryFinancialAccountsResourceBalance!
	activeFeatures: [TreasuryFinancialAccountActiveFeatures!]!
}
enum TreasuryFinancialAccountActiveFeatures {
	CARD_ISSUING
	DEPOSIT_INSURANCE
	FINANCIAL_ADDRESSES_ABA
	INBOUND_TRANSFERS_ACH
	INTRA_STRIPE_FLOWS
	OUTBOUND_PAYMENTS_ACH
	OUTBOUND_PAYMENTS_US_DOMESTIC_WIRE
	OUTBOUND_TRANSFERS_ACH
	OUTBOUND_TRANSFERS_US_DOMESTIC_WIRE
	REMOTE_DEPOSIT_CAPTURE
}
type TreasuryFinancialAccountFeatures {
	outboundTransfers: TreasuryFinancialAccountsResourceOutboundTransfers!
	outboundPayments: TreasuryFinancialAccountsResourceOutboundPayments!
	object: TreasuryFinancialAccountFeaturesObject!
	intraStripeFlows: TreasuryFinancialAccountsResourceToggleSettings!
	inboundTransfers: TreasuryFinancialAccountsResourceInboundTransfers!
	financialAddresses: TreasuryFinancialAccountsResourceFinancialAddressesFeatures!
	depositInsurance: TreasuryFinancialAccountsResourceToggleSettings!
	cardIssuing: TreasuryFinancialAccountsResourceToggleSettings!
}
enum TreasuryFinancialAccountFeaturesObject {
	TREASURY_FINANCIAL_ACCOUNT_FEATURES
}
enum TreasuryFinancialAccountObject {
	TREASURY_FINANCIAL_ACCOUNT
}
enum TreasuryFinancialAccountPendingFeatures {
	CARD_ISSUING
	DEPOSIT_INSURANCE
	FINANCIAL_ADDRESSES_ABA
	INBOUND_TRANSFERS_ACH
	INTRA_STRIPE_FLOWS
	OUTBOUND_PAYMENTS_ACH
	OUTBOUND_PAYMENTS_US_DOMESTIC_WIRE
	OUTBOUND_TRANSFERS_ACH
	OUTBOUND_TRANSFERS_US_DOMESTIC_WIRE
	REMOTE_DEPOSIT_CAPTURE
}
enum TreasuryFinancialAccountRestrictedFeatures {
	CARD_ISSUING
	DEPOSIT_INSURANCE
	FINANCIAL_ADDRESSES_ABA
	INBOUND_TRANSFERS_ACH
	INTRA_STRIPE_FLOWS
	OUTBOUND_PAYMENTS_ACH
	OUTBOUND_PAYMENTS_US_DOMESTIC_WIRE
	OUTBOUND_TRANSFERS_ACH
	OUTBOUND_TRANSFERS_US_DOMESTIC_WIRE
	REMOTE_DEPOSIT_CAPTURE
}
enum TreasuryFinancialAccountStatus {
	CLOSED
	OPEN
}
type TreasuryFinancialAccountsResourceAbaRecord {
	routingNumber: String!
	bankName: String!
	accountNumberLast4: String!
	accountNumber: String
	accountHolderName: String!
}
type TreasuryFinancialAccountsResourceAchToggleSettings {
	statusDetails: [TreasuryFinancialAccountsResourceTogglesSettingStatusDetails!]!
	status: TreasuryFinancialAccountsResourceAchToggleSettingsStatus!
	requested: Boolean!
}
enum TreasuryFinancialAccountsResourceAchToggleSettingsStatus {
	ACTIVE
	PENDING
	RESTRICTED
}
type TreasuryFinancialAccountsResourceBalance {
	outboundPending: JSON!
	inboundPending: JSON!
	cash: JSON!
}
type TreasuryFinancialAccountsResourceClosedStatusDetails {
	reasons: [TreasuryFinancialAccountsResourceClosedStatusDetailsReasons!]!
}
enum TreasuryFinancialAccountsResourceClosedStatusDetailsReasons {
	ACCOUNT_REJECTED
	CLOSED_BY_PLATFORM
	OTHER
}
union TreasuryFinancialAccountsResourceClosedStatusDetailsUnion = TreasuryFinancialAccountsResourceClosedStatusDetails
type TreasuryFinancialAccountsResourceFinancialAddress {
	type: TreasuryFinancialAccountsResourceFinancialAddressType!
	supportedNetworks: [TreasuryFinancialAccountsResourceFinancialAddressSupportedNetworks!]!
	aba: TreasuryFinancialAccountsResourceAbaRecord!
}
enum TreasuryFinancialAccountsResourceFinancialAddressSupportedNetworks {
	ACH
	US_DOMESTIC_WIRE
}
enum TreasuryFinancialAccountsResourceFinancialAddressType {
	ABA
}
type TreasuryFinancialAccountsResourceFinancialAddressesFeatures {
	aba: TreasuryFinancialAccountsResourceToggleSettings!
}
type TreasuryFinancialAccountsResourceInboundTransfers {
	ach: TreasuryFinancialAccountsResourceAchToggleSettings!
}
type TreasuryFinancialAccountsResourceOutboundPayments {
	usDomesticWire: TreasuryFinancialAccountsResourceToggleSettings!
	ach: TreasuryFinancialAccountsResourceAchToggleSettings!
}
type TreasuryFinancialAccountsResourceOutboundTransfers {
	usDomesticWire: TreasuryFinancialAccountsResourceToggleSettings!
	ach: TreasuryFinancialAccountsResourceAchToggleSettings!
}
type TreasuryFinancialAccountsResourcePlatformRestrictions {
	outboundFlows: TreasuryFinancialAccountsResourcePlatformRestrictionsOutboundFlows
	inboundFlows: TreasuryFinancialAccountsResourcePlatformRestrictionsInboundFlows
}
enum TreasuryFinancialAccountsResourcePlatformRestrictionsInboundFlows {
	RESTRICTED
	UNRESTRICTED
}
enum TreasuryFinancialAccountsResourcePlatformRestrictionsOutboundFlows {
	RESTRICTED
	UNRESTRICTED
}
union TreasuryFinancialAccountsResourcePlatformRestrictionsUnion = TreasuryFinancialAccountsResourcePlatformRestrictions
type TreasuryFinancialAccountsResourceStatusDetails {
	closed: TreasuryFinancialAccountsResourceClosedStatusDetailsUnion
}
type TreasuryFinancialAccountsResourceToggleSettings {
	statusDetails: [TreasuryFinancialAccountsResourceTogglesSettingStatusDetails!]!
	status: TreasuryFinancialAccountsResourceToggleSettingsStatus!
	requested: Boolean!
}
enum TreasuryFinancialAccountsResourceToggleSettingsStatus {
	ACTIVE
	PENDING
	RESTRICTED
}
type TreasuryFinancialAccountsResourceTogglesSettingStatusDetails {
	restriction: TreasuryFinancialAccountsResourceTogglesSettingStatusDetailsRestriction!
	resolution: TreasuryFinancialAccountsResourceTogglesSettingStatusDetailsResolution
	code: TreasuryFinancialAccountsResourceTogglesSettingStatusDetailsCode!
}
enum TreasuryFinancialAccountsResourceTogglesSettingStatusDetailsCode {
	ACTIVATING
	CAPABILITY_NOT_REQUESTED
	FINANCIAL_ACCOUNT_CLOSED
	REJECTED_OTHER
	REJECTED_UNSUPPORTED_BUSINESS
	REQUIREMENTS_PAST_DUE
	REQUIREMENTS_PENDING_VERIFICATION
	RESTRICTED_BY_PLATFORM
	RESTRICTED_OTHER
}
enum TreasuryFinancialAccountsResourceTogglesSettingStatusDetailsResolution {
	CONTACT_STRIPE
	PROVIDE_INFORMATION
	REMOVE_RESTRICTION
}
enum TreasuryFinancialAccountsResourceTogglesSettingStatusDetailsRestriction {
	INBOUND_FLOWS
	OUTBOUND_FLOWS
}
type TreasuryInboundTransfer {
	transaction: TreasuryTransactionUnion
	statusTransitions: TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions!
	status: TreasuryInboundTransferStatus!
	statementDescriptor: String!
	returned: Boolean
	originPaymentMethodDetails: InboundTransfersUnion
	originPaymentMethod: String!
	object: TreasuryInboundTransferObject!
	metadata: JSON!
	livemode: Boolean!
	linkedFlows: TreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows!
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String!
	failureDetails: TreasuryInboundTransfersResourceFailureDetailsUnion
	description: String
	currency: String!
	created: Int!
	cancelable: Boolean!
	amount: Int!
}
enum TreasuryInboundTransferObject {
	TREASURY_INBOUND_TRANSFER
}
enum TreasuryInboundTransferStatus {
	CANCELED
	FAILED
	PROCESSING
	SUCCEEDED
}
type TreasuryInboundTransfersResourceFailureDetails {
	code: TreasuryInboundTransfersResourceFailureDetailsCode!
}
enum TreasuryInboundTransfersResourceFailureDetailsCode {
	ACCOUNT_CLOSED
	ACCOUNT_FROZEN
	BANK_ACCOUNT_RESTRICTED
	BANK_OWNERSHIP_CHANGED
	DEBIT_NOT_AUTHORIZED
	INCORRECT_ACCOUNT_HOLDER_ADDRESS
	INCORRECT_ACCOUNT_HOLDER_NAME
	INCORRECT_ACCOUNT_HOLDER_TAX_ID
	INSUFFICIENT_FUNDS
	INVALID_ACCOUNT_NUMBER
	INVALID_CURRENCY
	NO_ACCOUNT
	OTHER
}
union TreasuryInboundTransfersResourceFailureDetailsUnion = TreasuryInboundTransfersResourceFailureDetails
type TreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows {
	receivedDebit: String
}
type TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions {
	succeededAt: Int
	failedAt: Int
	canceledAt: Int
}
type TreasuryOutboundPayment {
	transaction: TreasuryTransactionUnion!
	statusTransitions: TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions!
	status: TreasuryOutboundPaymentStatus!
	statementDescriptor: String!
	returnedDetails: TreasuryOutboundPaymentsResourceReturnedStatusUnion
	object: TreasuryOutboundPaymentObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String!
	expectedArrivalDate: Int!
	endUserDetails: TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetailsUnion
	destinationPaymentMethodDetails: OutboundPaymentsPaymentMethodDetailsUnion
	destinationPaymentMethod: String
	description: String
	customer: String
	currency: String!
	created: Int!
	cancelable: Boolean!
	amount: Int!
}
enum TreasuryOutboundPaymentObject {
	TREASURY_OUTBOUND_PAYMENT
}
enum TreasuryOutboundPaymentStatus {
	CANCELED
	FAILED
	POSTED
	PROCESSING
	RETURNED
}
type TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetails {
	present: Boolean!
	ipAddress: String
}
union TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetailsUnion = TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetails
type TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions {
	returnedAt: Int
	postedAt: Int
	failedAt: Int
	canceledAt: Int
}
type TreasuryOutboundPaymentsResourceReturnedStatus {
	transaction: TreasuryTransactionUnion!
	code: TreasuryOutboundPaymentsResourceReturnedStatusCode!
}
enum TreasuryOutboundPaymentsResourceReturnedStatusCode {
	ACCOUNT_CLOSED
	ACCOUNT_FROZEN
	BANK_ACCOUNT_RESTRICTED
	BANK_OWNERSHIP_CHANGED
	DECLINED
	INCORRECT_ACCOUNT_HOLDER_NAME
	INVALID_ACCOUNT_NUMBER
	INVALID_CURRENCY
	NO_ACCOUNT
	OTHER
}
union TreasuryOutboundPaymentsResourceReturnedStatusUnion = TreasuryOutboundPaymentsResourceReturnedStatus
type TreasuryOutboundTransfer {
	transaction: TreasuryTransactionUnion!
	statusTransitions: TreasuryOutboundTransfersResourceStatusTransitions!
	status: TreasuryOutboundTransferStatus!
	statementDescriptor: String!
	returnedDetails: TreasuryOutboundTransfersResourceReturnedDetailsUnion
	object: TreasuryOutboundTransferObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String!
	expectedArrivalDate: Int!
	destinationPaymentMethodDetails: OutboundTransfersPaymentMethodDetails!
	destinationPaymentMethod: String
	description: String
	currency: String!
	created: Int!
	cancelable: Boolean!
	amount: Int!
}
enum TreasuryOutboundTransferObject {
	TREASURY_OUTBOUND_TRANSFER
}
enum TreasuryOutboundTransferStatus {
	CANCELED
	FAILED
	POSTED
	PROCESSING
	RETURNED
}
type TreasuryOutboundTransfersResourceReturnedDetails {
	transaction: TreasuryTransactionUnion!
	code: TreasuryOutboundTransfersResourceReturnedDetailsCode!
}
enum TreasuryOutboundTransfersResourceReturnedDetailsCode {
	ACCOUNT_CLOSED
	ACCOUNT_FROZEN
	BANK_ACCOUNT_RESTRICTED
	BANK_OWNERSHIP_CHANGED
	DECLINED
	INCORRECT_ACCOUNT_HOLDER_NAME
	INVALID_ACCOUNT_NUMBER
	INVALID_CURRENCY
	NO_ACCOUNT
	OTHER
}
union TreasuryOutboundTransfersResourceReturnedDetailsUnion = TreasuryOutboundTransfersResourceReturnedDetails
type TreasuryOutboundTransfersResourceStatusTransitions {
	returnedAt: Int
	postedAt: Int
	failedAt: Int
	canceledAt: Int
}
type TreasuryReceivedCredit {
	transaction: TreasuryTransactionUnion
	status: TreasuryReceivedCreditStatus!
	reversalDetails: TreasuryReceivedCreditsResourceReversalDetailsUnion
	object: TreasuryReceivedCreditObject!
	network: TreasuryReceivedCreditNetwork!
	livemode: Boolean!
	linkedFlows: TreasuryReceivedCreditsResourceLinkedFlows!
	initiatingPaymentMethodDetails: TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails!
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String
	failureCode: TreasuryReceivedCreditFailureCode
	description: String!
	currency: String!
	created: Int!
	amount: Int!
}
enum TreasuryReceivedCreditFailureCode {
	ACCOUNT_CLOSED
	ACCOUNT_FROZEN
	OTHER
}
enum TreasuryReceivedCreditNetwork {
	ACH
	CARD
	STRIPE
	US_DOMESTIC_WIRE
}
enum TreasuryReceivedCreditObject {
	TREASURY_RECEIVED_CREDIT
}
enum TreasuryReceivedCreditStatus {
	FAILED
	SUCCEEDED
}
type TreasuryReceivedCreditsResourceLinkedFlows {
	sourceFlowType: String
	sourceFlowDetails: TreasuryReceivedCreditsResourceSourceFlowsDetailsUnion
	sourceFlow: String
	issuingTransaction: String
	issuingAuthorization: String
	creditReversal: String
}
type TreasuryReceivedCreditsResourceReversalDetails {
	restrictedReason: TreasuryReceivedCreditsResourceReversalDetailsRestrictedReason
	deadline: Int
}
enum TreasuryReceivedCreditsResourceReversalDetailsRestrictedReason {
	ALREADY_REVERSED
	DEADLINE_PASSED
	NETWORK_RESTRICTED
	OTHER
	SOURCE_FLOW_RESTRICTED
}
union TreasuryReceivedCreditsResourceReversalDetailsUnion = TreasuryReceivedCreditsResourceReversalDetails
type TreasuryReceivedCreditsResourceSourceFlowsDetails {
	type: TreasuryReceivedCreditsResourceSourceFlowsDetailsType!
	payout: Payout!
	outboundPayment: TreasuryOutboundPayment!
	creditReversal: TreasuryCreditReversal!
}
enum TreasuryReceivedCreditsResourceSourceFlowsDetailsType {
	CREDIT_REVERSAL
	OTHER
	OUTBOUND_PAYMENT
	PAYOUT
}
union TreasuryReceivedCreditsResourceSourceFlowsDetailsUnion = TreasuryReceivedCreditsResourceSourceFlowsDetails
type TreasuryReceivedCreditsResourceStatusTransitions {
	postedAt: Int
}
type TreasuryReceivedDebit {
	transaction: TreasuryTransactionUnion
	status: TreasuryReceivedDebitStatus!
	reversalDetails: TreasuryReceivedDebitsResourceReversalDetailsUnion
	object: TreasuryReceivedDebitObject!
	network: TreasuryReceivedDebitNetwork!
	livemode: Boolean!
	linkedFlows: TreasuryReceivedDebitsResourceLinkedFlows!
	initiatingPaymentMethodDetails: TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails!
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String
	failureCode: TreasuryReceivedDebitFailureCode
	description: String!
	currency: String!
	created: Int!
	amount: Int!
}
enum TreasuryReceivedDebitFailureCode {
	ACCOUNT_CLOSED
	ACCOUNT_FROZEN
	INSUFFICIENT_FUNDS
	OTHER
}
enum TreasuryReceivedDebitNetwork {
	ACH
	CARD
	STRIPE
}
enum TreasuryReceivedDebitObject {
	TREASURY_RECEIVED_DEBIT
}
enum TreasuryReceivedDebitStatus {
	FAILED
	SUCCEEDED
}
type TreasuryReceivedDebitsResourceDebitReversalLinkedFlows {
	issuingDispute: String
}
union TreasuryReceivedDebitsResourceDebitReversalLinkedFlowsUnion = TreasuryReceivedDebitsResourceDebitReversalLinkedFlows
type TreasuryReceivedDebitsResourceLinkedFlows {
	issuingTransaction: String
	issuingAuthorization: String
	inboundTransfer: String
	debitReversal: String
}
type TreasuryReceivedDebitsResourceReversalDetails {
	restrictedReason: TreasuryReceivedDebitsResourceReversalDetailsRestrictedReason
	deadline: Int
}
enum TreasuryReceivedDebitsResourceReversalDetailsRestrictedReason {
	ALREADY_REVERSED
	DEADLINE_PASSED
	NETWORK_RESTRICTED
	OTHER
	SOURCE_FLOW_RESTRICTED
}
union TreasuryReceivedDebitsResourceReversalDetailsUnion = TreasuryReceivedDebitsResourceReversalDetails
type TreasuryReceivedDebitsResourceStatusTransitions {
	completedAt: Int
}
type TreasurySharedResourceBillingDetails {
	name: String
	email: String
	address: Address!
}
type TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails {
	usBankAccount: TreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccount!
	type: TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetailsType!
	issuingCard: String!
	financialAccount: ReceivedPaymentMethodDetailsFinancialAccount!
	billingDetails: TreasurySharedResourceBillingDetails!
	balance: TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetailsBalance!
}
enum TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetailsBalance {
	PAYMENTS
}
enum TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetailsType {
	BALANCE
	FINANCIAL_ACCOUNT
	ISSUING_CARD
	STRIPE
	US_BANK_ACCOUNT
}
type TreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccount {
	routingNumber: String
	last4: String
	bankName: String
}
type TreasuryTransaction {
	statusTransitions: TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions!
	status: TreasuryTransactionStatus!
	object: TreasuryTransactionObject!
	livemode: Boolean!
	id: String!
	flowType: TreasuryTransactionFlowType!
	flowDetails: TreasuryTransactionsResourceFlowDetailsUnion
	flow: String
	financialAccount: String!
	entries: TreasuryTransactionEntries
	description: String!
	currency: String!
	created: Int!
	balanceImpact: TreasuryTransactionsResourceBalanceImpact!
	amount: Int!
}
type TreasuryTransactionEntries {
	url: String!
	object: TreasuryTransactionObjectEntries!
	hasMore: Boolean!
	data: [TreasuryTransactionEntry!]!
}
type TreasuryTransactionEntry {
	type: TreasuryTransactionEntryType!
	transaction: TreasuryTransactionUnion!
	object: TreasuryTransactionEntryObject!
	livemode: Boolean!
	id: String!
	flowType: TreasuryTransactionEntryFlowType!
	flowDetails: TreasuryTransactionsResourceFlowDetailsUnion
	flow: String
	financialAccount: String!
	effectiveAt: Int!
	currency: String!
	created: Int!
	balanceImpact: TreasuryTransactionsResourceBalanceImpact!
}
enum TreasuryTransactionEntryFlowType {
	CREDIT_REVERSAL
	DEBIT_REVERSAL
	INBOUND_TRANSFER
	ISSUING_AUTHORIZATION
	OTHER
	OUTBOUND_PAYMENT
	OUTBOUND_TRANSFER
	RECEIVED_CREDIT
	RECEIVED_DEBIT
}
enum TreasuryTransactionEntryObject {
	TREASURY_TRANSACTION_ENTRY
}
enum TreasuryTransactionEntryType {
	CREDIT_REVERSAL
	CREDIT_REVERSAL_POSTING
	DEBIT_REVERSAL
	INBOUND_TRANSFER
	INBOUND_TRANSFER_RETURN
	ISSUING_AUTHORIZATION_HOLD
	ISSUING_AUTHORIZATION_RELEASE
	OTHER
	OUTBOUND_PAYMENT
	OUTBOUND_PAYMENT_CANCELLATION
	OUTBOUND_PAYMENT_FAILURE
	OUTBOUND_PAYMENT_POSTING
	OUTBOUND_PAYMENT_RETURN
	OUTBOUND_TRANSFER
	OUTBOUND_TRANSFER_CANCELLATION
	OUTBOUND_TRANSFER_FAILURE
	OUTBOUND_TRANSFER_POSTING
	OUTBOUND_TRANSFER_RETURN
	RECEIVED_CREDIT
	RECEIVED_DEBIT
}
enum TreasuryTransactionFlowType {
	CREDIT_REVERSAL
	DEBIT_REVERSAL
	INBOUND_TRANSFER
	ISSUING_AUTHORIZATION
	OTHER
	OUTBOUND_PAYMENT
	OUTBOUND_TRANSFER
	RECEIVED_CREDIT
	RECEIVED_DEBIT
}
enum TreasuryTransactionObject {
	TREASURY_TRANSACTION
}
enum TreasuryTransactionObjectEntries {
	LIST
}
enum TreasuryTransactionStatus {
	OPEN
	POSTED
	VOID
}
union TreasuryTransactionUnion = TreasuryTransaction
type TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions {
	voidAt: Int
	postedAt: Int
}
type TreasuryTransactionsResourceBalanceImpact {
	outboundPending: Int!
	inboundPending: Int!
	cash: Int!
}
type TreasuryTransactionsResourceFlowDetails {
	type: TreasuryTransactionsResourceFlowDetailsType!
	receivedDebit: TreasuryReceivedDebit!
	receivedCredit: TreasuryReceivedCredit!
	outboundTransfer: TreasuryOutboundTransfer!
	outboundPayment: TreasuryOutboundPayment!
	issuingAuthorization: IssuingAuthorization!
	inboundTransfer: TreasuryInboundTransfer!
	debitReversal: TreasuryDebitReversal!
	creditReversal: TreasuryCreditReversal!
}
enum TreasuryTransactionsResourceFlowDetailsType {
	CREDIT_REVERSAL
	DEBIT_REVERSAL
	INBOUND_TRANSFER
	ISSUING_AUTHORIZATION
	OTHER
	OUTBOUND_PAYMENT
	OUTBOUND_TRANSFER
	RECEIVED_CREDIT
	RECEIVED_DEBIT
}
union TreasuryTransactionsResourceFlowDetailsUnion = TreasuryTransactionsResourceFlowDetails
union Union =
input UnionInput {
	int: Int
	postAccountsDelayDaysSchedulePayoutsSettings: PostAccountsDelayDaysSchedulePayoutsSettings
}
type UsBankAccountNetworks {
	supported: [UsBankAccountNetworksSupported!]!
	preferred: String
}
enum UsBankAccountNetworksSupported {
	ACH
	US_DOMESTIC_WIRE
}
union UsBankAccountNetworksUnion = UsBankAccountNetworks
type UsageRecord {
	timestamp: Int!
	subscriptionItem: String!
	quantity: Int!
	object: UsageRecordObject!
	livemode: Boolean!
	id: String!
}
enum UsageRecordObject {
	USAGE_RECORD
}
type UsageRecordSummary {
	totalUsage: Int!
	subscriptionItem: String!
	period: Period!
	object: UsageRecordSummaryObject!
	livemode: Boolean!
	invoice: String
	id: String!
}
enum UsageRecordSummaryObject {
	USAGE_RECORD_SUMMARY
}
type VerificationSessionRedaction {
	status: VerificationSessionRedactionStatus!
}
enum VerificationSessionRedactionStatus {
	PROCESSING
	REDACTED
}
union VerificationSessionRedactionUnion = VerificationSessionRedaction
type WebhookEndpoint {
	url: String!
	status: String!
	secret: String!
	object: WebhookEndpointObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	enabledEvents: [String!]!
	description: String
	created: Int!
	application: String
	apiVersion: String
}
enum WebhookEndpointObject {
	WEBHOOK_ENDPOINT
}
schema {
	query: Query
	mutation: Mutation
}


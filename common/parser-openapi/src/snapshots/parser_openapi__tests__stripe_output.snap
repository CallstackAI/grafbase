---
source: common/parser-openapi/src/lib.rs
expression: registry.export_sdl(false)
---
type Account {
	type: AccountType!
	tosAcceptance: AccountTosAcceptance!
	settings: AccountSettingsUnion
	requirements: AccountRequirements!
	payoutsEnabled: Boolean!
	object: AccountObject!
	metadata: JSON!
	individual: Person!
	id: String!
	futureRequirements: AccountFutureRequirements!
	externalAccounts: AccountExternalAccounts!
	email: String
	detailsSubmitted: Boolean!
	defaultCurrency: String!
	created: Int!
	country: String!
	controller: AccountUnificationAccountController!
	company: LegalEntityCompany!
	chargesEnabled: Boolean!
	capabilities: AccountCapabilities!
	businessType: AccountBusinessType
	businessProfile: AccountBusinessProfileUnion
}
type AccountBacsDebitPaymentsSettings {
	displayName: String!
}
type AccountBrandingSettings {
	secondaryColor: String
	primaryColor: String
	logo: FileUnion
	icon: FileUnion
}
type AccountBusinessProfile {
	url: String
	supportUrl: String
	supportPhone: String
	supportEmail: String
	supportAddress: AddressUnion
	productDescription: String
	name: String
	mcc: String
}
union AccountBusinessProfileUnion = AccountBusinessProfile
enum AccountBusinessType {
	company
	government_entity
	individual
	non_profit
}
type AccountCapabilities {
	usBankAccountAchPayments: AccountCapabilitiesUsBankAccountAchPayments!
	treasury: AccountCapabilitiesTreasury!
	transfers: AccountCapabilitiesTransfers!
	taxReportingUs1099Misc: AccountCapabilitiesTaxReportingUs1099Misc!
	taxReportingUs1099K: AccountCapabilitiesTaxReportingUs1099K!
	sofortPayments: AccountCapabilitiesSofortPayments!
	sepaDebitPayments: AccountCapabilitiesSepaDebitPayments!
	promptpayPayments: AccountCapabilitiesPromptpayPayments!
	paynowPayments: AccountCapabilitiesPaynowPayments!
	p24Payments: AccountCapabilitiesP24Payments!
	oxxoPayments: AccountCapabilitiesOxxoPayments!
	linkPayments: AccountCapabilitiesLinkPayments!
	legacyPayments: AccountCapabilitiesLegacyPayments!
	konbiniPayments: AccountCapabilitiesKonbiniPayments!
	klarnaPayments: AccountCapabilitiesKlarnaPayments!
	jcbPayments: AccountCapabilitiesJcbPayments!
	indiaInternationalPayments: AccountCapabilitiesIndiaInternationalPayments!
	idealPayments: AccountCapabilitiesIdealPayments!
	grabpayPayments: AccountCapabilitiesGrabpayPayments!
	giropayPayments: AccountCapabilitiesGiropayPayments!
	fpxPayments: AccountCapabilitiesFpxPayments!
	epsPayments: AccountCapabilitiesEpsPayments!
	cartesBancairesPayments: AccountCapabilitiesCartesBancairesPayments!
	cardPayments: AccountCapabilitiesCardPayments!
	cardIssuing: AccountCapabilitiesCardIssuing!
	boletoPayments: AccountCapabilitiesBoletoPayments!
	blikPayments: AccountCapabilitiesBlikPayments!
	bankTransferPayments: AccountCapabilitiesBankTransferPayments!
	bancontactPayments: AccountCapabilitiesBancontactPayments!
	bacsDebitPayments: AccountCapabilitiesBacsDebitPayments!
	auBecsDebitPayments: AccountCapabilitiesAuBecsDebitPayments!
	afterpayClearpayPayments: AccountCapabilitiesAfterpayClearpayPayments!
	affirmPayments: AccountCapabilitiesAffirmPayments!
	acssDebitPayments: AccountCapabilitiesAcssDebitPayments!
}
enum AccountCapabilitiesAcssDebitPayments {
	active
	inactive
	pending
}
enum AccountCapabilitiesAffirmPayments {
	active
	inactive
	pending
}
enum AccountCapabilitiesAfterpayClearpayPayments {
	active
	inactive
	pending
}
enum AccountCapabilitiesAuBecsDebitPayments {
	active
	inactive
	pending
}
enum AccountCapabilitiesBacsDebitPayments {
	active
	inactive
	pending
}
enum AccountCapabilitiesBancontactPayments {
	active
	inactive
	pending
}
enum AccountCapabilitiesBankTransferPayments {
	active
	inactive
	pending
}
enum AccountCapabilitiesBlikPayments {
	active
	inactive
	pending
}
enum AccountCapabilitiesBoletoPayments {
	active
	inactive
	pending
}
enum AccountCapabilitiesCardIssuing {
	active
	inactive
	pending
}
enum AccountCapabilitiesCardPayments {
	active
	inactive
	pending
}
enum AccountCapabilitiesCartesBancairesPayments {
	active
	inactive
	pending
}
enum AccountCapabilitiesEpsPayments {
	active
	inactive
	pending
}
enum AccountCapabilitiesFpxPayments {
	active
	inactive
	pending
}
enum AccountCapabilitiesGiropayPayments {
	active
	inactive
	pending
}
enum AccountCapabilitiesGrabpayPayments {
	active
	inactive
	pending
}
enum AccountCapabilitiesIdealPayments {
	active
	inactive
	pending
}
enum AccountCapabilitiesIndiaInternationalPayments {
	active
	inactive
	pending
}
enum AccountCapabilitiesJcbPayments {
	active
	inactive
	pending
}
enum AccountCapabilitiesKlarnaPayments {
	active
	inactive
	pending
}
enum AccountCapabilitiesKonbiniPayments {
	active
	inactive
	pending
}
enum AccountCapabilitiesLegacyPayments {
	active
	inactive
	pending
}
enum AccountCapabilitiesLinkPayments {
	active
	inactive
	pending
}
enum AccountCapabilitiesOxxoPayments {
	active
	inactive
	pending
}
enum AccountCapabilitiesP24Payments {
	active
	inactive
	pending
}
enum AccountCapabilitiesPaynowPayments {
	active
	inactive
	pending
}
enum AccountCapabilitiesPromptpayPayments {
	active
	inactive
	pending
}
enum AccountCapabilitiesSepaDebitPayments {
	active
	inactive
	pending
}
enum AccountCapabilitiesSofortPayments {
	active
	inactive
	pending
}
enum AccountCapabilitiesTaxReportingUs1099K {
	active
	inactive
	pending
}
enum AccountCapabilitiesTaxReportingUs1099Misc {
	active
	inactive
	pending
}
enum AccountCapabilitiesTransfers {
	active
	inactive
	pending
}
enum AccountCapabilitiesTreasury {
	active
	inactive
	pending
}
enum AccountCapabilitiesUsBankAccountAchPayments {
	active
	inactive
	pending
}
type AccountCapabilityFutureRequirements {
	pendingVerification: [String!]!
	pastDue: [String!]!
	eventuallyDue: [String!]!
	errors: [AccountRequirementsError!]!
	disabledReason: String
	currentlyDue: [String!]!
	currentDeadline: Int
	alternatives: [AccountRequirementsAlternative!]
}
type AccountCapabilityRequirements {
	pendingVerification: [String!]!
	pastDue: [String!]!
	eventuallyDue: [String!]!
	errors: [AccountRequirementsError!]!
	disabledReason: String
	currentlyDue: [String!]!
	currentDeadline: Int
	alternatives: [AccountRequirementsAlternative!]
}
type AccountCardIssuingSettings {
	tosAcceptance: CardIssuingAccountTermsOfService!
}
type AccountCardPaymentsSettings {
	statementDescriptorPrefixKanji: String
	statementDescriptorPrefixKana: String
	statementDescriptorPrefix: String
	declineOn: AccountDeclineChargeOn!
}
type AccountDashboardSettings {
	timezone: String
	displayName: String
}
type AccountDeclineChargeOn {
	cvcFailure: Boolean!
	avsFailure: Boolean!
}
type AccountExternalAccounts {
	url: String!
	object: AccountObjectExternalAccounts!
	hasMore: Boolean!
	data: [CardOrBankAccountUnion!]!
}
type AccountFutureRequirements {
	pendingVerification: [String!]
	pastDue: [String!]
	eventuallyDue: [String!]
	errors: [AccountRequirementsError!]
	disabledReason: String
	currentlyDue: [String!]
	currentDeadline: Int
	alternatives: [AccountRequirementsAlternative!]
}
enum AccountObject {
	account
}
enum AccountObjectExternalAccounts {
	list
}
type AccountPaymentsSettings {
	statementDescriptorPrefixKanji: String
	statementDescriptorPrefixKana: String
	statementDescriptorKanji: String
	statementDescriptorKana: String
	statementDescriptor: String
}
type AccountPayoutSettings {
	statementDescriptor: String
	schedule: TransferSchedule!
	debitNegativeBalances: Boolean!
}
type AccountRequirements {
	pendingVerification: [String!]
	pastDue: [String!]
	eventuallyDue: [String!]
	errors: [AccountRequirementsError!]
	disabledReason: String
	currentlyDue: [String!]
	currentDeadline: Int
	alternatives: [AccountRequirementsAlternative!]
}
type AccountRequirementsAlternative {
	originalFieldsDue: [String!]!
	alternativeFieldsDue: [String!]!
}
type AccountRequirementsError {
	requirement: String!
	reason: String!
	code: AccountRequirementsErrorCode!
}
enum AccountRequirementsErrorCode {
	invalid_address_city_state_postal_code
	invalid_dob_age_under_18
	invalid_representative_country
	invalid_street_address
	invalid_tos_acceptance
	invalid_value_other
	verification_document_address_mismatch
	verification_document_address_missing
	verification_document_corrupt
	verification_document_country_not_supported
	verification_document_dob_mismatch
	verification_document_duplicate_type
	verification_document_expired
	verification_document_failed_copy
	verification_document_failed_greyscale
	verification_document_failed_other
	verification_document_failed_test_mode
	verification_document_fraudulent
	verification_document_id_number_mismatch
	verification_document_id_number_missing
	verification_document_incomplete
	verification_document_invalid
	verification_document_issue_or_expiry_date_missing
	verification_document_manipulated
	verification_document_missing_back
	verification_document_missing_front
	verification_document_name_mismatch
	verification_document_name_missing
	verification_document_nationality_mismatch
	verification_document_not_readable
	verification_document_not_signed
	verification_document_not_uploaded
	verification_document_photo_mismatch
	verification_document_too_large
	verification_document_type_not_supported
	verification_failed_address_match
	verification_failed_business_iec_number
	verification_failed_document_match
	verification_failed_id_number_match
	verification_failed_keyed_identity
	verification_failed_keyed_match
	verification_failed_name_match
	verification_failed_other
	verification_failed_residential_address
	verification_failed_tax_id_match
	verification_failed_tax_id_not_issued
	verification_missing_executives
	verification_missing_owners
	verification_requires_additional_memorandum_of_associations
}
type AccountSepaDebitPaymentsSettings {
	creditorId: String!
}
type AccountSettings {
	treasury: AccountTreasurySettings!
	sepaDebitPayments: AccountSepaDebitPaymentsSettings!
	payouts: AccountPayoutSettings!
	payments: AccountPaymentsSettings!
	dashboard: AccountDashboardSettings!
	cardPayments: AccountCardPaymentsSettings!
	cardIssuing: AccountCardIssuingSettings!
	branding: AccountBrandingSettings!
	bacsDebitPayments: AccountBacsDebitPaymentsSettings!
}
union AccountSettingsUnion = AccountSettings
type AccountTermsOfService {
	userAgent: String!
	ip: String
	date: Int
}
type AccountTosAcceptance {
	userAgent: String
	serviceAgreement: String!
	ip: String
	date: Int
}
type AccountTreasurySettings {
	tosAcceptance: AccountTermsOfService!
}
enum AccountType {
	custom
	express
	standard
}
type AccountUnificationAccountController {
	type: AccountUnificationAccountControllerType!
	isController: Boolean!
}
enum AccountUnificationAccountControllerType {
	account
	application
}
union AccountUnion = Account
type Address {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
union AddressUnion = Address
type ApiErrors {
	type: ApiErrorsType!
	source: SourceOrCardOrBankAccountUnion!
	setupIntent: SetupIntent!
	requestLogUrl: String!
	paymentMethodType: String!
	paymentMethod: PaymentMethod!
	paymentIntent: PaymentIntent!
	param: String!
	message: String!
	docUrl: String!
	declineCode: String!
	code: String!
	charge: String!
}
enum ApiErrorsType {
	api_error
	card_error
	idempotency_error
	invalid_request_error
}
union ApiErrorsUnion = ApiErrors
type ApplePayDomain {
	object: ApplePayDomainObject!
	livemode: Boolean!
	id: String!
	domainName: String!
	created: Int!
}
enum ApplePayDomainObject {
	apple_pay_domain
}
type Application {
	object: ApplicationObject!
	name: String
	id: String!
}
type ApplicationFee {
	refunds: ApplicationFeeRefunds!
	refunded: Boolean!
	originatingTransaction: ChargeUnion
	object: ApplicationFeeObject!
	livemode: Boolean!
	id: String!
	currency: String!
	created: Int!
	charge: ChargeUnion!
	balanceTransaction: BalanceTransactionUnion
	application: ApplicationUnion!
	amountRefunded: Int!
	amount: Int!
	account: AccountUnion!
}
enum ApplicationFeeObject {
	application_fee
}
enum ApplicationFeeObjectRefunds {
	list
}
type ApplicationFeeRefunds {
	url: String!
	object: ApplicationFeeObjectRefunds!
	hasMore: Boolean!
	data: [FeeRefund!]!
}
union ApplicationFeeUnion = ApplicationFee
enum ApplicationObject {
	application
}
union ApplicationUnion = Application
type AppsSecret {
	scope: SecretServiceResourceScope!
	payload: String
	object: AppsSecretObject!
	name: String!
	livemode: Boolean!
	id: String!
	expiresAt: Int
	deleted: Boolean!
	created: Int!
}
enum AppsSecretObject {
	apps.secret
}
type AutomaticTax {
	status: AutomaticTaxStatus
	enabled: Boolean!
}
enum AutomaticTaxStatus {
	complete
	failed
	requires_location_inputs
}
type Balance {
	pending: [BalanceAmount!]!
	object: BalanceObject!
	livemode: Boolean!
	issuing: BalanceDetail!
	instantAvailable: [BalanceAmount!]!
	connectReserved: [BalanceAmount!]!
	available: [BalanceAmount!]!
}
type BalanceAmount {
	sourceTypes: BalanceAmountBySourceType!
	currency: String!
	amount: Int!
}
type BalanceAmountBySourceType {
	fpx: Int!
	card: Int!
	bankAccount: Int!
}
type BalanceDetail {
	available: [BalanceAmount!]!
}
enum BalanceObject {
	balance
}
type BalanceTransaction {
	type: BalanceTransactionType!
	status: String!
	source: TransferReversalOrTransferOrTopupOrTaxDeductedAtSourceOrReserveTransactionOrRefundOrPlatformTaxFeeOrPayoutOrIssuingTransactionOrIssuingDisputeOrIssuingAuthorizationOrFeeRefundOrDisputeOrConnectCollectionTransferOrChargeOrApplicationFeeUnion
	reportingCategory: String!
	object: BalanceTransactionObject!
	net: Int!
	id: String!
	feeDetails: [Fee!]!
	fee: Int!
	exchangeRate: Float
	description: String
	currency: String!
	created: Int!
	availableOn: Int!
	amount: Int!
}
enum BalanceTransactionObject {
	balance_transaction
}
enum BalanceTransactionType {
	adjustment
	advance
	advance_funding
	anticipation_repayment
	application_fee
	application_fee_refund
	charge
	connect_collection_transfer
	contribution
	issuing_authorization_hold
	issuing_authorization_release
	issuing_dispute
	issuing_transaction
	payment
	payment_failure_refund
	payment_refund
	payout
	payout_cancel
	payout_failure
	refund
	refund_failure
	reserve_transaction
	reserved_funds
	stripe_fee
	stripe_fx_fee
	tax_fee
	topup
	topup_reversal
	transfer
	transfer_cancel
	transfer_failure
	transfer_refund
}
union BalanceTransactionUnion = BalanceTransaction
type BankAccount {
	status: String!
	routingNumber: String
	object: BankAccountObject!
	metadata: JSON!
	last4: String!
	id: String!
	fingerprint: String
	defaultForCurrency: Boolean
	customer: DeletedCustomerOrCustomerUnion
	currency: String!
	country: String!
	bankName: String
	availablePayoutMethods: [BankAccountAvailablePayoutMethods!]
	accountType: String
	accountHolderType: String
	accountHolderName: String
	account: AccountUnion
}
enum BankAccountAvailablePayoutMethods {
	instant
	standard
}
enum BankAccountObject {
	bank_account
}
type BankConnectionsResourceAccountholder {
	type: BankConnectionsResourceAccountholderType!
	customer: CustomerUnion!
	account: AccountUnion!
}
enum BankConnectionsResourceAccountholderType {
	account
	customer
}
union BankConnectionsResourceAccountholderUnion = BankConnectionsResourceAccountholder
type BankConnectionsResourceBalance {
	type: BankConnectionsResourceBalanceType!
	current: JSON!
	credit: BankConnectionsResourceBalanceApiResourceCreditBalance!
	cash: BankConnectionsResourceBalanceApiResourceCashBalance!
	asOf: Int!
}
type BankConnectionsResourceBalanceApiResourceCashBalance {
	available: JSON!
}
type BankConnectionsResourceBalanceApiResourceCreditBalance {
	used: JSON!
}
type BankConnectionsResourceBalanceRefresh {
	status: BankConnectionsResourceBalanceRefreshStatus!
	lastAttemptedAt: Int!
}
enum BankConnectionsResourceBalanceRefreshStatus {
	failed
	pending
	succeeded
}
union BankConnectionsResourceBalanceRefreshUnion = BankConnectionsResourceBalanceRefresh
enum BankConnectionsResourceBalanceType {
	cash
	credit
}
union BankConnectionsResourceBalanceUnion = BankConnectionsResourceBalance
type BankConnectionsResourceLinkAccountSessionFilters {
	countries: [String!]
}
type BankConnectionsResourceOwnershipRefresh {
	status: BankConnectionsResourceOwnershipRefreshStatus!
	lastAttemptedAt: Int!
}
enum BankConnectionsResourceOwnershipRefreshStatus {
	failed
	pending
	succeeded
}
union BankConnectionsResourceOwnershipRefreshUnion = BankConnectionsResourceOwnershipRefresh
type BillingDetails {
	phone: String
	name: String
	email: String
	address: AddressUnion
}
type BillingPortalConfiguration {
	updated: Int!
	object: BillingPortalConfigurationObject!
	metadata: JSON!
	loginPage: PortalLoginPage!
	livemode: Boolean!
	isDefault: Boolean!
	id: String!
	features: PortalFeatures!
	defaultReturnUrl: String
	created: Int!
	businessProfile: PortalBusinessProfile!
	application: DeletedApplicationOrApplicationUnion
	active: Boolean!
}
enum BillingPortalConfigurationObject {
	billing_portal.configuration
}
type Capability {
	status: CapabilityStatus!
	requirements: AccountCapabilityRequirements!
	requestedAt: Int
	requested: Boolean!
	object: CapabilityObject!
	id: String!
	futureRequirements: AccountCapabilityFutureRequirements!
	account: AccountUnion!
}
enum CapabilityObject {
	capability
}
enum CapabilityStatus {
	active
	disabled
	inactive
	pending
	unrequested
}
type Card {
	tokenizationMethod: String
	status: String
	object: CardObject!
	name: String
	metadata: JSON!
	last4: String!
	id: String!
	funding: String!
	fingerprint: String
	expYear: Int!
	expMonth: Int!
	dynamicLast4: String
	defaultForCurrency: Boolean
	cvcCheck: String
	customer: DeletedCustomerOrCustomerUnion
	currency: String
	country: String
	brand: String!
	availablePayoutMethods: [CardAvailablePayoutMethods!]
	addressZipCheck: String
	addressZip: String
	addressState: String
	addressLine2: String
	addressLine1Check: String
	addressLine1: String
	addressCountry: String
	addressCity: String
	account: AccountUnion
}
enum CardAvailablePayoutMethods {
	instant
	standard
}
type CardGeneratedFromPaymentMethodDetails {
	type: String!
	cardPresent: PaymentMethodDetailsCardPresent!
}
union CardGeneratedFromPaymentMethodDetailsUnion = CardGeneratedFromPaymentMethodDetails
type CardIssuingAccountTermsOfService {
	userAgent: String!
	ip: String
	date: Int
}
enum CardObject {
	card
}
union CardOrBankAccountUnion = Card | BankAccount
type CashBalance {
	settings: CustomerBalanceCustomerBalanceSettings!
	object: CashBalanceObject!
	livemode: Boolean!
	customer: String!
	available: JSON!
}
enum CashBalanceObject {
	cash_balance
}
union CashBalanceUnion = CashBalance
type Charge {
	transferGroup: String
	transferData: ChargeTransferDataUnion
	transfer: TransferUnion!
	status: ChargeStatus!
	statementDescriptorSuffix: String
	statementDescriptor: String
	sourceTransfer: TransferUnion
	shipping: ShippingUnion
	review: ReviewUnion
	refunds: ChargeRefunds
	refunded: Boolean!
	receiptUrl: String
	receiptNumber: String
	receiptEmail: String
	radarOptions: RadarRadarOptions!
	paymentMethodDetails: PaymentMethodDetailsUnion
	paymentMethod: String
	paymentIntent: PaymentIntentUnion
	paid: Boolean!
	outcome: ChargeOutcomeUnion
	onBehalfOf: AccountUnion
	object: ChargeObject!
	metadata: JSON!
	livemode: Boolean!
	invoice: InvoiceUnion
	id: String!
	fraudDetails: ChargeFraudDetailsUnion
	failureMessage: String
	failureCode: String
	failureBalanceTransaction: BalanceTransactionUnion
	disputed: Boolean!
	description: String
	customer: DeletedCustomerOrCustomerUnion
	currency: String!
	created: Int!
	captured: Boolean!
	calculatedStatementDescriptor: String
	billingDetails: BillingDetails!
	balanceTransaction: BalanceTransactionUnion
	applicationFeeAmount: Int
	applicationFee: ApplicationFeeUnion
	application: ApplicationUnion
	amountRefunded: Int!
	amountCaptured: Int!
	amount: Int!
}
type ChargeFraudDetails {
	userReport: String!
	stripeReport: String!
}
union ChargeFraudDetailsUnion = ChargeFraudDetails
enum ChargeObject {
	charge
}
enum ChargeObjectRefunds {
	list
}
type ChargeOutcome {
	type: String!
	sellerMessage: String
	rule: RuleUnion!
	riskScore: Int!
	riskLevel: String!
	reason: String
	networkStatus: String
}
union ChargeOutcomeUnion = ChargeOutcome
type ChargeRefunds {
	url: String!
	object: ChargeObjectRefunds!
	hasMore: Boolean!
	data: [Refund!]!
}
enum ChargeStatus {
	failed
	pending
	succeeded
}
type ChargeTransferData {
	destination: AccountUnion!
	amount: Int
}
union ChargeTransferDataUnion = ChargeTransferData
union ChargeUnion = Charge
type CheckoutAcssDebitMandateOptions {
	transactionType: CheckoutAcssDebitMandateOptionsTransactionType
	paymentSchedule: CheckoutAcssDebitMandateOptionsPaymentSchedule
	intervalDescription: String
	defaultFor: [CheckoutAcssDebitMandateOptionsDefaultFor!]!
	customMandateUrl: String!
}
enum CheckoutAcssDebitMandateOptionsDefaultFor {
	invoice
	subscription
}
enum CheckoutAcssDebitMandateOptionsPaymentSchedule {
	combined
	interval
	sporadic
}
enum CheckoutAcssDebitMandateOptionsTransactionType {
	business
	personal
}
type CheckoutAcssDebitPaymentMethodOptions {
	verificationMethod: CheckoutAcssDebitPaymentMethodOptionsVerificationMethod!
	setupFutureUsage: CheckoutAcssDebitPaymentMethodOptionsSetupFutureUsage!
	mandateOptions: CheckoutAcssDebitMandateOptions!
	currency: CheckoutAcssDebitPaymentMethodOptionsCurrency!
}
enum CheckoutAcssDebitPaymentMethodOptionsCurrency {
	cad
	usd
}
enum CheckoutAcssDebitPaymentMethodOptionsSetupFutureUsage {
	none
	off_session
	on_session
}
enum CheckoutAcssDebitPaymentMethodOptionsVerificationMethod {
	automatic
	instant
	microdeposits
}
type CheckoutAffirmPaymentMethodOptions {
	setupFutureUsage: CheckoutAffirmPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutAffirmPaymentMethodOptionsSetupFutureUsage {
	none
}
type CheckoutAfterpayClearpayPaymentMethodOptions {
	setupFutureUsage: CheckoutAfterpayClearpayPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutAfterpayClearpayPaymentMethodOptionsSetupFutureUsage {
	none
}
type CheckoutAlipayPaymentMethodOptions {
	setupFutureUsage: CheckoutAlipayPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutAlipayPaymentMethodOptionsSetupFutureUsage {
	none
}
type CheckoutAuBecsDebitPaymentMethodOptions {
	setupFutureUsage: CheckoutAuBecsDebitPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutAuBecsDebitPaymentMethodOptionsSetupFutureUsage {
	none
}
type CheckoutBacsDebitPaymentMethodOptions {
	setupFutureUsage: CheckoutBacsDebitPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutBacsDebitPaymentMethodOptionsSetupFutureUsage {
	none
	off_session
	on_session
}
type CheckoutBancontactPaymentMethodOptions {
	setupFutureUsage: CheckoutBancontactPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutBancontactPaymentMethodOptionsSetupFutureUsage {
	none
}
type CheckoutBoletoPaymentMethodOptions {
	setupFutureUsage: CheckoutBoletoPaymentMethodOptionsSetupFutureUsage!
	expiresAfterDays: Int!
}
enum CheckoutBoletoPaymentMethodOptionsSetupFutureUsage {
	none
	off_session
	on_session
}
type CheckoutCardInstallmentsOptions {
	enabled: Boolean!
}
type CheckoutCardPaymentMethodOptions {
	statementDescriptorSuffixKanji: String!
	statementDescriptorSuffixKana: String!
	setupFutureUsage: CheckoutCardPaymentMethodOptionsSetupFutureUsage!
	installments: CheckoutCardInstallmentsOptions!
}
enum CheckoutCardPaymentMethodOptionsSetupFutureUsage {
	none
	off_session
	on_session
}
type CheckoutCustomerBalanceBankTransferPaymentMethodOptions {
	type: CheckoutCustomerBalanceBankTransferPaymentMethodOptionsType
	requestedAddressTypes: [CheckoutCustomerBalanceBankTransferPaymentMethodOptionsRequestedAddressTypes!]!
	euBankTransfer: PaymentMethodOptionsCustomerBalanceEuBankAccount!
}
enum CheckoutCustomerBalanceBankTransferPaymentMethodOptionsRequestedAddressTypes {
	iban
	sepa
	sort_code
	spei
	zengin
}
enum CheckoutCustomerBalanceBankTransferPaymentMethodOptionsType {
	eu_bank_transfer
	gb_bank_transfer
	jp_bank_transfer
	mx_bank_transfer
}
type CheckoutCustomerBalancePaymentMethodOptions {
	setupFutureUsage: CheckoutCustomerBalancePaymentMethodOptionsSetupFutureUsage!
	fundingType: CheckoutCustomerBalancePaymentMethodOptionsFundingType
	bankTransfer: CheckoutCustomerBalanceBankTransferPaymentMethodOptions!
}
enum CheckoutCustomerBalancePaymentMethodOptionsFundingType {
	bank_transfer
}
enum CheckoutCustomerBalancePaymentMethodOptionsSetupFutureUsage {
	none
}
type CheckoutEpsPaymentMethodOptions {
	setupFutureUsage: CheckoutEpsPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutEpsPaymentMethodOptionsSetupFutureUsage {
	none
}
type CheckoutFpxPaymentMethodOptions {
	setupFutureUsage: CheckoutFpxPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutFpxPaymentMethodOptionsSetupFutureUsage {
	none
}
type CheckoutGiropayPaymentMethodOptions {
	setupFutureUsage: CheckoutGiropayPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutGiropayPaymentMethodOptionsSetupFutureUsage {
	none
}
type CheckoutGrabPayPaymentMethodOptions {
	setupFutureUsage: CheckoutGrabPayPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutGrabPayPaymentMethodOptionsSetupFutureUsage {
	none
}
type CheckoutIdealPaymentMethodOptions {
	setupFutureUsage: CheckoutIdealPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutIdealPaymentMethodOptionsSetupFutureUsage {
	none
}
type CheckoutKlarnaPaymentMethodOptions {
	setupFutureUsage: CheckoutKlarnaPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutKlarnaPaymentMethodOptionsSetupFutureUsage {
	none
	off_session
	on_session
}
type CheckoutKonbiniPaymentMethodOptions {
	setupFutureUsage: CheckoutKonbiniPaymentMethodOptionsSetupFutureUsage!
	expiresAfterDays: Int
}
enum CheckoutKonbiniPaymentMethodOptionsSetupFutureUsage {
	none
}
type CheckoutOxxoPaymentMethodOptions {
	setupFutureUsage: CheckoutOxxoPaymentMethodOptionsSetupFutureUsage!
	expiresAfterDays: Int!
}
enum CheckoutOxxoPaymentMethodOptionsSetupFutureUsage {
	none
}
type CheckoutP24PaymentMethodOptions {
	setupFutureUsage: CheckoutP24PaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutP24PaymentMethodOptionsSetupFutureUsage {
	none
}
type CheckoutPaynowPaymentMethodOptions {
	setupFutureUsage: CheckoutPaynowPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutPaynowPaymentMethodOptionsSetupFutureUsage {
	none
}
type CheckoutPixPaymentMethodOptions {
	expiresAfterSeconds: Int
}
type CheckoutSepaDebitPaymentMethodOptions {
	setupFutureUsage: CheckoutSepaDebitPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutSepaDebitPaymentMethodOptionsSetupFutureUsage {
	none
	off_session
	on_session
}
type CheckoutSession {
	url: String
	totalDetails: PaymentPagesCheckoutSessionTotalDetailsUnion
	taxIdCollection: PaymentPagesCheckoutSessionTaxIdCollection!
	successUrl: String!
	subscription: SubscriptionUnion
	submitType: CheckoutSessionSubmitType
	status: CheckoutSessionStatus
	shippingOptions: [PaymentPagesCheckoutSessionShippingOption!]!
	shippingDetails: ShippingUnion
	shippingCost: PaymentPagesCheckoutSessionShippingCostUnion
	shippingAddressCollection: PaymentPagesCheckoutSessionShippingAddressCollectionUnion
	setupIntent: SetupIntentUnion
	recoveredFrom: String
	phoneNumberCollection: PaymentPagesCheckoutSessionPhoneNumberCollection!
	paymentStatus: CheckoutSessionPaymentStatus!
	paymentMethodTypes: [String!]!
	paymentMethodOptions: CheckoutSessionPaymentMethodOptionsUnion
	paymentMethodCollection: CheckoutSessionPaymentMethodCollection
	paymentLink: PaymentLinkUnion
	paymentIntent: PaymentIntentUnion
	object: CheckoutSessionObject!
	mode: CheckoutSessionMode!
	metadata: JSON!
	locale: CheckoutSessionLocale
	livemode: Boolean!
	lineItems: CheckoutSessionLineItems!
	invoiceCreation: PaymentPagesCheckoutSessionInvoiceCreationUnion
	invoice: InvoiceUnion
	id: String!
	expiresAt: Int!
	customerEmail: String
	customerDetails: PaymentPagesCheckoutSessionCustomerDetailsUnion
	customerCreation: CheckoutSessionCustomerCreation
	customer: DeletedCustomerOrCustomerUnion
	customText: PaymentPagesCheckoutSessionCustomText!
	currency: String
	created: Int!
	consentCollection: PaymentPagesCheckoutSessionConsentCollectionUnion
	consent: PaymentPagesCheckoutSessionConsentUnion
	clientReferenceId: String
	cancelUrl: String
	billingAddressCollection: CheckoutSessionBillingAddressCollection
	automaticTax: PaymentPagesCheckoutSessionAutomaticTax!
	amountTotal: Int
	amountSubtotal: Int
	allowPromotionCodes: Boolean
	afterExpiration: PaymentPagesCheckoutSessionAfterExpirationUnion
}
enum CheckoutSessionBillingAddressCollection {
	auto
	required
}
enum CheckoutSessionCustomerCreation {
	always
	if_required
}
type CheckoutSessionLineItems {
	url: String!
	object: CheckoutSessionObjectLineItems!
	hasMore: Boolean!
	data: [Item!]!
}
enum CheckoutSessionLocale {
	auto
	bg
	cs
	da
	de
	el
	en
	en-GB
	es
	es-419
	et
	fi
	fil
	fr
	fr-CA
	hr
	hu
	id
	it
	ja
	ko
	lt
	lv
	ms
	mt
	nb
	nl
	pl
	pt
	pt-BR
	ro
	ru
	sk
	sl
	sv
	th
	tr
	vi
	zh
	zh-HK
	zh-TW
}
enum CheckoutSessionMode {
	payment
	setup
	subscription
}
enum CheckoutSessionObject {
	checkout.session
}
enum CheckoutSessionObjectLineItems {
	list
}
enum CheckoutSessionPaymentMethodCollection {
	always
	if_required
}
type CheckoutSessionPaymentMethodOptions {
	usBankAccount: CheckoutUsBankAccountPaymentMethodOptions!
	sofort: CheckoutSofortPaymentMethodOptions!
	sepaDebit: CheckoutSepaDebitPaymentMethodOptions!
	pix: CheckoutPixPaymentMethodOptions!
	paynow: CheckoutPaynowPaymentMethodOptions!
	p24: CheckoutP24PaymentMethodOptions!
	oxxo: CheckoutOxxoPaymentMethodOptions!
	konbini: CheckoutKonbiniPaymentMethodOptions!
	klarna: CheckoutKlarnaPaymentMethodOptions!
	ideal: CheckoutIdealPaymentMethodOptions!
	grabpay: CheckoutGrabPayPaymentMethodOptions!
	giropay: CheckoutGiropayPaymentMethodOptions!
	fpx: CheckoutFpxPaymentMethodOptions!
	eps: CheckoutEpsPaymentMethodOptions!
	customerBalance: CheckoutCustomerBalancePaymentMethodOptions!
	card: CheckoutCardPaymentMethodOptions!
	boleto: CheckoutBoletoPaymentMethodOptions!
	bancontact: CheckoutBancontactPaymentMethodOptions!
	bacsDebit: CheckoutBacsDebitPaymentMethodOptions!
	auBecsDebit: CheckoutAuBecsDebitPaymentMethodOptions!
	alipay: CheckoutAlipayPaymentMethodOptions!
	afterpayClearpay: CheckoutAfterpayClearpayPaymentMethodOptions!
	affirm: CheckoutAffirmPaymentMethodOptions!
	acssDebit: CheckoutAcssDebitPaymentMethodOptions!
}
union CheckoutSessionPaymentMethodOptionsUnion = CheckoutSessionPaymentMethodOptions
enum CheckoutSessionPaymentStatus {
	no_payment_required
	paid
	unpaid
}
enum CheckoutSessionStatus {
	complete
	expired
	open
}
enum CheckoutSessionSubmitType {
	auto
	book
	donate
	pay
}
type CheckoutSofortPaymentMethodOptions {
	setupFutureUsage: CheckoutSofortPaymentMethodOptionsSetupFutureUsage!
}
enum CheckoutSofortPaymentMethodOptionsSetupFutureUsage {
	none
}
type CheckoutUsBankAccountPaymentMethodOptions {
	verificationMethod: CheckoutUsBankAccountPaymentMethodOptionsVerificationMethod!
	setupFutureUsage: CheckoutUsBankAccountPaymentMethodOptionsSetupFutureUsage!
	financialConnections: LinkedAccountOptionsUsBankAccount!
}
enum CheckoutUsBankAccountPaymentMethodOptionsSetupFutureUsage {
	none
	off_session
	on_session
}
enum CheckoutUsBankAccountPaymentMethodOptionsVerificationMethod {
	automatic
	instant
}
type ConnectCollectionTransfer {
	object: ConnectCollectionTransferObject!
	livemode: Boolean!
	id: String!
	destination: AccountUnion!
	currency: String!
	amount: Int!
}
enum ConnectCollectionTransferObject {
	connect_collection_transfer
}
type CountrySpec {
	verificationFields: CountrySpecVerificationFields!
	supportedTransferCountries: [String!]!
	supportedPaymentMethods: [String!]!
	supportedPaymentCurrencies: [String!]!
	supportedBankAccountCurrencies: JSON!
	object: CountrySpecObject!
	id: String!
	defaultCurrency: String!
}
enum CountrySpecObject {
	country_spec
}
type CountrySpecVerificationFieldDetails {
	minimum: [String!]!
	additional: [String!]!
}
type CountrySpecVerificationFields {
	individual: CountrySpecVerificationFieldDetails!
	company: CountrySpecVerificationFieldDetails!
}
type Coupon {
	valid: Boolean!
	timesRedeemed: Int!
	redeemBy: Int
	percentOff: Float
	object: CouponObject!
	name: String
	metadata: JSON!
	maxRedemptions: Int
	livemode: Boolean!
	id: String!
	durationInMonths: Int
	duration: CouponDuration!
	currencyOptions: JSON!
	currency: String
	created: Int!
	appliesTo: CouponAppliesTo!
	amountOff: Int
}
type CouponAppliesTo {
	products: [String!]!
}
enum CouponDuration {
	forever
	once
	repeating
}
enum CouponObject {
	coupon
}
type CreditNote {
	voidedAt: Int
	type: CreditNoteType!
	totalExcludingTax: Int
	total: Int!
	taxAmounts: [CreditNoteTaxAmount!]!
	subtotalExcludingTax: Int
	subtotal: Int!
	status: CreditNoteStatus!
	shippingCost: InvoicesShippingCostUnion
	refund: RefundUnion
	reason: CreditNoteReason
	pdf: String!
	outOfBandAmount: Int
	object: CreditNoteObject!
	number: String!
	metadata: JSON!
	memo: String
	livemode: Boolean!
	lines: CreditNoteLines!
	invoice: InvoiceUnion!
	id: String!
	discountAmounts: [DiscountsResourceDiscountAmount!]!
	discountAmount: Int!
	customerBalanceTransaction: CustomerBalanceTransactionUnion
	customer: DeletedCustomerOrCustomerUnion!
	currency: String!
	created: Int!
	amountShipping: Int!
	amount: Int!
}
type CreditNoteLineItem {
	unitAmountExcludingTax: String
	unitAmountDecimal: String
	unitAmount: Int
	type: CreditNoteLineItemType!
	taxRates: [TaxRate!]!
	taxAmounts: [CreditNoteTaxAmount!]!
	quantity: Int
	object: CreditNoteLineItemObject!
	livemode: Boolean!
	invoiceLineItem: String!
	id: String!
	discountAmounts: [DiscountsResourceDiscountAmount!]!
	discountAmount: Int!
	description: String
	amountExcludingTax: Int
	amount: Int!
}
enum CreditNoteLineItemObject {
	credit_note_line_item
}
enum CreditNoteLineItemType {
	custom_line_item
	invoice_line_item
}
type CreditNoteLines {
	url: String!
	object: CreditNoteObjectLines!
	hasMore: Boolean!
	data: [CreditNoteLineItem!]!
}
enum CreditNoteObject {
	credit_note
}
enum CreditNoteObjectLines {
	list
}
enum CreditNoteReason {
	duplicate
	fraudulent
	order_change
	product_unsatisfactory
}
enum CreditNoteStatus {
	issued
	void
}
type CreditNoteTaxAmount {
	taxRate: TaxRateUnion!
	inclusive: Boolean!
	amount: Int!
}
enum CreditNoteType {
	post_payment
	pre_payment
}
union CreditNoteUnion = CreditNote
type CustomUnitAmount {
	preset: Int
	minimum: Int
	maximum: Int
}
union CustomUnitAmountUnion = CustomUnitAmount
type Customer {
	testClock: TestHelpersTestClockUnion
	taxIds: CustomerTaxIds!
	taxExempt: CustomerTaxExempt
	tax: CustomerTax!
	subscriptions: CustomerSubscriptions!
	sources: CustomerSources!
	shipping: ShippingUnion
	preferredLocales: [String!]
	phone: String
	object: CustomerObject!
	nextInvoiceSequence: Int!
	name: String
	metadata: JSON!
	livemode: Boolean!
	invoiceSettings: InvoiceSettingCustomerSetting!
	invoicePrefix: String
	invoiceCreditBalance: JSON!
	id: String!
	email: String
	discount: DiscountUnion
	description: String
	delinquent: Boolean
	defaultSource: SourceOrCardOrBankAccountUnion
	currency: String
	created: Int!
	cashBalance: CashBalanceUnion
	balance: Int!
	address: AddressUnion
}
type CustomerAcceptance {
	type: CustomerAcceptanceType!
	online: OnlineAcceptance!
	offline: OfflineAcceptance!
	acceptedAt: Int
}
enum CustomerAcceptanceType {
	offline
	online
}
type CustomerBalanceCustomerBalanceSettings {
	usingMerchantDefault: Boolean!
	reconciliationMode: CustomerBalanceCustomerBalanceSettingsReconciliationMode!
}
enum CustomerBalanceCustomerBalanceSettingsReconciliationMode {
	automatic
	manual
}
type CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction {
	paymentIntent: PaymentIntentUnion!
}
type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction {
	bankTransfer: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer!
}
type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer {
	type: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType!
	reference: String
	euBankTransfer: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer!
}
type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer {
	senderName: String
	ibanLast4: String
	bic: String
}
enum CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType {
	eu_bank_transfer
	gb_bank_transfer
	jp_bank_transfer
	mx_bank_transfer
}
type CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction {
	refund: RefundUnion!
}
type CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction {
	paymentIntent: PaymentIntentUnion!
}
type CustomerBalanceTransaction {
	type: CustomerBalanceTransactionType!
	object: CustomerBalanceTransactionObject!
	metadata: JSON!
	livemode: Boolean!
	invoice: InvoiceUnion
	id: String!
	endingBalance: Int!
	description: String
	customer: CustomerUnion!
	currency: String!
	creditNote: CreditNoteUnion
	created: Int!
	amount: Int!
}
enum CustomerBalanceTransactionObject {
	customer_balance_transaction
}
enum CustomerBalanceTransactionType {
	adjustment
	applied_to_invoice
	credit_note
	initial
	invoice_overpaid
	invoice_too_large
	invoice_too_small
	migration
	unapplied_from_invoice
	unspent_receiver_credit
}
union CustomerBalanceTransactionUnion = CustomerBalanceTransaction
type CustomerCashBalanceTransaction {
	unappliedFromPayment: CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction!
	type: CustomerCashBalanceTransactionType!
	refundedFromPayment: CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction!
	object: CustomerCashBalanceTransactionObject!
	netAmount: Int!
	livemode: Boolean!
	id: String!
	funded: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction!
	endingBalance: Int!
	customer: CustomerUnion!
	currency: String!
	created: Int!
	appliedToPayment: CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction!
}
enum CustomerCashBalanceTransactionObject {
	customer_cash_balance_transaction
}
enum CustomerCashBalanceTransactionType {
	applied_to_payment
	funded
	funding_reversed
	refunded_from_payment
	return_canceled
	return_initiated
	unapplied_from_payment
}
enum CustomerObject {
	customer
}
enum CustomerObjectSources {
	list
}
enum CustomerObjectSubscriptions {
	list
}
enum CustomerObjectTaxIds {
	list
}
type CustomerSources {
	url: String!
	object: CustomerObjectSources!
	hasMore: Boolean!
	data: [SourceOrCardOrBankAccountUnion!]!
}
type CustomerSubscriptions {
	url: String!
	object: CustomerObjectSubscriptions!
	hasMore: Boolean!
	data: [Subscription!]!
}
type CustomerTax {
	location: CustomerTaxLocationUnion
	ipAddress: String
	automaticTax: CustomerTaxAutomaticTax!
}
enum CustomerTaxAutomaticTax {
	failed
	not_collecting
	supported
	unrecognized_location
}
enum CustomerTaxExempt {
	exempt
	none
	reverse
}
type CustomerTaxIds {
	url: String!
	object: CustomerObjectTaxIds!
	hasMore: Boolean!
	data: [TaxId!]!
}
type CustomerTaxLocation {
	state: String
	source: CustomerTaxLocationSource!
	country: String!
}
enum CustomerTaxLocationSource {
	billing_address
	ip_address
	payment_method
	shipping_destination
}
union CustomerTaxLocationUnion = CustomerTaxLocation
union CustomerUnion = Customer
type DeletedApplication {
	object: DeletedApplicationObject!
	name: String
	id: String!
	deleted: Boolean!
}
enum DeletedApplicationObject {
	application
}
union DeletedApplicationOrApplicationUnion = DeletedApplication | Application
type DeletedBankAccount {
	object: DeletedBankAccountObject!
	id: String!
	deleted: Boolean!
	currency: String
}
enum DeletedBankAccountObject {
	bank_account
}
type DeletedCard {
	object: DeletedCardObject!
	id: String!
	deleted: Boolean!
	currency: String
}
enum DeletedCardObject {
	card
}
union DeletedCardOrDeletedBankAccountOrCardOrBankAccountUnion = DeletedCard | DeletedBankAccount | Card | BankAccount
type DeletedCoupon {
	object: DeletedCouponObject!
	id: String!
	deleted: Boolean!
}
enum DeletedCouponObject {
	coupon
}
union DeletedCouponOrCouponUnion = DeletedCoupon | Coupon
type DeletedCustomer {
	object: DeletedCustomerObject!
	id: String!
	deleted: Boolean!
}
enum DeletedCustomerObject {
	customer
}
union DeletedCustomerOrCustomerUnion = DeletedCustomer | Customer
type DeletedDiscount {
	subscription: String
	start: Int!
	promotionCode: PromotionCodeUnion
	object: DeletedDiscountObject!
	invoiceItem: String
	invoice: String
	id: String!
	deleted: Boolean!
	customer: DeletedCustomerOrCustomerUnion
	coupon: Coupon!
	checkoutSession: String
}
enum DeletedDiscountObject {
	discount
}
union DeletedDiscountOrDiscountUnion = DeletedDiscount | Discount
type DeletedInvoice {
	object: DeletedInvoiceObject!
	id: String!
	deleted: Boolean!
}
enum DeletedInvoiceObject {
	invoice
}
union DeletedInvoiceOrInvoiceUnion = DeletedInvoice | Invoice
type DeletedPrice {
	object: DeletedPriceObject!
	id: String!
	deleted: Boolean!
}
enum DeletedPriceObject {
	price
}
union DeletedPriceOrPriceUnion = DeletedPrice | Price
type DeletedProduct {
	object: DeletedProductObject!
	id: String!
	deleted: Boolean!
}
enum DeletedProductObject {
	product
}
union DeletedProductOrProductUnion = DeletedProduct | Product
type DeletedTaxId {
	object: DeletedTaxIdObject!
	id: String!
	deleted: Boolean!
}
enum DeletedTaxIdObject {
	tax_id
}
union DeletedTaxIdOrTaxIdUnion = DeletedTaxId | TaxId
type DeletedTerminalConfiguration {
	object: DeletedTerminalConfigurationObject!
	id: String!
	deleted: Boolean!
}
enum DeletedTerminalConfigurationObject {
	terminal.configuration
}
union DeletedTerminalConfigurationOrTerminalConfigurationUnion = DeletedTerminalConfiguration | TerminalConfiguration
type DeletedTerminalLocation {
	object: DeletedTerminalLocationObject!
	id: String!
	deleted: Boolean!
}
enum DeletedTerminalLocationObject {
	terminal.location
}
union DeletedTerminalLocationOrTerminalLocationUnion = DeletedTerminalLocation | TerminalLocation
type DeletedTerminalReader {
	object: DeletedTerminalReaderObject!
	id: String!
	deleted: Boolean!
}
enum DeletedTerminalReaderObject {
	terminal.reader
}
union DeletedTerminalReaderOrTerminalReaderUnion = DeletedTerminalReader | TerminalReader
type Discount {
	subscription: String
	start: Int!
	promotionCode: PromotionCodeUnion
	object: DiscountObject!
	invoiceItem: String
	invoice: String
	id: String!
	end: Int
	customer: DeletedCustomerOrCustomerUnion
	coupon: Coupon!
	checkoutSession: String
}
enum DiscountObject {
	discount
}
union DiscountUnion = Discount
type DiscountsResourceDiscountAmount {
	discount: DeletedDiscountOrDiscountUnion!
	amount: Int!
}
type Dispute {
	status: DisputeStatus!
	reason: String!
	paymentIntent: PaymentIntentUnion
	object: DisputeObject!
	metadata: JSON!
	livemode: Boolean!
	isChargeRefundable: Boolean!
	id: String!
	evidenceDetails: DisputeEvidenceDetails!
	evidence: DisputeEvidence!
	currency: String!
	created: Int!
	charge: ChargeUnion!
	balanceTransactions: [BalanceTransaction!]!
	amount: Int!
}
type DisputeEvidence {
	uncategorizedText: String
	uncategorizedFile: FileUnion
	shippingTrackingNumber: String
	shippingDocumentation: FileUnion
	shippingDate: String
	shippingCarrier: String
	shippingAddress: String
	serviceDocumentation: FileUnion
	serviceDate: String
	refundRefusalExplanation: String
	refundPolicyDisclosure: String
	refundPolicy: FileUnion
	receipt: FileUnion
	productDescription: String
	duplicateChargeId: String
	duplicateChargeExplanation: String
	duplicateChargeDocumentation: FileUnion
	customerSignature: FileUnion
	customerPurchaseIp: String
	customerName: String
	customerEmailAddress: String
	customerCommunication: FileUnion
	cancellationRebuttal: String
	cancellationPolicyDisclosure: String
	cancellationPolicy: FileUnion
	billingAddress: String
	accessActivityLog: String
}
type DisputeEvidenceDetails {
	submissionCount: Int!
	pastDue: Boolean!
	hasEvidence: Boolean!
	dueBy: Int
}
enum DisputeObject {
	dispute
}
enum DisputeStatus {
	charge_refunded
	lost
	needs_response
	under_review
	warning_closed
	warning_needs_response
	warning_under_review
	won
}
type EmailSent {
	emailSentTo: String!
	emailSentAt: Int!
}
type Event {
	type: String!
	request: NotificationEventRequestUnion
	pendingWebhooks: Int!
	object: EventObject!
	livemode: Boolean!
	id: String!
	data: NotificationEventData!
	created: Int!
	apiVersion: String
	account: String!
}
enum EventObject {
	event
}
type ExchangeRate {
	rates: JSON!
	object: ExchangeRateObject!
	id: String!
}
enum ExchangeRateObject {
	exchange_rate
}
type Fee {
	type: String!
	description: String
	currency: String!
	application: String
	amount: Int!
}
type FeeRefund {
	object: FeeRefundObject!
	metadata: JSON!
	id: String!
	fee: ApplicationFeeUnion!
	currency: String!
	created: Int!
	balanceTransaction: BalanceTransactionUnion
	amount: Int!
}
enum FeeRefundObject {
	fee_refund
}
type File {
	url: String
	type: String
	title: String
	size: Int!
	purpose: FilePurpose!
	object: FileObject!
	links: FileLinks
	id: String!
	filename: String
	expiresAt: Int
	created: Int!
}
type FileLink {
	url: String
	object: FileLinkObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	file: FileUnion!
	expiresAt: Int
	expired: Boolean!
	created: Int!
}
enum FileLinkObject {
	file_link
}
type FileLinks {
	url: String!
	object: FileObjectLinks!
	hasMore: Boolean!
	data: [FileLink!]!
}
enum FileObject {
	file
}
enum FileObjectLinks {
	list
}
enum FilePurpose {
	account_requirement
	additional_verification
	business_icon
	business_logo
	customer_signature
	dispute_evidence
	document_provider_identity_document
	finance_report_run
	identity_document
	identity_document_downloadable
	pci_document
	selfie
	sigma_scheduled_query
	tax_document_user_upload
	terminal_reader_splashscreen
}
union FileUnion = File
type FinancialConnectionsAccount {
	supportedPaymentMethodTypes: [FinancialConnectionsAccountSupportedPaymentMethodTypes!]!
	subcategory: FinancialConnectionsAccountSubcategory!
	status: FinancialConnectionsAccountStatus!
	permissions: [FinancialConnectionsAccountPermissions!]
	ownershipRefresh: BankConnectionsResourceOwnershipRefreshUnion
	ownership: FinancialConnectionsAccountOwnershipUnion
	object: FinancialConnectionsAccountObject!
	livemode: Boolean!
	last4: String
	institutionName: String!
	id: String!
	displayName: String
	created: Int!
	category: FinancialConnectionsAccountCategory!
	balanceRefresh: BankConnectionsResourceBalanceRefreshUnion
	balance: BankConnectionsResourceBalanceUnion
	accountHolder: BankConnectionsResourceAccountholderUnion
}
enum FinancialConnectionsAccountCategory {
	cash
	credit
	investment
	other
}
enum FinancialConnectionsAccountObject {
	financial_connections.account
}
type FinancialConnectionsAccountOwner {
	refreshedAt: Int
	rawAddress: String
	phone: String
	ownership: String!
	object: FinancialConnectionsAccountOwnerObject!
	name: String!
	id: String!
	email: String
}
enum FinancialConnectionsAccountOwnerObject {
	financial_connections.account_owner
}
type FinancialConnectionsAccountOwnership {
	owners: FinancialConnectionsAccountOwnershipOwners!
	object: FinancialConnectionsAccountOwnershipObject!
	id: String!
	created: Int!
}
enum FinancialConnectionsAccountOwnershipObject {
	financial_connections.account_ownership
}
enum FinancialConnectionsAccountOwnershipObjectOwners {
	list
}
type FinancialConnectionsAccountOwnershipOwners {
	url: String!
	object: FinancialConnectionsAccountOwnershipObjectOwners!
	hasMore: Boolean!
	data: [FinancialConnectionsAccountOwner!]!
}
union FinancialConnectionsAccountOwnershipUnion = FinancialConnectionsAccountOwnership
enum FinancialConnectionsAccountPermissions {
	balances
	ownership
	payment_method
	transactions
}
enum FinancialConnectionsAccountStatus {
	active
	disconnected
	inactive
}
enum FinancialConnectionsAccountSubcategory {
	checking
	credit_card
	line_of_credit
	mortgage
	other
	savings
}
enum FinancialConnectionsAccountSupportedPaymentMethodTypes {
	link
	us_bank_account
}
type FinancialConnectionsSession {
	returnUrl: String!
	permissions: [FinancialConnectionsSessionPermissions!]!
	object: FinancialConnectionsSessionObject!
	livemode: Boolean!
	id: String!
	filters: BankConnectionsResourceLinkAccountSessionFilters!
	clientSecret: String!
	accounts: FinancialConnectionsSessionAccounts!
	accountHolder: BankConnectionsResourceAccountholderUnion
}
type FinancialConnectionsSessionAccounts {
	url: String!
	object: FinancialConnectionsSessionObjectAccounts!
	hasMore: Boolean!
	data: [FinancialConnectionsAccount!]!
}
enum FinancialConnectionsSessionObject {
	financial_connections.session
}
enum FinancialConnectionsSessionObjectAccounts {
	list
}
enum FinancialConnectionsSessionPermissions {
	balances
	ownership
	payment_method
	transactions
}
type FinancialReportingFinanceReportRunRunParameters {
	timezone: String!
	reportingCategory: String!
	payout: String!
	intervalStart: Int!
	intervalEnd: Int!
	currency: String!
	connectedAccount: String!
	columns: [String!]!
}
type FundingInstructionsBankTransferFinancialAddress {
	zengin: FundingInstructionsBankTransferZenginRecord!
	type: FundingInstructionsBankTransferFinancialAddressType!
	supportedNetworks: [FundingInstructionsBankTransferFinancialAddressSupportedNetworks!]!
	spei: FundingInstructionsBankTransferSpeiRecord!
	sortCode: FundingInstructionsBankTransferSortCodeRecord!
	iban: FundingInstructionsBankTransferIbanRecord!
}
enum FundingInstructionsBankTransferFinancialAddressSupportedNetworks {
	bacs
	fps
	sepa
	spei
	zengin
}
enum FundingInstructionsBankTransferFinancialAddressType {
	iban
	sort_code
	spei
	zengin
}
type FundingInstructionsBankTransferIbanRecord {
	iban: String!
	country: String!
	bic: String!
	accountHolderName: String!
}
type FundingInstructionsBankTransferSortCodeRecord {
	sortCode: String!
	accountNumber: String!
	accountHolderName: String!
}
type FundingInstructionsBankTransferSpeiRecord {
	clabe: String!
	bankName: String!
	bankCode: String!
}
type FundingInstructionsBankTransferZenginRecord {
	branchName: String
	branchCode: String
	bankName: String
	bankCode: String
	accountType: String
	accountNumber: String
	accountHolderName: String
}
type GelatoDataDocumentReportDateOfBirth {
	year: Int
	month: Int
	day: Int
}
union GelatoDataDocumentReportDateOfBirthUnion = GelatoDataDocumentReportDateOfBirth
type GelatoDataDocumentReportExpirationDate {
	year: Int
	month: Int
	day: Int
}
union GelatoDataDocumentReportExpirationDateUnion = GelatoDataDocumentReportExpirationDate
type GelatoDataDocumentReportIssuedDate {
	year: Int
	month: Int
	day: Int
}
union GelatoDataDocumentReportIssuedDateUnion = GelatoDataDocumentReportIssuedDate
type GelatoDataIdNumberReportDate {
	year: Int
	month: Int
	day: Int
}
union GelatoDataIdNumberReportDateUnion = GelatoDataIdNumberReportDate
type GelatoDataVerifiedOutputsDate {
	year: Int
	month: Int
	day: Int
}
union GelatoDataVerifiedOutputsDateUnion = GelatoDataVerifiedOutputsDate
type GelatoDocumentReport {
	type: GelatoDocumentReportType
	status: GelatoDocumentReportStatus!
	number: String
	lastName: String
	issuingCountry: String
	issuedDate: GelatoDataDocumentReportIssuedDateUnion
	firstName: String
	files: [String!]
	expirationDate: GelatoDataDocumentReportExpirationDateUnion
	error: GelatoDocumentReportErrorUnion
	dob: GelatoDataDocumentReportDateOfBirthUnion
	address: AddressUnion
}
type GelatoDocumentReportError {
	reason: String
	code: GelatoDocumentReportErrorCode
}
enum GelatoDocumentReportErrorCode {
	document_expired
	document_type_not_supported
	document_unverified_other
}
union GelatoDocumentReportErrorUnion = GelatoDocumentReportError
enum GelatoDocumentReportStatus {
	unverified
	verified
}
enum GelatoDocumentReportType {
	driving_license
	id_card
	passport
}
type GelatoIdNumberReport {
	status: GelatoIdNumberReportStatus!
	lastName: String
	idNumberType: GelatoIdNumberReportIdNumberType
	idNumber: String
	firstName: String
	error: GelatoIdNumberReportErrorUnion
	dob: GelatoDataIdNumberReportDateUnion
}
type GelatoIdNumberReportError {
	reason: String
	code: GelatoIdNumberReportErrorCode
}
enum GelatoIdNumberReportErrorCode {
	id_number_insufficient_document_data
	id_number_mismatch
	id_number_unverified_other
}
union GelatoIdNumberReportErrorUnion = GelatoIdNumberReportError
enum GelatoIdNumberReportIdNumberType {
	br_cpf
	sg_nric
	us_ssn
}
enum GelatoIdNumberReportStatus {
	unverified
	verified
}
type GelatoReportDocumentOptions {
	requireMatchingSelfie: Boolean!
	requireLiveCapture: Boolean!
	requireIdNumber: Boolean!
	allowedTypes: [GelatoReportDocumentOptionsAllowedTypes!]!
}
enum GelatoReportDocumentOptionsAllowedTypes {
	driving_license
	id_card
	passport
}
type GelatoSelfieReport {
	status: GelatoSelfieReportStatus!
	selfie: String
	error: GelatoSelfieReportErrorUnion
	document: String
}
type GelatoSelfieReportError {
	reason: String
	code: GelatoSelfieReportErrorCode
}
enum GelatoSelfieReportErrorCode {
	selfie_document_missing_photo
	selfie_face_mismatch
	selfie_manipulated
	selfie_unverified_other
}
union GelatoSelfieReportErrorUnion = GelatoSelfieReportError
enum GelatoSelfieReportStatus {
	unverified
	verified
}
type GelatoSessionDocumentOptions {
	requireMatchingSelfie: Boolean!
	requireLiveCapture: Boolean!
	requireIdNumber: Boolean!
	allowedTypes: [GelatoSessionDocumentOptionsAllowedTypes!]!
}
enum GelatoSessionDocumentOptionsAllowedTypes {
	driving_license
	id_card
	passport
}
type GelatoSessionLastError {
	reason: String
	code: GelatoSessionLastErrorCode
}
enum GelatoSessionLastErrorCode {
	abandoned
	consent_declined
	country_not_supported
	device_not_supported
	document_expired
	document_type_not_supported
	document_unverified_other
	id_number_insufficient_document_data
	id_number_mismatch
	id_number_unverified_other
	selfie_document_missing_photo
	selfie_face_mismatch
	selfie_manipulated
	selfie_unverified_other
	under_supported_age
}
union GelatoSessionLastErrorUnion = GelatoSessionLastError
type GelatoVerificationReportOptions {
	idNumber: GelatoReportIdNumberOptions!
	document: GelatoReportDocumentOptions!
}
type GelatoVerificationSessionOptions {
	idNumber: GelatoSessionIdNumberOptions!
	document: GelatoSessionDocumentOptions!
}
type GelatoVerifiedOutputs {
	lastName: String
	idNumberType: GelatoVerifiedOutputsIdNumberType
	idNumber: String
	firstName: String
	dob: GelatoDataVerifiedOutputsDateUnion
	address: AddressUnion
}
enum GelatoVerifiedOutputsIdNumberType {
	br_cpf
	sg_nric
	us_ssn
}
union GelatoVerifiedOutputsUnion = GelatoVerifiedOutputs
type GetAccounts {
	url: String!
	object: GetAccountsObject!
	hasMore: Boolean!
	data: [Account!]!
}
type GetAccountsAccountCapabilities {
	url: String!
	object: GetAccountsAccountCapabilitiesObject!
	hasMore: Boolean!
	data: [Capability!]!
}
enum GetAccountsAccountCapabilitiesObject {
	list
}
type GetAccountsAccountExternalAccounts {
	url: String!
	object: GetAccountsAccountExternalAccountsObject!
	hasMore: Boolean!
	data: [CardOrBankAccountUnion!]!
}
enum GetAccountsAccountExternalAccountsObject {
	list
}
type GetAccountsAccountPeople {
	url: String!
	object: GetAccountsAccountPeopleObject!
	hasMore: Boolean!
	data: [Person!]!
}
enum GetAccountsAccountPeopleObject {
	list
}
type GetAccountsAccountPersons {
	url: String!
	object: GetAccountsAccountPersonsObject!
	hasMore: Boolean!
	data: [Person!]!
}
enum GetAccountsAccountPersonsObject {
	list
}
enum GetAccountsObject {
	list
}
type GetApplePayDomains {
	url: String!
	object: GetApplePayDomainsObject!
	hasMore: Boolean!
	data: [ApplePayDomain!]!
}
enum GetApplePayDomainsObject {
	list
}
type GetApplicationFees {
	url: String!
	object: GetApplicationFeesObject!
	hasMore: Boolean!
	data: [ApplicationFee!]!
}
type GetApplicationFeesIdRefunds {
	url: String!
	object: GetApplicationFeesIdRefundsObject!
	hasMore: Boolean!
	data: [FeeRefund!]!
}
enum GetApplicationFeesIdRefundsObject {
	list
}
enum GetApplicationFeesObject {
	list
}
type GetAppsSecrets {
	url: String!
	object: GetAppsSecretsObject!
	hasMore: Boolean!
	data: [AppsSecret!]!
}
enum GetAppsSecretsObject {
	list
}
type GetBalanceHistory {
	url: String!
	object: GetBalanceHistoryObject!
	hasMore: Boolean!
	data: [BalanceTransaction!]!
}
enum GetBalanceHistoryObject {
	list
}
type GetBalanceTransactions {
	url: String!
	object: GetBalanceTransactionsObject!
	hasMore: Boolean!
	data: [BalanceTransaction!]!
}
enum GetBalanceTransactionsObject {
	list
}
type GetBillingPortalConfigurations {
	url: String!
	object: GetBillingPortalConfigurationsObject!
	hasMore: Boolean!
	data: [BillingPortalConfiguration!]!
}
enum GetBillingPortalConfigurationsObject {
	list
}
type GetCharges {
	url: String!
	object: GetChargesObject!
	hasMore: Boolean!
	data: [Charge!]!
}
type GetChargesChargeRefunds {
	url: String!
	object: GetChargesChargeRefundsObject!
	hasMore: Boolean!
	data: [Refund!]!
}
enum GetChargesChargeRefundsObject {
	list
}
enum GetChargesObject {
	list
}
type GetChargesSearch {
	url: String!
	totalCount: Int!
	object: GetChargesSearchObject!
	nextPage: String
	hasMore: Boolean!
	data: [Charge!]!
}
enum GetChargesSearchObject {
	search_result
}
type GetCheckoutSessions {
	url: String!
	object: GetCheckoutSessionsObject!
	hasMore: Boolean!
	data: [CheckoutSession!]!
}
enum GetCheckoutSessionsObject {
	list
}
type GetCheckoutSessionsSessionLineItems {
	url: String!
	object: GetCheckoutSessionsSessionLineItemsObject!
	hasMore: Boolean!
	data: [Item!]!
}
enum GetCheckoutSessionsSessionLineItemsObject {
	list
}
type GetCountrySpecs {
	url: String!
	object: GetCountrySpecsObject!
	hasMore: Boolean!
	data: [CountrySpec!]!
}
enum GetCountrySpecsObject {
	list
}
type GetCoupons {
	url: String!
	object: GetCouponsObject!
	hasMore: Boolean!
	data: [Coupon!]!
}
enum GetCouponsObject {
	list
}
type GetCreditNotes {
	url: String!
	object: GetCreditNotesObject!
	hasMore: Boolean!
	data: [CreditNote!]!
}
type GetCreditNotesCreditNoteLines {
	url: String!
	object: GetCreditNotesCreditNoteLinesObject!
	hasMore: Boolean!
	data: [CreditNoteLineItem!]!
}
enum GetCreditNotesCreditNoteLinesObject {
	list
}
enum GetCreditNotesObject {
	list
}
enum GetCreditNotesPreview {
	duplicate
	fraudulent
	order_change
	product_unsatisfactory
}
enum GetCreditNotesPreviewLines {
	duplicate
	fraudulent
	order_change
	product_unsatisfactory
}
type GetCustomers {
	url: String!
	object: GetCustomersObject!
	hasMore: Boolean!
	data: [Customer!]!
}
type GetCustomersCustomerBalanceTransactions {
	url: String!
	object: GetCustomersCustomerBalanceTransactionsObject!
	hasMore: Boolean!
	data: [CustomerBalanceTransaction!]!
}
enum GetCustomersCustomerBalanceTransactionsObject {
	list
}
type GetCustomersCustomerBankAccounts {
	url: String!
	object: GetCustomersCustomerBankAccountsObject!
	hasMore: Boolean!
	data: [BankAccount!]!
}
enum GetCustomersCustomerBankAccountsObject {
	list
}
type GetCustomersCustomerCards {
	url: String!
	object: GetCustomersCustomerCardsObject!
	hasMore: Boolean!
	data: [Card!]!
}
enum GetCustomersCustomerCardsObject {
	list
}
type GetCustomersCustomerCashBalanceTransactions {
	url: String!
	object: GetCustomersCustomerCashBalanceTransactionsObject!
	hasMore: Boolean!
	data: [CustomerCashBalanceTransaction!]!
}
enum GetCustomersCustomerCashBalanceTransactionsObject {
	list
}
enum GetCustomersCustomerPaymentMethods {
	acss_debit
	affirm
	afterpay_clearpay
	alipay
	au_becs_debit
	bacs_debit
	bancontact
	blik
	boleto
	card
	customer_balance
	eps
	fpx
	giropay
	grabpay
	ideal
	klarna
	konbini
	link
	oxxo
	p24
	paynow
	pix
	promptpay
	sepa_debit
	sofort
	us_bank_account
	wechat_pay
}
type GetCustomersCustomerSources {
	url: String!
	object: GetCustomersCustomerSourcesObject!
	hasMore: Boolean!
	data: [SourceOrCardOrBankAccountUnion!]!
}
enum GetCustomersCustomerSourcesObject {
	list
}
type GetCustomersCustomerSubscriptions {
	url: String!
	object: GetCustomersCustomerSubscriptionsObject!
	hasMore: Boolean!
	data: [Subscription!]!
}
enum GetCustomersCustomerSubscriptionsObject {
	list
}
type GetCustomersCustomerTaxIds {
	url: String!
	object: GetCustomersCustomerTaxIdsObject!
	hasMore: Boolean!
	data: [TaxId!]!
}
enum GetCustomersCustomerTaxIdsObject {
	list
}
enum GetCustomersObject {
	list
}
type GetCustomersSearch {
	url: String!
	totalCount: Int!
	object: GetCustomersSearchObject!
	nextPage: String
	hasMore: Boolean!
	data: [Customer!]!
}
enum GetCustomersSearchObject {
	search_result
}
type GetDisputes {
	url: String!
	object: GetDisputesObject!
	hasMore: Boolean!
	data: [Dispute!]!
}
enum GetDisputesObject {
	list
}
type GetEvents {
	url: String!
	object: GetEventsObject!
	hasMore: Boolean!
	data: [Event!]!
}
enum GetEventsObject {
	list
}
type GetExchangeRates {
	url: String!
	object: GetExchangeRatesObject!
	hasMore: Boolean!
	data: [ExchangeRate!]!
}
enum GetExchangeRatesObject {
	list
}
type GetFileLinks {
	url: String!
	object: GetFileLinksObject!
	hasMore: Boolean!
	data: [FileLink!]!
}
enum GetFileLinksObject {
	list
}
enum GetFiles {
	account_requirement
	additional_verification
	business_icon
	business_logo
	customer_signature
	dispute_evidence
	document_provider_identity_document
	finance_report_run
	identity_document
	identity_document_downloadable
	pci_document
	selfie
	sigma_scheduled_query
	tax_document_user_upload
	terminal_reader_splashscreen
}
type GetFinancialConnectionsAccounts {
	url: String!
	object: GetFinancialConnectionsAccountsObject!
	hasMore: Boolean!
	data: [FinancialConnectionsAccount!]!
}
type GetFinancialConnectionsAccountsAccountOwners {
	url: String!
	object: GetFinancialConnectionsAccountsAccountOwnersObject!
	hasMore: Boolean!
	data: [FinancialConnectionsAccountOwner!]!
}
enum GetFinancialConnectionsAccountsAccountOwnersObject {
	list
}
enum GetFinancialConnectionsAccountsObject {
	list
}
enum GetIdentityVerificationReports {
	document
	id_number
}
enum GetIdentityVerificationSessions {
	canceled
	processing
	requires_input
	verified
}
type GetInvoiceitems {
	url: String!
	object: GetInvoiceitemsObject!
	hasMore: Boolean!
	data: [Invoiceitem!]!
}
enum GetInvoiceitemsObject {
	list
}
enum GetInvoices {
	draft
	open
	paid
	uncollectible
	void
}
type GetInvoicesInvoiceLines {
	url: String!
	object: GetInvoicesInvoiceLinesObject!
	hasMore: Boolean!
	data: [LineItem!]!
}
enum GetInvoicesInvoiceLinesObject {
	list
}
type GetInvoicesSearch {
	url: String!
	totalCount: Int!
	object: GetInvoicesSearchObject!
	nextPage: String
	hasMore: Boolean!
	data: [Invoice!]!
}
enum GetInvoicesSearchObject {
	search_result
}
enum GetInvoicesUpcoming {
	now
}
enum GetInvoicesUpcomingLines {
	now
}
enum GetIssuingAuthorizations {
	closed
	pending
	reversed
}
enum GetIssuingCardholders {
	company
	individual
}
enum GetIssuingCards {
	physical
	virtual
}
enum GetIssuingDisputes {
	expired
	lost
	submitted
	unsubmitted
	won
}
type GetIssuingSettlements {
	url: String!
	object: GetIssuingSettlementsObject!
	hasMore: Boolean!
	data: [IssuingSettlement!]!
}
enum GetIssuingSettlementsObject {
	list
}
enum GetIssuingTransactions {
	capture
	refund
}
type GetLinkedAccounts {
	url: String!
	object: GetLinkedAccountsObject!
	hasMore: Boolean!
	data: [FinancialConnectionsAccount!]!
}
type GetLinkedAccountsAccountOwners {
	url: String!
	object: GetLinkedAccountsAccountOwnersObject!
	hasMore: Boolean!
	data: [FinancialConnectionsAccountOwner!]!
}
enum GetLinkedAccountsAccountOwnersObject {
	list
}
enum GetLinkedAccountsObject {
	list
}
type GetPaymentIntents {
	url: String!
	object: GetPaymentIntentsObject!
	hasMore: Boolean!
	data: [PaymentIntent!]!
}
enum GetPaymentIntentsObject {
	list
}
type GetPaymentIntentsSearch {
	url: String!
	totalCount: Int!
	object: GetPaymentIntentsSearchObject!
	nextPage: String
	hasMore: Boolean!
	data: [PaymentIntent!]!
}
enum GetPaymentIntentsSearchObject {
	search_result
}
type GetPaymentLinks {
	url: String!
	object: GetPaymentLinksObject!
	hasMore: Boolean!
	data: [PaymentLink!]!
}
enum GetPaymentLinksObject {
	list
}
type GetPaymentLinksPaymentLinkLineItems {
	url: String!
	object: GetPaymentLinksPaymentLinkLineItemsObject!
	hasMore: Boolean!
	data: [Item!]!
}
enum GetPaymentLinksPaymentLinkLineItemsObject {
	list
}
enum GetPaymentMethods {
	acss_debit
	affirm
	afterpay_clearpay
	alipay
	au_becs_debit
	bacs_debit
	bancontact
	blik
	boleto
	card
	customer_balance
	eps
	fpx
	giropay
	grabpay
	ideal
	klarna
	konbini
	link
	oxxo
	p24
	paynow
	pix
	promptpay
	sepa_debit
	sofort
	us_bank_account
	wechat_pay
}
type GetPayouts {
	url: String!
	object: GetPayoutsObject!
	hasMore: Boolean!
	data: [Payout!]!
}
enum GetPayoutsObject {
	list
}
type GetPlans {
	url: String!
	object: GetPlansObject!
	hasMore: Boolean!
	data: [Plan!]!
}
enum GetPlansObject {
	list
}
enum GetPrices {
	one_time
	recurring
}
type GetPricesSearch {
	url: String!
	totalCount: Int!
	object: GetPricesSearchObject!
	nextPage: String
	hasMore: Boolean!
	data: [Price!]!
}
enum GetPricesSearchObject {
	search_result
}
type GetProducts {
	url: String!
	object: GetProductsObject!
	hasMore: Boolean!
	data: [Product!]!
}
enum GetProductsObject {
	list
}
type GetProductsSearch {
	url: String!
	totalCount: Int!
	object: GetProductsSearchObject!
	nextPage: String
	hasMore: Boolean!
	data: [Product!]!
}
enum GetProductsSearchObject {
	search_result
}
type GetPromotionCodes {
	url: String!
	object: GetPromotionCodesObject!
	hasMore: Boolean!
	data: [PromotionCode!]!
}
enum GetPromotionCodesObject {
	list
}
enum GetQuotes {
	accepted
	canceled
	draft
	open
}
type GetQuotesQuoteComputedUpfrontLineItems {
	url: String!
	object: GetQuotesQuoteComputedUpfrontLineItemsObject!
	hasMore: Boolean!
	data: [Item!]!
}
enum GetQuotesQuoteComputedUpfrontLineItemsObject {
	list
}
type GetQuotesQuoteLineItems {
	url: String!
	object: GetQuotesQuoteLineItemsObject!
	hasMore: Boolean!
	data: [Item!]!
}
enum GetQuotesQuoteLineItemsObject {
	list
}
type GetRadarEarlyFraudWarnings {
	url: String!
	object: GetRadarEarlyFraudWarningsObject!
	hasMore: Boolean!
	data: [RadarEarlyFraudWarning!]!
}
enum GetRadarEarlyFraudWarningsObject {
	list
}
type GetRadarValueListItems {
	url: String!
	object: GetRadarValueListItemsObject!
	hasMore: Boolean!
	data: [RadarValueListItem!]!
}
enum GetRadarValueListItemsObject {
	list
}
type GetRadarValueLists {
	url: String!
	object: GetRadarValueListsObject!
	hasMore: Boolean!
	data: [RadarValueList!]!
}
enum GetRadarValueListsObject {
	list
}
type GetRefunds {
	url: String!
	object: GetRefundsObject!
	hasMore: Boolean!
	data: [Refund!]!
}
enum GetRefundsObject {
	list
}
type GetReportingReportRuns {
	url: String!
	object: GetReportingReportRunsObject!
	hasMore: Boolean!
	data: [ReportingReportRun!]!
}
enum GetReportingReportRunsObject {
	list
}
type GetReportingReportTypes {
	url: String!
	object: GetReportingReportTypesObject!
	hasMore: Boolean!
	data: [ReportingReportType!]!
}
enum GetReportingReportTypesObject {
	list
}
type GetReviews {
	url: String!
	object: GetReviewsObject!
	hasMore: Boolean!
	data: [Review!]!
}
enum GetReviewsObject {
	list
}
type GetSetupAttempts {
	url: String!
	object: GetSetupAttemptsObject!
	hasMore: Boolean!
	data: [SetupAttempt!]!
}
enum GetSetupAttemptsObject {
	list
}
type GetSetupIntents {
	url: String!
	object: GetSetupIntentsObject!
	hasMore: Boolean!
	data: [SetupIntent!]!
}
enum GetSetupIntentsObject {
	list
}
type GetShippingRates {
	url: String!
	object: GetShippingRatesObject!
	hasMore: Boolean!
	data: [ShippingRate!]!
}
enum GetShippingRatesObject {
	list
}
type GetSigmaScheduledQueryRuns {
	url: String!
	object: GetSigmaScheduledQueryRunsObject!
	hasMore: Boolean!
	data: [ScheduledQueryRun!]!
}
enum GetSigmaScheduledQueryRunsObject {
	list
}
type GetSourcesSourceSourceTransactions {
	url: String!
	object: GetSourcesSourceSourceTransactionsObject!
	hasMore: Boolean!
	data: [SourceTransaction!]!
}
enum GetSourcesSourceSourceTransactionsObject {
	list
}
type GetSubscriptionItems {
	url: String!
	object: GetSubscriptionItemsObject!
	hasMore: Boolean!
	data: [SubscriptionItem!]!
}
enum GetSubscriptionItemsObject {
	list
}
type GetSubscriptionItemsSubscriptionItemUsageRecordSummaries {
	url: String!
	object: GetSubscriptionItemsSubscriptionItemUsageRecordSummariesObject!
	hasMore: Boolean!
	data: [UsageRecordSummary!]!
}
enum GetSubscriptionItemsSubscriptionItemUsageRecordSummariesObject {
	list
}
type GetSubscriptionSchedules {
	url: String!
	object: GetSubscriptionSchedulesObject!
	hasMore: Boolean!
	data: [SubscriptionSchedule!]!
}
enum GetSubscriptionSchedulesObject {
	list
}
enum GetSubscriptions {
	active
	all
	canceled
	ended
	incomplete
	incomplete_expired
	past_due
	paused
	trialing
	unpaid
}
type GetSubscriptionsSearch {
	url: String!
	totalCount: Int!
	object: GetSubscriptionsSearchObject!
	nextPage: String
	hasMore: Boolean!
	data: [Subscription!]!
}
enum GetSubscriptionsSearchObject {
	search_result
}
type GetTaxCodes {
	url: String!
	object: GetTaxCodesObject!
	hasMore: Boolean!
	data: [TaxCode!]!
}
enum GetTaxCodesObject {
	list
}
type GetTaxRates {
	url: String!
	object: GetTaxRatesObject!
	hasMore: Boolean!
	data: [TaxRate!]!
}
enum GetTaxRatesObject {
	list
}
type GetTerminalConfigurations {
	url: String!
	object: GetTerminalConfigurationsObject!
	hasMore: Boolean!
	data: [TerminalConfiguration!]!
}
enum GetTerminalConfigurationsObject {
	list
}
type GetTerminalLocations {
	url: String!
	object: GetTerminalLocationsObject!
	hasMore: Boolean!
	data: [TerminalLocation!]!
}
enum GetTerminalLocationsObject {
	list
}
enum GetTerminalReaders {
	offline
	online
}
type GetTestHelpersTestClocks {
	url: String!
	object: GetTestHelpersTestClocksObject!
	hasMore: Boolean!
	data: [TestHelpersTestClock!]!
}
enum GetTestHelpersTestClocksObject {
	list
}
enum GetTopups {
	canceled
	failed
	pending
	succeeded
}
type GetTransfers {
	url: String!
	object: GetTransfersObject!
	hasMore: Boolean!
	data: [Transfer!]!
}
type GetTransfersIdReversals {
	url: String!
	object: GetTransfersIdReversalsObject!
	hasMore: Boolean!
	data: [TransferReversal!]!
}
enum GetTransfersIdReversalsObject {
	list
}
enum GetTransfersObject {
	list
}
enum GetTreasuryCreditReversals {
	canceled
	posted
	processing
}
enum GetTreasuryDebitReversals {
	canceled
	completed
	processing
}
type GetTreasuryFinancialAccounts {
	url: String!
	object: GetTreasuryFinancialAccountsObject!
	hasMore: Boolean!
	data: [TreasuryFinancialAccount!]!
}
enum GetTreasuryFinancialAccountsObject {
	list
}
enum GetTreasuryInboundTransfers {
	canceled
	failed
	processing
	succeeded
}
enum GetTreasuryOutboundPayments {
	canceled
	failed
	posted
	processing
	returned
}
enum GetTreasuryOutboundTransfers {
	canceled
	failed
	posted
	processing
	returned
}
enum GetTreasuryReceivedCredits {
	failed
	succeeded
}
enum GetTreasuryReceivedDebits {
	failed
	succeeded
}
enum GetTreasuryTransactionEntries {
	created
	effective_at
}
enum GetTreasuryTransactions {
	open
	posted
	void
}
type GetWebhookEndpoints {
	url: String!
	object: GetWebhookEndpointsObject!
	hasMore: Boolean!
	data: [WebhookEndpoint!]!
}
enum GetWebhookEndpointsObject {
	list
}
type IdentityVerificationReport {
	verificationSession: String
	type: IdentityVerificationReportType!
	selfie: GelatoSelfieReport!
	options: GelatoVerificationReportOptions!
	object: IdentityVerificationReportObject!
	livemode: Boolean!
	idNumber: GelatoIdNumberReport!
	id: String!
	document: GelatoDocumentReport!
	created: Int!
}
enum IdentityVerificationReportObject {
	identity.verification_report
}
enum IdentityVerificationReportType {
	document
	id_number
}
union IdentityVerificationReportUnion = IdentityVerificationReport
type IdentityVerificationSession {
	verifiedOutputs: GelatoVerifiedOutputsUnion
	url: String
	type: IdentityVerificationSessionType!
	status: IdentityVerificationSessionStatus!
	redaction: VerificationSessionRedactionUnion
	options: GelatoVerificationSessionOptions!
	object: IdentityVerificationSessionObject!
	metadata: JSON!
	livemode: Boolean!
	lastVerificationReport: IdentityVerificationReportUnion
	lastError: GelatoSessionLastErrorUnion
	id: String!
	created: Int!
	clientSecret: String
}
enum IdentityVerificationSessionObject {
	identity.verification_session
}
enum IdentityVerificationSessionStatus {
	canceled
	processing
	requires_input
	verified
}
enum IdentityVerificationSessionType {
	document
	id_number
}
type InboundTransfers {
	usBankAccount: InboundTransfersPaymentMethodDetailsUsBankAccount!
	type: InboundTransfersType!
	billingDetails: TreasurySharedResourceBillingDetails!
}
type InboundTransfersPaymentMethodDetailsUsBankAccount {
	routingNumber: String
	network: InboundTransfersPaymentMethodDetailsUsBankAccountNetwork!
	last4: String
	fingerprint: String
	bankName: String
	accountType: InboundTransfersPaymentMethodDetailsUsBankAccountAccountType
	accountHolderType: InboundTransfersPaymentMethodDetailsUsBankAccountAccountHolderType
}
enum InboundTransfersPaymentMethodDetailsUsBankAccountAccountHolderType {
	company
	individual
}
enum InboundTransfersPaymentMethodDetailsUsBankAccountAccountType {
	checking
	savings
}
enum InboundTransfersPaymentMethodDetailsUsBankAccountNetwork {
	ach
}
enum InboundTransfersType {
	us_bank_account
}
union InboundTransfersUnion = InboundTransfers
type Invoice {
	webhooksDeliveredAt: Int
	transferData: InvoiceTransferDataUnion
	totalTaxAmounts: [InvoiceTaxAmount!]!
	totalExcludingTax: Int
	totalDiscountAmounts: [DiscountsResourceDiscountAmount!]
	total: Int!
	thresholdReason: InvoiceThresholdReason!
	testClock: TestHelpersTestClockUnion
	tax: Int
	subtotalExcludingTax: Int
	subtotal: Int!
	subscriptionProrationDate: Int!
	subscription: SubscriptionUnion
	statusTransitions: InvoicesStatusTransitions!
	status: InvoiceStatus
	statementDescriptor: String
	startingBalance: Int!
	shippingDetails: ShippingUnion
	shippingCost: InvoicesShippingCostUnion
	renderingOptions: InvoiceSettingRenderingOptionsUnion
	receiptNumber: String
	quote: QuoteUnion
	prePaymentCreditNotesAmount: Int!
	postPaymentCreditNotesAmount: Int!
	periodStart: Int!
	periodEnd: Int!
	paymentSettings: InvoicesPaymentSettings!
	paymentIntent: PaymentIntentUnion
	paidOutOfBand: Boolean!
	paid: Boolean!
	onBehalfOf: AccountUnion
	object: InvoiceObject!
	number: String
	nextPaymentAttempt: Int
	metadata: JSON!
	livemode: Boolean!
	lines: InvoiceLines!
	latestRevision: InvoiceUnion
	lastFinalizationError: ApiErrorsUnion
	invoicePdf: String
	id: String!
	hostedInvoiceUrl: String
	fromInvoice: InvoicesFromInvoiceUnion
	footer: String
	endingBalance: Int
	dueDate: Int
	discounts: [DeletedDiscountOrDiscountUnion!]
	discount: DiscountUnion
	description: String
	defaultTaxRates: [TaxRate!]!
	defaultSource: SourceOrCardOrBankAccountUnion
	defaultPaymentMethod: PaymentMethodUnion
	customerTaxIds: [InvoicesResourceInvoiceTaxId!]
	customerTaxExempt: InvoiceCustomerTaxExempt
	customerShipping: ShippingUnion
	customerPhone: String
	customerName: String
	customerEmail: String
	customerAddress: AddressUnion
	customer: DeletedCustomerOrCustomerUnion
	customFields: [InvoiceSettingCustomField!]
	currency: String!
	created: Int!
	collectionMethod: InvoiceCollectionMethod!
	charge: ChargeUnion
	billingReason: InvoiceBillingReason
	automaticTax: AutomaticTax!
	autoAdvance: Boolean!
	attempted: Boolean!
	attemptCount: Int!
	applicationFeeAmount: Int
	application: DeletedApplicationOrApplicationUnion
	amountShipping: Int!
	amountRemaining: Int!
	amountPaid: Int!
	amountDue: Int!
	accountTaxIds: [DeletedTaxIdOrTaxIdUnion!]
	accountName: String
	accountCountry: String
}
enum InvoiceBillingReason {
	automatic_pending_invoice_item_invoice
	manual
	quote_accept
	subscription
	subscription_create
	subscription_cycle
	subscription_threshold
	subscription_update
	upcoming
}
enum InvoiceCollectionMethod {
	charge_automatically
	send_invoice
}
enum InvoiceCustomerTaxExempt {
	exempt
	none
	reverse
}
type InvoiceInstallmentsCard {
	enabled: Boolean
}
type InvoiceItemThresholdReason {
	usageGte: Int!
	lineItemIds: [String!]!
}
type InvoiceLineItemPeriod {
	start: Int!
	end: Int!
}
type InvoiceLines {
	url: String!
	object: InvoiceObjectLines!
	hasMore: Boolean!
	data: [LineItem!]!
}
type InvoiceMandateOptionsCard {
	description: String
	amountType: InvoiceMandateOptionsCardAmountType
	amount: Int
}
enum InvoiceMandateOptionsCardAmountType {
	fixed
	maximum
}
enum InvoiceObject {
	invoice
}
enum InvoiceObjectLines {
	list
}
type InvoicePaymentMethodOptionsAcssDebit {
	verificationMethod: InvoicePaymentMethodOptionsAcssDebitVerificationMethod!
	mandateOptions: InvoicePaymentMethodOptionsAcssDebitMandateOptions!
}
type InvoicePaymentMethodOptionsAcssDebitMandateOptions {
	transactionType: InvoicePaymentMethodOptionsAcssDebitMandateOptionsTransactionType
}
enum InvoicePaymentMethodOptionsAcssDebitMandateOptionsTransactionType {
	business
	personal
}
union InvoicePaymentMethodOptionsAcssDebitUnion = InvoicePaymentMethodOptionsAcssDebit
enum InvoicePaymentMethodOptionsAcssDebitVerificationMethod {
	automatic
	instant
	microdeposits
}
type InvoicePaymentMethodOptionsBancontact {
	preferredLanguage: InvoicePaymentMethodOptionsBancontactPreferredLanguage!
}
enum InvoicePaymentMethodOptionsBancontactPreferredLanguage {
	de
	en
	fr
	nl
}
union InvoicePaymentMethodOptionsBancontactUnion = InvoicePaymentMethodOptionsBancontact
type InvoicePaymentMethodOptionsCard {
	requestThreeDSecure: InvoicePaymentMethodOptionsCardRequestThreeDSecure
	installments: InvoiceInstallmentsCard!
}
enum InvoicePaymentMethodOptionsCardRequestThreeDSecure {
	any
	automatic
}
union InvoicePaymentMethodOptionsCardUnion = InvoicePaymentMethodOptionsCard
type InvoicePaymentMethodOptionsCustomerBalance {
	fundingType: InvoicePaymentMethodOptionsCustomerBalanceFundingType
	bankTransfer: InvoicePaymentMethodOptionsCustomerBalanceBankTransfer!
}
type InvoicePaymentMethodOptionsCustomerBalanceBankTransfer {
	type: String
	euBankTransfer: InvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransfer!
}
type InvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransfer {
	country: InvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransferCountry!
}
enum InvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransferCountry {
	BE
	DE
	ES
	FR
	IE
	NL
}
enum InvoicePaymentMethodOptionsCustomerBalanceFundingType {
	bank_transfer
}
union InvoicePaymentMethodOptionsCustomerBalanceUnion = InvoicePaymentMethodOptionsCustomerBalance
type InvoicePaymentMethodOptionsUsBankAccount {
	verificationMethod: InvoicePaymentMethodOptionsUsBankAccountVerificationMethod!
	financialConnections: InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptions!
}
type InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptions {
	permissions: [InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptionsPermissions!]!
}
enum InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptionsPermissions {
	balances
	payment_method
	transactions
}
union InvoicePaymentMethodOptionsUsBankAccountUnion = InvoicePaymentMethodOptionsUsBankAccount
enum InvoicePaymentMethodOptionsUsBankAccountVerificationMethod {
	automatic
	instant
	microdeposits
}
type InvoiceSettingCustomField {
	value: String!
	name: String!
}
type InvoiceSettingCustomerSetting {
	renderingOptions: InvoiceSettingRenderingOptionsUnion
	footer: String
	defaultPaymentMethod: PaymentMethodUnion
	customFields: [InvoiceSettingCustomField!]
}
type InvoiceSettingQuoteSetting {
	daysUntilDue: Int
}
union InvoiceSettingQuoteSettingUnion = InvoiceSettingQuoteSetting
type InvoiceSettingRenderingOptions {
	amountTaxDisplay: String
}
union InvoiceSettingRenderingOptionsUnion = InvoiceSettingRenderingOptions
type InvoiceSettingSubscriptionScheduleSetting {
	daysUntilDue: Int
}
union InvoiceSettingSubscriptionScheduleSettingUnion = InvoiceSettingSubscriptionScheduleSetting
enum InvoiceStatus {
	deleted
	draft
	open
	paid
	uncollectible
	void
}
type InvoiceTaxAmount {
	taxRate: TaxRateUnion!
	inclusive: Boolean!
	amount: Int!
}
type InvoiceThresholdReason {
	itemReasons: [InvoiceItemThresholdReason!]!
	amountGte: Int
}
type InvoiceTransferData {
	destination: AccountUnion!
	amount: Int
}
union InvoiceTransferDataUnion = InvoiceTransferData
union InvoiceUnion = Invoice
type Invoiceitem {
	unitAmountDecimal: String
	unitAmount: Int
	testClock: TestHelpersTestClockUnion
	taxRates: [TaxRate!]
	subscriptionItem: String!
	subscription: SubscriptionUnion
	quantity: Int!
	proration: Boolean!
	price: PriceUnion
	period: InvoiceLineItemPeriod!
	object: InvoiceitemObject!
	metadata: JSON!
	livemode: Boolean!
	invoice: InvoiceUnion
	id: String!
	discounts: [DiscountUnion!]
	discountable: Boolean!
	description: String
	date: Int!
	customer: DeletedCustomerOrCustomerUnion!
	currency: String!
	amount: Int!
}
enum InvoiceitemObject {
	invoiceitem
}
type InvoicesFromInvoice {
	invoice: InvoiceUnion!
	action: String!
}
union InvoicesFromInvoiceUnion = InvoicesFromInvoice
type InvoicesLineItemsCreditedItems {
	invoiceLineItems: [String!]!
	invoice: String!
}
union InvoicesLineItemsCreditedItemsUnion = InvoicesLineItemsCreditedItems
type InvoicesLineItemsProrationDetails {
	creditedItems: InvoicesLineItemsCreditedItemsUnion
}
union InvoicesLineItemsProrationDetailsUnion = InvoicesLineItemsProrationDetails
type InvoicesPaymentMethodOptions {
	usBankAccount: InvoicePaymentMethodOptionsUsBankAccountUnion
	konbini: Union
	customerBalance: InvoicePaymentMethodOptionsCustomerBalanceUnion
	card: InvoicePaymentMethodOptionsCardUnion
	bancontact: InvoicePaymentMethodOptionsBancontactUnion
	acssDebit: InvoicePaymentMethodOptionsAcssDebitUnion
}
union InvoicesPaymentMethodOptionsUnion = InvoicesPaymentMethodOptions
type InvoicesPaymentSettings {
	paymentMethodTypes: [InvoicesPaymentSettingsPaymentMethodTypes!]
	paymentMethodOptions: InvoicesPaymentMethodOptionsUnion
	defaultMandate: String
}
enum InvoicesPaymentSettingsPaymentMethodTypes {
	ach_credit_transfer
	ach_debit
	acss_debit
	au_becs_debit
	bacs_debit
	bancontact
	boleto
	card
	customer_balance
	fpx
	giropay
	grabpay
	ideal
	konbini
	link
	paynow
	promptpay
	sepa_debit
	sofort
	us_bank_account
	wechat_pay
}
type InvoicesResourceInvoiceTaxId {
	value: String
	type: InvoicesResourceInvoiceTaxIdType!
}
enum InvoicesResourceInvoiceTaxIdType {
	ae_trn
	au_abn
	au_arn
	bg_uic
	br_cnpj
	br_cpf
	ca_bn
	ca_gst_hst
	ca_pst_bc
	ca_pst_mb
	ca_pst_sk
	ca_qst
	ch_vat
	cl_tin
	eg_tin
	es_cif
	eu_oss_vat
	eu_vat
	gb_vat
	ge_vat
	hk_br
	hu_tin
	id_npwp
	il_vat
	in_gst
	is_vat
	jp_cn
	jp_rn
	jp_trn
	ke_pin
	kr_brn
	li_uid
	mx_rfc
	my_frp
	my_itn
	my_sst
	no_vat
	nz_gst
	ph_tin
	ru_inn
	ru_kpp
	sa_vat
	sg_gst
	sg_uen
	si_tin
	th_vat
	tr_tin
	tw_vat
	ua_vat
	unknown
	us_ein
	za_vat
}
type InvoicesShippingCost {
	taxes: [LineItemsTaxAmount!]!
	shippingRate: ShippingRateUnion
	amountTotal: Int!
	amountTax: Int!
	amountSubtotal: Int!
}
union InvoicesShippingCostUnion = InvoicesShippingCost
type InvoicesStatusTransitions {
	voidedAt: Int
	paidAt: Int
	markedUncollectibleAt: Int
	finalizedAt: Int
}
type IssuingAuthorization {
	wallet: String
	verificationData: IssuingAuthorizationVerificationData!
	treasury: IssuingAuthorizationTreasuryUnion
	transactions: [IssuingTransaction!]!
	status: IssuingAuthorizationStatus!
	requestHistory: [IssuingAuthorizationRequest!]!
	pendingRequest: IssuingAuthorizationPendingRequestUnion
	object: IssuingAuthorizationObject!
	networkData: IssuingAuthorizationNetworkDataUnion
	metadata: JSON!
	merchantData: IssuingAuthorizationMerchantData!
	merchantCurrency: String!
	merchantAmount: Int!
	livemode: Boolean!
	id: String!
	currency: String!
	created: Int!
	cardholder: IssuingCardholderUnion
	card: IssuingCard!
	balanceTransactions: [BalanceTransaction!]!
	authorizationMethod: IssuingAuthorizationAuthorizationMethod!
	approved: Boolean!
	amountDetails: IssuingAuthorizationAmountDetailsUnion
	amount: Int!
}
type IssuingAuthorizationAmountDetails {
	atmFee: Int
}
union IssuingAuthorizationAmountDetailsUnion = IssuingAuthorizationAmountDetails
enum IssuingAuthorizationAuthorizationMethod {
	chip
	contactless
	keyed_in
	online
	swipe
}
type IssuingAuthorizationMerchantData {
	state: String
	postalCode: String
	networkId: String!
	name: String
	country: String
	city: String
	categoryCode: String!
	category: String!
}
type IssuingAuthorizationNetworkData {
	acquiringInstitutionId: String
}
union IssuingAuthorizationNetworkDataUnion = IssuingAuthorizationNetworkData
enum IssuingAuthorizationObject {
	issuing.authorization
}
type IssuingAuthorizationPendingRequest {
	merchantCurrency: String!
	merchantAmount: Int!
	isAmountControllable: Boolean!
	currency: String!
	amountDetails: IssuingAuthorizationAmountDetailsUnion
	amount: Int!
}
union IssuingAuthorizationPendingRequestUnion = IssuingAuthorizationPendingRequest
type IssuingAuthorizationRequest {
	reasonMessage: String
	reason: IssuingAuthorizationRequestReason!
	merchantCurrency: String!
	merchantAmount: Int!
	currency: String!
	created: Int!
	approved: Boolean!
	amountDetails: IssuingAuthorizationAmountDetailsUnion
	amount: Int!
}
enum IssuingAuthorizationRequestReason {
	account_disabled
	card_active
	card_inactive
	cardholder_inactive
	cardholder_verification_required
	insufficient_funds
	not_allowed
	spending_controls
	suspected_fraud
	verification_failed
	webhook_approved
	webhook_declined
	webhook_error
	webhook_timeout
}
enum IssuingAuthorizationStatus {
	closed
	pending
	reversed
}
type IssuingAuthorizationTreasury {
	transaction: String
	receivedDebits: [String!]!
	receivedCredits: [String!]!
}
union IssuingAuthorizationTreasuryUnion = IssuingAuthorizationTreasury
union IssuingAuthorizationUnion = IssuingAuthorization
type IssuingAuthorizationVerificationData {
	expiryCheck: IssuingAuthorizationVerificationDataExpiryCheck!
	cvcCheck: IssuingAuthorizationVerificationDataCvcCheck!
	addressPostalCodeCheck: IssuingAuthorizationVerificationDataAddressPostalCodeCheck!
	addressLine1Check: IssuingAuthorizationVerificationDataAddressLine1Check!
}
enum IssuingAuthorizationVerificationDataAddressLine1Check {
	match
	mismatch
	not_provided
}
enum IssuingAuthorizationVerificationDataAddressPostalCodeCheck {
	match
	mismatch
	not_provided
}
enum IssuingAuthorizationVerificationDataCvcCheck {
	match
	mismatch
	not_provided
}
enum IssuingAuthorizationVerificationDataExpiryCheck {
	match
	mismatch
	not_provided
}
type IssuingCard {
	wallets: IssuingCardWalletsUnion
	type: IssuingCardType!
	status: IssuingCardStatus!
	spendingControls: IssuingCardAuthorizationControls!
	shipping: IssuingCardShippingUnion
	replacementReason: IssuingCardReplacementReason
	replacementFor: IssuingCardUnion
	replacedBy: IssuingCardUnion
	object: IssuingCardObject!
	number: String!
	metadata: JSON!
	livemode: Boolean!
	last4: String!
	id: String!
	financialAccount: String
	expYear: Int!
	expMonth: Int!
	cvc: String!
	currency: String!
	created: Int!
	cardholder: IssuingCardholder!
	cancellationReason: IssuingCardCancellationReason
	brand: String!
}
type IssuingCardApplePay {
	ineligibleReason: IssuingCardApplePayIneligibleReason
	eligible: Boolean!
}
enum IssuingCardApplePayIneligibleReason {
	missing_agreement
	missing_cardholder_contact
	unsupported_region
}
type IssuingCardAuthorizationControls {
	spendingLimitsCurrency: String
	spendingLimits: [IssuingCardSpendingLimit!]
	blockedCategories: [IssuingCardAuthorizationControlsBlockedCategories!]
	allowedCategories: [IssuingCardAuthorizationControlsAllowedCategories!]
}
enum IssuingCardAuthorizationControlsAllowedCategories {
	ac_refrigeration_repair
	accounting_bookkeeping_services
	advertising_services
	agricultural_cooperative
	airlines_air_carriers
	airports_flying_fields
	ambulance_services
	amusement_parks_carnivals
	antique_reproductions
	antique_shops
	aquariums
	architectural_surveying_services
	art_dealers_and_galleries
	artists_supply_and_craft_shops
	auto_and_home_supply_stores
	auto_body_repair_shops
	auto_paint_shops
	auto_service_shops
	automated_cash_disburse
	automated_fuel_dispensers
	automobile_associations
	automotive_parts_and_accessories_stores
	automotive_tire_stores
	bail_and_bond_payments
	bakeries
	bands_orchestras
	barber_and_beauty_shops
	betting_casino_gambling
	bicycle_shops
	billiard_pool_establishments
	boat_dealers
	boat_rentals_and_leases
	book_stores
	books_periodicals_and_newspapers
	bowling_alleys
	bus_lines
	business_secretarial_schools
	buying_shopping_services
	cable_satellite_and_other_pay_television_and_radio
	camera_and_photographic_supply_stores
	candy_nut_and_confectionery_stores
	car_and_truck_dealers_new_used
	car_and_truck_dealers_used_only
	car_rental_agencies
	car_washes
	carpentry_services
	carpet_upholstery_cleaning
	caterers
	charitable_and_social_service_organizations_fundraising
	chemicals_and_allied_products
	child_care_services
	childrens_and_infants_wear_stores
	chiropodists_podiatrists
	chiropractors
	cigar_stores_and_stands
	civic_social_fraternal_associations
	cleaning_and_maintenance
	clothing_rental
	colleges_universities
	commercial_equipment
	commercial_footwear
	commercial_photography_art_and_graphics
	commuter_transport_and_ferries
	computer_network_services
	computer_programming
	computer_repair
	computer_software_stores
	computers_peripherals_and_software
	concrete_work_services
	construction_materials
	consulting_public_relations
	correspondence_schools
	cosmetic_stores
	counseling_services
	country_clubs
	courier_services
	court_costs
	credit_reporting_agencies
	cruise_lines
	dairy_products_stores
	dance_hall_studios_schools
	dating_escort_services
	dentists_orthodontists
	department_stores
	detective_agencies
	digital_goods_applications
	digital_goods_games
	digital_goods_large_volume
	digital_goods_media
	direct_marketing_catalog_merchant
	direct_marketing_combination_catalog_and_retail_merchant
	direct_marketing_inbound_telemarketing
	direct_marketing_insurance_services
	direct_marketing_other
	direct_marketing_outbound_telemarketing
	direct_marketing_subscription
	direct_marketing_travel
	discount_stores
	doctors
	door_to_door_sales
	drapery_window_covering_and_upholstery_stores
	drinking_places
	drug_stores_and_pharmacies
	drugs_drug_proprietaries_and_druggist_sundries
	dry_cleaners
	durable_goods
	duty_free_stores
	eating_places_restaurants
	educational_services
	electric_razor_stores
	electrical_parts_and_equipment
	electrical_services
	electronics_repair_shops
	electronics_stores
	elementary_secondary_schools
	employment_temp_agencies
	equipment_rental
	exterminating_services
	family_clothing_stores
	fast_food_restaurants
	financial_institutions
	fines_government_administrative_entities
	fireplace_fireplace_screens_and_accessories_stores
	floor_covering_stores
	florists
	florists_supplies_nursery_stock_and_flowers
	freezer_and_locker_meat_provisioners
	fuel_dealers_non_automotive
	funeral_services_crematories
	furniture_home_furnishings_and_equipment_stores_except_appliances
	furniture_repair_refinishing
	furriers_and_fur_shops
	general_services
	gift_card_novelty_and_souvenir_shops
	glass_paint_and_wallpaper_stores
	glassware_crystal_stores
	golf_courses_public
	government_services
	grocery_stores_supermarkets
	hardware_equipment_and_supplies
	hardware_stores
	health_and_beauty_spas
	hearing_aids_sales_and_supplies
	heating_plumbing_a_c
	hobby_toy_and_game_shops
	home_supply_warehouse_stores
	hospitals
	hotels_motels_and_resorts
	household_appliance_stores
	industrial_supplies
	information_retrieval_services
	insurance_default
	insurance_underwriting_premiums
	intra_company_purchases
	jewelry_stores_watches_clocks_and_silverware_stores
	landscaping_services
	laundries
	laundry_cleaning_services
	legal_services_attorneys
	luggage_and_leather_goods_stores
	lumber_building_materials_stores
	manual_cash_disburse
	marinas_service_and_supplies
	masonry_stonework_and_plaster
	massage_parlors
	medical_and_dental_labs
	medical_dental_ophthalmic_and_hospital_equipment_and_supplies
	medical_services
	membership_organizations
	mens_and_boys_clothing_and_accessories_stores
	mens_womens_clothing_stores
	metal_service_centers
	miscellaneous
	miscellaneous_apparel_and_accessory_shops
	miscellaneous_auto_dealers
	miscellaneous_business_services
	miscellaneous_food_stores
	miscellaneous_general_merchandise
	miscellaneous_general_services
	miscellaneous_home_furnishing_specialty_stores
	miscellaneous_publishing_and_printing
	miscellaneous_recreation_services
	miscellaneous_repair_shops
	miscellaneous_specialty_retail
	mobile_home_dealers
	motion_picture_theaters
	motor_freight_carriers_and_trucking
	motor_homes_dealers
	motor_vehicle_supplies_and_new_parts
	motorcycle_shops_and_dealers
	motorcycle_shops_dealers
	music_stores_musical_instruments_pianos_and_sheet_music
	news_dealers_and_newsstands
	non_fi_money_orders
	non_fi_stored_value_card_purchase_load
	nondurable_goods
	nurseries_lawn_and_garden_supply_stores
	nursing_personal_care
	office_and_commercial_furniture
	opticians_eyeglasses
	optometrists_ophthalmologist
	orthopedic_goods_prosthetic_devices
	osteopaths
	package_stores_beer_wine_and_liquor
	paints_varnishes_and_supplies
	parking_lots_garages
	passenger_railways
	pawn_shops
	pet_shops_pet_food_and_supplies
	petroleum_and_petroleum_products
	photo_developing
	photographic_photocopy_microfilm_equipment_and_supplies
	photographic_studios
	picture_video_production
	piece_goods_notions_and_other_dry_goods
	plumbing_heating_equipment_and_supplies
	political_organizations
	postal_services_government_only
	precious_stones_and_metals_watches_and_jewelry
	professional_services
	public_warehousing_and_storage
	quick_copy_repro_and_blueprint
	railroads
	real_estate_agents_and_managers_rentals
	record_stores
	recreational_vehicle_rentals
	religious_goods_stores
	religious_organizations
	roofing_siding_sheet_metal
	secretarial_support_services
	security_brokers_dealers
	service_stations
	sewing_needlework_fabric_and_piece_goods_stores
	shoe_repair_hat_cleaning
	shoe_stores
	small_appliance_repair
	snowmobile_dealers
	special_trade_services
	specialty_cleaning
	sporting_goods_stores
	sporting_recreation_camps
	sports_and_riding_apparel_stores
	sports_clubs_fields
	stamp_and_coin_stores
	stationary_office_supplies_printing_and_writing_paper
	stationery_stores_office_and_school_supply_stores
	swimming_pools_sales
	t_ui_travel_germany
	tailors_alterations
	tax_payments_government_agencies
	tax_preparation_services
	taxicabs_limousines
	telecommunication_equipment_and_telephone_sales
	telecommunication_services
	telegraph_services
	tent_and_awning_shops
	testing_laboratories
	theatrical_ticket_agencies
	timeshares
	tire_retreading_and_repair
	tolls_bridge_fees
	tourist_attractions_and_exhibits
	towing_services
	trailer_parks_campgrounds
	transportation_services
	travel_agencies_tour_operators
	truck_stop_iteration
	truck_utility_trailer_rentals
	typesetting_plate_making_and_related_services
	typewriter_stores
	u_s_federal_government_agencies_or_departments
	uniforms_commercial_clothing
	used_merchandise_and_secondhand_stores
	utilities
	variety_stores
	veterinary_services
	video_amusement_game_supplies
	video_game_arcades
	video_tape_rental_stores
	vocational_trade_schools
	watch_jewelry_repair
	welding_repair
	wholesale_clubs
	wig_and_toupee_stores
	wires_money_orders
	womens_accessory_and_specialty_shops
	womens_ready_to_wear_stores
	wrecking_and_salvage_yards
}
enum IssuingCardAuthorizationControlsBlockedCategories {
	ac_refrigeration_repair
	accounting_bookkeeping_services
	advertising_services
	agricultural_cooperative
	airlines_air_carriers
	airports_flying_fields
	ambulance_services
	amusement_parks_carnivals
	antique_reproductions
	antique_shops
	aquariums
	architectural_surveying_services
	art_dealers_and_galleries
	artists_supply_and_craft_shops
	auto_and_home_supply_stores
	auto_body_repair_shops
	auto_paint_shops
	auto_service_shops
	automated_cash_disburse
	automated_fuel_dispensers
	automobile_associations
	automotive_parts_and_accessories_stores
	automotive_tire_stores
	bail_and_bond_payments
	bakeries
	bands_orchestras
	barber_and_beauty_shops
	betting_casino_gambling
	bicycle_shops
	billiard_pool_establishments
	boat_dealers
	boat_rentals_and_leases
	book_stores
	books_periodicals_and_newspapers
	bowling_alleys
	bus_lines
	business_secretarial_schools
	buying_shopping_services
	cable_satellite_and_other_pay_television_and_radio
	camera_and_photographic_supply_stores
	candy_nut_and_confectionery_stores
	car_and_truck_dealers_new_used
	car_and_truck_dealers_used_only
	car_rental_agencies
	car_washes
	carpentry_services
	carpet_upholstery_cleaning
	caterers
	charitable_and_social_service_organizations_fundraising
	chemicals_and_allied_products
	child_care_services
	childrens_and_infants_wear_stores
	chiropodists_podiatrists
	chiropractors
	cigar_stores_and_stands
	civic_social_fraternal_associations
	cleaning_and_maintenance
	clothing_rental
	colleges_universities
	commercial_equipment
	commercial_footwear
	commercial_photography_art_and_graphics
	commuter_transport_and_ferries
	computer_network_services
	computer_programming
	computer_repair
	computer_software_stores
	computers_peripherals_and_software
	concrete_work_services
	construction_materials
	consulting_public_relations
	correspondence_schools
	cosmetic_stores
	counseling_services
	country_clubs
	courier_services
	court_costs
	credit_reporting_agencies
	cruise_lines
	dairy_products_stores
	dance_hall_studios_schools
	dating_escort_services
	dentists_orthodontists
	department_stores
	detective_agencies
	digital_goods_applications
	digital_goods_games
	digital_goods_large_volume
	digital_goods_media
	direct_marketing_catalog_merchant
	direct_marketing_combination_catalog_and_retail_merchant
	direct_marketing_inbound_telemarketing
	direct_marketing_insurance_services
	direct_marketing_other
	direct_marketing_outbound_telemarketing
	direct_marketing_subscription
	direct_marketing_travel
	discount_stores
	doctors
	door_to_door_sales
	drapery_window_covering_and_upholstery_stores
	drinking_places
	drug_stores_and_pharmacies
	drugs_drug_proprietaries_and_druggist_sundries
	dry_cleaners
	durable_goods
	duty_free_stores
	eating_places_restaurants
	educational_services
	electric_razor_stores
	electrical_parts_and_equipment
	electrical_services
	electronics_repair_shops
	electronics_stores
	elementary_secondary_schools
	employment_temp_agencies
	equipment_rental
	exterminating_services
	family_clothing_stores
	fast_food_restaurants
	financial_institutions
	fines_government_administrative_entities
	fireplace_fireplace_screens_and_accessories_stores
	floor_covering_stores
	florists
	florists_supplies_nursery_stock_and_flowers
	freezer_and_locker_meat_provisioners
	fuel_dealers_non_automotive
	funeral_services_crematories
	furniture_home_furnishings_and_equipment_stores_except_appliances
	furniture_repair_refinishing
	furriers_and_fur_shops
	general_services
	gift_card_novelty_and_souvenir_shops
	glass_paint_and_wallpaper_stores
	glassware_crystal_stores
	golf_courses_public
	government_services
	grocery_stores_supermarkets
	hardware_equipment_and_supplies
	hardware_stores
	health_and_beauty_spas
	hearing_aids_sales_and_supplies
	heating_plumbing_a_c
	hobby_toy_and_game_shops
	home_supply_warehouse_stores
	hospitals
	hotels_motels_and_resorts
	household_appliance_stores
	industrial_supplies
	information_retrieval_services
	insurance_default
	insurance_underwriting_premiums
	intra_company_purchases
	jewelry_stores_watches_clocks_and_silverware_stores
	landscaping_services
	laundries
	laundry_cleaning_services
	legal_services_attorneys
	luggage_and_leather_goods_stores
	lumber_building_materials_stores
	manual_cash_disburse
	marinas_service_and_supplies
	masonry_stonework_and_plaster
	massage_parlors
	medical_and_dental_labs
	medical_dental_ophthalmic_and_hospital_equipment_and_supplies
	medical_services
	membership_organizations
	mens_and_boys_clothing_and_accessories_stores
	mens_womens_clothing_stores
	metal_service_centers
	miscellaneous
	miscellaneous_apparel_and_accessory_shops
	miscellaneous_auto_dealers
	miscellaneous_business_services
	miscellaneous_food_stores
	miscellaneous_general_merchandise
	miscellaneous_general_services
	miscellaneous_home_furnishing_specialty_stores
	miscellaneous_publishing_and_printing
	miscellaneous_recreation_services
	miscellaneous_repair_shops
	miscellaneous_specialty_retail
	mobile_home_dealers
	motion_picture_theaters
	motor_freight_carriers_and_trucking
	motor_homes_dealers
	motor_vehicle_supplies_and_new_parts
	motorcycle_shops_and_dealers
	motorcycle_shops_dealers
	music_stores_musical_instruments_pianos_and_sheet_music
	news_dealers_and_newsstands
	non_fi_money_orders
	non_fi_stored_value_card_purchase_load
	nondurable_goods
	nurseries_lawn_and_garden_supply_stores
	nursing_personal_care
	office_and_commercial_furniture
	opticians_eyeglasses
	optometrists_ophthalmologist
	orthopedic_goods_prosthetic_devices
	osteopaths
	package_stores_beer_wine_and_liquor
	paints_varnishes_and_supplies
	parking_lots_garages
	passenger_railways
	pawn_shops
	pet_shops_pet_food_and_supplies
	petroleum_and_petroleum_products
	photo_developing
	photographic_photocopy_microfilm_equipment_and_supplies
	photographic_studios
	picture_video_production
	piece_goods_notions_and_other_dry_goods
	plumbing_heating_equipment_and_supplies
	political_organizations
	postal_services_government_only
	precious_stones_and_metals_watches_and_jewelry
	professional_services
	public_warehousing_and_storage
	quick_copy_repro_and_blueprint
	railroads
	real_estate_agents_and_managers_rentals
	record_stores
	recreational_vehicle_rentals
	religious_goods_stores
	religious_organizations
	roofing_siding_sheet_metal
	secretarial_support_services
	security_brokers_dealers
	service_stations
	sewing_needlework_fabric_and_piece_goods_stores
	shoe_repair_hat_cleaning
	shoe_stores
	small_appliance_repair
	snowmobile_dealers
	special_trade_services
	specialty_cleaning
	sporting_goods_stores
	sporting_recreation_camps
	sports_and_riding_apparel_stores
	sports_clubs_fields
	stamp_and_coin_stores
	stationary_office_supplies_printing_and_writing_paper
	stationery_stores_office_and_school_supply_stores
	swimming_pools_sales
	t_ui_travel_germany
	tailors_alterations
	tax_payments_government_agencies
	tax_preparation_services
	taxicabs_limousines
	telecommunication_equipment_and_telephone_sales
	telecommunication_services
	telegraph_services
	tent_and_awning_shops
	testing_laboratories
	theatrical_ticket_agencies
	timeshares
	tire_retreading_and_repair
	tolls_bridge_fees
	tourist_attractions_and_exhibits
	towing_services
	trailer_parks_campgrounds
	transportation_services
	travel_agencies_tour_operators
	truck_stop_iteration
	truck_utility_trailer_rentals
	typesetting_plate_making_and_related_services
	typewriter_stores
	u_s_federal_government_agencies_or_departments
	uniforms_commercial_clothing
	used_merchandise_and_secondhand_stores
	utilities
	variety_stores
	veterinary_services
	video_amusement_game_supplies
	video_game_arcades
	video_tape_rental_stores
	vocational_trade_schools
	watch_jewelry_repair
	welding_repair
	wholesale_clubs
	wig_and_toupee_stores
	wires_money_orders
	womens_accessory_and_specialty_shops
	womens_ready_to_wear_stores
	wrecking_and_salvage_yards
}
enum IssuingCardCancellationReason {
	design_rejected
	lost
	stolen
}
type IssuingCardGooglePay {
	ineligibleReason: IssuingCardGooglePayIneligibleReason
	eligible: Boolean!
}
enum IssuingCardGooglePayIneligibleReason {
	missing_agreement
	missing_cardholder_contact
	unsupported_region
}
enum IssuingCardObject {
	issuing.card
}
enum IssuingCardReplacementReason {
	damaged
	expired
	lost
	stolen
}
type IssuingCardShipping {
	type: IssuingCardShippingType!
	trackingUrl: String
	trackingNumber: String
	status: IssuingCardShippingStatus
	service: IssuingCardShippingService!
	requireSignature: Boolean
	phoneNumber: String
	name: String!
	eta: Int
	customs: IssuingCardShippingCustomsUnion
	carrier: IssuingCardShippingCarrier
	address: Address!
}
enum IssuingCardShippingCarrier {
	dhl
	fedex
	royal_mail
	usps
}
type IssuingCardShippingCustoms {
	eoriNumber: String
}
union IssuingCardShippingCustomsUnion = IssuingCardShippingCustoms
enum IssuingCardShippingService {
	express
	priority
	standard
}
enum IssuingCardShippingStatus {
	canceled
	delivered
	failure
	pending
	returned
	shipped
}
enum IssuingCardShippingType {
	bulk
	individual
}
union IssuingCardShippingUnion = IssuingCardShipping
type IssuingCardSpendingLimit {
	interval: IssuingCardSpendingLimitInterval!
	categories: [IssuingCardSpendingLimitCategories!]
	amount: Int!
}
enum IssuingCardSpendingLimitCategories {
	ac_refrigeration_repair
	accounting_bookkeeping_services
	advertising_services
	agricultural_cooperative
	airlines_air_carriers
	airports_flying_fields
	ambulance_services
	amusement_parks_carnivals
	antique_reproductions
	antique_shops
	aquariums
	architectural_surveying_services
	art_dealers_and_galleries
	artists_supply_and_craft_shops
	auto_and_home_supply_stores
	auto_body_repair_shops
	auto_paint_shops
	auto_service_shops
	automated_cash_disburse
	automated_fuel_dispensers
	automobile_associations
	automotive_parts_and_accessories_stores
	automotive_tire_stores
	bail_and_bond_payments
	bakeries
	bands_orchestras
	barber_and_beauty_shops
	betting_casino_gambling
	bicycle_shops
	billiard_pool_establishments
	boat_dealers
	boat_rentals_and_leases
	book_stores
	books_periodicals_and_newspapers
	bowling_alleys
	bus_lines
	business_secretarial_schools
	buying_shopping_services
	cable_satellite_and_other_pay_television_and_radio
	camera_and_photographic_supply_stores
	candy_nut_and_confectionery_stores
	car_and_truck_dealers_new_used
	car_and_truck_dealers_used_only
	car_rental_agencies
	car_washes
	carpentry_services
	carpet_upholstery_cleaning
	caterers
	charitable_and_social_service_organizations_fundraising
	chemicals_and_allied_products
	child_care_services
	childrens_and_infants_wear_stores
	chiropodists_podiatrists
	chiropractors
	cigar_stores_and_stands
	civic_social_fraternal_associations
	cleaning_and_maintenance
	clothing_rental
	colleges_universities
	commercial_equipment
	commercial_footwear
	commercial_photography_art_and_graphics
	commuter_transport_and_ferries
	computer_network_services
	computer_programming
	computer_repair
	computer_software_stores
	computers_peripherals_and_software
	concrete_work_services
	construction_materials
	consulting_public_relations
	correspondence_schools
	cosmetic_stores
	counseling_services
	country_clubs
	courier_services
	court_costs
	credit_reporting_agencies
	cruise_lines
	dairy_products_stores
	dance_hall_studios_schools
	dating_escort_services
	dentists_orthodontists
	department_stores
	detective_agencies
	digital_goods_applications
	digital_goods_games
	digital_goods_large_volume
	digital_goods_media
	direct_marketing_catalog_merchant
	direct_marketing_combination_catalog_and_retail_merchant
	direct_marketing_inbound_telemarketing
	direct_marketing_insurance_services
	direct_marketing_other
	direct_marketing_outbound_telemarketing
	direct_marketing_subscription
	direct_marketing_travel
	discount_stores
	doctors
	door_to_door_sales
	drapery_window_covering_and_upholstery_stores
	drinking_places
	drug_stores_and_pharmacies
	drugs_drug_proprietaries_and_druggist_sundries
	dry_cleaners
	durable_goods
	duty_free_stores
	eating_places_restaurants
	educational_services
	electric_razor_stores
	electrical_parts_and_equipment
	electrical_services
	electronics_repair_shops
	electronics_stores
	elementary_secondary_schools
	employment_temp_agencies
	equipment_rental
	exterminating_services
	family_clothing_stores
	fast_food_restaurants
	financial_institutions
	fines_government_administrative_entities
	fireplace_fireplace_screens_and_accessories_stores
	floor_covering_stores
	florists
	florists_supplies_nursery_stock_and_flowers
	freezer_and_locker_meat_provisioners
	fuel_dealers_non_automotive
	funeral_services_crematories
	furniture_home_furnishings_and_equipment_stores_except_appliances
	furniture_repair_refinishing
	furriers_and_fur_shops
	general_services
	gift_card_novelty_and_souvenir_shops
	glass_paint_and_wallpaper_stores
	glassware_crystal_stores
	golf_courses_public
	government_services
	grocery_stores_supermarkets
	hardware_equipment_and_supplies
	hardware_stores
	health_and_beauty_spas
	hearing_aids_sales_and_supplies
	heating_plumbing_a_c
	hobby_toy_and_game_shops
	home_supply_warehouse_stores
	hospitals
	hotels_motels_and_resorts
	household_appliance_stores
	industrial_supplies
	information_retrieval_services
	insurance_default
	insurance_underwriting_premiums
	intra_company_purchases
	jewelry_stores_watches_clocks_and_silverware_stores
	landscaping_services
	laundries
	laundry_cleaning_services
	legal_services_attorneys
	luggage_and_leather_goods_stores
	lumber_building_materials_stores
	manual_cash_disburse
	marinas_service_and_supplies
	masonry_stonework_and_plaster
	massage_parlors
	medical_and_dental_labs
	medical_dental_ophthalmic_and_hospital_equipment_and_supplies
	medical_services
	membership_organizations
	mens_and_boys_clothing_and_accessories_stores
	mens_womens_clothing_stores
	metal_service_centers
	miscellaneous
	miscellaneous_apparel_and_accessory_shops
	miscellaneous_auto_dealers
	miscellaneous_business_services
	miscellaneous_food_stores
	miscellaneous_general_merchandise
	miscellaneous_general_services
	miscellaneous_home_furnishing_specialty_stores
	miscellaneous_publishing_and_printing
	miscellaneous_recreation_services
	miscellaneous_repair_shops
	miscellaneous_specialty_retail
	mobile_home_dealers
	motion_picture_theaters
	motor_freight_carriers_and_trucking
	motor_homes_dealers
	motor_vehicle_supplies_and_new_parts
	motorcycle_shops_and_dealers
	motorcycle_shops_dealers
	music_stores_musical_instruments_pianos_and_sheet_music
	news_dealers_and_newsstands
	non_fi_money_orders
	non_fi_stored_value_card_purchase_load
	nondurable_goods
	nurseries_lawn_and_garden_supply_stores
	nursing_personal_care
	office_and_commercial_furniture
	opticians_eyeglasses
	optometrists_ophthalmologist
	orthopedic_goods_prosthetic_devices
	osteopaths
	package_stores_beer_wine_and_liquor
	paints_varnishes_and_supplies
	parking_lots_garages
	passenger_railways
	pawn_shops
	pet_shops_pet_food_and_supplies
	petroleum_and_petroleum_products
	photo_developing
	photographic_photocopy_microfilm_equipment_and_supplies
	photographic_studios
	picture_video_production
	piece_goods_notions_and_other_dry_goods
	plumbing_heating_equipment_and_supplies
	political_organizations
	postal_services_government_only
	precious_stones_and_metals_watches_and_jewelry
	professional_services
	public_warehousing_and_storage
	quick_copy_repro_and_blueprint
	railroads
	real_estate_agents_and_managers_rentals
	record_stores
	recreational_vehicle_rentals
	religious_goods_stores
	religious_organizations
	roofing_siding_sheet_metal
	secretarial_support_services
	security_brokers_dealers
	service_stations
	sewing_needlework_fabric_and_piece_goods_stores
	shoe_repair_hat_cleaning
	shoe_stores
	small_appliance_repair
	snowmobile_dealers
	special_trade_services
	specialty_cleaning
	sporting_goods_stores
	sporting_recreation_camps
	sports_and_riding_apparel_stores
	sports_clubs_fields
	stamp_and_coin_stores
	stationary_office_supplies_printing_and_writing_paper
	stationery_stores_office_and_school_supply_stores
	swimming_pools_sales
	t_ui_travel_germany
	tailors_alterations
	tax_payments_government_agencies
	tax_preparation_services
	taxicabs_limousines
	telecommunication_equipment_and_telephone_sales
	telecommunication_services
	telegraph_services
	tent_and_awning_shops
	testing_laboratories
	theatrical_ticket_agencies
	timeshares
	tire_retreading_and_repair
	tolls_bridge_fees
	tourist_attractions_and_exhibits
	towing_services
	trailer_parks_campgrounds
	transportation_services
	travel_agencies_tour_operators
	truck_stop_iteration
	truck_utility_trailer_rentals
	typesetting_plate_making_and_related_services
	typewriter_stores
	u_s_federal_government_agencies_or_departments
	uniforms_commercial_clothing
	used_merchandise_and_secondhand_stores
	utilities
	variety_stores
	veterinary_services
	video_amusement_game_supplies
	video_game_arcades
	video_tape_rental_stores
	vocational_trade_schools
	watch_jewelry_repair
	welding_repair
	wholesale_clubs
	wig_and_toupee_stores
	wires_money_orders
	womens_accessory_and_specialty_shops
	womens_ready_to_wear_stores
	wrecking_and_salvage_yards
}
enum IssuingCardSpendingLimitInterval {
	all_time
	daily
	monthly
	per_authorization
	weekly
	yearly
}
enum IssuingCardStatus {
	active
	canceled
	inactive
}
enum IssuingCardType {
	physical
	virtual
}
union IssuingCardUnion = IssuingCard
type IssuingCardWallets {
	primaryAccountIdentifier: String
	googlePay: IssuingCardGooglePay!
	applePay: IssuingCardApplePay!
}
union IssuingCardWalletsUnion = IssuingCardWallets
type IssuingCardholder {
	type: IssuingCardholderType!
	status: IssuingCardholderStatus!
	spendingControls: IssuingCardholderAuthorizationControlsUnion
	requirements: IssuingCardholderRequirements!
	phoneNumber: String
	object: IssuingCardholderObject!
	name: String!
	metadata: JSON!
	livemode: Boolean!
	individual: IssuingCardholderIndividualUnion
	id: String!
	email: String
	created: Int!
	company: IssuingCardholderCompanyUnion
	billing: IssuingCardholderAddress!
}
type IssuingCardholderAddress {
	address: Address!
}
type IssuingCardholderAuthorizationControls {
	spendingLimitsCurrency: String
	spendingLimits: [IssuingCardholderSpendingLimit!]
	blockedCategories: [IssuingCardholderAuthorizationControlsBlockedCategories!]
	allowedCategories: [IssuingCardholderAuthorizationControlsAllowedCategories!]
}
enum IssuingCardholderAuthorizationControlsAllowedCategories {
	ac_refrigeration_repair
	accounting_bookkeeping_services
	advertising_services
	agricultural_cooperative
	airlines_air_carriers
	airports_flying_fields
	ambulance_services
	amusement_parks_carnivals
	antique_reproductions
	antique_shops
	aquariums
	architectural_surveying_services
	art_dealers_and_galleries
	artists_supply_and_craft_shops
	auto_and_home_supply_stores
	auto_body_repair_shops
	auto_paint_shops
	auto_service_shops
	automated_cash_disburse
	automated_fuel_dispensers
	automobile_associations
	automotive_parts_and_accessories_stores
	automotive_tire_stores
	bail_and_bond_payments
	bakeries
	bands_orchestras
	barber_and_beauty_shops
	betting_casino_gambling
	bicycle_shops
	billiard_pool_establishments
	boat_dealers
	boat_rentals_and_leases
	book_stores
	books_periodicals_and_newspapers
	bowling_alleys
	bus_lines
	business_secretarial_schools
	buying_shopping_services
	cable_satellite_and_other_pay_television_and_radio
	camera_and_photographic_supply_stores
	candy_nut_and_confectionery_stores
	car_and_truck_dealers_new_used
	car_and_truck_dealers_used_only
	car_rental_agencies
	car_washes
	carpentry_services
	carpet_upholstery_cleaning
	caterers
	charitable_and_social_service_organizations_fundraising
	chemicals_and_allied_products
	child_care_services
	childrens_and_infants_wear_stores
	chiropodists_podiatrists
	chiropractors
	cigar_stores_and_stands
	civic_social_fraternal_associations
	cleaning_and_maintenance
	clothing_rental
	colleges_universities
	commercial_equipment
	commercial_footwear
	commercial_photography_art_and_graphics
	commuter_transport_and_ferries
	computer_network_services
	computer_programming
	computer_repair
	computer_software_stores
	computers_peripherals_and_software
	concrete_work_services
	construction_materials
	consulting_public_relations
	correspondence_schools
	cosmetic_stores
	counseling_services
	country_clubs
	courier_services
	court_costs
	credit_reporting_agencies
	cruise_lines
	dairy_products_stores
	dance_hall_studios_schools
	dating_escort_services
	dentists_orthodontists
	department_stores
	detective_agencies
	digital_goods_applications
	digital_goods_games
	digital_goods_large_volume
	digital_goods_media
	direct_marketing_catalog_merchant
	direct_marketing_combination_catalog_and_retail_merchant
	direct_marketing_inbound_telemarketing
	direct_marketing_insurance_services
	direct_marketing_other
	direct_marketing_outbound_telemarketing
	direct_marketing_subscription
	direct_marketing_travel
	discount_stores
	doctors
	door_to_door_sales
	drapery_window_covering_and_upholstery_stores
	drinking_places
	drug_stores_and_pharmacies
	drugs_drug_proprietaries_and_druggist_sundries
	dry_cleaners
	durable_goods
	duty_free_stores
	eating_places_restaurants
	educational_services
	electric_razor_stores
	electrical_parts_and_equipment
	electrical_services
	electronics_repair_shops
	electronics_stores
	elementary_secondary_schools
	employment_temp_agencies
	equipment_rental
	exterminating_services
	family_clothing_stores
	fast_food_restaurants
	financial_institutions
	fines_government_administrative_entities
	fireplace_fireplace_screens_and_accessories_stores
	floor_covering_stores
	florists
	florists_supplies_nursery_stock_and_flowers
	freezer_and_locker_meat_provisioners
	fuel_dealers_non_automotive
	funeral_services_crematories
	furniture_home_furnishings_and_equipment_stores_except_appliances
	furniture_repair_refinishing
	furriers_and_fur_shops
	general_services
	gift_card_novelty_and_souvenir_shops
	glass_paint_and_wallpaper_stores
	glassware_crystal_stores
	golf_courses_public
	government_services
	grocery_stores_supermarkets
	hardware_equipment_and_supplies
	hardware_stores
	health_and_beauty_spas
	hearing_aids_sales_and_supplies
	heating_plumbing_a_c
	hobby_toy_and_game_shops
	home_supply_warehouse_stores
	hospitals
	hotels_motels_and_resorts
	household_appliance_stores
	industrial_supplies
	information_retrieval_services
	insurance_default
	insurance_underwriting_premiums
	intra_company_purchases
	jewelry_stores_watches_clocks_and_silverware_stores
	landscaping_services
	laundries
	laundry_cleaning_services
	legal_services_attorneys
	luggage_and_leather_goods_stores
	lumber_building_materials_stores
	manual_cash_disburse
	marinas_service_and_supplies
	masonry_stonework_and_plaster
	massage_parlors
	medical_and_dental_labs
	medical_dental_ophthalmic_and_hospital_equipment_and_supplies
	medical_services
	membership_organizations
	mens_and_boys_clothing_and_accessories_stores
	mens_womens_clothing_stores
	metal_service_centers
	miscellaneous
	miscellaneous_apparel_and_accessory_shops
	miscellaneous_auto_dealers
	miscellaneous_business_services
	miscellaneous_food_stores
	miscellaneous_general_merchandise
	miscellaneous_general_services
	miscellaneous_home_furnishing_specialty_stores
	miscellaneous_publishing_and_printing
	miscellaneous_recreation_services
	miscellaneous_repair_shops
	miscellaneous_specialty_retail
	mobile_home_dealers
	motion_picture_theaters
	motor_freight_carriers_and_trucking
	motor_homes_dealers
	motor_vehicle_supplies_and_new_parts
	motorcycle_shops_and_dealers
	motorcycle_shops_dealers
	music_stores_musical_instruments_pianos_and_sheet_music
	news_dealers_and_newsstands
	non_fi_money_orders
	non_fi_stored_value_card_purchase_load
	nondurable_goods
	nurseries_lawn_and_garden_supply_stores
	nursing_personal_care
	office_and_commercial_furniture
	opticians_eyeglasses
	optometrists_ophthalmologist
	orthopedic_goods_prosthetic_devices
	osteopaths
	package_stores_beer_wine_and_liquor
	paints_varnishes_and_supplies
	parking_lots_garages
	passenger_railways
	pawn_shops
	pet_shops_pet_food_and_supplies
	petroleum_and_petroleum_products
	photo_developing
	photographic_photocopy_microfilm_equipment_and_supplies
	photographic_studios
	picture_video_production
	piece_goods_notions_and_other_dry_goods
	plumbing_heating_equipment_and_supplies
	political_organizations
	postal_services_government_only
	precious_stones_and_metals_watches_and_jewelry
	professional_services
	public_warehousing_and_storage
	quick_copy_repro_and_blueprint
	railroads
	real_estate_agents_and_managers_rentals
	record_stores
	recreational_vehicle_rentals
	religious_goods_stores
	religious_organizations
	roofing_siding_sheet_metal
	secretarial_support_services
	security_brokers_dealers
	service_stations
	sewing_needlework_fabric_and_piece_goods_stores
	shoe_repair_hat_cleaning
	shoe_stores
	small_appliance_repair
	snowmobile_dealers
	special_trade_services
	specialty_cleaning
	sporting_goods_stores
	sporting_recreation_camps
	sports_and_riding_apparel_stores
	sports_clubs_fields
	stamp_and_coin_stores
	stationary_office_supplies_printing_and_writing_paper
	stationery_stores_office_and_school_supply_stores
	swimming_pools_sales
	t_ui_travel_germany
	tailors_alterations
	tax_payments_government_agencies
	tax_preparation_services
	taxicabs_limousines
	telecommunication_equipment_and_telephone_sales
	telecommunication_services
	telegraph_services
	tent_and_awning_shops
	testing_laboratories
	theatrical_ticket_agencies
	timeshares
	tire_retreading_and_repair
	tolls_bridge_fees
	tourist_attractions_and_exhibits
	towing_services
	trailer_parks_campgrounds
	transportation_services
	travel_agencies_tour_operators
	truck_stop_iteration
	truck_utility_trailer_rentals
	typesetting_plate_making_and_related_services
	typewriter_stores
	u_s_federal_government_agencies_or_departments
	uniforms_commercial_clothing
	used_merchandise_and_secondhand_stores
	utilities
	variety_stores
	veterinary_services
	video_amusement_game_supplies
	video_game_arcades
	video_tape_rental_stores
	vocational_trade_schools
	watch_jewelry_repair
	welding_repair
	wholesale_clubs
	wig_and_toupee_stores
	wires_money_orders
	womens_accessory_and_specialty_shops
	womens_ready_to_wear_stores
	wrecking_and_salvage_yards
}
enum IssuingCardholderAuthorizationControlsBlockedCategories {
	ac_refrigeration_repair
	accounting_bookkeeping_services
	advertising_services
	agricultural_cooperative
	airlines_air_carriers
	airports_flying_fields
	ambulance_services
	amusement_parks_carnivals
	antique_reproductions
	antique_shops
	aquariums
	architectural_surveying_services
	art_dealers_and_galleries
	artists_supply_and_craft_shops
	auto_and_home_supply_stores
	auto_body_repair_shops
	auto_paint_shops
	auto_service_shops
	automated_cash_disburse
	automated_fuel_dispensers
	automobile_associations
	automotive_parts_and_accessories_stores
	automotive_tire_stores
	bail_and_bond_payments
	bakeries
	bands_orchestras
	barber_and_beauty_shops
	betting_casino_gambling
	bicycle_shops
	billiard_pool_establishments
	boat_dealers
	boat_rentals_and_leases
	book_stores
	books_periodicals_and_newspapers
	bowling_alleys
	bus_lines
	business_secretarial_schools
	buying_shopping_services
	cable_satellite_and_other_pay_television_and_radio
	camera_and_photographic_supply_stores
	candy_nut_and_confectionery_stores
	car_and_truck_dealers_new_used
	car_and_truck_dealers_used_only
	car_rental_agencies
	car_washes
	carpentry_services
	carpet_upholstery_cleaning
	caterers
	charitable_and_social_service_organizations_fundraising
	chemicals_and_allied_products
	child_care_services
	childrens_and_infants_wear_stores
	chiropodists_podiatrists
	chiropractors
	cigar_stores_and_stands
	civic_social_fraternal_associations
	cleaning_and_maintenance
	clothing_rental
	colleges_universities
	commercial_equipment
	commercial_footwear
	commercial_photography_art_and_graphics
	commuter_transport_and_ferries
	computer_network_services
	computer_programming
	computer_repair
	computer_software_stores
	computers_peripherals_and_software
	concrete_work_services
	construction_materials
	consulting_public_relations
	correspondence_schools
	cosmetic_stores
	counseling_services
	country_clubs
	courier_services
	court_costs
	credit_reporting_agencies
	cruise_lines
	dairy_products_stores
	dance_hall_studios_schools
	dating_escort_services
	dentists_orthodontists
	department_stores
	detective_agencies
	digital_goods_applications
	digital_goods_games
	digital_goods_large_volume
	digital_goods_media
	direct_marketing_catalog_merchant
	direct_marketing_combination_catalog_and_retail_merchant
	direct_marketing_inbound_telemarketing
	direct_marketing_insurance_services
	direct_marketing_other
	direct_marketing_outbound_telemarketing
	direct_marketing_subscription
	direct_marketing_travel
	discount_stores
	doctors
	door_to_door_sales
	drapery_window_covering_and_upholstery_stores
	drinking_places
	drug_stores_and_pharmacies
	drugs_drug_proprietaries_and_druggist_sundries
	dry_cleaners
	durable_goods
	duty_free_stores
	eating_places_restaurants
	educational_services
	electric_razor_stores
	electrical_parts_and_equipment
	electrical_services
	electronics_repair_shops
	electronics_stores
	elementary_secondary_schools
	employment_temp_agencies
	equipment_rental
	exterminating_services
	family_clothing_stores
	fast_food_restaurants
	financial_institutions
	fines_government_administrative_entities
	fireplace_fireplace_screens_and_accessories_stores
	floor_covering_stores
	florists
	florists_supplies_nursery_stock_and_flowers
	freezer_and_locker_meat_provisioners
	fuel_dealers_non_automotive
	funeral_services_crematories
	furniture_home_furnishings_and_equipment_stores_except_appliances
	furniture_repair_refinishing
	furriers_and_fur_shops
	general_services
	gift_card_novelty_and_souvenir_shops
	glass_paint_and_wallpaper_stores
	glassware_crystal_stores
	golf_courses_public
	government_services
	grocery_stores_supermarkets
	hardware_equipment_and_supplies
	hardware_stores
	health_and_beauty_spas
	hearing_aids_sales_and_supplies
	heating_plumbing_a_c
	hobby_toy_and_game_shops
	home_supply_warehouse_stores
	hospitals
	hotels_motels_and_resorts
	household_appliance_stores
	industrial_supplies
	information_retrieval_services
	insurance_default
	insurance_underwriting_premiums
	intra_company_purchases
	jewelry_stores_watches_clocks_and_silverware_stores
	landscaping_services
	laundries
	laundry_cleaning_services
	legal_services_attorneys
	luggage_and_leather_goods_stores
	lumber_building_materials_stores
	manual_cash_disburse
	marinas_service_and_supplies
	masonry_stonework_and_plaster
	massage_parlors
	medical_and_dental_labs
	medical_dental_ophthalmic_and_hospital_equipment_and_supplies
	medical_services
	membership_organizations
	mens_and_boys_clothing_and_accessories_stores
	mens_womens_clothing_stores
	metal_service_centers
	miscellaneous
	miscellaneous_apparel_and_accessory_shops
	miscellaneous_auto_dealers
	miscellaneous_business_services
	miscellaneous_food_stores
	miscellaneous_general_merchandise
	miscellaneous_general_services
	miscellaneous_home_furnishing_specialty_stores
	miscellaneous_publishing_and_printing
	miscellaneous_recreation_services
	miscellaneous_repair_shops
	miscellaneous_specialty_retail
	mobile_home_dealers
	motion_picture_theaters
	motor_freight_carriers_and_trucking
	motor_homes_dealers
	motor_vehicle_supplies_and_new_parts
	motorcycle_shops_and_dealers
	motorcycle_shops_dealers
	music_stores_musical_instruments_pianos_and_sheet_music
	news_dealers_and_newsstands
	non_fi_money_orders
	non_fi_stored_value_card_purchase_load
	nondurable_goods
	nurseries_lawn_and_garden_supply_stores
	nursing_personal_care
	office_and_commercial_furniture
	opticians_eyeglasses
	optometrists_ophthalmologist
	orthopedic_goods_prosthetic_devices
	osteopaths
	package_stores_beer_wine_and_liquor
	paints_varnishes_and_supplies
	parking_lots_garages
	passenger_railways
	pawn_shops
	pet_shops_pet_food_and_supplies
	petroleum_and_petroleum_products
	photo_developing
	photographic_photocopy_microfilm_equipment_and_supplies
	photographic_studios
	picture_video_production
	piece_goods_notions_and_other_dry_goods
	plumbing_heating_equipment_and_supplies
	political_organizations
	postal_services_government_only
	precious_stones_and_metals_watches_and_jewelry
	professional_services
	public_warehousing_and_storage
	quick_copy_repro_and_blueprint
	railroads
	real_estate_agents_and_managers_rentals
	record_stores
	recreational_vehicle_rentals
	religious_goods_stores
	religious_organizations
	roofing_siding_sheet_metal
	secretarial_support_services
	security_brokers_dealers
	service_stations
	sewing_needlework_fabric_and_piece_goods_stores
	shoe_repair_hat_cleaning
	shoe_stores
	small_appliance_repair
	snowmobile_dealers
	special_trade_services
	specialty_cleaning
	sporting_goods_stores
	sporting_recreation_camps
	sports_and_riding_apparel_stores
	sports_clubs_fields
	stamp_and_coin_stores
	stationary_office_supplies_printing_and_writing_paper
	stationery_stores_office_and_school_supply_stores
	swimming_pools_sales
	t_ui_travel_germany
	tailors_alterations
	tax_payments_government_agencies
	tax_preparation_services
	taxicabs_limousines
	telecommunication_equipment_and_telephone_sales
	telecommunication_services
	telegraph_services
	tent_and_awning_shops
	testing_laboratories
	theatrical_ticket_agencies
	timeshares
	tire_retreading_and_repair
	tolls_bridge_fees
	tourist_attractions_and_exhibits
	towing_services
	trailer_parks_campgrounds
	transportation_services
	travel_agencies_tour_operators
	truck_stop_iteration
	truck_utility_trailer_rentals
	typesetting_plate_making_and_related_services
	typewriter_stores
	u_s_federal_government_agencies_or_departments
	uniforms_commercial_clothing
	used_merchandise_and_secondhand_stores
	utilities
	variety_stores
	veterinary_services
	video_amusement_game_supplies
	video_game_arcades
	video_tape_rental_stores
	vocational_trade_schools
	watch_jewelry_repair
	welding_repair
	wholesale_clubs
	wig_and_toupee_stores
	wires_money_orders
	womens_accessory_and_specialty_shops
	womens_ready_to_wear_stores
	wrecking_and_salvage_yards
}
union IssuingCardholderAuthorizationControlsUnion = IssuingCardholderAuthorizationControls
type IssuingCardholderCompany {
	taxIdProvided: Boolean!
}
union IssuingCardholderCompanyUnion = IssuingCardholderCompany
type IssuingCardholderIdDocument {
	front: FileUnion
	back: FileUnion
}
union IssuingCardholderIdDocumentUnion = IssuingCardholderIdDocument
type IssuingCardholderIndividual {
	verification: IssuingCardholderVerificationUnion
	lastName: String
	firstName: String
	dob: IssuingCardholderIndividualDobUnion
}
type IssuingCardholderIndividualDob {
	year: Int
	month: Int
	day: Int
}
union IssuingCardholderIndividualDobUnion = IssuingCardholderIndividualDob
union IssuingCardholderIndividualUnion = IssuingCardholderIndividual
enum IssuingCardholderObject {
	issuing.cardholder
}
type IssuingCardholderRequirements {
	pastDue: [IssuingCardholderRequirementsPastDue!]
	disabledReason: IssuingCardholderRequirementsDisabledReason
}
enum IssuingCardholderRequirementsDisabledReason {
	listed
	rejected.listed
	under_review
}
enum IssuingCardholderRequirementsPastDue {
	company.tax_id
	individual.dob.day
	individual.dob.month
	individual.dob.year
	individual.first_name
	individual.last_name
	individual.verification.document
}
type IssuingCardholderSpendingLimit {
	interval: IssuingCardholderSpendingLimitInterval!
	categories: [IssuingCardholderSpendingLimitCategories!]
	amount: Int!
}
enum IssuingCardholderSpendingLimitCategories {
	ac_refrigeration_repair
	accounting_bookkeeping_services
	advertising_services
	agricultural_cooperative
	airlines_air_carriers
	airports_flying_fields
	ambulance_services
	amusement_parks_carnivals
	antique_reproductions
	antique_shops
	aquariums
	architectural_surveying_services
	art_dealers_and_galleries
	artists_supply_and_craft_shops
	auto_and_home_supply_stores
	auto_body_repair_shops
	auto_paint_shops
	auto_service_shops
	automated_cash_disburse
	automated_fuel_dispensers
	automobile_associations
	automotive_parts_and_accessories_stores
	automotive_tire_stores
	bail_and_bond_payments
	bakeries
	bands_orchestras
	barber_and_beauty_shops
	betting_casino_gambling
	bicycle_shops
	billiard_pool_establishments
	boat_dealers
	boat_rentals_and_leases
	book_stores
	books_periodicals_and_newspapers
	bowling_alleys
	bus_lines
	business_secretarial_schools
	buying_shopping_services
	cable_satellite_and_other_pay_television_and_radio
	camera_and_photographic_supply_stores
	candy_nut_and_confectionery_stores
	car_and_truck_dealers_new_used
	car_and_truck_dealers_used_only
	car_rental_agencies
	car_washes
	carpentry_services
	carpet_upholstery_cleaning
	caterers
	charitable_and_social_service_organizations_fundraising
	chemicals_and_allied_products
	child_care_services
	childrens_and_infants_wear_stores
	chiropodists_podiatrists
	chiropractors
	cigar_stores_and_stands
	civic_social_fraternal_associations
	cleaning_and_maintenance
	clothing_rental
	colleges_universities
	commercial_equipment
	commercial_footwear
	commercial_photography_art_and_graphics
	commuter_transport_and_ferries
	computer_network_services
	computer_programming
	computer_repair
	computer_software_stores
	computers_peripherals_and_software
	concrete_work_services
	construction_materials
	consulting_public_relations
	correspondence_schools
	cosmetic_stores
	counseling_services
	country_clubs
	courier_services
	court_costs
	credit_reporting_agencies
	cruise_lines
	dairy_products_stores
	dance_hall_studios_schools
	dating_escort_services
	dentists_orthodontists
	department_stores
	detective_agencies
	digital_goods_applications
	digital_goods_games
	digital_goods_large_volume
	digital_goods_media
	direct_marketing_catalog_merchant
	direct_marketing_combination_catalog_and_retail_merchant
	direct_marketing_inbound_telemarketing
	direct_marketing_insurance_services
	direct_marketing_other
	direct_marketing_outbound_telemarketing
	direct_marketing_subscription
	direct_marketing_travel
	discount_stores
	doctors
	door_to_door_sales
	drapery_window_covering_and_upholstery_stores
	drinking_places
	drug_stores_and_pharmacies
	drugs_drug_proprietaries_and_druggist_sundries
	dry_cleaners
	durable_goods
	duty_free_stores
	eating_places_restaurants
	educational_services
	electric_razor_stores
	electrical_parts_and_equipment
	electrical_services
	electronics_repair_shops
	electronics_stores
	elementary_secondary_schools
	employment_temp_agencies
	equipment_rental
	exterminating_services
	family_clothing_stores
	fast_food_restaurants
	financial_institutions
	fines_government_administrative_entities
	fireplace_fireplace_screens_and_accessories_stores
	floor_covering_stores
	florists
	florists_supplies_nursery_stock_and_flowers
	freezer_and_locker_meat_provisioners
	fuel_dealers_non_automotive
	funeral_services_crematories
	furniture_home_furnishings_and_equipment_stores_except_appliances
	furniture_repair_refinishing
	furriers_and_fur_shops
	general_services
	gift_card_novelty_and_souvenir_shops
	glass_paint_and_wallpaper_stores
	glassware_crystal_stores
	golf_courses_public
	government_services
	grocery_stores_supermarkets
	hardware_equipment_and_supplies
	hardware_stores
	health_and_beauty_spas
	hearing_aids_sales_and_supplies
	heating_plumbing_a_c
	hobby_toy_and_game_shops
	home_supply_warehouse_stores
	hospitals
	hotels_motels_and_resorts
	household_appliance_stores
	industrial_supplies
	information_retrieval_services
	insurance_default
	insurance_underwriting_premiums
	intra_company_purchases
	jewelry_stores_watches_clocks_and_silverware_stores
	landscaping_services
	laundries
	laundry_cleaning_services
	legal_services_attorneys
	luggage_and_leather_goods_stores
	lumber_building_materials_stores
	manual_cash_disburse
	marinas_service_and_supplies
	masonry_stonework_and_plaster
	massage_parlors
	medical_and_dental_labs
	medical_dental_ophthalmic_and_hospital_equipment_and_supplies
	medical_services
	membership_organizations
	mens_and_boys_clothing_and_accessories_stores
	mens_womens_clothing_stores
	metal_service_centers
	miscellaneous
	miscellaneous_apparel_and_accessory_shops
	miscellaneous_auto_dealers
	miscellaneous_business_services
	miscellaneous_food_stores
	miscellaneous_general_merchandise
	miscellaneous_general_services
	miscellaneous_home_furnishing_specialty_stores
	miscellaneous_publishing_and_printing
	miscellaneous_recreation_services
	miscellaneous_repair_shops
	miscellaneous_specialty_retail
	mobile_home_dealers
	motion_picture_theaters
	motor_freight_carriers_and_trucking
	motor_homes_dealers
	motor_vehicle_supplies_and_new_parts
	motorcycle_shops_and_dealers
	motorcycle_shops_dealers
	music_stores_musical_instruments_pianos_and_sheet_music
	news_dealers_and_newsstands
	non_fi_money_orders
	non_fi_stored_value_card_purchase_load
	nondurable_goods
	nurseries_lawn_and_garden_supply_stores
	nursing_personal_care
	office_and_commercial_furniture
	opticians_eyeglasses
	optometrists_ophthalmologist
	orthopedic_goods_prosthetic_devices
	osteopaths
	package_stores_beer_wine_and_liquor
	paints_varnishes_and_supplies
	parking_lots_garages
	passenger_railways
	pawn_shops
	pet_shops_pet_food_and_supplies
	petroleum_and_petroleum_products
	photo_developing
	photographic_photocopy_microfilm_equipment_and_supplies
	photographic_studios
	picture_video_production
	piece_goods_notions_and_other_dry_goods
	plumbing_heating_equipment_and_supplies
	political_organizations
	postal_services_government_only
	precious_stones_and_metals_watches_and_jewelry
	professional_services
	public_warehousing_and_storage
	quick_copy_repro_and_blueprint
	railroads
	real_estate_agents_and_managers_rentals
	record_stores
	recreational_vehicle_rentals
	religious_goods_stores
	religious_organizations
	roofing_siding_sheet_metal
	secretarial_support_services
	security_brokers_dealers
	service_stations
	sewing_needlework_fabric_and_piece_goods_stores
	shoe_repair_hat_cleaning
	shoe_stores
	small_appliance_repair
	snowmobile_dealers
	special_trade_services
	specialty_cleaning
	sporting_goods_stores
	sporting_recreation_camps
	sports_and_riding_apparel_stores
	sports_clubs_fields
	stamp_and_coin_stores
	stationary_office_supplies_printing_and_writing_paper
	stationery_stores_office_and_school_supply_stores
	swimming_pools_sales
	t_ui_travel_germany
	tailors_alterations
	tax_payments_government_agencies
	tax_preparation_services
	taxicabs_limousines
	telecommunication_equipment_and_telephone_sales
	telecommunication_services
	telegraph_services
	tent_and_awning_shops
	testing_laboratories
	theatrical_ticket_agencies
	timeshares
	tire_retreading_and_repair
	tolls_bridge_fees
	tourist_attractions_and_exhibits
	towing_services
	trailer_parks_campgrounds
	transportation_services
	travel_agencies_tour_operators
	truck_stop_iteration
	truck_utility_trailer_rentals
	typesetting_plate_making_and_related_services
	typewriter_stores
	u_s_federal_government_agencies_or_departments
	uniforms_commercial_clothing
	used_merchandise_and_secondhand_stores
	utilities
	variety_stores
	veterinary_services
	video_amusement_game_supplies
	video_game_arcades
	video_tape_rental_stores
	vocational_trade_schools
	watch_jewelry_repair
	welding_repair
	wholesale_clubs
	wig_and_toupee_stores
	wires_money_orders
	womens_accessory_and_specialty_shops
	womens_ready_to_wear_stores
	wrecking_and_salvage_yards
}
enum IssuingCardholderSpendingLimitInterval {
	all_time
	daily
	monthly
	per_authorization
	weekly
	yearly
}
enum IssuingCardholderStatus {
	active
	blocked
	inactive
}
enum IssuingCardholderType {
	company
	individual
}
union IssuingCardholderUnion = IssuingCardholder
type IssuingCardholderVerification {
	document: IssuingCardholderIdDocumentUnion
}
union IssuingCardholderVerificationUnion = IssuingCardholderVerification
type IssuingDispute {
	treasury: IssuingDisputeTreasuryUnion
	transaction: IssuingTransactionUnion!
	status: IssuingDisputeStatus!
	object: IssuingDisputeObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	evidence: IssuingDisputeEvidence!
	currency: String!
	created: Int!
	balanceTransactions: [BalanceTransaction!]
	amount: Int!
}
type IssuingDisputeCanceledEvidence {
	returnedAt: Int
	returnStatus: IssuingDisputeCanceledEvidenceReturnStatus
	productType: IssuingDisputeCanceledEvidenceProductType
	productDescription: String
	explanation: String
	expectedAt: Int
	cancellationReason: String
	cancellationPolicyProvided: Boolean
	canceledAt: Int
	additionalDocumentation: FileUnion
}
enum IssuingDisputeCanceledEvidenceProductType {
	merchandise
	service
}
enum IssuingDisputeCanceledEvidenceReturnStatus {
	merchant_rejected
	successful
}
type IssuingDisputeDuplicateEvidence {
	originalTransaction: String
	explanation: String
	checkImage: FileUnion
	cashReceipt: FileUnion
	cardStatement: FileUnion
	additionalDocumentation: FileUnion
}
type IssuingDisputeEvidence {
	serviceNotAsDescribed: IssuingDisputeServiceNotAsDescribedEvidence!
	reason: IssuingDisputeEvidenceReason!
	other: IssuingDisputeOtherEvidence!
	notReceived: IssuingDisputeNotReceivedEvidence!
	merchandiseNotAsDescribed: IssuingDisputeMerchandiseNotAsDescribedEvidence!
	fraudulent: IssuingDisputeFraudulentEvidence!
	duplicate: IssuingDisputeDuplicateEvidence!
	canceled: IssuingDisputeCanceledEvidence!
}
enum IssuingDisputeEvidenceReason {
	canceled
	duplicate
	fraudulent
	merchandise_not_as_described
	not_received
	other
	service_not_as_described
}
type IssuingDisputeFraudulentEvidence {
	explanation: String
	additionalDocumentation: FileUnion
}
type IssuingDisputeMerchandiseNotAsDescribedEvidence {
	returnedAt: Int
	returnStatus: IssuingDisputeMerchandiseNotAsDescribedEvidenceReturnStatus
	returnDescription: String
	receivedAt: Int
	explanation: String
	additionalDocumentation: FileUnion
}
enum IssuingDisputeMerchandiseNotAsDescribedEvidenceReturnStatus {
	merchant_rejected
	successful
}
type IssuingDisputeNotReceivedEvidence {
	productType: IssuingDisputeNotReceivedEvidenceProductType
	productDescription: String
	explanation: String
	expectedAt: Int
	additionalDocumentation: FileUnion
}
enum IssuingDisputeNotReceivedEvidenceProductType {
	merchandise
	service
}
enum IssuingDisputeObject {
	issuing.dispute
}
type IssuingDisputeOtherEvidence {
	productType: IssuingDisputeOtherEvidenceProductType
	productDescription: String
	explanation: String
	additionalDocumentation: FileUnion
}
enum IssuingDisputeOtherEvidenceProductType {
	merchandise
	service
}
type IssuingDisputeServiceNotAsDescribedEvidence {
	receivedAt: Int
	explanation: String
	cancellationReason: String
	canceledAt: Int
	additionalDocumentation: FileUnion
}
enum IssuingDisputeStatus {
	expired
	lost
	submitted
	unsubmitted
	won
}
type IssuingDisputeTreasury {
	receivedDebit: String!
	debitReversal: String
}
union IssuingDisputeTreasuryUnion = IssuingDisputeTreasury
union IssuingDisputeUnion = IssuingDispute
type IssuingSettlement {
	transactionVolume: Int!
	transactionCount: Int!
	settlementService: String!
	object: IssuingSettlementObject!
	networkSettlementIdentifier: String!
	networkFees: Int!
	network: IssuingSettlementNetwork!
	netTotal: Int!
	metadata: JSON!
	livemode: Boolean!
	interchangeFees: Int!
	id: String!
	currency: String!
	created: Int!
	clearingDate: Int!
	bin: String!
}
enum IssuingSettlementNetwork {
	visa
}
enum IssuingSettlementObject {
	issuing.settlement
}
type IssuingTransaction {
	wallet: IssuingTransactionWallet
	type: IssuingTransactionType!
	treasury: IssuingTransactionTreasuryUnion
	purchaseDetails: IssuingTransactionPurchaseDetailsUnion
	object: IssuingTransactionObject!
	metadata: JSON!
	merchantData: IssuingAuthorizationMerchantData!
	merchantCurrency: String!
	merchantAmount: Int!
	livemode: Boolean!
	id: String!
	dispute: IssuingDisputeUnion
	currency: String!
	created: Int!
	cardholder: IssuingCardholderUnion
	card: IssuingCardUnion!
	balanceTransaction: BalanceTransactionUnion
	authorization: IssuingAuthorizationUnion
	amountDetails: IssuingTransactionAmountDetailsUnion
	amount: Int!
}
type IssuingTransactionAmountDetails {
	atmFee: Int
}
union IssuingTransactionAmountDetailsUnion = IssuingTransactionAmountDetails
type IssuingTransactionFlightData {
	travelAgency: String
	segments: [IssuingTransactionFlightDataLeg!]
	refundable: Boolean
	passengerName: String
	departureAt: Int
}
type IssuingTransactionFlightDataLeg {
	stopoverAllowed: Boolean
	serviceClass: String
	flightNumber: String
	departureAirportCode: String
	carrier: String
	arrivalAirportCode: String
}
union IssuingTransactionFlightDataUnion = IssuingTransactionFlightData
type IssuingTransactionFuelData {
	volumeDecimal: String
	unitCostDecimal: String!
	unit: String!
	type: String!
}
union IssuingTransactionFuelDataUnion = IssuingTransactionFuelData
type IssuingTransactionLodgingData {
	nights: Int
	checkInAt: Int
}
union IssuingTransactionLodgingDataUnion = IssuingTransactionLodgingData
enum IssuingTransactionObject {
	issuing.transaction
}
type IssuingTransactionPurchaseDetails {
	reference: String
	receipt: [IssuingTransactionReceiptData!]
	lodging: IssuingTransactionLodgingDataUnion
	fuel: IssuingTransactionFuelDataUnion
	flight: IssuingTransactionFlightDataUnion
}
union IssuingTransactionPurchaseDetailsUnion = IssuingTransactionPurchaseDetails
type IssuingTransactionReceiptData {
	unitCost: Int
	total: Int
	quantity: Float
	description: String
}
type IssuingTransactionTreasury {
	receivedDebit: String
	receivedCredit: String
}
union IssuingTransactionTreasuryUnion = IssuingTransactionTreasury
enum IssuingTransactionType {
	capture
	refund
}
union IssuingTransactionUnion = IssuingTransaction
enum IssuingTransactionWallet {
	apple_pay
	google_pay
	samsung_pay
}
type Item {
	taxes: [LineItemsTaxAmount!]!
	quantity: Int
	price: PriceUnion
	object: ItemObject!
	id: String!
	discounts: [LineItemsDiscountAmount!]!
	description: String!
	currency: String!
	amountTotal: Int!
	amountTax: Int!
	amountSubtotal: Int!
	amountDiscount: Int!
}
enum ItemObject {
	item
}
"""
A JSON Value
"""
scalar JSON
type LegalEntityCompany {
	verification: LegalEntityCompanyVerificationUnion
	vatIdProvided: Boolean!
	taxIdRegistrar: String!
	taxIdProvided: Boolean!
	structure: LegalEntityCompanyStructure!
	phone: String
	ownershipDeclaration: LegalEntityUboDeclarationUnion
	ownersProvided: Boolean!
	nameKanji: String
	nameKana: String
	name: String
	executivesProvided: Boolean!
	directorsProvided: Boolean!
	addressKanji: LegalEntityJapanAddressUnion
	addressKana: LegalEntityJapanAddressUnion
	address: Address!
}
enum LegalEntityCompanyStructure {
	free_zone_establishment
	free_zone_llc
	government_instrumentality
	governmental_unit
	incorporated_non_profit
	limited_liability_partnership
	llc
	multi_member_llc
	private_company
	private_corporation
	private_partnership
	public_company
	public_corporation
	public_partnership
	single_member_llc
	sole_establishment
	sole_proprietorship
	tax_exempt_government_instrumentality
	unincorporated_association
	unincorporated_non_profit
}
type LegalEntityCompanyVerification {
	document: LegalEntityCompanyVerificationDocument!
}
type LegalEntityCompanyVerificationDocument {
	front: FileUnion
	detailsCode: String
	details: String
	back: FileUnion
}
union LegalEntityCompanyVerificationUnion = LegalEntityCompanyVerification
type LegalEntityDob {
	year: Int
	month: Int
	day: Int
}
type LegalEntityJapanAddress {
	town: String
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
union LegalEntityJapanAddressUnion = LegalEntityJapanAddress
type LegalEntityPersonVerification {
	status: String!
	document: LegalEntityPersonVerificationDocument!
	detailsCode: String
	details: String
	additionalDocument: LegalEntityPersonVerificationDocumentUnion
}
type LegalEntityPersonVerificationDocument {
	front: FileUnion
	detailsCode: String
	details: String
	back: FileUnion
}
union LegalEntityPersonVerificationDocumentUnion = LegalEntityPersonVerificationDocument
type LegalEntityUboDeclaration {
	userAgent: String
	ip: String
	date: Int
}
union LegalEntityUboDeclarationUnion = LegalEntityUboDeclaration
type LineItem {
	unitAmountExcludingTax: String
	type: LineItemType!
	taxRates: [TaxRate!]!
	taxAmounts: [InvoiceTaxAmount!]!
	subscriptionItem: String!
	subscription: String
	quantity: Int
	prorationDetails: InvoicesLineItemsProrationDetailsUnion
	proration: Boolean!
	price: PriceUnion
	period: InvoiceLineItemPeriod!
	object: LineItemObject!
	metadata: JSON!
	livemode: Boolean!
	invoiceItem: String!
	id: String!
	discounts: [DiscountUnion!]
	discountable: Boolean!
	discountAmounts: [DiscountsResourceDiscountAmount!]
	description: String
	currency: String!
	amountExcludingTax: Int
	amount: Int!
}
enum LineItemObject {
	line_item
}
enum LineItemType {
	invoiceitem
	subscription
}
type LineItemsDiscountAmount {
	discount: Discount!
	amount: Int!
}
type LineItemsTaxAmount {
	rate: TaxRate!
	amount: Int!
}
type LinkedAccountOptionsUsBankAccount {
	returnUrl: String!
	permissions: [LinkedAccountOptionsUsBankAccountPermissions!]!
}
enum LinkedAccountOptionsUsBankAccountPermissions {
	balances
	ownership
	payment_method
	transactions
}
type Mandate {
	type: MandateType!
	status: MandateStatus!
	singleUse: MandateSingleUse!
	paymentMethodDetails: MandatePaymentMethodDetails!
	paymentMethod: PaymentMethodUnion!
	object: MandateObject!
	multiUse: MandateMultiUse!
	livemode: Boolean!
	id: String!
	customerAcceptance: CustomerAcceptance!
}
type MandateAcssDebit {
	transactionType: MandateAcssDebitTransactionType!
	paymentSchedule: MandateAcssDebitPaymentSchedule!
	intervalDescription: String
	defaultFor: [MandateAcssDebitDefaultFor!]!
}
enum MandateAcssDebitDefaultFor {
	invoice
	subscription
}
enum MandateAcssDebitPaymentSchedule {
	combined
	interval
	sporadic
}
enum MandateAcssDebitTransactionType {
	business
	personal
}
type MandateAuBecsDebit {
	url: String!
}
type MandateBacsDebit {
	url: String!
	reference: String!
	networkStatus: MandateBacsDebitNetworkStatus!
}
enum MandateBacsDebitNetworkStatus {
	accepted
	pending
	refused
	revoked
}
type MandateBlik {
	type: MandateBlikType
	offSession: MandateOptionsOffSessionDetailsBlik!
	expiresAfter: Int
}
enum MandateBlikType {
	off_session
	on_session
}
enum MandateObject {
	mandate
}
type MandateOptionsOffSessionDetailsBlik {
	intervalCount: Int
	interval: MandateOptionsOffSessionDetailsBlikInterval
	currency: String
	amount: Int
}
enum MandateOptionsOffSessionDetailsBlikInterval {
	day
	month
	week
	year
}
type MandatePaymentMethodDetails {
	usBankAccount: MandateUsBankAccount!
	type: String!
	sepaDebit: MandateSepaDebit!
	link: MandateLink!
	card: CardMandatePaymentMethodDetails!
	blik: MandateBlik!
	bacsDebit: MandateBacsDebit!
	auBecsDebit: MandateAuBecsDebit!
	acssDebit: MandateAcssDebit!
}
type MandateSepaDebit {
	url: String!
	reference: String!
}
type MandateSingleUse {
	currency: String!
	amount: Int!
}
enum MandateStatus {
	active
	inactive
	pending
}
enum MandateType {
	multi_use
	single_use
}
union MandateUnion = Mandate
type Networks {
	preferred: String
	available: [String!]!
}
union NetworksUnion = Networks
type NotificationEventData {
	previousAttributes: JSON!
	object: JSON!
}
type NotificationEventRequest {
	idempotencyKey: String
	id: String
}
union NotificationEventRequestUnion = NotificationEventRequest
type OnlineAcceptance {
	userAgent: String
	ipAddress: String
}
type OutboundPaymentsPaymentMethodDetails {
	usBankAccount: OutboundPaymentsPaymentMethodDetailsUsBankAccount!
	type: OutboundPaymentsPaymentMethodDetailsType!
	financialAccount: OutboundPaymentsPaymentMethodDetailsFinancialAccount!
	billingDetails: TreasurySharedResourceBillingDetails!
}
type OutboundPaymentsPaymentMethodDetailsFinancialAccount {
	network: OutboundPaymentsPaymentMethodDetailsFinancialAccountNetwork!
	id: String!
}
enum OutboundPaymentsPaymentMethodDetailsFinancialAccountNetwork {
	stripe
}
enum OutboundPaymentsPaymentMethodDetailsType {
	financial_account
	us_bank_account
}
union OutboundPaymentsPaymentMethodDetailsUnion = OutboundPaymentsPaymentMethodDetails
type OutboundPaymentsPaymentMethodDetailsUsBankAccount {
	routingNumber: String
	network: OutboundPaymentsPaymentMethodDetailsUsBankAccountNetwork!
	last4: String
	fingerprint: String
	bankName: String
	accountType: OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountType
	accountHolderType: OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType
}
enum OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType {
	company
	individual
}
enum OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountType {
	checking
	savings
}
enum OutboundPaymentsPaymentMethodDetailsUsBankAccountNetwork {
	ach
	us_domestic_wire
}
type OutboundTransfersPaymentMethodDetails {
	usBankAccount: OutboundTransfersPaymentMethodDetailsUsBankAccount!
	type: OutboundTransfersPaymentMethodDetailsType!
	billingDetails: TreasurySharedResourceBillingDetails!
}
enum OutboundTransfersPaymentMethodDetailsType {
	us_bank_account
}
type OutboundTransfersPaymentMethodDetailsUsBankAccount {
	routingNumber: String
	network: OutboundTransfersPaymentMethodDetailsUsBankAccountNetwork!
	last4: String
	fingerprint: String
	bankName: String
	accountType: OutboundTransfersPaymentMethodDetailsUsBankAccountAccountType
	accountHolderType: OutboundTransfersPaymentMethodDetailsUsBankAccountAccountHolderType
}
enum OutboundTransfersPaymentMethodDetailsUsBankAccountAccountHolderType {
	company
	individual
}
enum OutboundTransfersPaymentMethodDetailsUsBankAccountAccountType {
	checking
	savings
}
enum OutboundTransfersPaymentMethodDetailsUsBankAccountNetwork {
	ach
	us_domestic_wire
}
type PackageDimensions {
	width: Float!
	weight: Float!
	length: Float!
	height: Float!
}
union PackageDimensionsUnion = PackageDimensions
type PaymentFlowsAmountDetails {
	tip: PaymentFlowsAmountDetailsResourceTip!
}
type PaymentFlowsAmountDetailsResourceTip {
	amount: Int!
}
type PaymentFlowsAutomaticPaymentMethodsPaymentIntent {
	enabled: Boolean!
}
union PaymentFlowsAutomaticPaymentMethodsPaymentIntentUnion = PaymentFlowsAutomaticPaymentMethodsPaymentIntent
type PaymentFlowsInstallmentOptions {
	plan: PaymentMethodDetailsCardInstallmentsPlan!
	enabled: Boolean!
}
type PaymentFlowsPrivatePaymentMethodsAlipayDetails {
	transactionId: String
	fingerprint: String
	buyerId: String!
}
type PaymentFlowsPrivatePaymentMethodsKlarnaDob {
	year: Int
	month: Int
	day: Int
}
union PaymentFlowsPrivatePaymentMethodsKlarnaDobUnion = PaymentFlowsPrivatePaymentMethodsKlarnaDob
type PaymentIntent {
	transferGroup: String
	transferData: TransferDataUnion
	status: PaymentIntentStatus!
	statementDescriptorSuffix: String
	statementDescriptor: String
	shipping: ShippingUnion
	setupFutureUsage: PaymentIntentSetupFutureUsage
	review: ReviewUnion
	receiptEmail: String
	processing: PaymentIntentProcessingUnion
	paymentMethodTypes: [String!]!
	paymentMethodOptions: PaymentIntentPaymentMethodOptionsUnion
	paymentMethod: PaymentMethodUnion
	onBehalfOf: AccountUnion
	object: PaymentIntentObject!
	nextAction: PaymentIntentNextActionUnion
	metadata: JSON!
	livemode: Boolean!
	latestCharge: ChargeUnion
	lastPaymentError: ApiErrorsUnion
	invoice: InvoiceUnion
	id: String!
	description: String
	customer: DeletedCustomerOrCustomerUnion
	currency: String!
	created: Int!
	confirmationMethod: PaymentIntentConfirmationMethod!
	clientSecret: String
	captureMethod: PaymentIntentCaptureMethod!
	cancellationReason: PaymentIntentCancellationReason
	canceledAt: Int
	automaticPaymentMethods: PaymentFlowsAutomaticPaymentMethodsPaymentIntentUnion
	applicationFeeAmount: Int
	application: ApplicationUnion
	amountReceived: Int!
	amountDetails: PaymentFlowsAmountDetails!
	amountCapturable: Int!
	amount: Int!
}
enum PaymentIntentCancellationReason {
	abandoned
	automatic
	duplicate
	failed_invoice
	fraudulent
	requested_by_customer
	void_invoice
}
enum PaymentIntentCaptureMethod {
	automatic
	manual
}
type PaymentIntentCardProcessing {
	customerNotification: PaymentIntentProcessingCustomerNotification!
}
enum PaymentIntentConfirmationMethod {
	automatic
	manual
}
type PaymentIntentNextAction {
	wechatPayRedirectToIosApp: PaymentIntentNextActionWechatPayRedirectToIosApp!
	wechatPayRedirectToAndroidApp: PaymentIntentNextActionWechatPayRedirectToAndroidApp!
	wechatPayDisplayQrCode: PaymentIntentNextActionWechatPayDisplayQrCode!
	verifyWithMicrodeposits: PaymentIntentNextActionVerifyWithMicrodeposits!
	useStripeSdk: JSON!
	type: String!
	redirectToUrl: PaymentIntentNextActionRedirectToUrl!
	promptpayDisplayQrCode: PaymentIntentNextActionPromptpayDisplayQrCode!
	pixDisplayQrCode: PaymentIntentNextActionPixDisplayQrCode!
	paynowDisplayQrCode: PaymentIntentNextActionPaynowDisplayQrCode!
	oxxoDisplayDetails: PaymentIntentNextActionDisplayOxxoDetails!
	konbiniDisplayDetails: PaymentIntentNextActionKonbini!
	displayBankTransferInstructions: PaymentIntentNextActionDisplayBankTransferInstructions!
	cardAwaitNotification: PaymentIntentNextActionCardAwaitNotification!
	boletoDisplayDetails: PaymentIntentNextActionBoleto!
	alipayHandleRedirect: PaymentIntentNextActionAlipayHandleRedirect!
}
type PaymentIntentNextActionAlipayHandleRedirect {
	url: String
	returnUrl: String
	nativeUrl: String
	nativeData: String
}
type PaymentIntentNextActionBoleto {
	pdf: String
	number: String
	hostedVoucherUrl: String
	expiresAt: Int
}
type PaymentIntentNextActionCardAwaitNotification {
	customerApprovalRequired: Boolean
	chargeAttemptAt: Int
}
type PaymentIntentNextActionDisplayBankTransferInstructions {
	type: PaymentIntentNextActionDisplayBankTransferInstructionsType!
	reference: String
	hostedInstructionsUrl: String
	financialAddresses: [FundingInstructionsBankTransferFinancialAddress!]!
	currency: String
	amountRemaining: Int
}
enum PaymentIntentNextActionDisplayBankTransferInstructionsType {
	eu_bank_transfer
	gb_bank_transfer
	jp_bank_transfer
	mx_bank_transfer
}
type PaymentIntentNextActionDisplayOxxoDetails {
	number: String
	hostedVoucherUrl: String
	expiresAfter: Int
}
type PaymentIntentNextActionKonbini {
	stores: PaymentIntentNextActionKonbiniStores!
	hostedVoucherUrl: String
	expiresAt: Int!
}
type PaymentIntentNextActionKonbiniFamilymart {
	paymentCode: String!
	confirmationNumber: String!
}
union PaymentIntentNextActionKonbiniFamilymartUnion = PaymentIntentNextActionKonbiniFamilymart
type PaymentIntentNextActionKonbiniLawson {
	paymentCode: String!
	confirmationNumber: String!
}
union PaymentIntentNextActionKonbiniLawsonUnion = PaymentIntentNextActionKonbiniLawson
type PaymentIntentNextActionKonbiniMinistop {
	paymentCode: String!
	confirmationNumber: String!
}
union PaymentIntentNextActionKonbiniMinistopUnion = PaymentIntentNextActionKonbiniMinistop
type PaymentIntentNextActionKonbiniSeicomart {
	paymentCode: String!
	confirmationNumber: String!
}
union PaymentIntentNextActionKonbiniSeicomartUnion = PaymentIntentNextActionKonbiniSeicomart
type PaymentIntentNextActionKonbiniStores {
	seicomart: PaymentIntentNextActionKonbiniSeicomartUnion
	ministop: PaymentIntentNextActionKonbiniMinistopUnion
	lawson: PaymentIntentNextActionKonbiniLawsonUnion
	familymart: PaymentIntentNextActionKonbiniFamilymartUnion
}
type PaymentIntentNextActionPaynowDisplayQrCode {
	imageUrlSvg: String!
	imageUrlPng: String!
	hostedInstructionsUrl: String
	data: String!
}
type PaymentIntentNextActionPixDisplayQrCode {
	imageUrlSvg: String!
	imageUrlPng: String!
	hostedInstructionsUrl: String!
	expiresAt: Int!
	data: String!
}
type PaymentIntentNextActionPromptpayDisplayQrCode {
	imageUrlSvg: String!
	imageUrlPng: String!
	hostedInstructionsUrl: String!
	data: String!
}
type PaymentIntentNextActionRedirectToUrl {
	url: String
	returnUrl: String
}
union PaymentIntentNextActionUnion = PaymentIntentNextAction
type PaymentIntentNextActionVerifyWithMicrodeposits {
	microdepositType: PaymentIntentNextActionVerifyWithMicrodepositsMicrodepositType
	hostedVerificationUrl: String!
	arrivalDate: Int!
}
enum PaymentIntentNextActionVerifyWithMicrodepositsMicrodepositType {
	amounts
	descriptor_code
}
type PaymentIntentNextActionWechatPayDisplayQrCode {
	imageUrlSvg: String!
	imageUrlPng: String!
	imageDataUrl: String!
	hostedInstructionsUrl: String!
	data: String!
}
type PaymentIntentNextActionWechatPayRedirectToAndroidApp {
	timestamp: String!
	sign: String!
	prepayId: String!
	partnerId: String!
	package: String!
	nonceStr: String!
	appId: String!
}
type PaymentIntentNextActionWechatPayRedirectToIosApp {
	nativeUrl: String!
}
enum PaymentIntentObject {
	payment_intent
}
type PaymentIntentPaymentMethodOptions {
	wechatPay: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsWechatPayUnion!
	usBankAccount: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsUsBankAccountUnion!
	sofort: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsSofortUnion!
	sepaDebit: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsSepaDebitUnion!
	promptpay: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPromptpayUnion!
	pix: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPixUnion!
	paynow: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPaynowUnion!
	p24: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsP24Union!
	oxxo: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsOxxoUnion!
	link: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsLinkUnion!
	konbini: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsKonbiniUnion!
	klarna: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsKlarnaUnion!
	interacPresent: PaymentIntentTypeSpecificPaymentMethodOptionsClientUnion!
	ideal: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsIdealUnion!
	grabpay: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsGrabpayUnion!
	giropay: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsGiropayUnion!
	fpx: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsFpxUnion!
	eps: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsEpsUnion!
	customerBalance: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsCustomerBalanceUnion!
	cardPresent: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsCardPresentUnion!
	card: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsCardUnion!
	boleto: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBoletoUnion!
	blik: PaymentIntentTypeSpecificPaymentMethodOptionsClientUnion!
	bancontact: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBancontactUnion!
	bacsDebit: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBacsDebitUnion!
	auBecsDebit: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsAuBecsDebitUnion!
	alipay: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAlipayUnion!
	afterpayClearpay: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAfterpayClearpayUnion!
	affirm: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAffirmUnion!
	acssDebit: PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsAcssDebitUnion!
}
type PaymentIntentPaymentMethodOptionsAcssDebit {
	verificationMethod: PaymentIntentPaymentMethodOptionsAcssDebitVerificationMethod!
	setupFutureUsage: PaymentIntentPaymentMethodOptionsAcssDebitSetupFutureUsage!
	mandateOptions: PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit!
}
enum PaymentIntentPaymentMethodOptionsAcssDebitSetupFutureUsage {
	none
	off_session
	on_session
}
enum PaymentIntentPaymentMethodOptionsAcssDebitVerificationMethod {
	automatic
	instant
	microdeposits
}
type PaymentIntentPaymentMethodOptionsAuBecsDebit {
	setupFutureUsage: PaymentIntentPaymentMethodOptionsAuBecsDebitSetupFutureUsage!
}
enum PaymentIntentPaymentMethodOptionsAuBecsDebitSetupFutureUsage {
	none
	off_session
	on_session
}
type PaymentIntentPaymentMethodOptionsCard {
	statementDescriptorSuffixKanji: String!
	statementDescriptorSuffixKana: String!
	setupFutureUsage: PaymentIntentPaymentMethodOptionsCardSetupFutureUsage!
	requestThreeDSecure: PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure
	network: PaymentIntentPaymentMethodOptionsCardNetwork
	mandateOptions: PaymentMethodOptionsCardMandateOptionsUnion
	installments: PaymentMethodOptionsCardInstallmentsUnion
	captureMethod: PaymentIntentPaymentMethodOptionsCardCaptureMethod!
}
enum PaymentIntentPaymentMethodOptionsCardCaptureMethod {
	manual
}
enum PaymentIntentPaymentMethodOptionsCardNetwork {
	amex
	cartes_bancaires
	diners
	discover
	interac
	jcb
	mastercard
	unionpay
	unknown
	visa
}
enum PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure {
	any
	automatic
	challenge_only
}
enum PaymentIntentPaymentMethodOptionsCardSetupFutureUsage {
	none
	off_session
	on_session
}
type PaymentIntentPaymentMethodOptionsEps {
	setupFutureUsage: PaymentIntentPaymentMethodOptionsEpsSetupFutureUsage!
}
enum PaymentIntentPaymentMethodOptionsEpsSetupFutureUsage {
	none
}
type PaymentIntentPaymentMethodOptionsLink {
	setupFutureUsage: PaymentIntentPaymentMethodOptionsLinkSetupFutureUsage!
	persistentToken: String
	captureMethod: PaymentIntentPaymentMethodOptionsLinkCaptureMethod!
}
enum PaymentIntentPaymentMethodOptionsLinkCaptureMethod {
	manual
}
enum PaymentIntentPaymentMethodOptionsLinkSetupFutureUsage {
	none
	off_session
}
type PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit {
	transactionType: PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionType
	paymentSchedule: PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentSchedule
	intervalDescription: String
	customMandateUrl: String!
}
enum PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentSchedule {
	combined
	interval
	sporadic
}
enum PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionType {
	business
	personal
}
type PaymentIntentPaymentMethodOptionsSepaDebit {
	setupFutureUsage: PaymentIntentPaymentMethodOptionsSepaDebitSetupFutureUsage!
	mandateOptions: PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit!
}
enum PaymentIntentPaymentMethodOptionsSepaDebitSetupFutureUsage {
	none
	off_session
	on_session
}
union PaymentIntentPaymentMethodOptionsUnion = PaymentIntentPaymentMethodOptions
type PaymentIntentPaymentMethodOptionsUsBankAccount {
	verificationMethod: PaymentIntentPaymentMethodOptionsUsBankAccountVerificationMethod!
	setupFutureUsage: PaymentIntentPaymentMethodOptionsUsBankAccountSetupFutureUsage!
	financialConnections: LinkedAccountOptionsUsBankAccount!
}
enum PaymentIntentPaymentMethodOptionsUsBankAccountSetupFutureUsage {
	none
	off_session
	on_session
}
enum PaymentIntentPaymentMethodOptionsUsBankAccountVerificationMethod {
	automatic
	instant
	microdeposits
}
type PaymentIntentProcessing {
	type: PaymentIntentProcessingType!
	card: PaymentIntentCardProcessing!
}
type PaymentIntentProcessingCustomerNotification {
	completesAt: Int
	approvalRequested: Boolean
}
enum PaymentIntentProcessingType {
	card
}
union PaymentIntentProcessingUnion = PaymentIntentProcessing
enum PaymentIntentSetupFutureUsage {
	off_session
	on_session
}
enum PaymentIntentStatus {
	canceled
	processing
	requires_action
	requires_capture
	requires_confirmation
	requires_payment_method
	succeeded
}
type PaymentIntentTypeSpecificPaymentMethodOptionsClient {
	verificationMethod: PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod!
	setupFutureUsage: PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage!
	installments: PaymentFlowsInstallmentOptions!
	captureMethod: PaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod!
}
enum PaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod {
	manual
	manual_preferred
}
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsAcssDebitUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentIntentPaymentMethodOptionsAcssDebit
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsAuBecsDebitUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentIntentPaymentMethodOptionsAuBecsDebit
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsCardUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentIntentPaymentMethodOptionsCard
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsEpsUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentIntentPaymentMethodOptionsEps
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsLinkUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentIntentPaymentMethodOptionsLink
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsSepaDebitUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentIntentPaymentMethodOptionsSepaDebit
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsUsBankAccountUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentIntentPaymentMethodOptionsUsBankAccount
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAffirmUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsAffirm
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAfterpayClearpayUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsAfterpayClearpay
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAlipayUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsAlipay
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBacsDebitUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsBacsDebit
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBancontactUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsBancontact
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBoletoUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsBoleto
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsCardPresentUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsCardPresent
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsCustomerBalanceUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsCustomerBalance
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsFpxUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsFpx
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsGiropayUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsGiropay
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsGrabpayUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsGrabpay
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsIdealUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsIdeal
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsKlarnaUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsKlarna
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsKonbiniUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsKonbini
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsOxxoUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsOxxo
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsP24Union = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsP24
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPaynowUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsPaynow
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPixUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsPix
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPromptpayUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsPromptpay
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsSofortUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsSofort
union PaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsWechatPayUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsWechatPay
enum PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage {
	none
	off_session
	on_session
}
union PaymentIntentTypeSpecificPaymentMethodOptionsClientUnion = PaymentIntentTypeSpecificPaymentMethodOptionsClient
enum PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod {
	automatic
	instant
	microdeposits
}
union PaymentIntentUnion = PaymentIntent
type PaymentLink {
	url: String!
	transferData: PaymentLinksResourceTransferDataUnion
	taxIdCollection: PaymentLinksResourceTaxIdCollection!
	subscriptionData: PaymentLinksResourceSubscriptionDataUnion
	submitType: PaymentLinkSubmitType!
	shippingOptions: [PaymentLinksResourceShippingOption!]!
	shippingAddressCollection: PaymentLinksResourceShippingAddressCollectionUnion
	phoneNumberCollection: PaymentLinksResourcePhoneNumberCollection!
	paymentMethodTypes: [PaymentLinkPaymentMethodTypes!]
	paymentMethodCollection: PaymentLinkPaymentMethodCollection!
	paymentIntentData: PaymentLinksResourcePaymentIntentDataUnion
	onBehalfOf: AccountUnion
	object: PaymentLinkObject!
	metadata: JSON!
	livemode: Boolean!
	lineItems: PaymentLinkLineItems!
	invoiceCreation: PaymentLinksResourceInvoiceCreationUnion
	id: String!
	customerCreation: PaymentLinkCustomerCreation!
	customText: PaymentLinksResourceCustomText!
	currency: String!
	consentCollection: PaymentLinksResourceConsentCollectionUnion
	billingAddressCollection: PaymentLinkBillingAddressCollection!
	automaticTax: PaymentLinksResourceAutomaticTax!
	applicationFeePercent: Float
	applicationFeeAmount: Int
	allowPromotionCodes: Boolean!
	afterCompletion: PaymentLinksResourceAfterCompletion!
	active: Boolean!
}
enum PaymentLinkBillingAddressCollection {
	auto
	required
}
enum PaymentLinkCustomerCreation {
	always
	if_required
}
type PaymentLinkLineItems {
	url: String!
	object: PaymentLinkObjectLineItems!
	hasMore: Boolean!
	data: [Item!]!
}
enum PaymentLinkObject {
	payment_link
}
enum PaymentLinkObjectLineItems {
	list
}
enum PaymentLinkPaymentMethodCollection {
	always
	if_required
}
enum PaymentLinkPaymentMethodTypes {
	affirm
	afterpay_clearpay
	alipay
	au_becs_debit
	bacs_debit
	bancontact
	blik
	boleto
	card
	eps
	fpx
	giropay
	grabpay
	ideal
	klarna
	konbini
	oxxo
	p24
	paynow
	pix
	promptpay
	sepa_debit
	sofort
	us_bank_account
	wechat_pay
}
enum PaymentLinkSubmitType {
	auto
	book
	donate
	pay
}
union PaymentLinkUnion = PaymentLink
type PaymentLinksResourceAfterCompletion {
	type: PaymentLinksResourceAfterCompletionType!
	redirect: PaymentLinksResourceCompletionBehaviorRedirect!
	hostedConfirmation: PaymentLinksResourceCompletionBehaviorConfirmationPage!
}
enum PaymentLinksResourceAfterCompletionType {
	hosted_confirmation
	redirect
}
type PaymentLinksResourceAutomaticTax {
	enabled: Boolean!
}
type PaymentLinksResourceCompletionBehaviorConfirmationPage {
	customMessage: String
}
type PaymentLinksResourceCompletionBehaviorRedirect {
	url: String!
}
type PaymentLinksResourceConsentCollection {
	termsOfService: PaymentLinksResourceConsentCollectionTermsOfService
	promotions: PaymentLinksResourceConsentCollectionPromotions
}
enum PaymentLinksResourceConsentCollectionPromotions {
	auto
	none
}
enum PaymentLinksResourceConsentCollectionTermsOfService {
	none
	required
}
union PaymentLinksResourceConsentCollectionUnion = PaymentLinksResourceConsentCollection
type PaymentLinksResourceCustomText {
	submit: PaymentLinksResourceCustomTextPositionUnion
	shippingAddress: PaymentLinksResourceCustomTextPositionUnion
}
type PaymentLinksResourceCustomTextPosition {
	message: String!
}
union PaymentLinksResourceCustomTextPositionUnion = PaymentLinksResourceCustomTextPosition
type PaymentLinksResourceInvoiceCreation {
	invoiceData: PaymentLinksResourceInvoiceSettingsUnion
	enabled: Boolean!
}
union PaymentLinksResourceInvoiceCreationUnion = PaymentLinksResourceInvoiceCreation
type PaymentLinksResourceInvoiceSettings {
	renderingOptions: InvoiceSettingRenderingOptionsUnion
	metadata: JSON!
	footer: String
	description: String
	customFields: [InvoiceSettingCustomField!]
	accountTaxIds: [DeletedTaxIdOrTaxIdUnion!]
}
union PaymentLinksResourceInvoiceSettingsUnion = PaymentLinksResourceInvoiceSettings
type PaymentLinksResourcePaymentIntentData {
	setupFutureUsage: PaymentLinksResourcePaymentIntentDataSetupFutureUsage
	captureMethod: PaymentLinksResourcePaymentIntentDataCaptureMethod
}
enum PaymentLinksResourcePaymentIntentDataCaptureMethod {
	automatic
	manual
}
enum PaymentLinksResourcePaymentIntentDataSetupFutureUsage {
	off_session
	on_session
}
union PaymentLinksResourcePaymentIntentDataUnion = PaymentLinksResourcePaymentIntentData
type PaymentLinksResourcePhoneNumberCollection {
	enabled: Boolean!
}
type PaymentLinksResourceShippingAddressCollection {
	allowedCountries: [PaymentLinksResourceShippingAddressCollectionAllowedCountries!]!
}
enum PaymentLinksResourceShippingAddressCollectionAllowedCountries {
	AC
	AD
	AE
	AF
	AG
	AI
	AL
	AM
	AO
	AQ
	AR
	AT
	AU
	AW
	AX
	AZ
	BA
	BB
	BD
	BE
	BF
	BG
	BH
	BI
	BJ
	BL
	BM
	BN
	BO
	BQ
	BR
	BS
	BT
	BV
	BW
	BY
	BZ
	CA
	CD
	CF
	CG
	CH
	CI
	CK
	CL
	CM
	CN
	CO
	CR
	CV
	CW
	CY
	CZ
	DE
	DJ
	DK
	DM
	DO
	DZ
	EC
	EE
	EG
	EH
	ER
	ES
	ET
	FI
	FJ
	FK
	FO
	FR
	GA
	GB
	GD
	GE
	GF
	GG
	GH
	GI
	GL
	GM
	GN
	GP
	GQ
	GR
	GS
	GT
	GU
	GW
	GY
	HK
	HN
	HR
	HT
	HU
	ID
	IE
	IL
	IM
	IN
	IO
	IQ
	IS
	IT
	JE
	JM
	JO
	JP
	KE
	KG
	KH
	KI
	KM
	KN
	KR
	KW
	KY
	KZ
	LA
	LB
	LC
	LI
	LK
	LR
	LS
	LT
	LU
	LV
	LY
	MA
	MC
	MD
	ME
	MF
	MG
	MK
	ML
	MM
	MN
	MO
	MQ
	MR
	MS
	MT
	MU
	MV
	MW
	MX
	MY
	MZ
	NA
	NC
	NE
	NG
	NI
	NL
	NO
	NP
	NR
	NU
	NZ
	OM
	PA
	PE
	PF
	PG
	PH
	PK
	PL
	PM
	PN
	PR
	PS
	PT
	PY
	QA
	RE
	RO
	RS
	RU
	RW
	SA
	SB
	SC
	SE
	SG
	SH
	SI
	SJ
	SK
	SL
	SM
	SN
	SO
	SR
	SS
	ST
	SV
	SX
	SZ
	TA
	TC
	TD
	TF
	TG
	TH
	TJ
	TK
	TL
	TM
	TN
	TO
	TR
	TT
	TV
	TW
	TZ
	UA
	UG
	US
	UY
	UZ
	VA
	VC
	VE
	VG
	VN
	VU
	WF
	WS
	XK
	YE
	YT
	ZA
	ZM
	ZW
	ZZ
}
union PaymentLinksResourceShippingAddressCollectionUnion = PaymentLinksResourceShippingAddressCollection
type PaymentLinksResourceShippingOption {
	shippingRate: ShippingRateUnion!
	shippingAmount: Int!
}
type PaymentLinksResourceSubscriptionData {
	trialPeriodDays: Int
	description: String
}
union PaymentLinksResourceSubscriptionDataUnion = PaymentLinksResourceSubscriptionData
type PaymentLinksResourceTaxIdCollection {
	enabled: Boolean!
}
type PaymentLinksResourceTransferData {
	destination: AccountUnion!
	amount: Int
}
union PaymentLinksResourceTransferDataUnion = PaymentLinksResourceTransferData
type PaymentMethod {
	wechatPay: PaymentMethodWechatPay!
	usBankAccount: PaymentMethodUsBankAccount!
	type: PaymentMethodType!
	sofort: PaymentMethodSofort!
	sepaDebit: PaymentMethodSepaDebit!
	radarOptions: RadarRadarOptions!
	promptpay: PaymentMethodPromptpay!
	pix: PaymentMethodPix!
	paynow: PaymentMethodPaynow!
	p24: PaymentMethodP24!
	oxxo: PaymentMethodOxxo!
	object: PaymentMethodObject!
	metadata: JSON!
	livemode: Boolean!
	link: PaymentMethodLink!
	konbini: PaymentMethodKonbini!
	klarna: PaymentMethodKlarna!
	interacPresent: PaymentMethodInteracPresent!
	ideal: PaymentMethodIdeal!
	id: String!
	grabpay: PaymentMethodGrabpay!
	giropay: PaymentMethodGiropay!
	fpx: PaymentMethodFpx!
	eps: PaymentMethodEps!
	customerBalance: PaymentMethodCustomerBalance!
	customer: CustomerUnion
	created: Int!
	cardPresent: PaymentMethodCardPresent!
	card: PaymentMethodCard!
	boleto: PaymentMethodBoleto!
	blik: PaymentMethodBlik!
	billingDetails: BillingDetails!
	bancontact: PaymentMethodBancontact!
	bacsDebit: PaymentMethodBacsDebit!
	auBecsDebit: PaymentMethodAuBecsDebit!
	alipay: PaymentFlowsPrivatePaymentMethodsAlipay!
	afterpayClearpay: PaymentMethodAfterpayClearpay!
	affirm: PaymentMethodAffirm!
	acssDebit: PaymentMethodAcssDebit!
}
type PaymentMethodAcssDebit {
	transitNumber: String
	last4: String
	institutionNumber: String
	fingerprint: String
	bankName: String
}
type PaymentMethodAuBecsDebit {
	last4: String
	fingerprint: String
	bsbNumber: String
}
type PaymentMethodBacsDebit {
	sortCode: String
	last4: String
	fingerprint: String
}
type PaymentMethodBoleto {
	taxId: String!
}
type PaymentMethodCard {
	wallet: PaymentMethodCardWalletUnion
	threeDSecureUsage: ThreeDSecureUsageUnion
	networks: NetworksUnion
	last4: String!
	generatedFrom: PaymentMethodCardGeneratedCardUnion
	funding: String!
	fingerprint: String
	expYear: Int!
	expMonth: Int!
	country: String
	checks: PaymentMethodCardChecksUnion
	brand: String!
}
type PaymentMethodCardChecks {
	cvcCheck: String
	addressPostalCodeCheck: String
	addressLine1Check: String
}
union PaymentMethodCardChecksUnion = PaymentMethodCardChecks
type PaymentMethodCardGeneratedCard {
	setupAttempt: SetupAttemptUnion
	paymentMethodDetails: CardGeneratedFromPaymentMethodDetailsUnion
	charge: String
}
union PaymentMethodCardGeneratedCardUnion = PaymentMethodCardGeneratedCard
type PaymentMethodCardWallet {
	visaCheckout: PaymentMethodCardWalletVisaCheckout!
	type: PaymentMethodCardWalletType!
	samsungPay: PaymentMethodCardWalletSamsungPay!
	masterpass: PaymentMethodCardWalletMasterpass!
	googlePay: PaymentMethodCardWalletGooglePay!
	dynamicLast4: String
	applePay: PaymentMethodCardWalletApplePay!
	amexExpressCheckout: PaymentMethodCardWalletAmexExpressCheckout!
}
type PaymentMethodCardWalletMasterpass {
	shippingAddress: AddressUnion
	name: String
	email: String
	billingAddress: AddressUnion
}
enum PaymentMethodCardWalletType {
	amex_express_checkout
	apple_pay
	google_pay
	masterpass
	samsung_pay
	visa_checkout
}
union PaymentMethodCardWalletUnion = PaymentMethodCardWallet
type PaymentMethodCardWalletVisaCheckout {
	shippingAddress: AddressUnion
	name: String
	email: String
	billingAddress: AddressUnion
}
type PaymentMethodDetails {
	wechatPay: PaymentMethodDetailsWechatPay!
	wechat: PaymentMethodDetailsWechat!
	usBankAccount: PaymentMethodDetailsUsBankAccount!
	type: String!
	stripeAccount: PaymentMethodDetailsStripeAccount!
	sofort: PaymentMethodDetailsSofort!
	sepaDebit: PaymentMethodDetailsSepaDebit!
	promptpay: PaymentMethodDetailsPromptpay!
	pix: PaymentMethodDetailsPix!
	paynow: PaymentMethodDetailsPaynow!
	p24: PaymentMethodDetailsP24!
	oxxo: PaymentMethodDetailsOxxo!
	multibanco: PaymentMethodDetailsMultibanco!
	link: PaymentMethodDetailsLink!
	konbini: PaymentMethodDetailsKonbini!
	klarna: PaymentMethodDetailsKlarna!
	interacPresent: PaymentMethodDetailsInteracPresent!
	ideal: PaymentMethodDetailsIdeal!
	grabpay: PaymentMethodDetailsGrabpay!
	giropay: PaymentMethodDetailsGiropay!
	fpx: PaymentMethodDetailsFpx!
	eps: PaymentMethodDetailsEps!
	customerBalance: PaymentMethodDetailsCustomerBalance!
	cardPresent: PaymentMethodDetailsCardPresent!
	card: PaymentMethodDetailsCard!
	boleto: PaymentMethodDetailsBoleto!
	blik: PaymentMethodDetailsBlik!
	bancontact: PaymentMethodDetailsBancontact!
	bacsDebit: PaymentMethodDetailsBacsDebit!
	auBecsDebit: PaymentMethodDetailsAuBecsDebit!
	alipay: PaymentFlowsPrivatePaymentMethodsAlipayDetails!
	afterpayClearpay: PaymentMethodDetailsAfterpayClearpay!
	affirm: PaymentMethodDetailsAffirm!
	acssDebit: PaymentMethodDetailsAcssDebit!
	achDebit: PaymentMethodDetailsAchDebit!
	achCreditTransfer: PaymentMethodDetailsAchCreditTransfer!
}
type PaymentMethodDetailsAchCreditTransfer {
	swiftCode: String
	routingNumber: String
	bankName: String
	accountNumber: String
}
type PaymentMethodDetailsAchDebit {
	routingNumber: String
	last4: String
	fingerprint: String
	country: String
	bankName: String
	accountHolderType: PaymentMethodDetailsAchDebitAccountHolderType
}
enum PaymentMethodDetailsAchDebitAccountHolderType {
	company
	individual
}
type PaymentMethodDetailsAcssDebit {
	transitNumber: String
	mandate: String!
	last4: String
	institutionNumber: String
	fingerprint: String
	bankName: String
}
type PaymentMethodDetailsAfterpayClearpay {
	reference: String
}
type PaymentMethodDetailsAuBecsDebit {
	mandate: String!
	last4: String
	fingerprint: String
	bsbNumber: String
}
type PaymentMethodDetailsBacsDebit {
	sortCode: String
	mandate: String
	last4: String
	fingerprint: String
}
type PaymentMethodDetailsBancontact {
	verifiedName: String
	preferredLanguage: PaymentMethodDetailsBancontactPreferredLanguage
	ibanLast4: String
	generatedSepaDebitMandate: MandateUnion
	generatedSepaDebit: PaymentMethodUnion
	bic: String
	bankName: String
	bankCode: String
}
enum PaymentMethodDetailsBancontactPreferredLanguage {
	de
	en
	fr
	nl
}
type PaymentMethodDetailsBoleto {
	taxId: String!
}
type PaymentMethodDetailsCard {
	wallet: PaymentMethodDetailsCardWalletUnion
	threeDSecure: ThreeDSecureDetailsUnion
	network: String
	mandate: String
	last4: String
	installments: PaymentMethodDetailsCardInstallmentsUnion
	funding: String
	fingerprint: String
	expYear: Int!
	expMonth: Int!
	country: String
	checks: PaymentMethodDetailsCardChecksUnion
	brand: String
}
type PaymentMethodDetailsCardChecks {
	cvcCheck: String
	addressPostalCodeCheck: String
	addressLine1Check: String
}
union PaymentMethodDetailsCardChecksUnion = PaymentMethodDetailsCardChecks
type PaymentMethodDetailsCardInstallments {
	plan: PaymentMethodDetailsCardInstallmentsPlanUnion
}
type PaymentMethodDetailsCardInstallmentsPlan {
	type: PaymentMethodDetailsCardInstallmentsPlanType!
	interval: PaymentMethodDetailsCardInstallmentsPlanInterval
	count: Int
}
enum PaymentMethodDetailsCardInstallmentsPlanInterval {
	month
}
enum PaymentMethodDetailsCardInstallmentsPlanType {
	fixed_count
}
union PaymentMethodDetailsCardInstallmentsPlanUnion = PaymentMethodDetailsCardInstallmentsPlan
union PaymentMethodDetailsCardInstallmentsUnion = PaymentMethodDetailsCardInstallments
type PaymentMethodDetailsCardPresent {
	receipt: PaymentMethodDetailsCardPresentReceiptUnion
	readMethod: PaymentMethodDetailsCardPresentReadMethod
	overcaptureSupported: Boolean!
	network: String
	last4: String
	incrementalAuthorizationSupported: Boolean!
	generatedCard: String
	funding: String
	fingerprint: String
	expYear: Int!
	expMonth: Int!
	emvAuthData: String
	country: String
	cardholderName: String
	captureBefore: Int!
	brand: String
	amountAuthorized: Int
}
enum PaymentMethodDetailsCardPresentReadMethod {
	contact_emv
	contactless_emv
	contactless_magstripe_mode
	magnetic_stripe_fallback
	magnetic_stripe_track2
}
type PaymentMethodDetailsCardPresentReceipt {
	transactionStatusInformation: String
	terminalVerificationResults: String
	dedicatedFileName: String
	cardholderVerificationMethod: String
	authorizationResponseCode: String
	authorizationCode: String
	applicationPreferredName: String
	applicationCryptogram: String
	accountType: PaymentMethodDetailsCardPresentReceiptAccountType!
}
enum PaymentMethodDetailsCardPresentReceiptAccountType {
	checking
	credit
	prepaid
	unknown
}
union PaymentMethodDetailsCardPresentReceiptUnion = PaymentMethodDetailsCardPresentReceipt
type PaymentMethodDetailsCardWallet {
	visaCheckout: PaymentMethodDetailsCardWalletVisaCheckout!
	type: PaymentMethodDetailsCardWalletType!
	samsungPay: PaymentMethodDetailsCardWalletSamsungPay!
	masterpass: PaymentMethodDetailsCardWalletMasterpass!
	googlePay: PaymentMethodDetailsCardWalletGooglePay!
	dynamicLast4: String
	applePay: PaymentMethodDetailsCardWalletApplePay!
	amexExpressCheckout: PaymentMethodDetailsCardWalletAmexExpressCheckout!
}
type PaymentMethodDetailsCardWalletMasterpass {
	shippingAddress: AddressUnion
	name: String
	email: String
	billingAddress: AddressUnion
}
enum PaymentMethodDetailsCardWalletType {
	amex_express_checkout
	apple_pay
	google_pay
	masterpass
	samsung_pay
	visa_checkout
}
union PaymentMethodDetailsCardWalletUnion = PaymentMethodDetailsCardWallet
type PaymentMethodDetailsCardWalletVisaCheckout {
	shippingAddress: AddressUnion
	name: String
	email: String
	billingAddress: AddressUnion
}
type PaymentMethodDetailsEps {
	verifiedName: String
	bank: PaymentMethodDetailsEpsBank
}
enum PaymentMethodDetailsEpsBank {
	arzte_und_apotheker_bank
	austrian_anadi_bank_ag
	bank_austria
	bankhaus_carl_spangler
	bankhaus_schelhammer_und_schattera_ag
	bawag_psk_ag
	bks_bank_ag
	brull_kallmus_bank_ag
	btv_vier_lander_bank
	capital_bank_grawe_gruppe_ag
	deutsche_bank_ag
	dolomitenbank
	easybank_ag
	erste_bank_und_sparkassen
	hypo_alpeadriabank_international_ag
	hypo_bank_burgenland_aktiengesellschaft
	hypo_noe_lb_fur_niederosterreich_u_wien
	hypo_oberosterreich_salzburg_steiermark
	hypo_tirol_bank_ag
	hypo_vorarlberg_bank_ag
	marchfelder_bank
	oberbank_ag
	raiffeisen_bankengruppe_osterreich
	schoellerbank_ag
	sparda_bank_wien
	volksbank_gruppe
	volkskreditbank_ag
	vr_bank_braunau
}
type PaymentMethodDetailsFpx {
	transactionId: String
	bank: PaymentMethodDetailsFpxBank!
}
enum PaymentMethodDetailsFpxBank {
	affin_bank
	agrobank
	alliance_bank
	ambank
	bank_islam
	bank_muamalat
	bank_of_china
	bank_rakyat
	bsn
	cimb
	deutsche_bank
	hong_leong_bank
	hsbc
	kfh
	maybank2e
	maybank2u
	ocbc
	pb_enterprise
	public_bank
	rhb
	standard_chartered
	uob
}
type PaymentMethodDetailsGiropay {
	verifiedName: String
	bic: String
	bankName: String
	bankCode: String
}
type PaymentMethodDetailsGrabpay {
	transactionId: String
}
type PaymentMethodDetailsIdeal {
	verifiedName: String
	ibanLast4: String
	generatedSepaDebitMandate: MandateUnion
	generatedSepaDebit: PaymentMethodUnion
	bic: PaymentMethodDetailsIdealBic
	bank: PaymentMethodDetailsIdealBank
}
enum PaymentMethodDetailsIdealBank {
	abn_amro
	asn_bank
	bunq
	handelsbanken
	ing
	knab
	moneyou
	rabobank
	regiobank
	revolut
	sns_bank
	triodos_bank
	van_lanschot
}
enum PaymentMethodDetailsIdealBic {
	ABNANL2A
	ASNBNL21
	BUNQNL2A
	FVLBNL22
	HANDNL2A
	INGBNL2A
	KNABNL2H
	MOYONL21
	RABONL2U
	RBRBNL21
	REVOLT21
	SNSBNL2A
	TRIONL2U
}
type PaymentMethodDetailsInteracPresent {
	receipt: PaymentMethodDetailsInteracPresentReceiptUnion
	readMethod: PaymentMethodDetailsInteracPresentReadMethod
	preferredLocales: [String!]
	network: String
	last4: String
	generatedCard: String
	funding: String
	fingerprint: String
	expYear: Int!
	expMonth: Int!
	emvAuthData: String
	country: String
	cardholderName: String
	brand: String
}
enum PaymentMethodDetailsInteracPresentReadMethod {
	contact_emv
	contactless_emv
	contactless_magstripe_mode
	magnetic_stripe_fallback
	magnetic_stripe_track2
}
type PaymentMethodDetailsInteracPresentReceipt {
	transactionStatusInformation: String
	terminalVerificationResults: String
	dedicatedFileName: String
	cardholderVerificationMethod: String
	authorizationResponseCode: String
	authorizationCode: String
	applicationPreferredName: String
	applicationCryptogram: String
	accountType: PaymentMethodDetailsInteracPresentReceiptAccountType!
}
enum PaymentMethodDetailsInteracPresentReceiptAccountType {
	checking
	savings
	unknown
}
union PaymentMethodDetailsInteracPresentReceiptUnion = PaymentMethodDetailsInteracPresentReceipt
type PaymentMethodDetailsKlarna {
	preferredLocale: String
	paymentMethodCategory: String
}
type PaymentMethodDetailsKonbini {
	store: PaymentMethodDetailsKonbiniStoreUnion
}
type PaymentMethodDetailsKonbiniStore {
	chain: PaymentMethodDetailsKonbiniStoreChain
}
enum PaymentMethodDetailsKonbiniStoreChain {
	familymart
	lawson
	ministop
	seicomart
}
union PaymentMethodDetailsKonbiniStoreUnion = PaymentMethodDetailsKonbiniStore
type PaymentMethodDetailsMultibanco {
	reference: String
	entity: String
}
type PaymentMethodDetailsOxxo {
	number: String
}
type PaymentMethodDetailsP24 {
	verifiedName: String
	reference: String
	bank: PaymentMethodDetailsP24Bank
}
enum PaymentMethodDetailsP24Bank {
	alior_bank
	bank_millennium
	bank_nowy_bfg_sa
	bank_pekao_sa
	banki_spbdzielcze
	blik
	bnp_paribas
	boz
	citi_handlowy
	credit_agricole
	envelobank
	etransfer_pocztowy24
	getin_bank
	ideabank
	ing
	inteligo
	mbank_mtransfer
	nest_przelew
	noble_pay
	pbac_z_ipko
	plus_bank
	santander_przelew24
	tmobile_usbugi_bankowe
	toyota_bank
	volkswagen_bank
}
type PaymentMethodDetailsPaynow {
	reference: String
}
type PaymentMethodDetailsPix {
	bankTransactionId: String
}
type PaymentMethodDetailsPromptpay {
	reference: String
}
type PaymentMethodDetailsSepaDebit {
	mandate: String
	last4: String
	fingerprint: String
	country: String
	branchCode: String
	bankCode: String
}
type PaymentMethodDetailsSofort {
	verifiedName: String
	preferredLanguage: PaymentMethodDetailsSofortPreferredLanguage
	ibanLast4: String
	generatedSepaDebitMandate: MandateUnion
	generatedSepaDebit: PaymentMethodUnion
	country: String
	bic: String
	bankName: String
	bankCode: String
}
enum PaymentMethodDetailsSofortPreferredLanguage {
	de
	en
	es
	fr
	it
	nl
	pl
}
union PaymentMethodDetailsUnion = PaymentMethodDetails
type PaymentMethodDetailsUsBankAccount {
	routingNumber: String
	last4: String
	fingerprint: String
	bankName: String
	accountType: PaymentMethodDetailsUsBankAccountAccountType
	accountHolderType: PaymentMethodDetailsUsBankAccountAccountHolderType
}
enum PaymentMethodDetailsUsBankAccountAccountHolderType {
	company
	individual
}
enum PaymentMethodDetailsUsBankAccountAccountType {
	checking
	savings
}
type PaymentMethodDetailsWechatPay {
	transactionId: String
	fingerprint: String
}
type PaymentMethodEps {
	bank: PaymentMethodEpsBank
}
enum PaymentMethodEpsBank {
	arzte_und_apotheker_bank
	austrian_anadi_bank_ag
	bank_austria
	bankhaus_carl_spangler
	bankhaus_schelhammer_und_schattera_ag
	bawag_psk_ag
	bks_bank_ag
	brull_kallmus_bank_ag
	btv_vier_lander_bank
	capital_bank_grawe_gruppe_ag
	deutsche_bank_ag
	dolomitenbank
	easybank_ag
	erste_bank_und_sparkassen
	hypo_alpeadriabank_international_ag
	hypo_bank_burgenland_aktiengesellschaft
	hypo_noe_lb_fur_niederosterreich_u_wien
	hypo_oberosterreich_salzburg_steiermark
	hypo_tirol_bank_ag
	hypo_vorarlberg_bank_ag
	marchfelder_bank
	oberbank_ag
	raiffeisen_bankengruppe_osterreich
	schoellerbank_ag
	sparda_bank_wien
	volksbank_gruppe
	volkskreditbank_ag
	vr_bank_braunau
}
type PaymentMethodFpx {
	bank: PaymentMethodFpxBank!
}
enum PaymentMethodFpxBank {
	affin_bank
	agrobank
	alliance_bank
	ambank
	bank_islam
	bank_muamalat
	bank_of_china
	bank_rakyat
	bsn
	cimb
	deutsche_bank
	hong_leong_bank
	hsbc
	kfh
	maybank2e
	maybank2u
	ocbc
	pb_enterprise
	public_bank
	rhb
	standard_chartered
	uob
}
type PaymentMethodIdeal {
	bic: PaymentMethodIdealBic
	bank: PaymentMethodIdealBank
}
enum PaymentMethodIdealBank {
	abn_amro
	asn_bank
	bunq
	handelsbanken
	ing
	knab
	moneyou
	rabobank
	regiobank
	revolut
	sns_bank
	triodos_bank
	van_lanschot
}
enum PaymentMethodIdealBic {
	ABNANL2A
	ASNBNL21
	BUNQNL2A
	FVLBNL22
	HANDNL2A
	INGBNL2A
	KNABNL2H
	MOYONL21
	RABONL2U
	RBRBNL21
	REVOLT21
	SNSBNL2A
	TRIONL2U
}
type PaymentMethodKlarna {
	dob: PaymentFlowsPrivatePaymentMethodsKlarnaDobUnion
}
type PaymentMethodLink {
	persistentToken: String!
	email: String
}
enum PaymentMethodObject {
	payment_method
}
type PaymentMethodOptionsAffirm {
	setupFutureUsage: PaymentMethodOptionsAffirmSetupFutureUsage!
	captureMethod: PaymentMethodOptionsAffirmCaptureMethod!
}
enum PaymentMethodOptionsAffirmCaptureMethod {
	manual
}
enum PaymentMethodOptionsAffirmSetupFutureUsage {
	none
}
type PaymentMethodOptionsAfterpayClearpay {
	setupFutureUsage: PaymentMethodOptionsAfterpayClearpaySetupFutureUsage!
	reference: String
	captureMethod: PaymentMethodOptionsAfterpayClearpayCaptureMethod!
}
enum PaymentMethodOptionsAfterpayClearpayCaptureMethod {
	manual
}
enum PaymentMethodOptionsAfterpayClearpaySetupFutureUsage {
	none
}
type PaymentMethodOptionsAlipay {
	setupFutureUsage: PaymentMethodOptionsAlipaySetupFutureUsage!
}
enum PaymentMethodOptionsAlipaySetupFutureUsage {
	none
	off_session
}
type PaymentMethodOptionsBacsDebit {
	setupFutureUsage: PaymentMethodOptionsBacsDebitSetupFutureUsage!
}
enum PaymentMethodOptionsBacsDebitSetupFutureUsage {
	none
	off_session
	on_session
}
type PaymentMethodOptionsBancontact {
	setupFutureUsage: PaymentMethodOptionsBancontactSetupFutureUsage!
	preferredLanguage: PaymentMethodOptionsBancontactPreferredLanguage!
}
enum PaymentMethodOptionsBancontactPreferredLanguage {
	de
	en
	fr
	nl
}
enum PaymentMethodOptionsBancontactSetupFutureUsage {
	none
	off_session
}
type PaymentMethodOptionsBoleto {
	setupFutureUsage: PaymentMethodOptionsBoletoSetupFutureUsage!
	expiresAfterDays: Int!
}
enum PaymentMethodOptionsBoletoSetupFutureUsage {
	none
	off_session
	on_session
}
type PaymentMethodOptionsCardInstallments {
	plan: PaymentMethodDetailsCardInstallmentsPlanUnion
	enabled: Boolean!
	availablePlans: [PaymentMethodDetailsCardInstallmentsPlan!]
}
union PaymentMethodOptionsCardInstallmentsUnion = PaymentMethodOptionsCardInstallments
type PaymentMethodOptionsCardMandateOptions {
	supportedTypes: [PaymentMethodOptionsCardMandateOptionsSupportedTypes!]
	startDate: Int!
	reference: String!
	intervalCount: Int
	interval: PaymentMethodOptionsCardMandateOptionsInterval!
	endDate: Int
	description: String
	amountType: PaymentMethodOptionsCardMandateOptionsAmountType!
	amount: Int!
}
enum PaymentMethodOptionsCardMandateOptionsAmountType {
	fixed
	maximum
}
enum PaymentMethodOptionsCardMandateOptionsInterval {
	day
	month
	sporadic
	week
	year
}
enum PaymentMethodOptionsCardMandateOptionsSupportedTypes {
	india
}
union PaymentMethodOptionsCardMandateOptionsUnion = PaymentMethodOptionsCardMandateOptions
type PaymentMethodOptionsCardPresent {
	requestIncrementalAuthorizationSupport: Boolean
	requestExtendedAuthorization: Boolean
}
type PaymentMethodOptionsCustomerBalance {
	setupFutureUsage: PaymentMethodOptionsCustomerBalanceSetupFutureUsage!
	fundingType: PaymentMethodOptionsCustomerBalanceFundingType
	bankTransfer: PaymentMethodOptionsCustomerBalanceBankTransfer!
}
type PaymentMethodOptionsCustomerBalanceBankTransfer {
	type: PaymentMethodOptionsCustomerBalanceBankTransferType
	requestedAddressTypes: [PaymentMethodOptionsCustomerBalanceBankTransferRequestedAddressTypes!]!
	euBankTransfer: PaymentMethodOptionsCustomerBalanceEuBankAccount!
}
enum PaymentMethodOptionsCustomerBalanceBankTransferRequestedAddressTypes {
	iban
	sepa
	sort_code
	spei
	zengin
}
enum PaymentMethodOptionsCustomerBalanceBankTransferType {
	eu_bank_transfer
	gb_bank_transfer
	jp_bank_transfer
	mx_bank_transfer
}
type PaymentMethodOptionsCustomerBalanceEuBankAccount {
	country: PaymentMethodOptionsCustomerBalanceEuBankAccountCountry!
}
enum PaymentMethodOptionsCustomerBalanceEuBankAccountCountry {
	BE
	DE
	ES
	FR
	IE
	NL
}
enum PaymentMethodOptionsCustomerBalanceFundingType {
	bank_transfer
}
enum PaymentMethodOptionsCustomerBalanceSetupFutureUsage {
	none
}
type PaymentMethodOptionsFpx {
	setupFutureUsage: PaymentMethodOptionsFpxSetupFutureUsage!
}
enum PaymentMethodOptionsFpxSetupFutureUsage {
	none
}
type PaymentMethodOptionsGiropay {
	setupFutureUsage: PaymentMethodOptionsGiropaySetupFutureUsage!
}
enum PaymentMethodOptionsGiropaySetupFutureUsage {
	none
}
type PaymentMethodOptionsGrabpay {
	setupFutureUsage: PaymentMethodOptionsGrabpaySetupFutureUsage!
}
enum PaymentMethodOptionsGrabpaySetupFutureUsage {
	none
}
type PaymentMethodOptionsIdeal {
	setupFutureUsage: PaymentMethodOptionsIdealSetupFutureUsage!
}
enum PaymentMethodOptionsIdealSetupFutureUsage {
	none
	off_session
}
type PaymentMethodOptionsKlarna {
	setupFutureUsage: PaymentMethodOptionsKlarnaSetupFutureUsage!
	preferredLocale: String
	captureMethod: PaymentMethodOptionsKlarnaCaptureMethod!
}
enum PaymentMethodOptionsKlarnaCaptureMethod {
	manual
}
enum PaymentMethodOptionsKlarnaSetupFutureUsage {
	none
}
type PaymentMethodOptionsKonbini {
	setupFutureUsage: PaymentMethodOptionsKonbiniSetupFutureUsage!
	productDescription: String
	expiresAt: Int
	expiresAfterDays: Int
	confirmationNumber: String
}
enum PaymentMethodOptionsKonbiniSetupFutureUsage {
	none
}
type PaymentMethodOptionsOxxo {
	setupFutureUsage: PaymentMethodOptionsOxxoSetupFutureUsage!
	expiresAfterDays: Int!
}
enum PaymentMethodOptionsOxxoSetupFutureUsage {
	none
}
type PaymentMethodOptionsP24 {
	setupFutureUsage: PaymentMethodOptionsP24SetupFutureUsage!
}
enum PaymentMethodOptionsP24SetupFutureUsage {
	none
}
type PaymentMethodOptionsPaynow {
	setupFutureUsage: PaymentMethodOptionsPaynowSetupFutureUsage!
}
enum PaymentMethodOptionsPaynowSetupFutureUsage {
	none
}
type PaymentMethodOptionsPix {
	setupFutureUsage: PaymentMethodOptionsPixSetupFutureUsage!
	expiresAt: Int
	expiresAfterSeconds: Int
}
enum PaymentMethodOptionsPixSetupFutureUsage {
	none
}
type PaymentMethodOptionsPromptpay {
	setupFutureUsage: PaymentMethodOptionsPromptpaySetupFutureUsage!
}
enum PaymentMethodOptionsPromptpaySetupFutureUsage {
	none
}
type PaymentMethodOptionsSofort {
	setupFutureUsage: PaymentMethodOptionsSofortSetupFutureUsage!
	preferredLanguage: PaymentMethodOptionsSofortPreferredLanguage
}
enum PaymentMethodOptionsSofortPreferredLanguage {
	de
	en
	es
	fr
	it
	nl
	pl
}
enum PaymentMethodOptionsSofortSetupFutureUsage {
	none
	off_session
}
type PaymentMethodOptionsWechatPay {
	setupFutureUsage: PaymentMethodOptionsWechatPaySetupFutureUsage!
	client: PaymentMethodOptionsWechatPayClient
	appId: String
}
enum PaymentMethodOptionsWechatPayClient {
	android
	ios
	web
}
enum PaymentMethodOptionsWechatPaySetupFutureUsage {
	none
}
type PaymentMethodP24 {
	bank: PaymentMethodP24Bank
}
enum PaymentMethodP24Bank {
	alior_bank
	bank_millennium
	bank_nowy_bfg_sa
	bank_pekao_sa
	banki_spbdzielcze
	blik
	bnp_paribas
	boz
	citi_handlowy
	credit_agricole
	envelobank
	etransfer_pocztowy24
	getin_bank
	ideabank
	ing
	inteligo
	mbank_mtransfer
	nest_przelew
	noble_pay
	pbac_z_ipko
	plus_bank
	santander_przelew24
	tmobile_usbugi_bankowe
	toyota_bank
	volkswagen_bank
}
type PaymentMethodSepaDebit {
	last4: String
	generatedFrom: SepaDebitGeneratedFromUnion
	fingerprint: String
	country: String
	branchCode: String
	bankCode: String
}
type PaymentMethodSofort {
	country: String
}
enum PaymentMethodType {
	acss_debit
	affirm
	afterpay_clearpay
	alipay
	au_becs_debit
	bacs_debit
	bancontact
	blik
	boleto
	card
	card_present
	customer_balance
	eps
	fpx
	giropay
	grabpay
	ideal
	interac_present
	klarna
	konbini
	link
	oxxo
	p24
	paynow
	pix
	promptpay
	sepa_debit
	sofort
	us_bank_account
	wechat_pay
}
union PaymentMethodUnion = PaymentMethod
type PaymentMethodUsBankAccount {
	routingNumber: String
	networks: UsBankAccountNetworksUnion
	last4: String
	fingerprint: String
	financialConnectionsAccount: String
	bankName: String
	accountType: PaymentMethodUsBankAccountAccountType
	accountHolderType: PaymentMethodUsBankAccountAccountHolderType
}
enum PaymentMethodUsBankAccountAccountHolderType {
	company
	individual
}
enum PaymentMethodUsBankAccountAccountType {
	checking
	savings
}
type PaymentPagesCheckoutSessionAfterExpiration {
	recovery: PaymentPagesCheckoutSessionAfterExpirationRecoveryUnion
}
type PaymentPagesCheckoutSessionAfterExpirationRecovery {
	url: String
	expiresAt: Int
	enabled: Boolean!
	allowPromotionCodes: Boolean!
}
union PaymentPagesCheckoutSessionAfterExpirationRecoveryUnion = PaymentPagesCheckoutSessionAfterExpirationRecovery
union PaymentPagesCheckoutSessionAfterExpirationUnion = PaymentPagesCheckoutSessionAfterExpiration
type PaymentPagesCheckoutSessionAutomaticTax {
	status: PaymentPagesCheckoutSessionAutomaticTaxStatus
	enabled: Boolean!
}
enum PaymentPagesCheckoutSessionAutomaticTaxStatus {
	complete
	failed
	requires_location_inputs
}
type PaymentPagesCheckoutSessionConsent {
	termsOfService: PaymentPagesCheckoutSessionConsentTermsOfService
	promotions: PaymentPagesCheckoutSessionConsentPromotions
}
type PaymentPagesCheckoutSessionConsentCollection {
	termsOfService: PaymentPagesCheckoutSessionConsentCollectionTermsOfService
	promotions: PaymentPagesCheckoutSessionConsentCollectionPromotions
}
enum PaymentPagesCheckoutSessionConsentCollectionPromotions {
	auto
	none
}
enum PaymentPagesCheckoutSessionConsentCollectionTermsOfService {
	none
	required
}
union PaymentPagesCheckoutSessionConsentCollectionUnion = PaymentPagesCheckoutSessionConsentCollection
enum PaymentPagesCheckoutSessionConsentPromotions {
	opt_in
	opt_out
}
enum PaymentPagesCheckoutSessionConsentTermsOfService {
	accepted
}
union PaymentPagesCheckoutSessionConsentUnion = PaymentPagesCheckoutSessionConsent
type PaymentPagesCheckoutSessionCustomText {
	submit: PaymentPagesCheckoutSessionCustomTextPositionUnion
	shippingAddress: PaymentPagesCheckoutSessionCustomTextPositionUnion
}
type PaymentPagesCheckoutSessionCustomTextPosition {
	message: String!
}
union PaymentPagesCheckoutSessionCustomTextPositionUnion = PaymentPagesCheckoutSessionCustomTextPosition
type PaymentPagesCheckoutSessionCustomerDetails {
	taxIds: [PaymentPagesCheckoutSessionTaxId!]
	taxExempt: PaymentPagesCheckoutSessionCustomerDetailsTaxExempt
	phone: String
	name: String
	email: String
	address: AddressUnion
}
enum PaymentPagesCheckoutSessionCustomerDetailsTaxExempt {
	exempt
	none
	reverse
}
union PaymentPagesCheckoutSessionCustomerDetailsUnion = PaymentPagesCheckoutSessionCustomerDetails
type PaymentPagesCheckoutSessionInvoiceCreation {
	invoiceData: PaymentPagesCheckoutSessionInvoiceSettings!
	enabled: Boolean!
}
union PaymentPagesCheckoutSessionInvoiceCreationUnion = PaymentPagesCheckoutSessionInvoiceCreation
type PaymentPagesCheckoutSessionInvoiceSettings {
	renderingOptions: InvoiceSettingRenderingOptionsUnion
	metadata: JSON!
	footer: String
	description: String
	customFields: [InvoiceSettingCustomField!]
	accountTaxIds: [DeletedTaxIdOrTaxIdUnion!]
}
type PaymentPagesCheckoutSessionPhoneNumberCollection {
	enabled: Boolean!
}
type PaymentPagesCheckoutSessionShippingAddressCollection {
	allowedCountries: [PaymentPagesCheckoutSessionShippingAddressCollectionAllowedCountries!]!
}
enum PaymentPagesCheckoutSessionShippingAddressCollectionAllowedCountries {
	AC
	AD
	AE
	AF
	AG
	AI
	AL
	AM
	AO
	AQ
	AR
	AT
	AU
	AW
	AX
	AZ
	BA
	BB
	BD
	BE
	BF
	BG
	BH
	BI
	BJ
	BL
	BM
	BN
	BO
	BQ
	BR
	BS
	BT
	BV
	BW
	BY
	BZ
	CA
	CD
	CF
	CG
	CH
	CI
	CK
	CL
	CM
	CN
	CO
	CR
	CV
	CW
	CY
	CZ
	DE
	DJ
	DK
	DM
	DO
	DZ
	EC
	EE
	EG
	EH
	ER
	ES
	ET
	FI
	FJ
	FK
	FO
	FR
	GA
	GB
	GD
	GE
	GF
	GG
	GH
	GI
	GL
	GM
	GN
	GP
	GQ
	GR
	GS
	GT
	GU
	GW
	GY
	HK
	HN
	HR
	HT
	HU
	ID
	IE
	IL
	IM
	IN
	IO
	IQ
	IS
	IT
	JE
	JM
	JO
	JP
	KE
	KG
	KH
	KI
	KM
	KN
	KR
	KW
	KY
	KZ
	LA
	LB
	LC
	LI
	LK
	LR
	LS
	LT
	LU
	LV
	LY
	MA
	MC
	MD
	ME
	MF
	MG
	MK
	ML
	MM
	MN
	MO
	MQ
	MR
	MS
	MT
	MU
	MV
	MW
	MX
	MY
	MZ
	NA
	NC
	NE
	NG
	NI
	NL
	NO
	NP
	NR
	NU
	NZ
	OM
	PA
	PE
	PF
	PG
	PH
	PK
	PL
	PM
	PN
	PR
	PS
	PT
	PY
	QA
	RE
	RO
	RS
	RU
	RW
	SA
	SB
	SC
	SE
	SG
	SH
	SI
	SJ
	SK
	SL
	SM
	SN
	SO
	SR
	SS
	ST
	SV
	SX
	SZ
	TA
	TC
	TD
	TF
	TG
	TH
	TJ
	TK
	TL
	TM
	TN
	TO
	TR
	TT
	TV
	TW
	TZ
	UA
	UG
	US
	UY
	UZ
	VA
	VC
	VE
	VG
	VN
	VU
	WF
	WS
	XK
	YE
	YT
	ZA
	ZM
	ZW
	ZZ
}
union PaymentPagesCheckoutSessionShippingAddressCollectionUnion = PaymentPagesCheckoutSessionShippingAddressCollection
type PaymentPagesCheckoutSessionShippingCost {
	taxes: [LineItemsTaxAmount!]!
	shippingRate: ShippingRateUnion
	amountTotal: Int!
	amountTax: Int!
	amountSubtotal: Int!
}
union PaymentPagesCheckoutSessionShippingCostUnion = PaymentPagesCheckoutSessionShippingCost
type PaymentPagesCheckoutSessionShippingOption {
	shippingRate: ShippingRateUnion!
	shippingAmount: Int!
}
type PaymentPagesCheckoutSessionTaxId {
	value: String
	type: PaymentPagesCheckoutSessionTaxIdType!
}
type PaymentPagesCheckoutSessionTaxIdCollection {
	enabled: Boolean!
}
enum PaymentPagesCheckoutSessionTaxIdType {
	ae_trn
	au_abn
	au_arn
	bg_uic
	br_cnpj
	br_cpf
	ca_bn
	ca_gst_hst
	ca_pst_bc
	ca_pst_mb
	ca_pst_sk
	ca_qst
	ch_vat
	cl_tin
	eg_tin
	es_cif
	eu_oss_vat
	eu_vat
	gb_vat
	ge_vat
	hk_br
	hu_tin
	id_npwp
	il_vat
	in_gst
	is_vat
	jp_cn
	jp_rn
	jp_trn
	ke_pin
	kr_brn
	li_uid
	mx_rfc
	my_frp
	my_itn
	my_sst
	no_vat
	nz_gst
	ph_tin
	ru_inn
	ru_kpp
	sa_vat
	sg_gst
	sg_uen
	si_tin
	th_vat
	tr_tin
	tw_vat
	ua_vat
	unknown
	us_ein
	za_vat
}
type PaymentPagesCheckoutSessionTotalDetails {
	breakdown: PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown!
	amountTax: Int!
	amountShipping: Int
	amountDiscount: Int!
}
type PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown {
	taxes: [LineItemsTaxAmount!]!
	discounts: [LineItemsDiscountAmount!]!
}
union PaymentPagesCheckoutSessionTotalDetailsUnion = PaymentPagesCheckoutSessionTotalDetails
type Payout {
	type: PayoutType!
	status: String!
	statementDescriptor: String
	sourceType: String!
	reversedBy: PayoutUnion
	originalPayout: PayoutUnion
	object: PayoutObject!
	method: String!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	failureMessage: String
	failureCode: String
	failureBalanceTransaction: BalanceTransactionUnion
	destination: DeletedCardOrDeletedBankAccountOrCardOrBankAccountUnion
	description: String
	currency: String!
	created: Int!
	balanceTransaction: BalanceTransactionUnion
	automatic: Boolean!
	arrivalDate: Int!
	amount: Int!
}
enum PayoutObject {
	payout
}
enum PayoutType {
	bank_account
	card
}
union PayoutUnion = Payout
type Period {
	start: Int
	end: Int
}
type Person {
	verification: LegalEntityPersonVerification!
	ssnLast4Provided: Boolean!
	requirements: PersonRequirementsUnion
	relationship: PersonRelationship!
	registeredAddress: Address!
	politicalExposure: PersonPoliticalExposure!
	phone: String
	object: PersonObject!
	nationality: String
	metadata: JSON!
	maidenName: String
	lastNameKanji: String
	lastNameKana: String
	lastName: String
	idNumberSecondaryProvided: Boolean!
	idNumberProvided: Boolean!
	id: String!
	gender: String
	futureRequirements: PersonFutureRequirementsUnion
	fullNameAliases: [String!]!
	firstNameKanji: String
	firstNameKana: String
	firstName: String
	email: String
	dob: LegalEntityDob!
	created: Int!
	addressKanji: LegalEntityJapanAddressUnion
	addressKana: LegalEntityJapanAddressUnion
	address: Address!
	account: String!
}
type PersonFutureRequirements {
	pendingVerification: [String!]!
	pastDue: [String!]!
	eventuallyDue: [String!]!
	errors: [AccountRequirementsError!]!
	currentlyDue: [String!]!
	alternatives: [AccountRequirementsAlternative!]
}
union PersonFutureRequirementsUnion = PersonFutureRequirements
enum PersonObject {
	person
}
enum PersonPoliticalExposure {
	existing
	none
}
type PersonRelationship {
	title: String
	representative: Boolean
	percentOwnership: Float
	owner: Boolean
	executive: Boolean
	director: Boolean
}
type PersonRequirements {
	pendingVerification: [String!]!
	pastDue: [String!]!
	eventuallyDue: [String!]!
	errors: [AccountRequirementsError!]!
	currentlyDue: [String!]!
	alternatives: [AccountRequirementsAlternative!]
}
union PersonRequirementsUnion = PersonRequirements
type Plan {
	usageType: PlanUsageType!
	trialPeriodDays: Int
	transformUsage: TransformUsageUnion
	tiersMode: PlanTiersMode
	tiers: [PlanTier!]!
	product: DeletedProductOrProductUnion
	object: PlanObject!
	nickname: String
	metadata: JSON!
	livemode: Boolean!
	intervalCount: Int!
	interval: PlanInterval!
	id: String!
	currency: String!
	created: Int!
	billingScheme: PlanBillingScheme!
	amountDecimal: String
	amount: Int
	aggregateUsage: PlanAggregateUsage
	active: Boolean!
}
enum PlanAggregateUsage {
	last_during_period
	last_ever
	max
	sum
}
enum PlanBillingScheme {
	per_unit
	tiered
}
enum PlanInterval {
	day
	month
	week
	year
}
enum PlanObject {
	plan
}
type PlanTier {
	upTo: Int
	unitAmountDecimal: String
	unitAmount: Int
	flatAmountDecimal: String
	flatAmount: Int
}
enum PlanTiersMode {
	graduated
	volume
}
enum PlanUsageType {
	licensed
	metered
}
type PlatformTaxFee {
	type: String!
	sourceTransaction: String!
	object: PlatformTaxFeeObject!
	id: String!
	account: String!
}
enum PlatformTaxFeeObject {
	platform_tax_fee
}
type PortalBusinessProfile {
	termsOfServiceUrl: String
	privacyPolicyUrl: String
	headline: String
}
type PortalCustomerUpdate {
	enabled: Boolean!
	allowedUpdates: [PortalCustomerUpdateAllowedUpdates!]!
}
enum PortalCustomerUpdateAllowedUpdates {
	address
	email
	phone
	shipping
	tax_id
}
type PortalFeatures {
	subscriptionUpdate: PortalSubscriptionUpdate!
	subscriptionPause: PortalSubscriptionPause!
	subscriptionCancel: PortalSubscriptionCancel!
	paymentMethodUpdate: PortalPaymentMethodUpdate!
	invoiceHistory: PortalInvoiceList!
	customerUpdate: PortalCustomerUpdate!
}
type PortalInvoiceList {
	enabled: Boolean!
}
type PortalLoginPage {
	url: String
	enabled: Boolean!
}
type PortalPaymentMethodUpdate {
	enabled: Boolean!
}
type PortalSubscriptionCancel {
	prorationBehavior: PortalSubscriptionCancelProrationBehavior!
	mode: PortalSubscriptionCancelMode!
	enabled: Boolean!
	cancellationReason: PortalSubscriptionCancellationReason!
}
enum PortalSubscriptionCancelMode {
	at_period_end
	immediately
}
enum PortalSubscriptionCancelProrationBehavior {
	always_invoice
	create_prorations
	none
}
type PortalSubscriptionCancellationReason {
	options: [PortalSubscriptionCancellationReasonOptions!]!
	enabled: Boolean!
}
enum PortalSubscriptionCancellationReasonOptions {
	customer_service
	low_quality
	missing_features
	other
	switched_service
	too_complex
	too_expensive
	unused
}
type PortalSubscriptionPause {
	enabled: Boolean!
}
type PortalSubscriptionUpdate {
	prorationBehavior: PortalSubscriptionUpdateProrationBehavior!
	products: [PortalSubscriptionUpdateProduct!]
	enabled: Boolean!
	defaultAllowedUpdates: [PortalSubscriptionUpdateDefaultAllowedUpdates!]!
}
enum PortalSubscriptionUpdateDefaultAllowedUpdates {
	price
	promotion_code
	quantity
}
type PortalSubscriptionUpdateProduct {
	product: String!
	prices: [String!]!
}
enum PortalSubscriptionUpdateProrationBehavior {
	always_invoice
	create_prorations
	none
}
type Price {
	unitAmountDecimal: String
	unitAmount: Int
	type: PriceType!
	transformQuantity: TransformQuantityUnion
	tiersMode: PriceTiersMode
	tiers: [PriceTier!]!
	taxBehavior: PriceTaxBehavior
	recurring: RecurringUnion
	product: DeletedProductOrProductUnion!
	object: PriceObject!
	nickname: String
	metadata: JSON!
	lookupKey: String
	livemode: Boolean!
	id: String!
	customUnitAmount: CustomUnitAmountUnion
	currencyOptions: JSON!
	currency: String!
	created: Int!
	billingScheme: PriceBillingScheme!
	active: Boolean!
}
enum PriceBillingScheme {
	per_unit
	tiered
}
enum PriceObject {
	price
}
enum PriceTaxBehavior {
	exclusive
	inclusive
	unspecified
}
type PriceTier {
	upTo: Int
	unitAmountDecimal: String
	unitAmount: Int
	flatAmountDecimal: String
	flatAmount: Int
}
enum PriceTiersMode {
	graduated
	volume
}
enum PriceType {
	one_time
	recurring
}
union PriceUnion = Price
type Product {
	url: String
	updated: Int!
	unitLabel: String
	taxCode: TaxCodeUnion
	statementDescriptor: String
	shippable: Boolean
	packageDimensions: PackageDimensionsUnion
	object: ProductObject!
	name: String!
	metadata: JSON!
	livemode: Boolean!
	images: [String!]!
	id: String!
	description: String
	defaultPrice: PriceUnion
	created: Int!
	active: Boolean!
}
enum ProductObject {
	product
}
type PromotionCode {
	timesRedeemed: Int!
	restrictions: PromotionCodesResourceRestrictions!
	object: PromotionCodeObject!
	metadata: JSON!
	maxRedemptions: Int
	livemode: Boolean!
	id: String!
	expiresAt: Int
	customer: DeletedCustomerOrCustomerUnion
	created: Int!
	coupon: Coupon!
	code: String!
	active: Boolean!
}
enum PromotionCodeObject {
	promotion_code
}
union PromotionCodeUnion = PromotionCode
type PromotionCodesResourceRestrictions {
	minimumAmountCurrency: String
	minimumAmount: Int
	firstTimeTransaction: Boolean!
	currencyOptions: JSON!
}
type Query {
	getAccount(expand: [String!]!): Account!
	getAccounts(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetAccountsUnionInput!): GetAccounts!
	getAccountsAccount(account: String!, expand: [String!]!): Account!
	getAccountsAccountBankAccountsId(id: String!, account: String!, expand: [String!]!): ExternalAccount!
	getAccountsAccountCapabilities(account: String!, expand: [String!]!): GetAccountsAccountCapabilities!
	getAccountsAccountCapabilitiesCapability(capability: String!, account: String!, expand: [String!]!): Capability!
	getAccountsAccountExternalAccounts(account: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetAccountsAccountExternalAccounts!
	getAccountsAccountExternalAccountsId(id: String!, account: String!, expand: [String!]!): ExternalAccount!
	getAccountsAccountPeople(account: String!, starting_after: String!, relationship: GetAccountsAccountPeopleInput!, limit: Int!, expand: [String!]!, ending_before: String!): GetAccountsAccountPeople!
	getAccountsAccountPeoplePerson(person: String!, account: String!, expand: [String!]!): Person!
	getAccountsAccountPersons(account: String!, starting_after: String!, relationship: GetAccountsAccountPersonsInput!, limit: Int!, expand: [String!]!, ending_before: String!): GetAccountsAccountPersons!
	getAccountsAccountPersonsPerson(person: String!, account: String!, expand: [String!]!): Person!
	getApplePayDomains(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, domain_name: String!): GetApplePayDomains!
	getApplePayDomainsDomain(domain: String!, expand: [String!]!): ApplePayDomain!
	getApplicationFees(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetApplicationFeesUnionInput!, charge: String!): GetApplicationFees!
	getApplicationFeesFeeRefundsId(id: String!, fee: String!, expand: [String!]!): FeeRefund!
	getApplicationFeesId(id: String!, expand: [String!]!): ApplicationFee!
	getApplicationFeesIdRefunds(id: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetApplicationFeesIdRefunds!
	getAppsSecrets(starting_after: String!, scope: GetAppsSecretsInput!, limit: Int!, expand: [String!]!, ending_before: String!): GetAppsSecrets!
	getAppsSecretsFind(scope: GetAppsSecretsFindInput!, name: String!, expand: [String!]!): AppsSecret!
	getBalance(expand: [String!]!): Balance!
	getBalanceHistory(type: String!, starting_after: String!, source: String!, payout: String!, limit: Int!, expand: [String!]!, ending_before: String!, currency: String!, created: GetBalanceHistoryUnionInput!): GetBalanceHistory!
	getBalanceHistoryId(id: String!, expand: [String!]!): BalanceTransaction!
	getBalanceTransactions(type: String!, starting_after: String!, source: String!, payout: String!, limit: Int!, expand: [String!]!, ending_before: String!, currency: String!, created: GetBalanceTransactionsUnionInput!): GetBalanceTransactions!
	getBalanceTransactionsId(id: String!, expand: [String!]!): BalanceTransaction!
	getBillingPortalConfigurations(starting_after: String!, limit: Int!, is_default: Boolean!, expand: [String!]!, ending_before: String!, active: Boolean!): GetBillingPortalConfigurations!
	getBillingPortalConfigurationsConfiguration(configuration: String!, expand: [String!]!): BillingPortalConfiguration!
	getCharges(transfer_group: String!, starting_after: String!, payment_intent: String!, limit: Int!, expand: [String!]!, ending_before: String!, customer: String!, created: GetChargesUnionInput!): GetCharges!
	getChargesSearch(query: String!, page: String!, limit: Int!, expand: [String!]!): GetChargesSearch!
	getChargesCharge(charge: String!, expand: [String!]!): Charge!
	getChargesChargeDispute(charge: String!, expand: [String!]!): Dispute!
	getChargesChargeRefunds(charge: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetChargesChargeRefunds!
	getChargesChargeRefundsRefund(refund: String!, charge: String!, expand: [String!]!): Refund!
	getCheckoutSessions(subscription: String!, starting_after: String!, payment_link: String!, payment_intent: String!, limit: Int!, expand: [String!]!, ending_before: String!, customer_details: GetCheckoutSessionsInput!, customer: String!): GetCheckoutSessions!
	getCheckoutSessionsSession(session: String!, expand: [String!]!): CheckoutSession!
	getCheckoutSessionsSessionLineItems(session: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetCheckoutSessionsSessionLineItems!
	getCountrySpecs(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetCountrySpecs!
	getCountrySpecsCountry(country: String!, expand: [String!]!): CountrySpec!
	getCoupons(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetCouponsUnionInput!): GetCoupons!
	getCouponsCoupon(coupon: String!, expand: [String!]!): Coupon!
	getCreditNotes(starting_after: String!, limit: Int!, invoice: String!, expand: [String!]!, ending_before: String!, customer: String!): GetCreditNotes!
	getCreditNotesPreview(shipping_cost: GetCreditNotesPreviewInput!, refund_amount: Int!, refund: String!, reason: GetCreditNotesPreview!, out_of_band_amount: Int!, metadata: JSON!, memo: String!, lines: [GetCreditNotesPreviewInput!]!, invoice: String!, expand: [String!]!, credit_amount: Int!, amount: Int!): CreditNote!
	getCreditNotesPreviewLines(starting_after: String!, shipping_cost: GetCreditNotesPreviewLinesInput!, refund_amount: Int!, refund: String!, reason: GetCreditNotesPreviewLines!, out_of_band_amount: Int!, metadata: JSON!, memo: String!, lines: [GetCreditNotesPreviewLinesInput!]!, limit: Int!, invoice: String!, expand: [String!]!, ending_before: String!, credit_amount: Int!, amount: Int!): GetCreditNotesPreviewLines!
	getCreditNotesCreditNoteLines(creditNote: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetCreditNotesCreditNoteLines!
	getCreditNotesId(id: String!, expand: [String!]!): CreditNote!
	getCustomers(test_clock: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, email: String!, created: GetCustomersUnionInput!): GetCustomers!
	getCustomersSearch(query: String!, page: String!, limit: Int!, expand: [String!]!): GetCustomersSearch!
	getCustomersCustomer(customer: String!, expand: [String!]!): DeletedCustomerOrCustomerUnion!
	getCustomersCustomerBalanceTransactions(customer: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetCustomersCustomerBalanceTransactions!
	getCustomersCustomerBalanceTransactionsTransaction(transaction: String!, customer: String!, expand: [String!]!): CustomerBalanceTransaction!
	getCustomersCustomerBankAccounts(customer: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetCustomersCustomerBankAccounts!
	getCustomersCustomerBankAccountsId(id: String!, customer: String!, expand: [String!]!): BankAccount!
	getCustomersCustomerCards(customer: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetCustomersCustomerCards!
	getCustomersCustomerCardsId(id: String!, customer: String!, expand: [String!]!): Card!
	getCustomersCustomerCashBalance(customer: String!, expand: [String!]!): CashBalance!
	getCustomersCustomerCashBalanceTransactions(customer: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetCustomersCustomerCashBalanceTransactions!
	getCustomersCustomerCashBalanceTransactionsTransaction(transaction: String!, customer: String!, expand: [String!]!): CustomerCashBalanceTransaction!
	getCustomersCustomerDiscount(customer: String!, expand: [String!]!): Discount!
	getCustomersCustomerPaymentMethods(customer: String!, type: GetCustomersCustomerPaymentMethods!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetCustomersCustomerPaymentMethods!
	getCustomersCustomerPaymentMethodsPaymentMethod(paymentMethod: String!, customer: String!, expand: [String!]!): PaymentMethod!
	getCustomersCustomerSources(customer: String!, starting_after: String!, object: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetCustomersCustomerSources!
	getCustomersCustomerSourcesId(id: String!, customer: String!, expand: [String!]!): PaymentSource!
	getCustomersCustomerSubscriptions(customer: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetCustomersCustomerSubscriptions!
	getCustomersCustomerSubscriptionsSubscriptionExposedId(subscriptionExposedId: String!, customer: String!, expand: [String!]!): Subscription!
	getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount(subscriptionExposedId: String!, customer: String!, expand: [String!]!): Discount!
	getCustomersCustomerTaxIds(customer: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetCustomersCustomerTaxIds!
	getCustomersCustomerTaxIdsId(id: String!, customer: String!, expand: [String!]!): TaxId!
	getDisputes(starting_after: String!, payment_intent: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetDisputesUnionInput!, charge: String!): GetDisputes!
	getDisputesDispute(dispute: String!, expand: [String!]!): Dispute!
	getEvents(types: [String!]!, type: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, delivery_success: Boolean!, created: GetEventsUnionInput!): GetEvents!
	getEventsId(id: String!, expand: [String!]!): Event!
	getExchangeRates(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetExchangeRates!
	getExchangeRatesRateId(rateId: String!, expand: [String!]!): ExchangeRate!
	getFileLinks(starting_after: String!, limit: Int!, file: String!, expired: Boolean!, expand: [String!]!, ending_before: String!, created: GetFileLinksUnionInput!): GetFileLinks!
	getFileLinksLink(link: String!, expand: [String!]!): FileLink!
	getFiles(starting_after: String!, purpose: GetFiles!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetFilesUnionInput!): GetFiles!
	getFilesFile(file: String!, expand: [String!]!): File!
	getFinancialConnectionsAccounts(starting_after: String!, session: String!, limit: Int!, expand: [String!]!, ending_before: String!, account_holder: GetFinancialConnectionsAccountsInput!): GetFinancialConnectionsAccounts!
	getFinancialConnectionsAccountsAccount(account: String!, expand: [String!]!): FinancialConnectionsAccount!
	getFinancialConnectionsAccountsAccountOwners(account: String!, starting_after: String!, ownership: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetFinancialConnectionsAccountsAccountOwners!
	getFinancialConnectionsSessionsSession(session: String!, expand: [String!]!): FinancialConnectionsSession!
	getIdentityVerificationReports(verification_session: String!, type: GetIdentityVerificationReports!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetIdentityVerificationReportsUnionInput!): GetIdentityVerificationReports!
	getIdentityVerificationReportsReport(report: String!, expand: [String!]!): IdentityVerificationReport!
	getIdentityVerificationSessions(status: GetIdentityVerificationSessions!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetIdentityVerificationSessionsUnionInput!): GetIdentityVerificationSessions!
	getIdentityVerificationSessionsSession(session: String!, expand: [String!]!): IdentityVerificationSession!
	getInvoiceitems(starting_after: String!, pending: Boolean!, limit: Int!, invoice: String!, expand: [String!]!, ending_before: String!, customer: String!, created: GetInvoiceitemsUnionInput!): GetInvoiceitems!
	getInvoiceitemsInvoiceitem(invoiceitem: String!, expand: [String!]!): Invoiceitem!
	getInvoices(subscription: String!, status: GetInvoices!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, due_date: GetInvoicesUnionInput!, customer: String!, created: GetInvoicesUnionInput!, collection_method: GetInvoices!): GetInvoices!
	getInvoicesSearch(query: String!, page: String!, limit: Int!, expand: [String!]!): GetInvoicesSearch!
	getInvoicesUpcoming(subscription_trial_from_plan: Boolean!, subscription_trial_end: UnionInput!, subscription_start_date: Int!, subscription_resume_at: GetInvoicesUpcoming!, subscription_proration_date: Int!, subscription_proration_behavior: GetInvoicesUpcoming!, subscription_items: [GetInvoicesUpcomingInput!]!, subscription_default_tax_rates: UnionInput!, subscription_cancel_now: Boolean!, subscription_cancel_at_period_end: Boolean!, subscription_cancel_at: UnionInput!, subscription_billing_cycle_anchor: UnionInput!, subscription: String!, schedule: String!, invoice_items: [GetInvoicesUpcomingInput!]!, expand: [String!]!, discounts: GetInvoicesUpcomingUnionInput!, customer_details: GetInvoicesUpcomingInput!, customer: String!, currency: String!, coupon: String!, automatic_tax: GetInvoicesUpcomingInput!): Invoice!
	getInvoicesUpcomingLines(subscription_trial_from_plan: Boolean!, subscription_trial_end: UnionInput!, subscription_start_date: Int!, subscription_resume_at: GetInvoicesUpcomingLines!, subscription_proration_date: Int!, subscription_proration_behavior: GetInvoicesUpcomingLines!, subscription_items: [GetInvoicesUpcomingLinesInput!]!, subscription_default_tax_rates: UnionInput!, subscription_cancel_now: Boolean!, subscription_cancel_at_period_end: Boolean!, subscription_cancel_at: UnionInput!, subscription_billing_cycle_anchor: UnionInput!, subscription: String!, starting_after: String!, schedule: String!, limit: Int!, invoice_items: [GetInvoicesUpcomingLinesInput!]!, expand: [String!]!, ending_before: String!, discounts: GetInvoicesUpcomingLinesUnionInput!, customer_details: GetInvoicesUpcomingLinesInput!, customer: String!, currency: String!, coupon: String!, automatic_tax: GetInvoicesUpcomingLinesInput!): GetInvoicesUpcomingLines!
	getInvoicesInvoice(invoice: String!, expand: [String!]!): Invoice!
	getInvoicesInvoiceLines(invoice: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetInvoicesInvoiceLines!
	getIssuingAuthorizations(status: GetIssuingAuthorizations!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetIssuingAuthorizationsUnionInput!, cardholder: String!, card: String!): GetIssuingAuthorizations!
	getIssuingAuthorizationsAuthorization(authorization: String!, expand: [String!]!): IssuingAuthorization!
	getIssuingCardholders(type: GetIssuingCardholders!, status: GetIssuingCardholders!, starting_after: String!, phone_number: String!, limit: Int!, expand: [String!]!, ending_before: String!, email: String!, created: GetIssuingCardholdersUnionInput!): GetIssuingCardholders!
	getIssuingCardholdersCardholder(cardholder: String!, expand: [String!]!): IssuingCardholder!
	getIssuingCards(type: GetIssuingCards!, status: GetIssuingCards!, starting_after: String!, limit: Int!, last4: String!, expand: [String!]!, exp_year: Int!, exp_month: Int!, ending_before: String!, created: GetIssuingCardsUnionInput!, cardholder: String!): GetIssuingCards!
	getIssuingCardsCard(card: String!, expand: [String!]!): IssuingCard!
	getIssuingDisputes(transaction: String!, status: GetIssuingDisputes!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetIssuingDisputesUnionInput!): GetIssuingDisputes!
	getIssuingDisputesDispute(dispute: String!, expand: [String!]!): IssuingDispute!
	getIssuingSettlements(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetIssuingSettlementsUnionInput!): GetIssuingSettlements!
	getIssuingSettlementsSettlement(settlement: String!, expand: [String!]!): IssuingSettlement!
	getIssuingTransactions(type: GetIssuingTransactions!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetIssuingTransactionsUnionInput!, cardholder: String!, card: String!): GetIssuingTransactions!
	getIssuingTransactionsTransaction(transaction: String!, expand: [String!]!): IssuingTransaction!
	getLinkAccountSessionsSession(session: String!, expand: [String!]!): FinancialConnectionsSession!
	getLinkedAccounts(starting_after: String!, session: String!, limit: Int!, expand: [String!]!, ending_before: String!, account_holder: GetLinkedAccountsInput!): GetLinkedAccounts!
	getLinkedAccountsAccount(account: String!, expand: [String!]!): FinancialConnectionsAccount!
	getLinkedAccountsAccountOwners(account: String!, starting_after: String!, ownership: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetLinkedAccountsAccountOwners!
	getMandatesMandate(mandate: String!, expand: [String!]!): Mandate!
	getPaymentIntents(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, customer: String!, created: GetPaymentIntentsUnionInput!): GetPaymentIntents!
	getPaymentIntentsSearch(query: String!, page: String!, limit: Int!, expand: [String!]!): GetPaymentIntentsSearch!
	getPaymentIntentsIntent(intent: String!, expand: [String!]!, client_secret: String!): PaymentIntent!
	getPaymentLinks(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, active: Boolean!): GetPaymentLinks!
	getPaymentLinksPaymentLink(paymentLink: String!, expand: [String!]!): PaymentLink!
	getPaymentLinksPaymentLinkLineItems(paymentLink: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetPaymentLinksPaymentLinkLineItems!
	getPaymentMethods(type: GetPaymentMethods!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, customer: String!): GetPaymentMethods!
	getPaymentMethodsPaymentMethod(paymentMethod: String!, expand: [String!]!): PaymentMethod!
	getPayouts(status: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, destination: String!, created: GetPayoutsUnionInput!, arrival_date: GetPayoutsUnionInput!): GetPayouts!
	getPayoutsPayout(payout: String!, expand: [String!]!): Payout!
	getPlans(starting_after: String!, product: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetPlansUnionInput!, active: Boolean!): GetPlans!
	getPlansPlan(plan: String!, expand: [String!]!): Plan!
	getPrices(type: GetPrices!, starting_after: String!, recurring: GetPricesInput!, product: String!, lookup_keys: [String!]!, limit: Int!, expand: [String!]!, ending_before: String!, currency: String!, created: GetPricesUnionInput!, active: Boolean!): GetPrices!
	getPricesSearch(query: String!, page: String!, limit: Int!, expand: [String!]!): GetPricesSearch!
	getPricesPrice(price: String!, expand: [String!]!): Price!
	getProducts(url: String!, starting_after: String!, shippable: Boolean!, limit: Int!, ids: [String!]!, expand: [String!]!, ending_before: String!, created: GetProductsUnionInput!, active: Boolean!): GetProducts!
	getProductsSearch(query: String!, page: String!, limit: Int!, expand: [String!]!): GetProductsSearch!
	getProductsId(id: String!, expand: [String!]!): Product!
	getPromotionCodes(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, customer: String!, created: GetPromotionCodesUnionInput!, coupon: String!, code: String!, active: Boolean!): GetPromotionCodes!
	getPromotionCodesPromotionCode(promotionCode: String!, expand: [String!]!): PromotionCode!
	getQuotes(test_clock: String!, status: GetQuotes!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, customer: String!): GetQuotes!
	getQuotesQuote(quote: String!, expand: [String!]!): Quote!
	getQuotesQuoteComputedUpfrontLineItems(quote: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetQuotesQuoteComputedUpfrontLineItems!
	getQuotesQuoteLineItems(quote: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetQuotesQuoteLineItems!
	getQuotesQuotePdf(quote: String!, expand: [String!]!): String!
	getRadarEarlyFraudWarnings(starting_after: String!, payment_intent: String!, limit: Int!, expand: [String!]!, ending_before: String!, charge: String!): GetRadarEarlyFraudWarnings!
	getRadarEarlyFraudWarningsEarlyFraudWarning(earlyFraudWarning: String!, expand: [String!]!): RadarEarlyFraudWarning!
	getRadarValueListItems(value_list: String!, value: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetRadarValueListItemsUnionInput!): GetRadarValueListItems!
	getRadarValueListItemsItem(item: String!, expand: [String!]!): RadarValueListItem!
	getRadarValueLists(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetRadarValueListsUnionInput!, contains: String!, alias: String!): GetRadarValueLists!
	getRadarValueListsValueList(valueList: String!, expand: [String!]!): RadarValueList!
	getRefunds(starting_after: String!, payment_intent: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetRefundsUnionInput!, charge: String!): GetRefunds!
	getRefundsRefund(refund: String!, expand: [String!]!): Refund!
	getReportingReportRuns(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetReportingReportRunsUnionInput!): GetReportingReportRuns!
	getReportingReportRunsReportRun(reportRun: String!, expand: [String!]!): ReportingReportRun!
	getReportingReportTypes(expand: [String!]!): GetReportingReportTypes!
	getReportingReportTypesReportType(reportType: String!, expand: [String!]!): ReportingReportType!
	getReviews(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetReviewsUnionInput!): GetReviews!
	getReviewsReview(review: String!, expand: [String!]!): Review!
	getSetupAttempts(starting_after: String!, setup_intent: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetSetupAttemptsUnionInput!): GetSetupAttempts!
	getSetupIntents(starting_after: String!, payment_method: String!, limit: Int!, expand: [String!]!, ending_before: String!, customer: String!, created: GetSetupIntentsUnionInput!, attach_to_self: Boolean!): GetSetupIntents!
	getSetupIntentsIntent(intent: String!, expand: [String!]!, client_secret: String!): SetupIntent!
	getShippingRates(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, currency: String!, created: GetShippingRatesUnionInput!, active: Boolean!): GetShippingRates!
	getShippingRatesShippingRateToken(shippingRateToken: String!, expand: [String!]!): ShippingRate!
	getSigmaScheduledQueryRuns(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetSigmaScheduledQueryRuns!
	getSigmaScheduledQueryRunsScheduledQueryRun(scheduledQueryRun: String!, expand: [String!]!): ScheduledQueryRun!
	getSourcesSource(source: String!, expand: [String!]!, client_secret: String!): Source!
	getSourcesSourceMandateNotificationsMandateNotification(source: String!, mandateNotification: String!, expand: [String!]!): SourceMandateNotification!
	getSourcesSourceSourceTransactions(source: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetSourcesSourceSourceTransactions!
	getSourcesSourceSourceTransactionsSourceTransaction(sourceTransaction: String!, source: String!, expand: [String!]!): SourceTransaction!
	getSubscriptionItems(subscription: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetSubscriptionItems!
	getSubscriptionItemsItem(item: String!, expand: [String!]!): SubscriptionItem!
	getSubscriptionItemsSubscriptionItemUsageRecordSummaries(subscriptionItem: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetSubscriptionItemsSubscriptionItemUsageRecordSummaries!
	getSubscriptionSchedules(starting_after: String!, scheduled: Boolean!, released_at: GetSubscriptionSchedulesUnionInput!, limit: Int!, expand: [String!]!, ending_before: String!, customer: String!, created: GetSubscriptionSchedulesUnionInput!, completed_at: GetSubscriptionSchedulesUnionInput!, canceled_at: GetSubscriptionSchedulesUnionInput!): GetSubscriptionSchedules!
	getSubscriptionSchedulesSchedule(schedule: String!, expand: [String!]!): SubscriptionSchedule!
	getSubscriptions(test_clock: String!, status: GetSubscriptions!, starting_after: String!, price: String!, limit: Int!, expand: [String!]!, ending_before: String!, customer: String!, current_period_start: GetSubscriptionsUnionInput!, current_period_end: GetSubscriptionsUnionInput!, created: GetSubscriptionsUnionInput!, collection_method: GetSubscriptions!): GetSubscriptions!
	getSubscriptionsSearch(query: String!, page: String!, limit: Int!, expand: [String!]!): GetSubscriptionsSearch!
	getSubscriptionsSubscriptionExposedId(subscriptionExposedId: String!, expand: [String!]!): Subscription!
	getTaxCodes(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetTaxCodes!
	getTaxCodesId(id: String!, expand: [String!]!): TaxCode!
	getTaxRates(starting_after: String!, limit: Int!, inclusive: Boolean!, expand: [String!]!, ending_before: String!, created: GetTaxRatesUnionInput!, active: Boolean!): GetTaxRates!
	getTaxRatesTaxRate(taxRate: String!, expand: [String!]!): TaxRate!
	getTerminalConfigurations(starting_after: String!, limit: Int!, is_account_default: Boolean!, expand: [String!]!, ending_before: String!): GetTerminalConfigurations!
	getTerminalConfigurationsConfiguration(configuration: String!, expand: [String!]!): DeletedTerminalConfigurationOrTerminalConfigurationUnion!
	getTerminalLocations(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetTerminalLocations!
	getTerminalLocationsLocation(location: String!, expand: [String!]!): DeletedTerminalLocationOrTerminalLocationUnion!
	getTerminalReaders(status: GetTerminalReaders!, starting_after: String!, location: String!, limit: Int!, expand: [String!]!, ending_before: String!, device_type: GetTerminalReaders!): GetTerminalReaders!
	getTerminalReadersReader(reader: String!, expand: [String!]!): DeletedTerminalReaderOrTerminalReaderUnion!
	getTestHelpersTestClocks(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetTestHelpersTestClocks!
	getTestHelpersTestClocksTestClock(testClock: String!, expand: [String!]!): TestHelpersTestClock!
	getTokensToken(token: String!, expand: [String!]!): Token!
	getTopups(status: GetTopups!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetTopupsUnionInput!, amount: GetTopupsUnionInput!): GetTopups!
	getTopupsTopup(topup: String!, expand: [String!]!): Topup!
	getTransfers(transfer_group: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, destination: String!, created: GetTransfersUnionInput!): GetTransfers!
	getTransfersIdReversals(id: String!, starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetTransfersIdReversals!
	getTransfersTransfer(transfer: String!, expand: [String!]!): Transfer!
	getTransfersTransferReversalsId(transfer: String!, id: String!, expand: [String!]!): TransferReversal!
	getTreasuryCreditReversals(status: GetTreasuryCreditReversals!, starting_after: String!, received_credit: String!, limit: Int!, financial_account: String!, expand: [String!]!, ending_before: String!): GetTreasuryCreditReversals!
	getTreasuryCreditReversalsCreditReversal(creditReversal: String!, expand: [String!]!): TreasuryCreditReversal!
	getTreasuryDebitReversals(status: GetTreasuryDebitReversals!, starting_after: String!, resolution: GetTreasuryDebitReversals!, received_debit: String!, limit: Int!, financial_account: String!, expand: [String!]!, ending_before: String!): GetTreasuryDebitReversals!
	getTreasuryDebitReversalsDebitReversal(debitReversal: String!, expand: [String!]!): TreasuryDebitReversal!
	getTreasuryFinancialAccounts(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!, created: GetTreasuryFinancialAccountsUnionInput!): GetTreasuryFinancialAccounts!
	getTreasuryFinancialAccountsFinancialAccount(financialAccount: String!, expand: [String!]!): TreasuryFinancialAccount!
	getTreasuryFinancialAccountsFinancialAccountFeatures(financialAccount: String!, expand: [String!]!): TreasuryFinancialAccountFeatures!
	getTreasuryInboundTransfers(status: GetTreasuryInboundTransfers!, starting_after: String!, limit: Int!, financial_account: String!, expand: [String!]!, ending_before: String!): GetTreasuryInboundTransfers!
	getTreasuryInboundTransfersId(id: String!, expand: [String!]!): TreasuryInboundTransfer!
	getTreasuryOutboundPayments(status: GetTreasuryOutboundPayments!, starting_after: String!, limit: Int!, financial_account: String!, expand: [String!]!, ending_before: String!, customer: String!): GetTreasuryOutboundPayments!
	getTreasuryOutboundPaymentsId(id: String!, expand: [String!]!): TreasuryOutboundPayment!
	getTreasuryOutboundTransfers(status: GetTreasuryOutboundTransfers!, starting_after: String!, limit: Int!, financial_account: String!, expand: [String!]!, ending_before: String!): GetTreasuryOutboundTransfers!
	getTreasuryOutboundTransfersOutboundTransfer(outboundTransfer: String!, expand: [String!]!): TreasuryOutboundTransfer!
	getTreasuryReceivedCredits(status: GetTreasuryReceivedCredits!, starting_after: String!, linked_flows: GetTreasuryReceivedCreditsInput!, limit: Int!, financial_account: String!, expand: [String!]!, ending_before: String!): GetTreasuryReceivedCredits!
	getTreasuryReceivedCreditsId(id: String!, expand: [String!]!): TreasuryReceivedCredit!
	getTreasuryReceivedDebits(status: GetTreasuryReceivedDebits!, starting_after: String!, limit: Int!, financial_account: String!, expand: [String!]!, ending_before: String!): GetTreasuryReceivedDebits!
	getTreasuryReceivedDebitsId(id: String!, expand: [String!]!): TreasuryReceivedDebit!
	getTreasuryTransactionEntries(transaction: String!, starting_after: String!, order_by: GetTreasuryTransactionEntries!, limit: Int!, financial_account: String!, expand: [String!]!, ending_before: String!, effective_at: GetTreasuryTransactionEntriesUnionInput!, created: GetTreasuryTransactionEntriesUnionInput!): GetTreasuryTransactionEntries!
	getTreasuryTransactionEntriesId(id: String!, expand: [String!]!): TreasuryTransactionEntry!
	getTreasuryTransactions(status_transitions: GetTreasuryTransactionsInput!, status: GetTreasuryTransactions!, starting_after: String!, order_by: GetTreasuryTransactions!, limit: Int!, financial_account: String!, expand: [String!]!, ending_before: String!, created: GetTreasuryTransactionsUnionInput!): GetTreasuryTransactions!
	getTreasuryTransactionsId(id: String!, expand: [String!]!): TreasuryTransaction!
	getWebhookEndpoints(starting_after: String!, limit: Int!, expand: [String!]!, ending_before: String!): GetWebhookEndpoints!
	getWebhookEndpointsWebhookEndpoint(webhookEndpoint: String!, expand: [String!]!): WebhookEndpoint!
}
type Quote {
	transferData: QuotesResourceTransferDataUnion
	totalDetails: QuotesResourceTotalDetails!
	testClock: TestHelpersTestClockUnion
	subscriptionSchedule: SubscriptionScheduleUnion
	subscriptionData: QuotesResourceSubscriptionDataSubscriptionData!
	subscription: SubscriptionUnion
	statusTransitions: QuotesResourceStatusTransitions!
	status: QuoteStatus!
	onBehalfOf: AccountUnion
	object: QuoteObject!
	number: String
	metadata: JSON!
	livemode: Boolean!
	lineItems: QuoteLineItems!
	invoiceSettings: InvoiceSettingQuoteSettingUnion
	invoice: DeletedInvoiceOrInvoiceUnion
	id: String!
	header: String
	fromQuote: QuotesResourceFromQuoteUnion
	footer: String
	expiresAt: Int!
	discounts: [DiscountUnion!]!
	description: String
	defaultTaxRates: [TaxRateUnion!]!
	customer: DeletedCustomerOrCustomerUnion
	currency: String
	created: Int!
	computed: QuotesResourceComputed!
	collectionMethod: QuoteCollectionMethod!
	automaticTax: QuotesResourceAutomaticTax!
	applicationFeePercent: Float
	applicationFeeAmount: Int
	application: DeletedApplicationOrApplicationUnion
	amountTotal: Int!
	amountSubtotal: Int!
}
enum QuoteCollectionMethod {
	charge_automatically
	send_invoice
}
type QuoteLineItems {
	url: String!
	object: QuoteObjectLineItems!
	hasMore: Boolean!
	data: [Item!]!
}
enum QuoteObject {
	quote
}
enum QuoteObjectLineItems {
	list
}
enum QuoteStatus {
	accepted
	canceled
	draft
	open
}
union QuoteUnion = Quote
type QuotesResourceAutomaticTax {
	status: QuotesResourceAutomaticTaxStatus
	enabled: Boolean!
}
enum QuotesResourceAutomaticTaxStatus {
	complete
	failed
	requires_location_inputs
}
type QuotesResourceComputed {
	upfront: QuotesResourceUpfront!
	recurring: QuotesResourceRecurringUnion
}
type QuotesResourceFromQuote {
	quote: QuoteUnion!
	isRevision: Boolean!
}
union QuotesResourceFromQuoteUnion = QuotesResourceFromQuote
type QuotesResourceRecurring {
	totalDetails: QuotesResourceTotalDetails!
	intervalCount: Int!
	interval: QuotesResourceRecurringInterval!
	amountTotal: Int!
	amountSubtotal: Int!
}
enum QuotesResourceRecurringInterval {
	day
	month
	week
	year
}
union QuotesResourceRecurringUnion = QuotesResourceRecurring
type QuotesResourceStatusTransitions {
	finalizedAt: Int
	canceledAt: Int
	acceptedAt: Int
}
type QuotesResourceSubscriptionDataSubscriptionData {
	trialPeriodDays: Int
	effectiveDate: Int
	description: String
}
type QuotesResourceTotalDetails {
	breakdown: QuotesResourceTotalDetailsResourceBreakdown!
	amountTax: Int!
	amountShipping: Int
	amountDiscount: Int!
}
type QuotesResourceTotalDetailsResourceBreakdown {
	taxes: [LineItemsTaxAmount!]!
	discounts: [LineItemsDiscountAmount!]!
}
type QuotesResourceTransferData {
	destination: AccountUnion!
	amountPercent: Float
	amount: Int
}
union QuotesResourceTransferDataUnion = QuotesResourceTransferData
type QuotesResourceUpfront {
	totalDetails: QuotesResourceTotalDetails!
	lineItems: QuotesResourceUpfrontLineItems!
	amountTotal: Int!
	amountSubtotal: Int!
}
type QuotesResourceUpfrontLineItems {
	url: String!
	object: QuotesResourceUpfrontObjectLineItems!
	hasMore: Boolean!
	data: [Item!]!
}
enum QuotesResourceUpfrontObjectLineItems {
	list
}
type RadarEarlyFraudWarning {
	paymentIntent: PaymentIntentUnion!
	object: RadarEarlyFraudWarningObject!
	livemode: Boolean!
	id: String!
	fraudType: String!
	created: Int!
	charge: ChargeUnion!
	actionable: Boolean!
}
enum RadarEarlyFraudWarningObject {
	radar.early_fraud_warning
}
type RadarRadarOptions {
	session: String!
}
type RadarReviewResourceLocation {
	region: String
	longitude: Float
	latitude: Float
	country: String
	city: String
}
union RadarReviewResourceLocationUnion = RadarReviewResourceLocation
type RadarReviewResourceSession {
	version: String
	platform: String
	device: String
	browser: String
}
union RadarReviewResourceSessionUnion = RadarReviewResourceSession
type RadarValueList {
	object: RadarValueListObject!
	name: String!
	metadata: JSON!
	livemode: Boolean!
	listItems: RadarValueListListItems!
	itemType: RadarValueListItemType!
	id: String!
	createdBy: String!
	created: Int!
	alias: String!
}
type RadarValueListItem {
	valueList: String!
	value: String!
	object: RadarValueListItemObject!
	livemode: Boolean!
	id: String!
	createdBy: String!
	created: Int!
}
enum RadarValueListItemObject {
	radar.value_list_item
}
enum RadarValueListItemType {
	card_bin
	card_fingerprint
	case_sensitive_string
	country
	customer_id
	email
	ip_address
	string
}
type RadarValueListListItems {
	url: String!
	object: RadarValueListObjectListItems!
	hasMore: Boolean!
	data: [RadarValueListItem!]!
}
enum RadarValueListObject {
	radar.value_list
}
enum RadarValueListObjectListItems {
	list
}
type ReceivedPaymentMethodDetailsFinancialAccount {
	network: ReceivedPaymentMethodDetailsFinancialAccountNetwork!
	id: String!
}
enum ReceivedPaymentMethodDetailsFinancialAccountNetwork {
	stripe
}
type Recurring {
	usageType: RecurringUsageType!
	intervalCount: Int!
	interval: RecurringInterval!
	aggregateUsage: RecurringAggregateUsage
}
enum RecurringAggregateUsage {
	last_during_period
	last_ever
	max
	sum
}
enum RecurringInterval {
	day
	month
	week
	year
}
union RecurringUnion = Recurring
enum RecurringUsageType {
	licensed
	metered
}
type Refund {
	transferReversal: TransferReversalUnion
	status: String
	sourceTransferReversal: TransferReversalUnion
	receiptNumber: String
	reason: RefundReason
	paymentIntent: PaymentIntentUnion
	object: RefundObject!
	nextAction: RefundNextAction!
	metadata: JSON!
	instructionsEmail: String!
	id: String!
	failureReason: String!
	failureBalanceTransaction: BalanceTransactionUnion!
	description: String!
	currency: String!
	created: Int!
	charge: ChargeUnion
	balanceTransaction: BalanceTransactionUnion
	amount: Int!
}
type RefundNextAction {
	type: String!
	displayDetails: RefundNextActionDisplayDetailsUnion
}
type RefundNextActionDisplayDetails {
	expiresAt: Int!
	emailSent: EmailSent!
}
union RefundNextActionDisplayDetailsUnion = RefundNextActionDisplayDetails
enum RefundObject {
	refund
}
enum RefundReason {
	duplicate
	expired_uncaptured_charge
	fraudulent
	requested_by_customer
}
union RefundUnion = Refund
type ReportingReportRun {
	succeededAt: Int
	status: String!
	result: FileUnion
	reportType: String!
	parameters: FinancialReportingFinanceReportRunRunParameters!
	object: ReportingReportRunObject!
	livemode: Boolean!
	id: String!
	error: String
	created: Int!
}
enum ReportingReportRunObject {
	reporting.report_run
}
type ReportingReportType {
	version: Int!
	updated: Int!
	object: ReportingReportTypeObject!
	name: String!
	livemode: Boolean!
	id: String!
	defaultColumns: [String!]
	dataAvailableStart: Int!
	dataAvailableEnd: Int!
}
enum ReportingReportTypeObject {
	reporting.report_type
}
type ReserveTransaction {
	object: ReserveTransactionObject!
	id: String!
	description: String
	currency: String!
	amount: Int!
}
enum ReserveTransactionObject {
	reserve_transaction
}
type Review {
	session: RadarReviewResourceSessionUnion
	reason: String!
	paymentIntent: PaymentIntentUnion!
	openedReason: ReviewOpenedReason!
	open: Boolean!
	object: ReviewObject!
	livemode: Boolean!
	ipAddressLocation: RadarReviewResourceLocationUnion
	ipAddress: String
	id: String!
	created: Int!
	closedReason: ReviewClosedReason
	charge: ChargeUnion
	billingZip: String
}
enum ReviewClosedReason {
	approved
	disputed
	redacted
	refunded
	refunded_as_fraud
}
enum ReviewObject {
	review
}
enum ReviewOpenedReason {
	manual
	rule
}
union ReviewUnion = Review
type Rule {
	predicate: String!
	id: String!
	action: String!
}
union RuleUnion = Rule
type ScheduledQueryRun {
	title: String!
	status: String!
	sql: String!
	resultAvailableUntil: Int!
	object: ScheduledQueryRunObject!
	livemode: Boolean!
	id: String!
	file: FileUnion
	error: SigmaScheduledQueryRunError!
	dataLoadTime: Int!
	created: Int!
}
enum ScheduledQueryRunObject {
	scheduled_query_run
}
type SchedulesPhaseAutomaticTax {
	enabled: Boolean!
}
type SecretServiceResourceScope {
	user: String!
	type: SecretServiceResourceScopeType!
}
enum SecretServiceResourceScopeType {
	account
	user
}
type SepaDebitGeneratedFrom {
	setupAttempt: SetupAttemptUnion
	charge: ChargeUnion
}
union SepaDebitGeneratedFromUnion = SepaDebitGeneratedFrom
type SetupAttempt {
	usage: String!
	status: String!
	setupIntent: SetupIntentUnion!
	setupError: ApiErrorsUnion
	paymentMethodDetails: SetupAttemptPaymentMethodDetails!
	paymentMethod: PaymentMethodUnion!
	onBehalfOf: AccountUnion
	object: SetupAttemptObject!
	livemode: Boolean!
	id: String!
	flowDirections: [SetupAttemptFlowDirections!]
	customer: DeletedCustomerOrCustomerUnion
	created: Int!
	attachToSelf: Boolean!
	application: ApplicationUnion
}
enum SetupAttemptFlowDirections {
	inbound
	outbound
}
enum SetupAttemptObject {
	setup_attempt
}
type SetupAttemptPaymentMethodDetails {
	usBankAccount: SetupAttemptPaymentMethodDetailsUsBankAccount!
	type: String!
	sofort: SetupAttemptPaymentMethodDetailsSofort!
	sepaDebit: SetupAttemptPaymentMethodDetailsSepaDebit!
	link: SetupAttemptPaymentMethodDetailsLink!
	klarna: SetupAttemptPaymentMethodDetailsKlarna!
	ideal: SetupAttemptPaymentMethodDetailsIdeal!
	cardPresent: SetupAttemptPaymentMethodDetailsCardPresent!
	card: SetupAttemptPaymentMethodDetailsCard!
	boleto: SetupAttemptPaymentMethodDetailsBoleto!
	blik: SetupAttemptPaymentMethodDetailsBlik!
	bancontact: SetupAttemptPaymentMethodDetailsBancontact!
	bacsDebit: SetupAttemptPaymentMethodDetailsBacsDebit!
	auBecsDebit: SetupAttemptPaymentMethodDetailsAuBecsDebit!
	acssDebit: SetupAttemptPaymentMethodDetailsAcssDebit!
}
type SetupAttemptPaymentMethodDetailsBancontact {
	verifiedName: String
	preferredLanguage: SetupAttemptPaymentMethodDetailsBancontactPreferredLanguage
	ibanLast4: String
	generatedSepaDebitMandate: MandateUnion
	generatedSepaDebit: PaymentMethodUnion
	bic: String
	bankName: String
	bankCode: String
}
enum SetupAttemptPaymentMethodDetailsBancontactPreferredLanguage {
	de
	en
	fr
	nl
}
type SetupAttemptPaymentMethodDetailsCard {
	threeDSecure: ThreeDSecureDetailsUnion
}
type SetupAttemptPaymentMethodDetailsCardPresent {
	generatedCard: PaymentMethodUnion
}
type SetupAttemptPaymentMethodDetailsIdeal {
	verifiedName: String
	ibanLast4: String
	generatedSepaDebitMandate: MandateUnion
	generatedSepaDebit: PaymentMethodUnion
	bic: SetupAttemptPaymentMethodDetailsIdealBic
	bank: SetupAttemptPaymentMethodDetailsIdealBank
}
enum SetupAttemptPaymentMethodDetailsIdealBank {
	abn_amro
	asn_bank
	bunq
	handelsbanken
	ing
	knab
	moneyou
	rabobank
	regiobank
	revolut
	sns_bank
	triodos_bank
	van_lanschot
}
enum SetupAttemptPaymentMethodDetailsIdealBic {
	ABNANL2A
	ASNBNL21
	BUNQNL2A
	FVLBNL22
	HANDNL2A
	INGBNL2A
	KNABNL2H
	MOYONL21
	RABONL2U
	RBRBNL21
	REVOLT21
	SNSBNL2A
	TRIONL2U
}
type SetupAttemptPaymentMethodDetailsSofort {
	verifiedName: String
	preferredLanguage: SetupAttemptPaymentMethodDetailsSofortPreferredLanguage
	ibanLast4: String
	generatedSepaDebitMandate: MandateUnion
	generatedSepaDebit: PaymentMethodUnion
	bic: String
	bankName: String
	bankCode: String
}
enum SetupAttemptPaymentMethodDetailsSofortPreferredLanguage {
	de
	en
	fr
	nl
}
union SetupAttemptUnion = SetupAttempt
type SetupIntent {
	usage: String!
	status: SetupIntentStatus!
	singleUseMandate: MandateUnion
	paymentMethodTypes: [String!]!
	paymentMethodOptions: SetupIntentPaymentMethodOptionsUnion
	paymentMethod: PaymentMethodUnion
	onBehalfOf: AccountUnion
	object: SetupIntentObject!
	nextAction: SetupIntentNextActionUnion
	metadata: JSON!
	mandate: MandateUnion
	livemode: Boolean!
	latestAttempt: SetupAttemptUnion
	lastSetupError: ApiErrorsUnion
	id: String!
	flowDirections: [SetupIntentFlowDirections!]
	description: String
	customer: DeletedCustomerOrCustomerUnion
	created: Int!
	clientSecret: String
	cancellationReason: SetupIntentCancellationReason
	attachToSelf: Boolean!
	application: ApplicationUnion
}
enum SetupIntentCancellationReason {
	abandoned
	duplicate
	requested_by_customer
}
enum SetupIntentFlowDirections {
	inbound
	outbound
}
type SetupIntentNextAction {
	verifyWithMicrodeposits: SetupIntentNextActionVerifyWithMicrodeposits!
	useStripeSdk: JSON!
	type: String!
	redirectToUrl: SetupIntentNextActionRedirectToUrl!
}
type SetupIntentNextActionRedirectToUrl {
	url: String
	returnUrl: String
}
union SetupIntentNextActionUnion = SetupIntentNextAction
type SetupIntentNextActionVerifyWithMicrodeposits {
	microdepositType: SetupIntentNextActionVerifyWithMicrodepositsMicrodepositType
	hostedVerificationUrl: String!
	arrivalDate: Int!
}
enum SetupIntentNextActionVerifyWithMicrodepositsMicrodepositType {
	amounts
	descriptor_code
}
enum SetupIntentObject {
	setup_intent
}
type SetupIntentPaymentMethodOptions {
	usBankAccount: SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsUsBankAccountUnion!
	sepaDebit: SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsSepaDebitUnion!
	link: SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsLinkUnion!
	card: SetupIntentPaymentMethodOptionsCard!
	blik: SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsBlikUnion!
	acssDebit: SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsAcssDebitUnion!
}
type SetupIntentPaymentMethodOptionsAcssDebit {
	verificationMethod: SetupIntentPaymentMethodOptionsAcssDebitVerificationMethod!
	mandateOptions: SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit!
	currency: SetupIntentPaymentMethodOptionsAcssDebitCurrency
}
enum SetupIntentPaymentMethodOptionsAcssDebitCurrency {
	cad
	usd
}
enum SetupIntentPaymentMethodOptionsAcssDebitVerificationMethod {
	automatic
	instant
	microdeposits
}
type SetupIntentPaymentMethodOptionsBlik {
	mandateOptions: SetupIntentPaymentMethodOptionsMandateOptionsBlik!
}
type SetupIntentPaymentMethodOptionsCard {
	requestThreeDSecure: SetupIntentPaymentMethodOptionsCardRequestThreeDSecure
	network: SetupIntentPaymentMethodOptionsCardNetwork
	mandateOptions: SetupIntentPaymentMethodOptionsCardMandateOptionsUnion
}
type SetupIntentPaymentMethodOptionsCardMandateOptions {
	supportedTypes: [SetupIntentPaymentMethodOptionsCardMandateOptionsSupportedTypes!]
	startDate: Int!
	reference: String!
	intervalCount: Int
	interval: SetupIntentPaymentMethodOptionsCardMandateOptionsInterval!
	endDate: Int
	description: String
	currency: String!
	amountType: SetupIntentPaymentMethodOptionsCardMandateOptionsAmountType!
	amount: Int!
}
enum SetupIntentPaymentMethodOptionsCardMandateOptionsAmountType {
	fixed
	maximum
}
enum SetupIntentPaymentMethodOptionsCardMandateOptionsInterval {
	day
	month
	sporadic
	week
	year
}
enum SetupIntentPaymentMethodOptionsCardMandateOptionsSupportedTypes {
	india
}
union SetupIntentPaymentMethodOptionsCardMandateOptionsUnion = SetupIntentPaymentMethodOptionsCardMandateOptions
enum SetupIntentPaymentMethodOptionsCardNetwork {
	amex
	cartes_bancaires
	diners
	discover
	interac
	jcb
	mastercard
	unionpay
	unknown
	visa
}
enum SetupIntentPaymentMethodOptionsCardRequestThreeDSecure {
	any
	automatic
	challenge_only
}
type SetupIntentPaymentMethodOptionsLink {
	persistentToken: String
}
type SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit {
	transactionType: SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionType
	paymentSchedule: SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentSchedule
	intervalDescription: String
	defaultFor: [SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitDefaultFor!]!
	customMandateUrl: String!
}
enum SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitDefaultFor {
	invoice
	subscription
}
enum SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentSchedule {
	combined
	interval
	sporadic
}
enum SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionType {
	business
	personal
}
type SetupIntentPaymentMethodOptionsMandateOptionsBlik {
	type: SetupIntentPaymentMethodOptionsMandateOptionsBlikType
	offSession: MandateOptionsOffSessionDetailsBlik!
	expiresAfter: Int
}
enum SetupIntentPaymentMethodOptionsMandateOptionsBlikType {
	off_session
	on_session
}
type SetupIntentPaymentMethodOptionsSepaDebit {
	mandateOptions: SetupIntentPaymentMethodOptionsMandateOptionsSepaDebit!
}
union SetupIntentPaymentMethodOptionsUnion = SetupIntentPaymentMethodOptions
type SetupIntentPaymentMethodOptionsUsBankAccount {
	verificationMethod: SetupIntentPaymentMethodOptionsUsBankAccountVerificationMethod!
	financialConnections: LinkedAccountOptionsUsBankAccount!
}
enum SetupIntentPaymentMethodOptionsUsBankAccountVerificationMethod {
	automatic
	instant
	microdeposits
}
enum SetupIntentStatus {
	canceled
	processing
	requires_action
	requires_confirmation
	requires_payment_method
	succeeded
}
type SetupIntentTypeSpecificPaymentMethodOptionsClient {
	verificationMethod: SetupIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod!
}
union SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsAcssDebitUnion = SetupIntentTypeSpecificPaymentMethodOptionsClient | SetupIntentPaymentMethodOptionsAcssDebit
union SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsBlikUnion = SetupIntentTypeSpecificPaymentMethodOptionsClient | SetupIntentPaymentMethodOptionsBlik
union SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsLinkUnion = SetupIntentTypeSpecificPaymentMethodOptionsClient | SetupIntentPaymentMethodOptionsLink
union SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsSepaDebitUnion = SetupIntentTypeSpecificPaymentMethodOptionsClient | SetupIntentPaymentMethodOptionsSepaDebit
union SetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsUsBankAccountUnion = SetupIntentTypeSpecificPaymentMethodOptionsClient | SetupIntentPaymentMethodOptionsUsBankAccount
enum SetupIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod {
	automatic
	instant
	microdeposits
}
union SetupIntentUnion = SetupIntent
type Shipping {
	trackingNumber: String
	phone: String
	name: String!
	carrier: String
	address: Address!
}
type ShippingRate {
	type: ShippingRateType!
	taxCode: TaxCodeUnion
	taxBehavior: ShippingRateTaxBehavior
	object: ShippingRateObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	fixedAmount: ShippingRateFixedAmount!
	displayName: String
	deliveryEstimate: ShippingRateDeliveryEstimateUnion
	created: Int!
	active: Boolean!
}
type ShippingRateDeliveryEstimate {
	minimum: ShippingRateDeliveryEstimateBoundUnion
	maximum: ShippingRateDeliveryEstimateBoundUnion
}
type ShippingRateDeliveryEstimateBound {
	value: Int!
	unit: ShippingRateDeliveryEstimateBoundUnit!
}
union ShippingRateDeliveryEstimateBoundUnion = ShippingRateDeliveryEstimateBound
enum ShippingRateDeliveryEstimateBoundUnit {
	business_day
	day
	hour
	month
	week
}
union ShippingRateDeliveryEstimateUnion = ShippingRateDeliveryEstimate
type ShippingRateFixedAmount {
	currencyOptions: JSON!
	currency: String!
	amount: Int!
}
enum ShippingRateObject {
	shipping_rate
}
enum ShippingRateTaxBehavior {
	exclusive
	inclusive
	unspecified
}
enum ShippingRateType {
	fixed_amount
}
union ShippingRateUnion = ShippingRate
union ShippingUnion = Shipping
type SigmaScheduledQueryRunError {
	message: String!
}
type Source {
	wechat: SourceTypeWechat!
	usage: String
	type: SourceType!
	threeDSecure: SourceTypeThreeDSecure!
	status: String!
	statementDescriptor: String
	sourceOrder: SourceOrder!
	sofort: SourceTypeSofort!
	sepaDebit: SourceTypeSepaDebit!
	redirect: SourceRedirectFlow!
	receiver: SourceReceiverFlow!
	p24: SourceTypeP24!
	owner: SourceOwnerUnion
	object: SourceObject!
	multibanco: SourceTypeMultibanco!
	metadata: JSON!
	livemode: Boolean!
	klarna: SourceTypeKlarna!
	ideal: SourceTypeIdeal!
	id: String!
	giropay: SourceTypeGiropay!
	flow: String!
	eps: SourceTypeEps!
	customer: String!
	currency: String
	created: Int!
	codeVerification: SourceCodeVerificationFlow!
	clientSecret: String!
	cardPresent: SourceTypeCardPresent!
	card: SourceTypeCard!
	bancontact: SourceTypeBancontact!
	auBecsDebit: SourceTypeAuBecsDebit!
	amount: Int
	alipay: SourceTypeAlipay!
	acssDebit: SourceTypeAcssDebit!
	achDebit: SourceTypeAchDebit!
	achCreditTransfer: SourceTypeAchCreditTransfer!
}
type SourceCodeVerificationFlow {
	status: String!
	attemptsRemaining: Int!
}
type SourceMandateNotification {
	type: String!
	status: String!
	source: Source!
	sepaDebit: SourceMandateNotificationSepaDebitData!
	reason: String!
	object: SourceMandateNotificationObject!
	livemode: Boolean!
	id: String!
	created: Int!
	bacsDebit: SourceMandateNotificationBacsDebitData!
	amount: Int
	acssDebit: SourceMandateNotificationAcssDebitData!
}
type SourceMandateNotificationAcssDebitData {
	statementDescriptor: String!
}
type SourceMandateNotificationBacsDebitData {
	last4: String!
}
enum SourceMandateNotificationObject {
	source_mandate_notification
}
type SourceMandateNotificationSepaDebitData {
	mandateReference: String!
	last4: String!
	creditorIdentifier: String!
}
enum SourceObject {
	source
}
union SourceOrCardOrBankAccountUnion = Source | Card | BankAccount
type SourceOrder {
	shipping: Shipping!
	items: [SourceOrderItem!]
	email: String!
	currency: String!
	amount: Int!
}
type SourceOrderItem {
	type: String
	quantity: Int!
	parent: String
	description: String
	currency: String
	amount: Int
}
type SourceOwner {
	verifiedPhone: String
	verifiedName: String
	verifiedEmail: String
	verifiedAddress: AddressUnion
	phone: String
	name: String
	email: String
	address: AddressUnion
}
union SourceOwnerUnion = SourceOwner
type SourceReceiverFlow {
	refundAttributesStatus: String!
	refundAttributesMethod: String!
	amountReturned: Int!
	amountReceived: Int!
	amountCharged: Int!
	address: String
}
type SourceRedirectFlow {
	url: String!
	status: String!
	returnUrl: String!
	failureReason: String
}
type SourceTransaction {
	type: SourceTransactionType!
	status: String!
	source: String!
	sepaCreditTransfer: SourceTransactionSepaCreditTransferData!
	paperCheck: SourceTransactionPaperCheckData!
	object: SourceTransactionObject!
	livemode: Boolean!
	id: String!
	gbpCreditTransfer: SourceTransactionGbpCreditTransferData!
	currency: String!
	created: Int!
	chfCreditTransfer: SourceTransactionChfCreditTransferData!
	amount: Int!
	achCreditTransfer: SourceTransactionAchCreditTransferData!
}
type SourceTransactionAchCreditTransferData {
	routingNumber: String!
	last4: String!
	fingerprint: String!
	customerData: String!
}
type SourceTransactionChfCreditTransferData {
	senderName: String!
	senderIban: String!
	senderAddressLine1: String!
	senderAddressCountry: String!
	reference: String!
}
type SourceTransactionGbpCreditTransferData {
	senderSortCode: String!
	senderName: String!
	senderAccountNumber: String!
	reference: String!
	last4: String!
	fundingMethod: String!
	fingerprint: String!
}
enum SourceTransactionObject {
	source_transaction
}
type SourceTransactionPaperCheckData {
	invoices: String!
	availableAt: String!
}
type SourceTransactionSepaCreditTransferData {
	senderName: String!
	senderIban: String!
	reference: String!
}
enum SourceTransactionType {
	ach_credit_transfer
	ach_debit
	alipay
	bancontact
	card
	card_present
	eps
	giropay
	ideal
	klarna
	multibanco
	p24
	sepa_debit
	sofort
	three_d_secure
	wechat
}
enum SourceType {
	ach_credit_transfer
	ach_debit
	acss_debit
	alipay
	au_becs_debit
	bancontact
	card
	card_present
	eps
	giropay
	ideal
	klarna
	multibanco
	p24
	sepa_debit
	sofort
	three_d_secure
	wechat
}
type SourceTypeAchCreditTransfer {
	swiftCode: String
	routingNumber: String
	refundRoutingNumber: String
	refundAccountHolderType: String
	refundAccountHolderName: String
	fingerprint: String
	bankName: String
	accountNumber: String
}
type SourceTypeAchDebit {
	type: String
	routingNumber: String
	last4: String
	fingerprint: String
	country: String
	bankName: String
}
type SourceTypeAcssDebit {
	routingNumber: String
	last4: String
	fingerprint: String
	country: String
	category: String
	bankName: String
	bankAddressPostalCode: String
	bankAddressLine2: String
	bankAddressLine1: String
	bankAddressCity: String
}
type SourceTypeAlipay {
	statementDescriptor: String
	nativeUrl: String
	dataString: String
}
type SourceTypeAuBecsDebit {
	last4: String
	fingerprint: String
	bsbNumber: String
}
type SourceTypeBancontact {
	statementDescriptor: String
	preferredLanguage: String
	ibanLast4: String
	bic: String
	bankName: String
	bankCode: String
}
type SourceTypeCard {
	tokenizationMethod: String
	threeDSecure: String!
	name: String
	last4: String
	funding: String
	fingerprint: String!
	expYear: Int
	expMonth: Int
	dynamicLast4: String
	cvcCheck: String
	country: String
	brand: String
	addressZipCheck: String
	addressLine1Check: String
}
type SourceTypeCardPresent {
	transactionStatusInformation: String!
	terminalVerificationResults: String!
	reader: String
	readMethod: String
	posEntryMode: String!
	posDeviceId: String
	last4: String
	funding: String
	fingerprint: String!
	expYear: Int
	expMonth: Int
	evidenceTransactionCertificate: String
	evidenceCustomerSignature: String
	emvAuthData: String!
	dedicatedFileName: String!
	dataType: String
	cvmType: String!
	country: String
	brand: String
	authorizationResponseCode: String!
	authorizationCode: String
	applicationPreferredName: String!
	applicationCryptogram: String!
}
type SourceTypeEps {
	statementDescriptor: String
	reference: String
}
type SourceTypeGiropay {
	statementDescriptor: String
	bic: String
	bankName: String
	bankCode: String
}
type SourceTypeIdeal {
	statementDescriptor: String
	ibanLast4: String
	bic: String
	bank: String
}
type SourceTypeKlarna {
	shippingLastName: String!
	shippingFirstName: String!
	shippingDelay: Int!
	redirectUrl: String!
	purchaseType: String!
	purchaseCountry: String!
	paymentMethodCategories: String!
	payOverTimeRedirectUrl: String!
	payOverTimeName: String!
	payOverTimeAssetUrlsStandard: String!
	payOverTimeAssetUrlsDescriptive: String!
	payNowRedirectUrl: String!
	payNowName: String!
	payNowAssetUrlsStandard: String!
	payNowAssetUrlsDescriptive: String!
	payLaterRedirectUrl: String!
	payLaterName: String!
	payLaterAssetUrlsStandard: String!
	payLaterAssetUrlsDescriptive: String!
	pageTitle: String!
	logoUrl: String!
	locale: String!
	lastName: String!
	firstName: String!
	clientToken: String
	backgroundImageUrl: String!
}
type SourceTypeMultibanco {
	refundIban: String
	refundAccountHolderName: String
	refundAccountHolderAddressState: String
	refundAccountHolderAddressPostalCode: String
	refundAccountHolderAddressLine2: String
	refundAccountHolderAddressLine1: String
	refundAccountHolderAddressCountry: String
	refundAccountHolderAddressCity: String
	reference: String
	entity: String
}
type SourceTypeP24 {
	reference: String
}
type SourceTypeSepaDebit {
	mandateUrl: String
	mandateReference: String
	last4: String
	fingerprint: String
	country: String
	branchCode: String
	bankCode: String
}
type SourceTypeSofort {
	statementDescriptor: String
	preferredLanguage: String
	ibanLast4: String
	country: String
	bic: String
	bankName: String
	bankCode: String
}
type SourceTypeThreeDSecure {
	tokenizationMethod: String
	threeDSecure: String!
	name: String
	last4: String
	funding: String
	fingerprint: String!
	expYear: Int
	expMonth: Int
	dynamicLast4: String
	cvcCheck: String
	customer: String
	country: String
	card: String
	brand: String
	authenticated: Boolean
	addressZipCheck: String
	addressLine1Check: String
}
type SourceTypeWechat {
	statementDescriptor: String!
	qrCodeUrl: String
	prepayId: String!
}
union SourceUnion = Source
type Subscription {
	trialStart: Int
	trialSettings: SubscriptionsTrialsResourceTrialSettingsUnion
	trialEnd: Int
	transferData: SubscriptionTransferDataUnion
	testClock: TestHelpersTestClockUnion
	status: SubscriptionStatus!
	startDate: Int!
	schedule: SubscriptionScheduleUnion
	pendingUpdate: SubscriptionsResourcePendingUpdateUnion
	pendingSetupIntent: SetupIntentUnion
	pendingInvoiceItemInterval: SubscriptionPendingInvoiceItemIntervalUnion
	paymentSettings: SubscriptionsResourcePaymentSettingsUnion
	pauseCollection: SubscriptionsResourcePauseCollectionUnion
	onBehalfOf: AccountUnion
	object: SubscriptionObject!
	nextPendingInvoiceItemInvoice: Int
	metadata: JSON!
	livemode: Boolean!
	latestInvoice: InvoiceUnion
	items: SubscriptionItems!
	id: String!
	endedAt: Int
	discount: DiscountUnion
	description: String
	defaultTaxRates: [TaxRate!]
	defaultSource: SourceOrCardOrBankAccountUnion
	defaultPaymentMethod: PaymentMethodUnion
	daysUntilDue: Int
	customer: DeletedCustomerOrCustomerUnion!
	currentPeriodStart: Int!
	currentPeriodEnd: Int!
	currency: String!
	created: Int!
	collectionMethod: SubscriptionCollectionMethod!
	canceledAt: Int
	cancelAtPeriodEnd: Boolean!
	cancelAt: Int
	billingThresholds: SubscriptionBillingThresholdsUnion
	billingCycleAnchor: Int!
	automaticTax: SubscriptionAutomaticTax!
	applicationFeePercent: Float
	application: DeletedApplicationOrApplicationUnion
}
type SubscriptionAutomaticTax {
	enabled: Boolean!
}
type SubscriptionBillingThresholds {
	resetBillingCycleAnchor: Boolean
	amountGte: Int
}
union SubscriptionBillingThresholdsUnion = SubscriptionBillingThresholds
enum SubscriptionCollectionMethod {
	charge_automatically
	send_invoice
}
type SubscriptionItem {
	taxRates: [TaxRate!]
	subscription: String!
	quantity: Int!
	price: Price!
	object: SubscriptionItemObject!
	metadata: JSON!
	id: String!
	created: Int!
	billingThresholds: SubscriptionItemBillingThresholdsUnion
}
type SubscriptionItemBillingThresholds {
	usageGte: Int
}
union SubscriptionItemBillingThresholdsUnion = SubscriptionItemBillingThresholds
enum SubscriptionItemObject {
	subscription_item
}
type SubscriptionItems {
	url: String!
	object: SubscriptionObjectItems!
	hasMore: Boolean!
	data: [SubscriptionItem!]!
}
enum SubscriptionObject {
	subscription
}
enum SubscriptionObjectItems {
	list
}
type SubscriptionPaymentMethodOptionsCard {
	requestThreeDSecure: SubscriptionPaymentMethodOptionsCardRequestThreeDSecure
	network: SubscriptionPaymentMethodOptionsCardNetwork
	mandateOptions: InvoiceMandateOptionsCard!
}
enum SubscriptionPaymentMethodOptionsCardNetwork {
	amex
	cartes_bancaires
	diners
	discover
	interac
	jcb
	mastercard
	unionpay
	unknown
	visa
}
enum SubscriptionPaymentMethodOptionsCardRequestThreeDSecure {
	any
	automatic
}
union SubscriptionPaymentMethodOptionsCardUnion = SubscriptionPaymentMethodOptionsCard
type SubscriptionPendingInvoiceItemInterval {
	intervalCount: Int!
	interval: SubscriptionPendingInvoiceItemIntervalInterval!
}
enum SubscriptionPendingInvoiceItemIntervalInterval {
	day
	month
	week
	year
}
union SubscriptionPendingInvoiceItemIntervalUnion = SubscriptionPendingInvoiceItemInterval
type SubscriptionSchedule {
	testClock: TestHelpersTestClockUnion
	subscription: SubscriptionUnion
	status: SubscriptionScheduleStatus!
	releasedSubscription: String
	releasedAt: Int
	phases: [SubscriptionSchedulePhaseConfiguration!]!
	object: SubscriptionScheduleObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	endBehavior: SubscriptionScheduleEndBehavior!
	defaultSettings: SubscriptionSchedulesResourceDefaultSettings!
	customer: DeletedCustomerOrCustomerUnion!
	currentPhase: SubscriptionScheduleCurrentPhaseUnion
	created: Int!
	completedAt: Int
	canceledAt: Int
	application: DeletedApplicationOrApplicationUnion
}
type SubscriptionScheduleAddInvoiceItem {
	taxRates: [TaxRate!]
	quantity: Int
	price: DeletedPriceOrPriceUnion!
}
type SubscriptionScheduleConfigurationItem {
	taxRates: [TaxRate!]
	quantity: Int!
	price: DeletedPriceOrPriceUnion!
	metadata: JSON!
	billingThresholds: SubscriptionItemBillingThresholdsUnion
}
type SubscriptionScheduleCurrentPhase {
	startDate: Int!
	endDate: Int!
}
union SubscriptionScheduleCurrentPhaseUnion = SubscriptionScheduleCurrentPhase
enum SubscriptionScheduleEndBehavior {
	cancel
	none
	release
	renew
}
enum SubscriptionScheduleObject {
	subscription_schedule
}
type SubscriptionSchedulePhaseConfiguration {
	trialEnd: Int
	transferData: SubscriptionTransferDataUnion
	startDate: Int!
	prorationBehavior: SubscriptionSchedulePhaseConfigurationProrationBehavior!
	onBehalfOf: AccountUnion
	metadata: JSON!
	items: [SubscriptionScheduleConfigurationItem!]!
	invoiceSettings: InvoiceSettingSubscriptionScheduleSettingUnion
	endDate: Int!
	description: String
	defaultTaxRates: [TaxRate!]
	defaultPaymentMethod: PaymentMethodUnion
	currency: String!
	coupon: DeletedCouponOrCouponUnion
	collectionMethod: SubscriptionSchedulePhaseConfigurationCollectionMethod
	billingThresholds: SubscriptionBillingThresholdsUnion
	billingCycleAnchor: SubscriptionSchedulePhaseConfigurationBillingCycleAnchor
	automaticTax: SchedulesPhaseAutomaticTax!
	applicationFeePercent: Float
	addInvoiceItems: [SubscriptionScheduleAddInvoiceItem!]!
}
enum SubscriptionSchedulePhaseConfigurationBillingCycleAnchor {
	automatic
	phase_start
}
enum SubscriptionSchedulePhaseConfigurationCollectionMethod {
	charge_automatically
	send_invoice
}
enum SubscriptionSchedulePhaseConfigurationProrationBehavior {
	always_invoice
	create_prorations
	none
}
enum SubscriptionScheduleStatus {
	active
	canceled
	completed
	not_started
	released
}
union SubscriptionScheduleUnion = SubscriptionSchedule
type SubscriptionSchedulesResourceDefaultSettings {
	transferData: SubscriptionTransferDataUnion
	onBehalfOf: AccountUnion
	invoiceSettings: InvoiceSettingSubscriptionScheduleSettingUnion
	description: String
	defaultPaymentMethod: PaymentMethodUnion
	collectionMethod: SubscriptionSchedulesResourceDefaultSettingsCollectionMethod
	billingThresholds: SubscriptionBillingThresholdsUnion
	billingCycleAnchor: SubscriptionSchedulesResourceDefaultSettingsBillingCycleAnchor!
	automaticTax: SubscriptionSchedulesResourceDefaultSettingsAutomaticTax!
	applicationFeePercent: Float
}
type SubscriptionSchedulesResourceDefaultSettingsAutomaticTax {
	enabled: Boolean!
}
enum SubscriptionSchedulesResourceDefaultSettingsBillingCycleAnchor {
	automatic
	phase_start
}
enum SubscriptionSchedulesResourceDefaultSettingsCollectionMethod {
	charge_automatically
	send_invoice
}
enum SubscriptionStatus {
	active
	canceled
	incomplete
	incomplete_expired
	past_due
	paused
	trialing
	unpaid
}
type SubscriptionTransferData {
	destination: AccountUnion!
	amountPercent: Float
}
union SubscriptionTransferDataUnion = SubscriptionTransferData
union SubscriptionUnion = Subscription
type SubscriptionsResourcePauseCollection {
	resumesAt: Int
	behavior: SubscriptionsResourcePauseCollectionBehavior!
}
enum SubscriptionsResourcePauseCollectionBehavior {
	keep_as_draft
	mark_uncollectible
	void
}
union SubscriptionsResourcePauseCollectionUnion = SubscriptionsResourcePauseCollection
type SubscriptionsResourcePaymentMethodOptions {
	usBankAccount: InvoicePaymentMethodOptionsUsBankAccountUnion
	konbini: Union
	customerBalance: InvoicePaymentMethodOptionsCustomerBalanceUnion
	card: SubscriptionPaymentMethodOptionsCardUnion
	bancontact: InvoicePaymentMethodOptionsBancontactUnion
	acssDebit: InvoicePaymentMethodOptionsAcssDebitUnion
}
union SubscriptionsResourcePaymentMethodOptionsUnion = SubscriptionsResourcePaymentMethodOptions
type SubscriptionsResourcePaymentSettings {
	saveDefaultPaymentMethod: SubscriptionsResourcePaymentSettingsSaveDefaultPaymentMethod
	paymentMethodTypes: [SubscriptionsResourcePaymentSettingsPaymentMethodTypes!]
	paymentMethodOptions: SubscriptionsResourcePaymentMethodOptionsUnion
}
enum SubscriptionsResourcePaymentSettingsPaymentMethodTypes {
	ach_credit_transfer
	ach_debit
	acss_debit
	au_becs_debit
	bacs_debit
	bancontact
	boleto
	card
	customer_balance
	fpx
	giropay
	grabpay
	ideal
	konbini
	link
	paynow
	promptpay
	sepa_debit
	sofort
	us_bank_account
	wechat_pay
}
enum SubscriptionsResourcePaymentSettingsSaveDefaultPaymentMethod {
	off
	on_subscription
}
union SubscriptionsResourcePaymentSettingsUnion = SubscriptionsResourcePaymentSettings
type SubscriptionsResourcePendingUpdate {
	trialFromPlan: Boolean
	trialEnd: Int
	subscriptionItems: [SubscriptionItem!]
	expiresAt: Int!
	billingCycleAnchor: Int
}
union SubscriptionsResourcePendingUpdateUnion = SubscriptionsResourcePendingUpdate
type SubscriptionsTrialsResourceEndBehavior {
	missingPaymentMethod: SubscriptionsTrialsResourceEndBehaviorMissingPaymentMethod!
}
enum SubscriptionsTrialsResourceEndBehaviorMissingPaymentMethod {
	cancel
	create_invoice
	pause
}
type SubscriptionsTrialsResourceTrialSettings {
	endBehavior: SubscriptionsTrialsResourceEndBehavior!
}
union SubscriptionsTrialsResourceTrialSettingsUnion = SubscriptionsTrialsResourceTrialSettings
type TaxCode {
	object: TaxCodeObject!
	name: String!
	id: String!
	description: String!
}
enum TaxCodeObject {
	tax_code
}
union TaxCodeUnion = TaxCode
type TaxDeductedAtSource {
	taxDeductionAccountNumber: String!
	periodStart: Int!
	periodEnd: Int!
	object: TaxDeductedAtSourceObject!
	id: String!
}
enum TaxDeductedAtSourceObject {
	tax_deducted_at_source
}
type TaxId {
	verification: TaxIdVerificationUnion
	value: String!
	type: TaxIdType!
	object: TaxIdObject!
	livemode: Boolean!
	id: String!
	customer: CustomerUnion
	created: Int!
	country: String
}
enum TaxIdObject {
	tax_id
}
enum TaxIdType {
	ae_trn
	au_abn
	au_arn
	bg_uic
	br_cnpj
	br_cpf
	ca_bn
	ca_gst_hst
	ca_pst_bc
	ca_pst_mb
	ca_pst_sk
	ca_qst
	ch_vat
	cl_tin
	eg_tin
	es_cif
	eu_oss_vat
	eu_vat
	gb_vat
	ge_vat
	hk_br
	hu_tin
	id_npwp
	il_vat
	in_gst
	is_vat
	jp_cn
	jp_rn
	jp_trn
	ke_pin
	kr_brn
	li_uid
	mx_rfc
	my_frp
	my_itn
	my_sst
	no_vat
	nz_gst
	ph_tin
	ru_inn
	ru_kpp
	sa_vat
	sg_gst
	sg_uen
	si_tin
	th_vat
	tr_tin
	tw_vat
	ua_vat
	unknown
	us_ein
	za_vat
}
type TaxIdVerification {
	verifiedName: String
	verifiedAddress: String
	status: TaxIdVerificationStatus!
}
enum TaxIdVerificationStatus {
	pending
	unavailable
	unverified
	verified
}
union TaxIdVerificationUnion = TaxIdVerification
type TaxRate {
	taxType: TaxRateTaxType
	state: String
	percentage: Float!
	object: TaxRateObject!
	metadata: JSON!
	livemode: Boolean!
	jurisdiction: String
	inclusive: Boolean!
	id: String!
	displayName: String!
	description: String
	created: Int!
	country: String
	active: Boolean!
}
enum TaxRateObject {
	tax_rate
}
enum TaxRateTaxType {
	gst
	hst
	jct
	pst
	qst
	rst
	sales_tax
	vat
}
union TaxRateUnion = TaxRate
type TerminalConfiguration {
	verifoneP400: TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig!
	tipping: TerminalConfigurationConfigurationResourceTipping!
	object: TerminalConfigurationObject!
	livemode: Boolean!
	isAccountDefault: Boolean
	id: String!
	bbposWiseposE: TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig!
}
type TerminalConfigurationConfigurationResourceCurrencySpecificConfig {
	smartTipThreshold: Int!
	percentages: [Int!]
	fixedAmounts: [Int!]
}
type TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig {
	splashscreen: FileUnion!
}
type TerminalConfigurationConfigurationResourceTipping {
	usd: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	sgd: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	sek: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	nzd: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	nok: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	myr: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	hkd: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	gbp: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	eur: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	dkk: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	czk: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	chf: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	cad: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
	aud: TerminalConfigurationConfigurationResourceCurrencySpecificConfig!
}
enum TerminalConfigurationObject {
	terminal.configuration
}
type TerminalLocation {
	object: TerminalLocationObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	displayName: String!
	configurationOverrides: String!
	address: Address!
}
enum TerminalLocationObject {
	terminal.location
}
union TerminalLocationUnion = TerminalLocation
type TerminalReader {
	status: String
	serialNumber: String!
	object: TerminalReaderObject!
	metadata: JSON!
	location: TerminalLocationUnion
	livemode: Boolean!
	label: String!
	ipAddress: String
	id: String!
	deviceType: TerminalReaderDeviceType!
	deviceSwVersion: String
	action: TerminalReaderReaderResourceReaderActionUnion
}
enum TerminalReaderDeviceType {
	bbpos_chipper2x
	bbpos_wisepad3
	bbpos_wisepos_e
	simulated_wisepos_e
	stripe_m2
	verifone_P400
}
enum TerminalReaderObject {
	terminal.reader
}
type TerminalReaderReaderResourceCart {
	total: Int!
	tax: Int
	lineItems: [TerminalReaderReaderResourceLineItem!]!
	currency: String!
}
union TerminalReaderReaderResourceCartUnion = TerminalReaderReaderResourceCart
type TerminalReaderReaderResourceLineItem {
	quantity: Int!
	description: String!
	amount: Int!
}
type TerminalReaderReaderResourceProcessConfig {
	tipping: TerminalReaderReaderResourceTippingConfig!
	skipTipping: Boolean!
}
type TerminalReaderReaderResourceProcessPaymentIntentAction {
	processConfig: TerminalReaderReaderResourceProcessConfig!
	paymentIntent: PaymentIntentUnion!
}
type TerminalReaderReaderResourceProcessSetupIntentAction {
	setupIntent: SetupIntentUnion!
	generatedCard: String!
}
type TerminalReaderReaderResourceReaderAction {
	type: TerminalReaderReaderResourceReaderActionType!
	status: TerminalReaderReaderResourceReaderActionStatus!
	setReaderDisplay: TerminalReaderReaderResourceSetReaderDisplayAction!
	processSetupIntent: TerminalReaderReaderResourceProcessSetupIntentAction!
	processPaymentIntent: TerminalReaderReaderResourceProcessPaymentIntentAction!
	failureMessage: String
	failureCode: String
}
enum TerminalReaderReaderResourceReaderActionStatus {
	failed
	in_progress
	succeeded
}
enum TerminalReaderReaderResourceReaderActionType {
	process_payment_intent
	process_setup_intent
	set_reader_display
}
union TerminalReaderReaderResourceReaderActionUnion = TerminalReaderReaderResourceReaderAction
type TerminalReaderReaderResourceSetReaderDisplayAction {
	type: TerminalReaderReaderResourceSetReaderDisplayActionType!
	cart: TerminalReaderReaderResourceCartUnion
}
enum TerminalReaderReaderResourceSetReaderDisplayActionType {
	cart
}
type TerminalReaderReaderResourceTippingConfig {
	amountEligible: Int!
}
type TestHelpersTestClock {
	status: TestHelpersTestClockStatus!
	object: TestHelpersTestClockObject!
	name: String
	livemode: Boolean!
	id: String!
	frozenTime: Int!
	deletesAfter: Int!
	created: Int!
}
enum TestHelpersTestClockObject {
	test_helpers.test_clock
}
enum TestHelpersTestClockStatus {
	advancing
	internal_failure
	ready
}
union TestHelpersTestClockUnion = TestHelpersTestClock
type ThreeDSecureDetails {
	version: ThreeDSecureDetailsVersion
	resultReason: ThreeDSecureDetailsResultReason
	result: ThreeDSecureDetailsResult
	authenticationFlow: ThreeDSecureDetailsAuthenticationFlow
}
enum ThreeDSecureDetailsAuthenticationFlow {
	challenge
	frictionless
}
enum ThreeDSecureDetailsResult {
	attempt_acknowledged
	authenticated
	exempted
	failed
	not_supported
	processing_error
}
enum ThreeDSecureDetailsResultReason {
	abandoned
	bypassed
	canceled
	card_not_enrolled
	network_not_supported
	protocol_error
	rejected
}
union ThreeDSecureDetailsUnion = ThreeDSecureDetails
enum ThreeDSecureDetailsVersion {
	1.0.2
	2.1.0
	2.2.0
}
type ThreeDSecureUsage {
	supported: Boolean!
}
union ThreeDSecureUsageUnion = ThreeDSecureUsage
type Token {
	used: Boolean!
	type: String!
	object: TokenObject!
	livemode: Boolean!
	id: String!
	created: Int!
	clientIp: String
	card: Card!
	bankAccount: BankAccount!
}
enum TokenObject {
	token
}
type Topup {
	transferGroup: String
	status: TopupStatus!
	statementDescriptor: String
	source: SourceUnion
	object: TopupObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	failureMessage: String
	failureCode: String
	expectedAvailabilityDate: Int
	description: String
	currency: String!
	created: Int!
	balanceTransaction: BalanceTransactionUnion
	amount: Int!
}
enum TopupObject {
	topup
}
enum TopupStatus {
	canceled
	failed
	pending
	reversed
	succeeded
}
type Transfer {
	transferGroup: String
	sourceType: String!
	sourceTransaction: ChargeUnion
	reversed: Boolean!
	reversals: TransferReversals!
	object: TransferObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	destinationPayment: ChargeUnion!
	destination: AccountUnion
	description: String
	currency: String!
	created: Int!
	balanceTransaction: BalanceTransactionUnion
	amountReversed: Int!
	amount: Int!
}
type TransferData {
	destination: AccountUnion!
	amount: Int!
}
union TransferDataUnion = TransferData
enum TransferObject {
	transfer
}
enum TransferObjectReversals {
	list
}
type TransferReversal {
	transfer: TransferUnion!
	sourceRefund: RefundUnion
	object: TransferReversalObject!
	metadata: JSON!
	id: String!
	destinationPaymentRefund: RefundUnion
	currency: String!
	created: Int!
	balanceTransaction: BalanceTransactionUnion
	amount: Int!
}
enum TransferReversalObject {
	transfer_reversal
}
union TransferReversalOrTransferOrTopupOrTaxDeductedAtSourceOrReserveTransactionOrRefundOrPlatformTaxFeeOrPayoutOrIssuingTransactionOrIssuingDisputeOrIssuingAuthorizationOrFeeRefundOrDisputeOrConnectCollectionTransferOrChargeOrApplicationFeeUnion = TransferReversal | Transfer | Topup | TaxDeductedAtSource | ReserveTransaction | Refund | PlatformTaxFee | Payout | IssuingTransaction | IssuingDispute | IssuingAuthorization | FeeRefund | Dispute | ConnectCollectionTransfer | Charge | ApplicationFee
union TransferReversalUnion = TransferReversal
type TransferReversals {
	url: String!
	object: TransferObjectReversals!
	hasMore: Boolean!
	data: [TransferReversal!]!
}
type TransferSchedule {
	weeklyAnchor: String!
	monthlyAnchor: Int!
	interval: String!
	delayDays: Int!
}
union TransferUnion = Transfer
type TransformQuantity {
	round: TransformQuantityRound!
	divideBy: Int!
}
enum TransformQuantityRound {
	down
	up
}
union TransformQuantityUnion = TransformQuantity
type TransformUsage {
	round: TransformUsageRound!
	divideBy: Int!
}
enum TransformUsageRound {
	down
	up
}
union TransformUsageUnion = TransformUsage
type TreasuryCreditReversal {
	transaction: TreasuryTransactionUnion
	statusTransitions: TreasuryReceivedCreditsResourceStatusTransitions!
	status: TreasuryCreditReversalStatus!
	receivedCredit: String!
	object: TreasuryCreditReversalObject!
	network: TreasuryCreditReversalNetwork!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String!
	currency: String!
	created: Int!
	amount: Int!
}
enum TreasuryCreditReversalNetwork {
	ach
	stripe
}
enum TreasuryCreditReversalObject {
	treasury.credit_reversal
}
enum TreasuryCreditReversalStatus {
	canceled
	posted
	processing
}
type TreasuryDebitReversal {
	transaction: TreasuryTransactionUnion
	statusTransitions: TreasuryReceivedDebitsResourceStatusTransitions!
	status: TreasuryDebitReversalStatus!
	receivedDebit: String!
	object: TreasuryDebitReversalObject!
	network: TreasuryDebitReversalNetwork!
	metadata: JSON!
	livemode: Boolean!
	linkedFlows: TreasuryReceivedDebitsResourceDebitReversalLinkedFlowsUnion
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String
	currency: String!
	created: Int!
	amount: Int!
}
enum TreasuryDebitReversalNetwork {
	ach
	card
}
enum TreasuryDebitReversalObject {
	treasury.debit_reversal
}
enum TreasuryDebitReversalStatus {
	failed
	processing
	succeeded
}
type TreasuryFinancialAccount {
	supportedCurrencies: [String!]!
	statusDetails: TreasuryFinancialAccountsResourceStatusDetails!
	status: TreasuryFinancialAccountStatus!
	restrictedFeatures: [TreasuryFinancialAccountRestrictedFeatures!]!
	platformRestrictions: TreasuryFinancialAccountsResourcePlatformRestrictionsUnion
	pendingFeatures: [TreasuryFinancialAccountPendingFeatures!]!
	object: TreasuryFinancialAccountObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	financialAddresses: [TreasuryFinancialAccountsResourceFinancialAddress!]!
	features: TreasuryFinancialAccountFeatures!
	created: Int!
	country: String!
	balance: TreasuryFinancialAccountsResourceBalance!
	activeFeatures: [TreasuryFinancialAccountActiveFeatures!]!
}
enum TreasuryFinancialAccountActiveFeatures {
	card_issuing
	deposit_insurance
	financial_addresses.aba
	inbound_transfers.ach
	intra_stripe_flows
	outbound_payments.ach
	outbound_payments.us_domestic_wire
	outbound_transfers.ach
	outbound_transfers.us_domestic_wire
	remote_deposit_capture
}
type TreasuryFinancialAccountFeatures {
	outboundTransfers: TreasuryFinancialAccountsResourceOutboundTransfers!
	outboundPayments: TreasuryFinancialAccountsResourceOutboundPayments!
	object: TreasuryFinancialAccountFeaturesObject!
	intraStripeFlows: TreasuryFinancialAccountsResourceToggleSettings!
	inboundTransfers: TreasuryFinancialAccountsResourceInboundTransfers!
	financialAddresses: TreasuryFinancialAccountsResourceFinancialAddressesFeatures!
	depositInsurance: TreasuryFinancialAccountsResourceToggleSettings!
	cardIssuing: TreasuryFinancialAccountsResourceToggleSettings!
}
enum TreasuryFinancialAccountFeaturesObject {
	treasury.financial_account_features
}
enum TreasuryFinancialAccountObject {
	treasury.financial_account
}
enum TreasuryFinancialAccountPendingFeatures {
	card_issuing
	deposit_insurance
	financial_addresses.aba
	inbound_transfers.ach
	intra_stripe_flows
	outbound_payments.ach
	outbound_payments.us_domestic_wire
	outbound_transfers.ach
	outbound_transfers.us_domestic_wire
	remote_deposit_capture
}
enum TreasuryFinancialAccountRestrictedFeatures {
	card_issuing
	deposit_insurance
	financial_addresses.aba
	inbound_transfers.ach
	intra_stripe_flows
	outbound_payments.ach
	outbound_payments.us_domestic_wire
	outbound_transfers.ach
	outbound_transfers.us_domestic_wire
	remote_deposit_capture
}
enum TreasuryFinancialAccountStatus {
	closed
	open
}
type TreasuryFinancialAccountsResourceAbaRecord {
	routingNumber: String!
	bankName: String!
	accountNumberLast4: String!
	accountNumber: String
	accountHolderName: String!
}
type TreasuryFinancialAccountsResourceAchToggleSettings {
	statusDetails: [TreasuryFinancialAccountsResourceTogglesSettingStatusDetails!]!
	status: TreasuryFinancialAccountsResourceAchToggleSettingsStatus!
	requested: Boolean!
}
enum TreasuryFinancialAccountsResourceAchToggleSettingsStatus {
	active
	pending
	restricted
}
type TreasuryFinancialAccountsResourceBalance {
	outboundPending: JSON!
	inboundPending: JSON!
	cash: JSON!
}
type TreasuryFinancialAccountsResourceClosedStatusDetails {
	reasons: [TreasuryFinancialAccountsResourceClosedStatusDetailsReasons!]!
}
enum TreasuryFinancialAccountsResourceClosedStatusDetailsReasons {
	account_rejected
	closed_by_platform
	other
}
union TreasuryFinancialAccountsResourceClosedStatusDetailsUnion = TreasuryFinancialAccountsResourceClosedStatusDetails
type TreasuryFinancialAccountsResourceFinancialAddress {
	type: TreasuryFinancialAccountsResourceFinancialAddressType!
	supportedNetworks: [TreasuryFinancialAccountsResourceFinancialAddressSupportedNetworks!]!
	aba: TreasuryFinancialAccountsResourceAbaRecord!
}
enum TreasuryFinancialAccountsResourceFinancialAddressSupportedNetworks {
	ach
	us_domestic_wire
}
enum TreasuryFinancialAccountsResourceFinancialAddressType {
	aba
}
type TreasuryFinancialAccountsResourceFinancialAddressesFeatures {
	aba: TreasuryFinancialAccountsResourceToggleSettings!
}
type TreasuryFinancialAccountsResourceInboundTransfers {
	ach: TreasuryFinancialAccountsResourceAchToggleSettings!
}
type TreasuryFinancialAccountsResourceOutboundPayments {
	usDomesticWire: TreasuryFinancialAccountsResourceToggleSettings!
	ach: TreasuryFinancialAccountsResourceAchToggleSettings!
}
type TreasuryFinancialAccountsResourceOutboundTransfers {
	usDomesticWire: TreasuryFinancialAccountsResourceToggleSettings!
	ach: TreasuryFinancialAccountsResourceAchToggleSettings!
}
type TreasuryFinancialAccountsResourcePlatformRestrictions {
	outboundFlows: TreasuryFinancialAccountsResourcePlatformRestrictionsOutboundFlows
	inboundFlows: TreasuryFinancialAccountsResourcePlatformRestrictionsInboundFlows
}
enum TreasuryFinancialAccountsResourcePlatformRestrictionsInboundFlows {
	restricted
	unrestricted
}
enum TreasuryFinancialAccountsResourcePlatformRestrictionsOutboundFlows {
	restricted
	unrestricted
}
union TreasuryFinancialAccountsResourcePlatformRestrictionsUnion = TreasuryFinancialAccountsResourcePlatformRestrictions
type TreasuryFinancialAccountsResourceStatusDetails {
	closed: TreasuryFinancialAccountsResourceClosedStatusDetailsUnion
}
type TreasuryFinancialAccountsResourceToggleSettings {
	statusDetails: [TreasuryFinancialAccountsResourceTogglesSettingStatusDetails!]!
	status: TreasuryFinancialAccountsResourceToggleSettingsStatus!
	requested: Boolean!
}
enum TreasuryFinancialAccountsResourceToggleSettingsStatus {
	active
	pending
	restricted
}
type TreasuryFinancialAccountsResourceTogglesSettingStatusDetails {
	restriction: TreasuryFinancialAccountsResourceTogglesSettingStatusDetailsRestriction!
	resolution: TreasuryFinancialAccountsResourceTogglesSettingStatusDetailsResolution
	code: TreasuryFinancialAccountsResourceTogglesSettingStatusDetailsCode!
}
enum TreasuryFinancialAccountsResourceTogglesSettingStatusDetailsCode {
	activating
	capability_not_requested
	financial_account_closed
	rejected_other
	rejected_unsupported_business
	requirements_past_due
	requirements_pending_verification
	restricted_by_platform
	restricted_other
}
enum TreasuryFinancialAccountsResourceTogglesSettingStatusDetailsResolution {
	contact_stripe
	provide_information
	remove_restriction
}
enum TreasuryFinancialAccountsResourceTogglesSettingStatusDetailsRestriction {
	inbound_flows
	outbound_flows
}
type TreasuryInboundTransfer {
	transaction: TreasuryTransactionUnion
	statusTransitions: TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions!
	status: TreasuryInboundTransferStatus!
	statementDescriptor: String!
	returned: Boolean
	originPaymentMethodDetails: InboundTransfersUnion
	originPaymentMethod: String!
	object: TreasuryInboundTransferObject!
	metadata: JSON!
	livemode: Boolean!
	linkedFlows: TreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows!
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String!
	failureDetails: TreasuryInboundTransfersResourceFailureDetailsUnion
	description: String
	currency: String!
	created: Int!
	cancelable: Boolean!
	amount: Int!
}
enum TreasuryInboundTransferObject {
	treasury.inbound_transfer
}
enum TreasuryInboundTransferStatus {
	canceled
	failed
	processing
	succeeded
}
type TreasuryInboundTransfersResourceFailureDetails {
	code: TreasuryInboundTransfersResourceFailureDetailsCode!
}
enum TreasuryInboundTransfersResourceFailureDetailsCode {
	account_closed
	account_frozen
	bank_account_restricted
	bank_ownership_changed
	debit_not_authorized
	incorrect_account_holder_address
	incorrect_account_holder_name
	incorrect_account_holder_tax_id
	insufficient_funds
	invalid_account_number
	invalid_currency
	no_account
	other
}
union TreasuryInboundTransfersResourceFailureDetailsUnion = TreasuryInboundTransfersResourceFailureDetails
type TreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows {
	receivedDebit: String
}
type TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions {
	succeededAt: Int
	failedAt: Int
	canceledAt: Int
}
type TreasuryOutboundPayment {
	transaction: TreasuryTransactionUnion!
	statusTransitions: TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions!
	status: TreasuryOutboundPaymentStatus!
	statementDescriptor: String!
	returnedDetails: TreasuryOutboundPaymentsResourceReturnedStatusUnion
	object: TreasuryOutboundPaymentObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String!
	expectedArrivalDate: Int!
	endUserDetails: TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetailsUnion
	destinationPaymentMethodDetails: OutboundPaymentsPaymentMethodDetailsUnion
	destinationPaymentMethod: String
	description: String
	customer: String
	currency: String!
	created: Int!
	cancelable: Boolean!
	amount: Int!
}
enum TreasuryOutboundPaymentObject {
	treasury.outbound_payment
}
enum TreasuryOutboundPaymentStatus {
	canceled
	failed
	posted
	processing
	returned
}
type TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetails {
	present: Boolean!
	ipAddress: String
}
union TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetailsUnion = TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetails
type TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions {
	returnedAt: Int
	postedAt: Int
	failedAt: Int
	canceledAt: Int
}
type TreasuryOutboundPaymentsResourceReturnedStatus {
	transaction: TreasuryTransactionUnion!
	code: TreasuryOutboundPaymentsResourceReturnedStatusCode!
}
enum TreasuryOutboundPaymentsResourceReturnedStatusCode {
	account_closed
	account_frozen
	bank_account_restricted
	bank_ownership_changed
	declined
	incorrect_account_holder_name
	invalid_account_number
	invalid_currency
	no_account
	other
}
union TreasuryOutboundPaymentsResourceReturnedStatusUnion = TreasuryOutboundPaymentsResourceReturnedStatus
type TreasuryOutboundTransfer {
	transaction: TreasuryTransactionUnion!
	statusTransitions: TreasuryOutboundTransfersResourceStatusTransitions!
	status: TreasuryOutboundTransferStatus!
	statementDescriptor: String!
	returnedDetails: TreasuryOutboundTransfersResourceReturnedDetailsUnion
	object: TreasuryOutboundTransferObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String!
	expectedArrivalDate: Int!
	destinationPaymentMethodDetails: OutboundTransfersPaymentMethodDetails!
	destinationPaymentMethod: String
	description: String
	currency: String!
	created: Int!
	cancelable: Boolean!
	amount: Int!
}
enum TreasuryOutboundTransferObject {
	treasury.outbound_transfer
}
enum TreasuryOutboundTransferStatus {
	canceled
	failed
	posted
	processing
	returned
}
type TreasuryOutboundTransfersResourceReturnedDetails {
	transaction: TreasuryTransactionUnion!
	code: TreasuryOutboundTransfersResourceReturnedDetailsCode!
}
enum TreasuryOutboundTransfersResourceReturnedDetailsCode {
	account_closed
	account_frozen
	bank_account_restricted
	bank_ownership_changed
	declined
	incorrect_account_holder_name
	invalid_account_number
	invalid_currency
	no_account
	other
}
union TreasuryOutboundTransfersResourceReturnedDetailsUnion = TreasuryOutboundTransfersResourceReturnedDetails
type TreasuryOutboundTransfersResourceStatusTransitions {
	returnedAt: Int
	postedAt: Int
	failedAt: Int
	canceledAt: Int
}
type TreasuryReceivedCredit {
	transaction: TreasuryTransactionUnion
	status: TreasuryReceivedCreditStatus!
	reversalDetails: TreasuryReceivedCreditsResourceReversalDetailsUnion
	object: TreasuryReceivedCreditObject!
	network: TreasuryReceivedCreditNetwork!
	livemode: Boolean!
	linkedFlows: TreasuryReceivedCreditsResourceLinkedFlows!
	initiatingPaymentMethodDetails: TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails!
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String
	failureCode: TreasuryReceivedCreditFailureCode
	description: String!
	currency: String!
	created: Int!
	amount: Int!
}
enum TreasuryReceivedCreditFailureCode {
	account_closed
	account_frozen
	other
}
enum TreasuryReceivedCreditNetwork {
	ach
	card
	stripe
	us_domestic_wire
}
enum TreasuryReceivedCreditObject {
	treasury.received_credit
}
enum TreasuryReceivedCreditStatus {
	failed
	succeeded
}
type TreasuryReceivedCreditsResourceLinkedFlows {
	sourceFlowType: String
	sourceFlowDetails: TreasuryReceivedCreditsResourceSourceFlowsDetailsUnion
	sourceFlow: String
	issuingTransaction: String
	issuingAuthorization: String
	creditReversal: String
}
type TreasuryReceivedCreditsResourceReversalDetails {
	restrictedReason: TreasuryReceivedCreditsResourceReversalDetailsRestrictedReason
	deadline: Int
}
enum TreasuryReceivedCreditsResourceReversalDetailsRestrictedReason {
	already_reversed
	deadline_passed
	network_restricted
	other
	source_flow_restricted
}
union TreasuryReceivedCreditsResourceReversalDetailsUnion = TreasuryReceivedCreditsResourceReversalDetails
type TreasuryReceivedCreditsResourceSourceFlowsDetails {
	type: TreasuryReceivedCreditsResourceSourceFlowsDetailsType!
	payout: Payout!
	outboundPayment: TreasuryOutboundPayment!
	creditReversal: TreasuryCreditReversal!
}
enum TreasuryReceivedCreditsResourceSourceFlowsDetailsType {
	credit_reversal
	other
	outbound_payment
	payout
}
union TreasuryReceivedCreditsResourceSourceFlowsDetailsUnion = TreasuryReceivedCreditsResourceSourceFlowsDetails
type TreasuryReceivedCreditsResourceStatusTransitions {
	postedAt: Int
}
type TreasuryReceivedDebit {
	transaction: TreasuryTransactionUnion
	status: TreasuryReceivedDebitStatus!
	reversalDetails: TreasuryReceivedDebitsResourceReversalDetailsUnion
	object: TreasuryReceivedDebitObject!
	network: TreasuryReceivedDebitNetwork!
	livemode: Boolean!
	linkedFlows: TreasuryReceivedDebitsResourceLinkedFlows!
	initiatingPaymentMethodDetails: TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails!
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String
	failureCode: TreasuryReceivedDebitFailureCode
	description: String!
	currency: String!
	created: Int!
	amount: Int!
}
enum TreasuryReceivedDebitFailureCode {
	account_closed
	account_frozen
	insufficient_funds
	other
}
enum TreasuryReceivedDebitNetwork {
	ach
	card
	stripe
}
enum TreasuryReceivedDebitObject {
	treasury.received_debit
}
enum TreasuryReceivedDebitStatus {
	failed
	succeeded
}
type TreasuryReceivedDebitsResourceDebitReversalLinkedFlows {
	issuingDispute: String
}
union TreasuryReceivedDebitsResourceDebitReversalLinkedFlowsUnion = TreasuryReceivedDebitsResourceDebitReversalLinkedFlows
type TreasuryReceivedDebitsResourceLinkedFlows {
	issuingTransaction: String
	issuingAuthorization: String
	inboundTransfer: String
	debitReversal: String
}
type TreasuryReceivedDebitsResourceReversalDetails {
	restrictedReason: TreasuryReceivedDebitsResourceReversalDetailsRestrictedReason
	deadline: Int
}
enum TreasuryReceivedDebitsResourceReversalDetailsRestrictedReason {
	already_reversed
	deadline_passed
	network_restricted
	other
	source_flow_restricted
}
union TreasuryReceivedDebitsResourceReversalDetailsUnion = TreasuryReceivedDebitsResourceReversalDetails
type TreasuryReceivedDebitsResourceStatusTransitions {
	completedAt: Int
}
type TreasurySharedResourceBillingDetails {
	name: String
	email: String
	address: Address!
}
type TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails {
	usBankAccount: TreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccount!
	type: TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetailsType!
	issuingCard: String!
	financialAccount: ReceivedPaymentMethodDetailsFinancialAccount!
	billingDetails: TreasurySharedResourceBillingDetails!
	balance: TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetailsBalance!
}
enum TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetailsBalance {
	payments
}
enum TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetailsType {
	balance
	financial_account
	issuing_card
	stripe
	us_bank_account
}
type TreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccount {
	routingNumber: String
	last4: String
	bankName: String
}
type TreasuryTransaction {
	statusTransitions: TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions!
	status: TreasuryTransactionStatus!
	object: TreasuryTransactionObject!
	livemode: Boolean!
	id: String!
	flowType: TreasuryTransactionFlowType!
	flowDetails: TreasuryTransactionsResourceFlowDetailsUnion
	flow: String
	financialAccount: String!
	entries: TreasuryTransactionEntries
	description: String!
	currency: String!
	created: Int!
	balanceImpact: TreasuryTransactionsResourceBalanceImpact!
	amount: Int!
}
type TreasuryTransactionEntries {
	url: String!
	object: TreasuryTransactionObjectEntries!
	hasMore: Boolean!
	data: [TreasuryTransactionEntry!]!
}
type TreasuryTransactionEntry {
	type: TreasuryTransactionEntryType!
	transaction: TreasuryTransactionUnion!
	object: TreasuryTransactionEntryObject!
	livemode: Boolean!
	id: String!
	flowType: TreasuryTransactionEntryFlowType!
	flowDetails: TreasuryTransactionsResourceFlowDetailsUnion
	flow: String
	financialAccount: String!
	effectiveAt: Int!
	currency: String!
	created: Int!
	balanceImpact: TreasuryTransactionsResourceBalanceImpact!
}
enum TreasuryTransactionEntryFlowType {
	credit_reversal
	debit_reversal
	inbound_transfer
	issuing_authorization
	other
	outbound_payment
	outbound_transfer
	received_credit
	received_debit
}
enum TreasuryTransactionEntryObject {
	treasury.transaction_entry
}
enum TreasuryTransactionEntryType {
	credit_reversal
	credit_reversal_posting
	debit_reversal
	inbound_transfer
	inbound_transfer_return
	issuing_authorization_hold
	issuing_authorization_release
	other
	outbound_payment
	outbound_payment_cancellation
	outbound_payment_failure
	outbound_payment_posting
	outbound_payment_return
	outbound_transfer
	outbound_transfer_cancellation
	outbound_transfer_failure
	outbound_transfer_posting
	outbound_transfer_return
	received_credit
	received_debit
}
enum TreasuryTransactionFlowType {
	credit_reversal
	debit_reversal
	inbound_transfer
	issuing_authorization
	other
	outbound_payment
	outbound_transfer
	received_credit
	received_debit
}
enum TreasuryTransactionObject {
	treasury.transaction
}
enum TreasuryTransactionObjectEntries {
	list
}
enum TreasuryTransactionStatus {
	open
	posted
	void
}
union TreasuryTransactionUnion = TreasuryTransaction
type TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions {
	voidAt: Int
	postedAt: Int
}
type TreasuryTransactionsResourceBalanceImpact {
	outboundPending: Int!
	inboundPending: Int!
	cash: Int!
}
type TreasuryTransactionsResourceFlowDetails {
	type: TreasuryTransactionsResourceFlowDetailsType!
	receivedDebit: TreasuryReceivedDebit!
	receivedCredit: TreasuryReceivedCredit!
	outboundTransfer: TreasuryOutboundTransfer!
	outboundPayment: TreasuryOutboundPayment!
	issuingAuthorization: IssuingAuthorization!
	inboundTransfer: TreasuryInboundTransfer!
	debitReversal: TreasuryDebitReversal!
	creditReversal: TreasuryCreditReversal!
}
enum TreasuryTransactionsResourceFlowDetailsType {
	credit_reversal
	debit_reversal
	inbound_transfer
	issuing_authorization
	other
	outbound_payment
	outbound_transfer
	received_credit
	received_debit
}
union TreasuryTransactionsResourceFlowDetailsUnion = TreasuryTransactionsResourceFlowDetails
union Union =
type UsBankAccountNetworks {
	supported: [UsBankAccountNetworksSupported!]!
	preferred: String
}
enum UsBankAccountNetworksSupported {
	ach
	us_domestic_wire
}
union UsBankAccountNetworksUnion = UsBankAccountNetworks
type UsageRecordSummary {
	totalUsage: Int!
	subscriptionItem: String!
	period: Period!
	object: UsageRecordSummaryObject!
	livemode: Boolean!
	invoice: String
	id: String!
}
enum UsageRecordSummaryObject {
	usage_record_summary
}
type VerificationSessionRedaction {
	status: VerificationSessionRedactionStatus!
}
enum VerificationSessionRedactionStatus {
	processing
	redacted
}
union VerificationSessionRedactionUnion = VerificationSessionRedaction
type WebhookEndpoint {
	url: String!
	status: String!
	secret: String!
	object: WebhookEndpointObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	enabledEvents: [String!]!
	description: String
	created: Int!
	application: String
	apiVersion: String
}
enum WebhookEndpointObject {
	webhook_endpoint
}
schema {
	query: Query
}


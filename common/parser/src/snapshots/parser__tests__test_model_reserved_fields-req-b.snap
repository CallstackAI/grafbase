---
source: common/parser/src/tests.rs
expression: req_string_b
---
{
  "auth": {
    "allowed_group_ops": {},
    "allowed_owner_ops": 0,
    "allowed_private_ops": 0,
    "allowed_public_ops": 0,
    "provider": null
  },
  "directives": {
    "include": {
      "args": {
        "if": {
          "d": "Included when true.",
          "n": "if",
          "t": "Boolean!"
        }
      },
      "description": "Directs the executor to include this field or fragment only when the `if` argument is true.",
      "is_repeatable": false,
      "locations": [
        "FIELD",
        "FRAGMENT_SPREAD",
        "INLINE_FRAGMENT"
      ],
      "name": "include"
    },
    "live": {
      "args": {},
      "description": "Directs the executor to return values as a Streaming response.",
      "is_repeatable": false,
      "locations": [
        "QUERY"
      ],
      "name": "live"
    },
    "oneOf": {
      "args": {},
      "description": "Indicates that an input object is a oneOf input object",
      "is_repeatable": false,
      "locations": [
        "INPUT_OBJECT"
      ],
      "name": "oneOf"
    },
    "skip": {
      "args": {
        "if": {
          "d": "Skipped when true.",
          "n": "if",
          "t": "Boolean!"
        }
      },
      "description": "Directs the executor to skip this field or fragment when the `if` argument is true.",
      "is_repeatable": false,
      "locations": [
        "FIELD",
        "FRAGMENT_SPREAD",
        "INLINE_FRAGMENT"
      ],
      "name": "skip"
    }
  },
  "disable_introspection": false,
  "enable_caching": false,
  "enable_federation": false,
  "federation_subscription": false,
  "http_headers": {},
  "implements": {},
  "mutation_type": "Mutation",
  "query_type": "Query",
  "schemas": [
    [
      0,
      {
        "fields": [
          {
            "data_type": "Utf8",
            "dict_id": 0,
            "dict_is_ordered": false,
            "metadata": {},
            "name": "title",
            "nullable": true
          },
          {
            "data_type": "Utf8",
            "dict_id": 0,
            "dict_is_ordered": false,
            "metadata": {},
            "name": "id",
            "nullable": false
          },
          {
            "data_type": "Utf8",
            "dict_id": 0,
            "dict_is_ordered": false,
            "metadata": {},
            "name": "updatedAt",
            "nullable": false
          },
          {
            "data_type": "Utf8",
            "dict_id": 0,
            "dict_is_ordered": false,
            "metadata": {},
            "name": "createdAt",
            "nullable": false
          },
          {
            "data_type": "Utf8",
            "dict_id": 0,
            "dict_is_ordered": false,
            "metadata": {},
            "name": "__type",
            "nullable": false
          },
          {
            "data_type": "Utf8",
            "dict_id": 0,
            "dict_is_ordered": false,
            "metadata": {},
            "name": "__gsi1pk",
            "nullable": true
          },
          {
            "data_type": "Utf8",
            "dict_id": 0,
            "dict_is_ordered": false,
            "metadata": {},
            "name": "__gsi1sk",
            "nullable": true
          },
          {
            "data_type": "Utf8",
            "dict_id": 0,
            "dict_is_ordered": false,
            "metadata": {},
            "name": "__gsi2pk",
            "nullable": false
          },
          {
            "data_type": "Utf8",
            "dict_id": 0,
            "dict_is_ordered": false,
            "metadata": {},
            "name": "__gsi2sk",
            "nullable": false
          }
        ],
        "metadata": {}
      }
    ]
  ],
  "search_config": {
    "indices": {}
  },
  "subscription_type": null,
  "types": {
    "Boolean": {
      "S": {
        "d": "The `Boolean` scalar type represents `true` or `false`.",
        "n": "Boolean",
        "p": "BestEffort"
      }
    },
    "DateTime": {
      "S": {
        "d": "A date-time string at UTC, such as 2007-12-03T10:15:30Z, is compliant with the date-time format outlined in section 5.6 of the RFC 3339\nprofile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.\n\nThis scalar is a description of an exact instant on the timeline such as the instant that a user account was created.\n\n# Input Coercion\n\nWhen expected as an input type, only RFC 3339 compliant date-time strings are accepted. All other input values raise a query error indicating an incorrect type.\n\n# Result Coercion\n\nWhere an RFC 3339 compliant date-time string has a time-zone other than UTC, it is shifted to UTC.\nFor example, the date-time string 2016-01-01T14:10:20+01:00 is shifted to 2016-01-01T13:10:20Z.",
        "n": "DateTime",
        "p": "BestEffort",
        "s": "https://datatracker.ietf.org/doc/html/rfc3339"
      }
    },
    "Float": {
      "S": {
        "d": "The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",
        "n": "Float",
        "p": "BestEffort"
      }
    },
    "ID": {
      "S": {
        "n": "ID",
        "p": "BestEffort"
      }
    },
    "Int": {
      "S": {
        "d": "The `Int` scalar type represents non-fractional whole numeric values.",
        "n": "Int",
        "p": "BestEffort"
      }
    },
    "Mutation": {
      "O": {
        "f": {
          "productCreate": {
            "D": "N",
            "_r": 1,
            "a": {
              "input": {
                "n": "input",
                "t": "ProductCreateInput!"
              }
            },
            "d": "Create a Product",
            "n": "productCreate",
            "r_": {
              "id": "product_create_resolver",
              "type": {
                "d": {
                  "CreateNode": {
                    "input": {
                      "InputTypeName": "input"
                    },
                    "ty": "Product"
                  }
                }
              }
            },
            "t": "ProductCreatePayload"
          },
          "productDelete": {
            "D": "N",
            "_r": 16,
            "a": {
              "by": {
                "n": "by",
                "t": "ProductByInput!"
              }
            },
            "d": "Delete a Product by ID or unique field",
            "n": "productDelete",
            "r_": {
              "id": "product_delete_resolver",
              "type": {
                "d": {
                  "DeleteNode": {
                    "by": {
                      "InputTypeName": "by"
                    },
                    "ty": "Product"
                  }
                }
              }
            },
            "t": "ProductDeletePayload"
          },
          "productUpdate": {
            "D": "N",
            "_r": 8,
            "a": {
              "by": {
                "n": "by",
                "t": "ProductByInput!"
              },
              "input": {
                "n": "input",
                "t": "ProductUpdateInput!"
              }
            },
            "d": "Update a Product",
            "n": "productUpdate",
            "r_": {
              "id": "product_create_resolver",
              "type": {
                "d": {
                  "UpdateNode": {
                    "by": {
                      "InputTypeName": "by"
                    },
                    "input": {
                      "InputTypeName": "input"
                    },
                    "ty": "Product"
                  }
                }
              }
            },
            "t": "ProductUpdatePayload"
          }
        },
        "n": "Mutation",
        "r": "Mutation"
      }
    },
    "OrderByDirection": {
      "E": {
        "e": {
          "ASC": {
            "n": "ASC"
          },
          "DESC": {
            "n": "DESC"
          }
        },
        "n": "OrderByDirection",
        "r": "OrderByDirection"
      }
    },
    "PageInfo": {
      "O": {
        "f": {
          "endCursor": {
            "D": "N",
            "P": {
              "Apply": {
                "fun_fields": [
                  [
                    "id",
                    "CursorEncode"
                  ]
                ],
                "plan": {
                  "Last": {
                    "plan": {
                      "Projection": {
                        "fields": [
                          "id"
                        ],
                        "flattened": false
                      }
                    }
                  }
                }
              }
            },
            "T": {
              "JSONSelect": {
                "property": "end_cursor"
              }
            },
            "_r": 4,
            "a": {},
            "n": "endCursor",
            "r_": {
              "id": null,
              "type": {
                "C": "P"
              }
            },
            "t": "String"
          },
          "hasNextPage": {
            "D": "N",
            "P": {
              "PaginationPage": "Next"
            },
            "T": {
              "JSONSelect": {
                "property": "has_next_page"
              }
            },
            "_r": 4,
            "a": {},
            "n": "hasNextPage",
            "r_": {
              "id": null,
              "type": {
                "C": "P"
              }
            },
            "t": "Boolean!"
          },
          "hasPreviousPage": {
            "D": "N",
            "P": {
              "PaginationPage": "Previous"
            },
            "T": {
              "JSONSelect": {
                "property": "has_previous_page"
              }
            },
            "_r": 4,
            "a": {},
            "n": "hasPreviousPage",
            "r_": {
              "id": null,
              "type": {
                "C": "P"
              }
            },
            "t": "Boolean!"
          },
          "startCursor": {
            "D": "N",
            "P": {
              "Apply": {
                "fun_fields": [
                  [
                    "id",
                    "CursorEncode"
                  ]
                ],
                "plan": {
                  "First": {
                    "plan": {
                      "Projection": {
                        "fields": [
                          "id"
                        ],
                        "flattened": false
                      }
                    }
                  }
                }
              }
            },
            "T": {
              "JSONSelect": {
                "property": "start_cursor"
              }
            },
            "_r": 4,
            "a": {},
            "n": "startCursor",
            "r_": {
              "id": null,
              "type": {
                "C": "P"
              }
            },
            "t": "String"
          }
        },
        "n": "PageInfo",
        "r": "PageInfo"
      }
    },
    "Product": {
      "O": {
        "I": true,
        "f": {
          "createdAt": {
            "D": "N",
            "P": {
              "Projection": {
                "fields": [
                  "createdAt"
                ],
                "flattened": false
              }
            },
            "T": {
              "DynamoSelect": {
                "property": "__created_at"
              }
            },
            "a": {},
            "d": "when the model was created",
            "n": "createdAt",
            "r_": {
              "id": null,
              "type": {
                "C": {
                  "L": {
                    "K": "Product"
                  }
                }
              }
            },
            "t": "DateTime!"
          },
          "id": {
            "D": "N",
            "P": {
              "Projection": {
                "fields": [
                  "id"
                ],
                "flattened": false
              }
            },
            "T": {
              "DynamoSelect": {
                "property": "__sk"
              }
            },
            "a": {},
            "d": "Unique identifier",
            "n": "id",
            "r_": {
              "id": null,
              "type": {
                "C": {
                  "L": {
                    "K": "Product"
                  }
                }
              }
            },
            "t": "ID!"
          },
          "title": {
            "D": "N",
            "P": {
              "Projection": {
                "fields": [
                  "title"
                ],
                "flattened": false
              }
            },
            "T": {
              "DynamoSelect": {
                "property": "title"
              }
            },
            "a": {},
            "n": "title",
            "r_": {
              "id": null,
              "type": {
                "C": {
                  "L": {
                    "K": "Product"
                  }
                }
              }
            },
            "t": "String"
          },
          "updatedAt": {
            "D": "N",
            "P": {
              "Projection": {
                "fields": [
                  "updatedAt"
                ],
                "flattened": false
              }
            },
            "T": {
              "DynamoSelect": {
                "property": "__updated_at"
              }
            },
            "a": {},
            "d": "when the model was updated",
            "n": "updatedAt",
            "r_": {
              "id": null,
              "type": {
                "C": {
                  "L": {
                    "K": "Product"
                  }
                }
              }
            },
            "t": "DateTime!"
          }
        },
        "n": "Product",
        "r": "Product"
      }
    },
    "ProductByInput": {
      "i": {
        "i": {
          "id": {
            "n": "id",
            "t": "ID"
          }
        },
        "n": "ProductByInput",
        "o": true,
        "r": "ProductByInput"
      }
    },
    "ProductConnection": {
      "O": {
        "f": {
          "edges": {
            "D": "N",
            "_r": 4,
            "a": {},
            "n": "edges",
            "t": "[ProductEdge]"
          },
          "pageInfo": {
            "D": "N",
            "_r": 4,
            "a": {},
            "d": "Information to aid in pagination",
            "n": "pageInfo",
            "t": "PageInfo!"
          }
        },
        "n": "ProductConnection",
        "r": "ProductConnection"
      }
    },
    "ProductCreateInput": {
      "i": {
        "d": "Input to create a Product",
        "i": {
          "title": {
            "n": "title",
            "t": "String"
          }
        },
        "n": "ProductCreateInput",
        "r": "ProductCreateInput"
      }
    },
    "ProductCreatePayload": {
      "O": {
        "f": {
          "product": {
            "D": "N",
            "_r": 1,
            "a": {},
            "n": "product",
            "r_": {
              "id": "product_resolver",
              "type": {
                "D": {
                  "QueryPKSK": {
                    "pk": {
                      "LocalData": "id"
                    },
                    "schema": null,
                    "sk": {
                      "LocalData": "id"
                    }
                  }
                }
              }
            },
            "t": "Product"
          }
        },
        "n": "ProductCreatePayload",
        "r": "ProductCreatePayload"
      }
    },
    "ProductDeletePayload": {
      "O": {
        "f": {
          "deletedId": {
            "D": "N",
            "T": {
              "JSONSelect": {
                "property": "id"
              }
            },
            "_r": 16,
            "a": {},
            "n": "deletedId",
            "t": "ID!"
          }
        },
        "n": "ProductDeletePayload",
        "r": "ProductDeletePayload"
      }
    },
    "ProductEdge": {
      "O": {
        "f": {
          "cursor": {
            "D": "N",
            "P": {
              "Apply": {
                "fun_fields": [
                  [
                    "id",
                    "CursorEncode"
                  ]
                ],
                "plan": {
                  "Projection": {
                    "fields": [
                      "id"
                    ],
                    "flattened": false
                  }
                }
              }
            },
            "T": {
              "Pipeline": [
                {
                  "DynamoSelect": {
                    "property": "__sk"
                  }
                },
                "ConvertSkToCursor"
              ]
            },
            "_r": 4,
            "a": {},
            "n": "cursor",
            "r_": {
              "id": null,
              "type": {
                "C": {
                  "L": {
                    "K": "Product"
                  }
                }
              }
            },
            "t": "String!"
          },
          "node": {
            "D": "N",
            "_r": 4,
            "a": {},
            "n": "node",
            "t": "Product!"
          }
        },
        "n": "ProductEdge",
        "r": "ProductEdge"
      }
    },
    "ProductOrderByInput": {
      "i": {
        "i": {
          "createdAt": {
            "n": "createdAt",
            "t": "OrderByDirection"
          }
        },
        "n": "ProductOrderByInput",
        "o": true,
        "r": "ProductOrderByInput"
      }
    },
    "ProductUpdateInput": {
      "i": {
        "d": "Input to update a Product",
        "i": {
          "title": {
            "n": "title",
            "t": "String"
          }
        },
        "n": "ProductUpdateInput",
        "r": "ProductUpdateInput"
      }
    },
    "ProductUpdatePayload": {
      "O": {
        "f": {
          "product": {
            "D": "N",
            "_r": 8,
            "a": {},
            "n": "product",
            "r_": {
              "id": "product_resolver",
              "type": {
                "D": {
                  "QueryPKSK": {
                    "pk": {
                      "LocalData": "id"
                    },
                    "schema": null,
                    "sk": {
                      "LocalData": "id"
                    }
                  }
                }
              }
            },
            "t": "Product"
          }
        },
        "n": "ProductUpdatePayload",
        "r": "ProductUpdatePayload"
      }
    },
    "Query": {
      "O": {
        "f": {
          "__schema": {
            "D": "N",
            "a": {},
            "d": "Access the current type schema of this server.",
            "n": "__schema",
            "t": "__Schema!"
          },
          "product": {
            "D": "N",
            "_r": 2,
            "a": {
              "by": {
                "d": "The field and value by which to query the Product",
                "n": "by",
                "t": "ProductByInput!"
              }
            },
            "d": "Query a single Product by an ID or a unique field",
            "n": "product",
            "r_": {
              "id": "product_resolver",
              "type": {
                "D": {
                  "QueryBy": {
                    "by": {
                      "InputTypeName": "by"
                    },
                    "schema": 0
                  }
                }
              }
            },
            "t": "Product"
          },
          "productCollection": {
            "D": "N",
            "P": {
              "Related": {
                "from": null,
                "relation_name": null,
                "to": 0,
                "ty": "Product"
              }
            },
            "R": {
              "birectional": false,
              "kind": "OneToMany",
              "name": "productCollection",
              "relation": [
                null,
                "Product"
              ]
            },
            "_r": 4,
            "a": {
              "after": {
                "n": "after",
                "t": "String"
              },
              "before": {
                "n": "before",
                "t": "String"
              },
              "first": {
                "n": "first",
                "t": "Int"
              },
              "last": {
                "n": "last",
                "t": "Int"
              },
              "orderBy": {
                "n": "orderBy",
                "t": "ProductOrderByInput"
              }
            },
            "d": "Paginated query to fetch the whole list of `Product`.",
            "n": "productCollection",
            "r_": {
              "id": "product_resolver",
              "type": {
                "D": {
                  "ListResultByTypePaginated": {
                    "after": {
                      "InputTypeName": "after"
                    },
                    "before": {
                      "InputTypeName": "before"
                    },
                    "first": {
                      "InputTypeName": "first"
                    },
                    "last": {
                      "InputTypeName": "last"
                    },
                    "nested": null,
                    "order_by": {
                      "InputTypeName": "orderBy"
                    },
                    "type": {
                      "DebugString": "Product"
                    }
                  }
                }
              }
            },
            "t": "ProductConnection"
          }
        },
        "n": "Query",
        "r": "Query"
      }
    },
    "String": {
      "S": {
        "d": "The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",
        "n": "String",
        "p": "BestEffort"
      }
    },
    "__Directive": {
      "O": {
        "d": "A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",
        "f": {
          "args": {
            "D": "N",
            "a": {},
            "n": "args",
            "t": "[__InputValue!]!"
          },
          "description": {
            "D": "N",
            "a": {},
            "n": "description",
            "t": "String"
          },
          "isRepeatable": {
            "D": "N",
            "a": {},
            "n": "isRepeatable",
            "t": "Boolean!"
          },
          "locations": {
            "D": "N",
            "a": {},
            "n": "locations",
            "t": "[__DirectiveLocation!]!"
          },
          "name": {
            "D": "N",
            "a": {},
            "n": "name",
            "t": "String!"
          }
        },
        "n": "__Directive",
        "r": "dynaql::model::directive::__Directive"
      }
    },
    "__DirectiveLocation": {
      "E": {
        "d": "A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",
        "e": {
          "ARGUMENT_DEFINITION": {
            "d": "Location adjacent to an argument definition.",
            "n": "ARGUMENT_DEFINITION"
          },
          "ENUM": {
            "d": "Location adjacent to an enum definition.",
            "n": "ENUM"
          },
          "ENUM_VALUE": {
            "d": "Location adjacent to an enum value definition.",
            "n": "ENUM_VALUE"
          },
          "FIELD": {
            "d": "Location adjacent to a field.",
            "n": "FIELD"
          },
          "FIELD_DEFINITION": {
            "d": "Location adjacent to a field definition.",
            "n": "FIELD_DEFINITION"
          },
          "FRAGMENT_DEFINITION": {
            "d": "Location adjacent to a fragment definition.",
            "n": "FRAGMENT_DEFINITION"
          },
          "FRAGMENT_SPREAD": {
            "d": "Location adjacent to a fragment spread.",
            "n": "FRAGMENT_SPREAD"
          },
          "INLINE_FRAGMENT": {
            "d": "Location adjacent to an inline fragment.",
            "n": "INLINE_FRAGMENT"
          },
          "INPUT_FIELD_DEFINITION": {
            "d": "Location adjacent to an input object field definition.",
            "n": "INPUT_FIELD_DEFINITION"
          },
          "INPUT_OBJECT": {
            "d": "Location adjacent to an input object type definition.",
            "n": "INPUT_OBJECT"
          },
          "INTERFACE": {
            "d": "Location adjacent to an interface definition.",
            "n": "INTERFACE"
          },
          "MUTATION": {
            "d": "Location adjacent to a mutation operation.",
            "n": "MUTATION"
          },
          "OBJECT": {
            "d": "Location adjacent to an object type definition.",
            "n": "OBJECT"
          },
          "QUERY": {
            "d": "Location adjacent to a query operation.",
            "n": "QUERY"
          },
          "SCALAR": {
            "d": "Location adjacent to a scalar definition.",
            "n": "SCALAR"
          },
          "SCHEMA": {
            "d": "Location adjacent to a schema definition.",
            "n": "SCHEMA"
          },
          "SUBSCRIPTION": {
            "d": "Location adjacent to a subscription operation.",
            "n": "SUBSCRIPTION"
          },
          "UNION": {
            "d": "Location adjacent to a union definition.",
            "n": "UNION"
          },
          "VARIABLE_DEFINITION": {
            "d": "Location adjacent to a variable definition.",
            "n": "VARIABLE_DEFINITION"
          }
        },
        "n": "__DirectiveLocation",
        "r": "dynaql::model::directive::__DirectiveLocation"
      }
    },
    "__EnumValue": {
      "O": {
        "d": "One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",
        "f": {
          "deprecationReason": {
            "D": "N",
            "a": {},
            "n": "deprecationReason",
            "t": "String"
          },
          "description": {
            "D": "N",
            "a": {},
            "n": "description",
            "t": "String"
          },
          "isDeprecated": {
            "D": "N",
            "a": {},
            "n": "isDeprecated",
            "t": "Boolean!"
          },
          "name": {
            "D": "N",
            "a": {},
            "n": "name",
            "t": "String!"
          }
        },
        "n": "__EnumValue",
        "r": "dynaql::model::enum_value::__EnumValue"
      }
    },
    "__Field": {
      "O": {
        "d": "Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",
        "f": {
          "args": {
            "D": "N",
            "a": {},
            "n": "args",
            "t": "[__InputValue!]!"
          },
          "deprecationReason": {
            "D": "N",
            "a": {},
            "n": "deprecationReason",
            "t": "String"
          },
          "description": {
            "D": "N",
            "a": {},
            "n": "description",
            "t": "String"
          },
          "isDeprecated": {
            "D": "N",
            "a": {},
            "n": "isDeprecated",
            "t": "Boolean!"
          },
          "name": {
            "D": "N",
            "a": {},
            "n": "name",
            "t": "String!"
          },
          "type": {
            "D": "N",
            "a": {},
            "n": "type",
            "t": "__Type!"
          }
        },
        "n": "__Field",
        "r": "dynaql::model::field::__Field"
      }
    },
    "__InputValue": {
      "O": {
        "d": "Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",
        "f": {
          "defaultValue": {
            "D": "N",
            "a": {},
            "n": "defaultValue",
            "t": "String"
          },
          "description": {
            "D": "N",
            "a": {},
            "n": "description",
            "t": "String"
          },
          "name": {
            "D": "N",
            "a": {},
            "n": "name",
            "t": "String!"
          },
          "type": {
            "D": "N",
            "a": {},
            "n": "type",
            "t": "__Type!"
          }
        },
        "n": "__InputValue",
        "r": "dynaql::model::input_value::__InputValue"
      }
    },
    "__Schema": {
      "O": {
        "d": "A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",
        "f": {
          "directives": {
            "D": "N",
            "a": {},
            "d": "A list of all directives supported by this server.",
            "n": "directives",
            "t": "[__Directive!]!"
          },
          "mutationType": {
            "D": "N",
            "a": {},
            "d": "If this server supports mutation, the type that mutation operations will be rooted at.",
            "n": "mutationType",
            "t": "__Type"
          },
          "queryType": {
            "D": "N",
            "a": {},
            "d": "The type that query operations will be rooted at.",
            "n": "queryType",
            "t": "__Type!"
          },
          "subscriptionType": {
            "D": "N",
            "a": {},
            "d": "If this server support subscription, the type that subscription operations will be rooted at.",
            "n": "subscriptionType",
            "t": "__Type"
          },
          "types": {
            "D": "N",
            "a": {},
            "d": "A list of all types supported by this server.",
            "n": "types",
            "t": "[__Type!]!"
          }
        },
        "n": "__Schema",
        "r": "dynaql::model::schema::__Schema"
      }
    },
    "__Type": {
      "O": {
        "d": "The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",
        "f": {
          "description": {
            "D": "N",
            "a": {},
            "n": "description",
            "t": "String"
          },
          "enumValues": {
            "D": "N",
            "a": {
              "includeDeprecated": {
                "D": false,
                "n": "includeDeprecated",
                "t": "Boolean!"
              }
            },
            "n": "enumValues",
            "t": "[__EnumValue!]"
          },
          "fields": {
            "D": "N",
            "a": {
              "includeDeprecated": {
                "D": false,
                "n": "includeDeprecated",
                "t": "Boolean!"
              }
            },
            "n": "fields",
            "t": "[__Field!]"
          },
          "inputFields": {
            "D": "N",
            "a": {},
            "n": "inputFields",
            "t": "[__InputValue!]"
          },
          "interfaces": {
            "D": "N",
            "a": {},
            "n": "interfaces",
            "t": "[__Type!]"
          },
          "isOneOf": {
            "D": "N",
            "a": {},
            "n": "isOneOf",
            "t": "Boolean"
          },
          "kind": {
            "D": "N",
            "a": {},
            "n": "kind",
            "t": "__TypeKind!"
          },
          "name": {
            "D": "N",
            "a": {},
            "n": "name",
            "t": "String"
          },
          "ofType": {
            "D": "N",
            "a": {},
            "n": "ofType",
            "t": "__Type"
          },
          "possibleTypes": {
            "D": "N",
            "a": {},
            "n": "possibleTypes",
            "t": "[__Type!]"
          },
          "specifiedByURL": {
            "D": "N",
            "a": {},
            "n": "specifiedByURL",
            "t": "String"
          }
        },
        "n": "__Type",
        "r": "dynaql::model::type::__Type"
      }
    },
    "__TypeKind": {
      "E": {
        "d": "An enum describing what kind of type a given `__Type` is.",
        "e": {
          "ENUM": {
            "d": "Indicates this type is an enum. `enumValues` is a valid field.",
            "n": "ENUM"
          },
          "INPUT_OBJECT": {
            "d": "Indicates this type is an input object. `inputFields` is a valid field.",
            "n": "INPUT_OBJECT"
          },
          "INTERFACE": {
            "d": "Indicates this type is an interface. `fields` and `possibleTypes` are valid fields.",
            "n": "INTERFACE"
          },
          "LIST": {
            "d": "Indicates this type is a list. `ofType` is a valid field.",
            "n": "LIST"
          },
          "NON_NULL": {
            "d": "Indicates this type is a non-null. `ofType` is a valid field.",
            "n": "NON_NULL"
          },
          "OBJECT": {
            "d": "Indicates this type is an object. `fields` and `interfaces` are valid fields.",
            "n": "OBJECT"
          },
          "SCALAR": {
            "d": "Indicates this type is a scalar.",
            "n": "SCALAR"
          },
          "UNION": {
            "d": "Indicates this type is a union. `possibleTypes` is a valid field.",
            "n": "UNION"
          }
        },
        "n": "__TypeKind",
        "r": "dynaql::model::kind::__TypeKind"
      }
    }
  }
}

---
source: common/parser/src/lib.rs
assertion_line: 247
expression: sdl
---
type Author {
	id: ID!
	name: String!
	lastname: String!
	country: Country!
}
type AuthorConnection {
	"""
	Information to aid in pagination
	"""
	pageInfo: PageInfo!
	edges: [AuthorEdge]
}
"""
Input to create a new Author
"""
input AuthorCreateInput {
	name: String!
	lastname: String!
	country: Country!
}
type AuthorCreatePayload {
	Author: Author
}
type AuthorDeletePayload {
	deletedId: ID!
}
type AuthorEdge {
	node: Author!
	cursor: String!
}
type Blog {
	id: ID!
	posts: [Post]
	owner: Author!
}
type BlogConnection {
	"""
	Information to aid in pagination
	"""
	pageInfo: PageInfo!
	edges: [BlogEdge]
}
"""
Input to create a new Blog
"""
input BlogCreateInput {
	posts: [ID]
	owner: ID!
}
type BlogCreatePayload {
	Blog: Blog
}
type BlogDeletePayload {
	deletedId: ID!
}
type BlogEdge {
	node: Blog!
	cursor: String!
}
enum Country {
	FRANCE
	NOT_FRANCE
}
type Mutation {
	"""
	Create a Blog
	"""
	BlogCreate(input: BlogCreateInput!): BlogCreatePayload
	"""
	Delete a Blog by ID
	"""
	BlogDelete(id: ID!): BlogDeletePayload
	"""
	Create a Post
	"""
	PostCreate(input: PostCreateInput!): PostCreatePayload
	"""
	Delete a Post by ID
	"""
	PostDelete(id: ID!): PostDeletePayload
	"""
	Create a Author
	"""
	AuthorCreate(input: AuthorCreateInput!): AuthorCreatePayload
	"""
	Delete a Author by ID
	"""
	AuthorDelete(id: ID!): AuthorDeletePayload
}
type PageInfo {
	hasPreviousPage: Boolean!
	hasNextPage: Boolean!
	startCursor: String
	endCursor: String
}
type Post {
	id: ID!
	content: String!
	authors: [Author]
}
type PostConnection {
	"""
	Information to aid in pagination
	"""
	pageInfo: PageInfo!
	edges: [PostEdge]
}
"""
Input to create a new Post
"""
input PostCreateInput {
	content: String!
	authors: [ID]
}
type PostCreatePayload {
	Post: Post
}
type PostDeletePayload {
	deletedId: ID!
}
type PostEdge {
	node: Post!
	cursor: String!
}
type Query {
	"""
	Get a Blog by ID
	"""
	Blog(id: ID!): Blog
	"""
	Unpaginated query to fetch the whole list of `Blog`.
	"""
	BlogCollection(after: String, before: String, first: Int, last: Int): BlogConnection
	"""
	Get a Post by ID
	"""
	Post(id: ID!): Post
	"""
	Unpaginated query to fetch the whole list of `Post`.
	"""
	PostCollection(after: String, before: String, first: Int, last: Int): PostConnection
	"""
	Get a Author by ID
	"""
	Author(id: ID!): Author
	"""
	Unpaginated query to fetch the whole list of `Author`.
	"""
	AuthorCollection(after: String, before: String, first: Int, last: Int): AuthorConnection
}
schema {
	query: Query
	mutation: Mutation
}


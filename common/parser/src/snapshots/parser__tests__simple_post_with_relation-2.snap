---
source: common/parser/src/lib.rs
expression: sdl
---
type Author {
	id: ID!
	name: String!
	lastname: String!
	country: Country!
	posts(after: String, before: String, first: Int, last: Int): PostConnection
	"""
	when the model was updated
	"""
	updatedAt: DateTime!
	"""
	when the model was created
	"""
	createdAt: DateTime!
}
input AuthorByInput {
	id: ID
}
type AuthorConnection {
	"""
	Information to aid in pagination
	"""
	pageInfo: PageInfo!
	edges: [AuthorEdge]
}
"""
Input to create a new Author
"""
input AuthorCreateInput {
	name: String!
	lastname: String!
	country: Country!
	posts: [AuthorPublishedPostCreateRelationInput]
}
type AuthorCreatePayload {
	author: Author
}
type AuthorDeletePayload {
	deletedId: ID!
}
type AuthorEdge {
	node: Author!
	cursor: String!
}
"""
Input to create a new AuthorPublishedPost
"""
input AuthorPublishedPostCreateInput {
	content: String!
}
"""
Input to create a new AuthorPublishedPost relation
"""
input AuthorPublishedPostCreateRelationInput {
	create: AuthorPublishedPostCreateInput
	link: ID
}
"""
Input to update a AuthorPublishedPost relation
"""
input AuthorPublishedPostUpdateRelationInput {
	create: AuthorPublishedPostCreateInput
	link: ID
	unlink: ID
}
"""
Input to create a new Author
"""
input AuthorUpdateInput {
	name: String
	lastname: String
	country: Country
	posts: [AuthorPublishedPostUpdateRelationInput]
}
type AuthorUpdatePayload {
	author: Author
}
type Blog {
	id: ID!
	posts(after: String, before: String, first: Int, last: Int): PostConnection
	owner: Author!
	"""
	when the model was updated
	"""
	updatedAt: DateTime!
	"""
	when the model was created
	"""
	createdAt: DateTime!
}
"""
Input to create a new BlogAuthorRelateBlogAuthor
"""
input BlogAuthorRelateBlogAuthorCreateInput {
	name: String!
	lastname: String!
	country: Country!
	posts: [AuthorPublishedPostCreateInput]
}
"""
Input to create a new BlogAuthorRelateBlogAuthor relation
"""
input BlogAuthorRelateBlogAuthorCreateRelationInput {
	create: BlogAuthorRelateBlogAuthorCreateInput
	link: ID
}
"""
Input to update a BlogAuthorRelateBlogAuthor relation
"""
input BlogAuthorRelateBlogAuthorUpdateRelationInput {
	create: BlogAuthorRelateBlogAuthorCreateInput
	link: ID
	unlink: ID
}
"""
Input to create a new BlogBlogRelatePostPost
"""
input BlogBlogRelatePostPostCreateInput {
	content: String!
	authors: [PostPublishedAuthorCreateInput]
}
"""
Input to create a new BlogBlogRelatePostPost relation
"""
input BlogBlogRelatePostPostCreateRelationInput {
	create: BlogBlogRelatePostPostCreateInput
	link: ID
}
"""
Input to update a BlogBlogRelatePostPost relation
"""
input BlogBlogRelatePostPostUpdateRelationInput {
	create: BlogBlogRelatePostPostCreateInput
	link: ID
	unlink: ID
}
input BlogByInput {
	id: ID
}
type BlogConnection {
	"""
	Information to aid in pagination
	"""
	pageInfo: PageInfo!
	edges: [BlogEdge]
}
"""
Input to create a new Blog
"""
input BlogCreateInput {
	posts: [BlogBlogRelatePostPostCreateRelationInput]
	owner: BlogAuthorRelateBlogAuthorCreateRelationInput!
}
type BlogCreatePayload {
	blog: Blog
}
type BlogDeletePayload {
	deletedId: ID!
}
type BlogEdge {
	node: Blog!
	cursor: String!
}
"""
Input to create a new Blog
"""
input BlogUpdateInput {
	posts: [BlogBlogRelatePostPostUpdateRelationInput]
	owner: BlogAuthorRelateBlogAuthorUpdateRelationInput
}
type BlogUpdatePayload {
	blog: Blog
}
enum Country {
	FRANCE
	NOT_FRANCE
}
"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, is compliant with the date-time format outlined in section 5.6 of the RFC 3339
profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.

This scalar is a description of an exact instant on the timeline such as the instant that a user account was created.

# Input Coercion

When expected as an input type, only RFC 3339 compliant date-time strings are accepted. All other input values raise a query error indicating an incorrect type.

# Result Coercion

Where an RFC 3339 compliant date-time string has a time-zone other than UTC, it is shifted to UTC.
For example, the date-time string 2016-01-01T14:10:20+01:00 is shifted to 2016-01-01T13:10:20Z.
"""
scalar DateTime
type Mutation {
	"""
	Create a Blog
	"""
	blogCreate(input: BlogCreateInput!): BlogCreatePayload
	"""
	Update a Blog
	"""
	blogUpdate(id: ID!, input: BlogUpdateInput!): BlogUpdatePayload
	"""
	Delete a Blog by ID
	"""
	blogDelete(id: ID!): BlogDeletePayload
	"""
	Create a Post
	"""
	postCreate(input: PostCreateInput!): PostCreatePayload
	"""
	Update a Post
	"""
	postUpdate(id: ID!, input: PostUpdateInput!): PostUpdatePayload
	"""
	Delete a Post by ID
	"""
	postDelete(id: ID!): PostDeletePayload
	"""
	Create a Author
	"""
	authorCreate(input: AuthorCreateInput!): AuthorCreatePayload
	"""
	Update a Author
	"""
	authorUpdate(id: ID!, input: AuthorUpdateInput!): AuthorUpdatePayload
	"""
	Delete a Author by ID
	"""
	authorDelete(id: ID!): AuthorDeletePayload
}
type PageInfo {
	hasPreviousPage: Boolean!
	hasNextPage: Boolean!
	startCursor: String
	endCursor: String
}
type Post {
	id: ID!
	content: String!
	authors(after: String, before: String, first: Int, last: Int): AuthorConnection
	"""
	when the model was updated
	"""
	updatedAt: DateTime!
	"""
	when the model was created
	"""
	createdAt: DateTime!
}
input PostByInput {
	id: ID
}
type PostConnection {
	"""
	Information to aid in pagination
	"""
	pageInfo: PageInfo!
	edges: [PostEdge]
}
"""
Input to create a new Post
"""
input PostCreateInput {
	content: String!
	authors: [PostPublishedAuthorCreateRelationInput]
}
type PostCreatePayload {
	post: Post
}
type PostDeletePayload {
	deletedId: ID!
}
type PostEdge {
	node: Post!
	cursor: String!
}
"""
Input to create a new PostPublishedAuthor
"""
input PostPublishedAuthorCreateInput {
	name: String!
	lastname: String!
	country: Country!
}
"""
Input to create a new PostPublishedAuthor relation
"""
input PostPublishedAuthorCreateRelationInput {
	create: PostPublishedAuthorCreateInput
	link: ID
}
"""
Input to update a PostPublishedAuthor relation
"""
input PostPublishedAuthorUpdateRelationInput {
	create: PostPublishedAuthorCreateInput
	link: ID
	unlink: ID
}
"""
Input to create a new Post
"""
input PostUpdateInput {
	content: String
	authors: [PostPublishedAuthorUpdateRelationInput]
}
type PostUpdatePayload {
	post: Post
}
type Query {
	"""
	Query a single Blog by an ID or a unique field
	"""
	blog(by: BlogByInput!): Blog
	"""
	Paginated query to fetch the whole list of `Blog`.
	"""
	blogCollection(after: String, before: String, first: Int, last: Int): BlogConnection
	"""
	Query a single Post by an ID or a unique field
	"""
	post(by: PostByInput!): Post
	"""
	Paginated query to fetch the whole list of `Post`.
	"""
	postCollection(after: String, before: String, first: Int, last: Int): PostConnection
	"""
	Query a single Author by an ID or a unique field
	"""
	author(by: AuthorByInput!): Author
	"""
	Paginated query to fetch the whole list of `Author`.
	"""
	authorCollection(after: String, before: String, first: Int, last: Int): AuthorConnection
}
schema {
	query: Query
	mutation: Mutation
}


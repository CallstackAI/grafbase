---
source: common/parser/src/lib.rs
assertion_line: 250
expression: sdl
---
type Author {
	id: ID!
	name: String!
	lastname: String!
	country: Country!
	posts: [Post]
}
type AuthorConnection {
	"""
	Information to aid in pagination
	"""
	pageInfo: PageInfo!
	edges: [AuthorEdge]
}
type AuthorCreatePayload {
	author: Author
}
"""
Input to create a new Author
"""
input AuthorCreationInput {
	name: String!
	lastname: String!
	country: Country!
	posts: [AuthorPublishedPostCreateInput]
}
type AuthorDeletePayload {
	deletedId: ID!
}
type AuthorEdge {
	node: Author!
	cursor: String!
}
"""
Input to create a new AuthorPublishedPostCreateInput
"""
input AuthorPublishedPostCreateInput {
	create: AuthorPublishedPostCreationInput
	link: ID
}
"""
Input to create a new AuthorPublishedPostCreationInput
"""
input AuthorPublishedPostCreationInput {
	content: String!
}
type Blog {
	id: ID!
	posts: [Post]
	owner: Author!
}
"""
Input to create a new BlogAuthorRelateBlogAuthorCreateInput
"""
input BlogAuthorRelateBlogAuthorCreateInput {
	create: BlogAuthorRelateBlogAuthorCreationInput
	link: ID
}
"""
Input to create a new BlogAuthorRelateBlogAuthorCreationInput
"""
input BlogAuthorRelateBlogAuthorCreationInput {
	name: String!
	lastname: String!
	country: Country!
	posts: [AuthorPublishedPostCreationInput]
}
"""
Input to create a new BlogBlogRelatePostPostCreateInput
"""
input BlogBlogRelatePostPostCreateInput {
	create: BlogBlogRelatePostPostCreationInput
	link: ID
}
"""
Input to create a new BlogBlogRelatePostPostCreationInput
"""
input BlogBlogRelatePostPostCreationInput {
	content: String!
	authors: [PostPublishedAuthorCreationInput]
}
type BlogConnection {
	"""
	Information to aid in pagination
	"""
	pageInfo: PageInfo!
	edges: [BlogEdge]
}
type BlogCreatePayload {
	blog: Blog
}
"""
Input to create a new Blog
"""
input BlogCreationInput {
	posts: [BlogBlogRelatePostPostCreateInput]
	owner: BlogAuthorRelateBlogAuthorCreateInput!
}
type BlogDeletePayload {
	deletedId: ID!
}
type BlogEdge {
	node: Blog!
	cursor: String!
}
enum Country {
	FRANCE
	NOT_FRANCE
}
type Mutation {
	"""
	Create a Blog
	"""
	blogCreate(input: BlogCreationInput!): BlogCreatePayload
	"""
	Delete a Blog by ID
	"""
	blogDelete(id: ID!): BlogDeletePayload
	"""
	Create a Post
	"""
	postCreate(input: PostCreationInput!): PostCreatePayload
	"""
	Delete a Post by ID
	"""
	postDelete(id: ID!): PostDeletePayload
	"""
	Create a Author
	"""
	authorCreate(input: AuthorCreationInput!): AuthorCreatePayload
	"""
	Delete a Author by ID
	"""
	authorDelete(id: ID!): AuthorDeletePayload
}
type PageInfo {
	hasPreviousPage: Boolean!
	hasNextPage: Boolean!
	startCursor: String
	endCursor: String
}
type Post {
	id: ID!
	content: String!
	authors: [Author]
}
type PostConnection {
	"""
	Information to aid in pagination
	"""
	pageInfo: PageInfo!
	edges: [PostEdge]
}
type PostCreatePayload {
	post: Post
}
"""
Input to create a new Post
"""
input PostCreationInput {
	content: String!
	authors: [PostPublishedAuthorCreateInput]
}
type PostDeletePayload {
	deletedId: ID!
}
type PostEdge {
	node: Post!
	cursor: String!
}
"""
Input to create a new PostPublishedAuthorCreateInput
"""
input PostPublishedAuthorCreateInput {
	create: PostPublishedAuthorCreationInput
	link: ID
}
"""
Input to create a new PostPublishedAuthorCreationInput
"""
input PostPublishedAuthorCreationInput {
	name: String!
	lastname: String!
	country: Country!
}
type Query {
	"""
	Get a Blog by ID
	"""
	blog(id: ID!): Blog
	"""
	Paginated query to fetch the whole list of `Blog`.
	"""
	blogCollection(after: String, before: String, first: Int, last: Int): BlogConnection
	"""
	Get a Post by ID
	"""
	post(id: ID!): Post
	"""
	Paginated query to fetch the whole list of `Post`.
	"""
	postCollection(after: String, before: String, first: Int, last: Int): PostConnection
	"""
	Get a Author by ID
	"""
	author(id: ID!): Author
	"""
	Paginated query to fetch the whole list of `Author`.
	"""
	authorCollection(after: String, before: String, first: Int, last: Int): AuthorConnection
}
schema {
	query: Query
	mutation: Mutation
}


---
source: common/parser/src/tests.rs
expression: sdl
---
"""

"""
input BooleanOrNullSearchFilterInput {
	eq: Boolean
	neq: Boolean
	isNull: Boolean
}
"""
A date string, such as 2007-12-03, is compliant with the full-date format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for the representation of dates and times using the Gregorian calendar.

This scalar is a description of the date, as used for birthdays for example. It cannot represent an instant on the timeline.
"""
scalar Date
"""

"""
input DateOrNullSearchFilterInput {
	eq: Date
	neq: Date
	gt: Date
	gte: Date
	lte: Date
	lt: Date
	in: [Date!]
	notIn: [Date!]
	isNull: Boolean
}
"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, is compliant with the date-time format outlined in section 5.6 of the RFC 3339
profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.

This scalar is a description of an exact instant on the timeline such as the instant that a user account was created.

# Input Coercion

When expected as an input type, only RFC 3339 compliant date-time strings are accepted. All other input values raise a query error indicating an incorrect type.

# Result Coercion

Where an RFC 3339 compliant date-time string has a time-zone other than UTC, it is shifted to UTC.
For example, the date-time string 2016-01-01T14:10:20+01:00 is shifted to 2016-01-01T13:10:20Z.
"""
scalar DateTime
"""

"""
input DateTimeOrNullSearchFilterInput {
	eq: DateTime
	neq: DateTime
	gt: DateTime
	gte: DateTime
	lte: DateTime
	lt: DateTime
	in: [DateTime!]
	notIn: [DateTime!]
	isNull: Boolean
}
"""
A scalar to validate the email as it is defined in the HTML specification.
"""
scalar Email
"""

"""
input EmailOrNullSearchFilterInput {
	eq: Email
	neq: Email
	gt: Email
	gte: Email
	lte: Email
	lt: Email
	in: [Email!]
	notIn: [Email!]
	isNull: Boolean
}
"""
Possible operations for a Float field
"""
input FloatOperationsInput {
	set: Float
	increment: Float
	decrement: Float
}
"""

"""
input FloatOrNullSearchFilterInput {
	eq: Float
	neq: Float
	gt: Float
	gte: Float
	lte: Float
	lt: Float
	in: [Float!]
	notIn: [Float!]
	isNull: Boolean
}
"""
A valid IPv4 or IPv6 address. IPv4 addresses are expected in quad-dotted notation `(123.12.34.56)`. IPv6 addresses are expected in non-bracketed, colon-separated format `(1a2b:3c4b::1234:4567)`.

You can include an optional CIDR suffix `(123.45.67.89/16)` to indicate subnet mask.
"""
scalar IPAddress
"""

"""
input IPAddressOrNullSearchFilterInput {
	eq: IPAddress
	neq: IPAddress
	gt: IPAddress
	gte: IPAddress
	lte: IPAddress
	lt: IPAddress
	in: [IPAddress!]
	notIn: [IPAddress!]
	isNull: Boolean
}
"""
Possible operations for an Int field
"""
input IntOperationsInput {
	set: Int
	increment: Int
	decrement: Int
}
"""

"""
input IntOrNullSearchFilterInput {
	eq: Int
	neq: Int
	gt: Int
	gte: Int
	lte: Int
	lt: Int
	in: [Int!]
	notIn: [Int!]
	isNull: Boolean
}
type Mutation {
	"""
	Create a Product
	"""
	productCreate(input: ProductCreateInput!): ProductCreatePayload
	"""
	Update a Product
	"""
	productUpdate(by: ProductByInput!, input: ProductUpdateInput!): ProductUpdatePayload
	"""
	Delete a Product by ID or unique field
	"""
	productDelete(by: ProductByInput!): ProductDeletePayload
}
enum OrderByDirection {
	ASC
	DESC
}
type PageInfo {
	hasPreviousPage: Boolean!
	hasNextPage: Boolean!
	startCursor: String
	endCursor: String
}
"""
A phone number. This value is stored as a string. Phone numbers must follow the E.164 format, a general format for international telephone numbers.
"""
scalar PhoneNumber
"""

"""
input PhoneNumberOrNullSearchFilterInput {
	eq: PhoneNumber
	neq: PhoneNumber
	gt: PhoneNumber
	gte: PhoneNumber
	lte: PhoneNumber
	lt: PhoneNumber
	in: [PhoneNumber!]
	notIn: [PhoneNumber!]
	isNull: Boolean
}
type Product {
	ip: IPAddress
	timestamp: Timestamp!
	url: URL
	email: [Email]
	phone: PhoneNumber
	date: [Date!]!
	datetime: DateTime
	text: [[String]]
	int: Int
	float: Float
	bool: Boolean
	"""
	Unique identifier
	"""
	id: ID!
	"""
	when the model was updated
	"""
	updatedAt: DateTime!
	"""
	when the model was created
	"""
	createdAt: DateTime!
}
input ProductByInput {
	id: ID
}
type ProductConnection {
	"""
	Information to aid in pagination
	"""
	pageInfo: PageInfo!
	edges: [ProductEdge]
}
"""
Input to create a Product
"""
input ProductCreateInput {
	ip: IPAddress
	timestamp: Timestamp!
	url: URL
	email: [Email]
	phone: PhoneNumber
	date: [Date!]!
	datetime: DateTime
	text: [[String]]
	int: Int
	float: Float
	bool: Boolean
}
type ProductCreatePayload {
	product: Product
}
type ProductDeletePayload {
	deletedId: ID!
}
type ProductEdge {
	node: Product!
	cursor: String!
}
input ProductOrderByInput {
	createdAt: OrderByDirection
}
type ProductSearchConnection {
	pageInfo: PageInfo!
	searchInfo: SearchInfo
	edges: [ProductSearchEdge!]!
}
type ProductSearchEdge {
	node: Product!
	cursor: String!
	score: Float!
}
"""

"""
input ProductSearchFilterInput {
	bool: BooleanOrNullSearchFilterInput
	date: DateOrNullSearchFilterInput
	datetime: DateTimeOrNullSearchFilterInput
	email: EmailOrNullSearchFilterInput
	float: FloatOrNullSearchFilterInput
	int: IntOrNullSearchFilterInput
	ip: IPAddressOrNullSearchFilterInput
	phone: PhoneNumberOrNullSearchFilterInput
	text: StringOrNullSearchFilterInput
	timestamp: TimestampSearchFilterInput
	url: URLOrNullSearchFilterInput
	_all: [ProductSearchFilterInput!]
	_any: [ProductSearchFilterInput!]
	_not: ProductSearchFilterInput
}
"""
Input to update a Product
"""
input ProductUpdateInput {
	ip: IPAddress
	timestamp: Timestamp
	url: URL
	email: [Email]
	phone: PhoneNumber
	date: [Date!]
	datetime: DateTime
	text: [[String]]
	int: IntOperationsInput
	float: FloatOperationsInput
	bool: Boolean
}
type ProductUpdatePayload {
	product: Product
}
type Query {
	"""
	Query a single Product by an ID or a unique field
	"""
	product(by: ProductByInput!): Product
	"""
	Paginated query to fetch the whole list of `Product`.
	"""
	productCollection(after: String, before: String, first: Int, last: Int, orderBy: ProductOrderByInput): ProductConnection
	"""
	Search `Product`
	"""
	productSearch(query: String, fields: [String!], filter: ProductSearchFilterInput, first: Int, after: String, last: Int, before: String): ProductSearchConnection
}
type SearchInfo {
	totalHits: Int!
}
"""

"""
input StringOrNullSearchFilterInput {
	eq: String
	neq: String
	gt: String
	gte: String
	lte: String
	lt: String
	in: [String!]
	notIn: [String!]
	isNull: Boolean
}
"""
A Unix Timestamp with milliseconds precision.
"""
scalar Timestamp
"""

"""
input TimestampSearchFilterInput {
	eq: Timestamp
	neq: Timestamp
	gt: Timestamp
	gte: Timestamp
	lte: Timestamp
	lt: Timestamp
	in: [Timestamp!]
	notIn: [Timestamp!]
}
"""
An URL as defined byÂ RFC1738. For example, `https://grafbase.com/foo/` or `mailto:example@grafbase.com`.
"""
scalar URL
"""

"""
input URLOrNullSearchFilterInput {
	eq: URL
	neq: URL
	gt: URL
	gte: URL
	lte: URL
	lt: URL
	in: [URL!]
	notIn: [URL!]
	isNull: Boolean
}
schema {
	query: Query
	mutation: Mutation
}


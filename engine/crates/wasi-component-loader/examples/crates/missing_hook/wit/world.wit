package component:grafbase;

interface types {
    enum header-error {
        invalid-header-value,
        invalid-header-name,
    }

    resource context {
        get: func(name: string) -> option<string>;
        set: func(name: string, value: string);
        delete: func(name: string) -> option<string>;
    }

    resource shared-context {
        get: func(name: string) -> option<string>;
    }

    resource headers {
        get: func(name: string) -> result<option<string>, header-error>;
        set: func(name: string, value: string) -> result<_, header-error>;
        delete: func(name: string) -> result<option<string>, header-error>;
    }

    record edge-definition {
        parent-type-name: string,
        field-name: string,
    }

    record node-definition {
        type-name: string,
    }

    record error-response {
        message: string,
        extensions: list<tuple<string,string>>,
    }
}

interface gateway-request {
    use types.{headers, error-response, context};

    on-gateway-request: func(context: context, headers: headers) -> result<_, error-response>;
}

interface authorization {
    use types.{error-response, shared-context, edge-definition, node-definition};

    authorize-edge-pre-execution: func(
        context: shared-context,
        definition: edge-definition,
        arguments: string,
        metadata: string
    ) -> result<_, error-response>;

    authorize-node-pre-execution: func(
        context: shared-context,
        definition: node-definition,
        metadata: string
    ) -> result<_, error-response>;
}

world hooks {
    export authorization;
}
